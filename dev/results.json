{
    "stats": {
        "suites": 20,
        "tests": 519,
        "passes": 516,
        "pending": 0,
        "failures": 0,
        "start": "2021-07-08T20:23:43.162Z",
        "end": "2021-07-08T20:23:43.162Z",
        "duration": 70617,
        "testsRegistered": 519,
        "passPercent": 99.42196531791907,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 3,
        "hasSkipped": true
    },
    "results": [
        {
            "uuid": "57fa12fd-af95-46ab-b89a-d6b69618c462",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [
                {
                    "title": "\"before all\" hook",
                    "fullTitle": "\"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "// insert known tokens into redis (normally these are created by emailPasswordReset)\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait redisClient.setexAsync(`pwReset:${accountGuid}`, 3600, securityToken);\nawait redisClient.setexAsync(`pwReset:${securityToken}`, 3600, accountGuid);",
                    "err": {},
                    "uuid": "61640160-bc4c-44d6-9a1c-3a0790ea276c",
                    "parentUUID": "57fa12fd-af95-46ab-b89a-d6b69618c462",
                    "isHook": true,
                    "skipped": false
                }
            ],
            "afterHooks": [],
            "tests": [
                {
                    "title": "should create a new password",
                    "fullTitle": "should create a new password",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "const mockReq = mocks.createNewPassword(securityToken);\nconst mockRes = mocks.mockResponse();\nawait resetPassword.createNewPassword(mockReq, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\n// ensure createNewPassword cleans up redis\nexpect(await redisClient.getAsync(`pwReset:${accountGuid}`)).to.be.null;\nexpect(await redisClient.getAsync(`pwReset:${securityToken}`)).to.be.null;",
                    "err": {},
                    "uuid": "67f5dc4e-c44a-40a6-a494-0938ac9a7c2a",
                    "parentUUID": "57fa12fd-af95-46ab-b89a-d6b69618c462",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "19b40ada-cd5a-4f6e-a00f-ec409ade58a3",
                    "title": "Auth API API Key Tests",
                    "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/apiKey.test.js",
                    "file": "/test/integration/functions/apiKey.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"before all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "2a699d55-d362-45e7-964e-54fbdf1f0ba2",
                            "parentUUID": "19b40ada-cd5a-4f6e-a00f-ec409ade58a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"after all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await apiKey.deleteTestKeys(testConfig.tenantOne.tenantId);",
                            "err": {},
                            "uuid": "19595c16-d9ac-46f3-82eb-64d581a00dea",
                            "parentUUID": "19b40ada-cd5a-4f6e-a00f-ec409ade58a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "94676eef-5231-479d-a8c8-6e6829da17c8",
                            "title": "api key crud ",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/apiKey.test.js",
                            "file": "/test/integration/functions/apiKey.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should insert an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 215,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = {expires: new Date(new Date().getTime() + 60000), testOnly: true, description: \"this is a test\"}\nawait apiKey.createApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nkey = inserted.key;\nid = inserted._id;\nexpect(inserted).to.exist;",
                                    "err": {},
                                    "uuid": "995f6c82-f506-483c-ac04-f072396c3800",
                                    "parentUUID": "94676eef-5231-479d-a8c8-6e6829da17c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list an apiKeys",
                                    "fullTitle": "Auth API API Key Tests api key crud  should list an apiKeys",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nawait apiKey.listApiKeys(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst keyList = mockRes.body;\nexpect(keyList).to.exist;\nexpect(keyList.length).to.be.gt(0);\nexpect(keyList[0].hashedKey).to.exist",
                                    "err": {},
                                    "uuid": "31f58366-1821-49d3-be3d-40ba3967dd93",
                                    "parentUUID": "94676eef-5231-479d-a8c8-6e6829da17c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should verify an apiKey",
                                    "fullTitle": "Auth API API Key Tests api key crud  should verify an apiKey",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait apiKey.verifyApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"api key valid\");",
                                    "err": {},
                                    "uuid": "49aa8927-071e-406c-bd7b-fb668a1744d4",
                                    "parentUUID": "94676eef-5231-479d-a8c8-6e6829da17c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid api key and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid api key and return a JWT",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonate(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "3890d98d-1a15-411f-9374-7ea86482ba39",
                                    "parentUUID": "94676eef-5231-479d-a8c8-6e6829da17c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userName and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userName and return a JWT",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);\ncontact = impersonated;",
                                    "err": {},
                                    "uuid": "0d450a88-7427-4465-b0e7-aff36042da42",
                                    "parentUUID": "94676eef-5231-479d-a8c8-6e6829da17c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userSid and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userSid and return a JWT",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userSid = contact.contactGuid;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "3535f2f8-9f54-469e-a3e3-961645a5112b",
                                    "parentUUID": "94676eef-5231-479d-a8c8-6e6829da17c8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "995f6c82-f506-483c-ac04-f072396c3800",
                                "31f58366-1821-49d3-be3d-40ba3967dd93",
                                "49aa8927-071e-406c-bd7b-fb668a1744d4",
                                "3890d98d-1a15-411f-9374-7ea86482ba39",
                                "0d450a88-7427-4465-b0e7-aff36042da42",
                                "3535f2f8-9f54-469e-a3e3-961645a5112b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 298,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "588d2497-e6b7-41b2-b97d-ac792c975295",
                    "title": "Auth API Auth Tests",
                    "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/auth.test.js",
                    "file": "/test/integration/functions/auth.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Auth Tests\"",
                            "fullTitle": "Auth API Auth Tests \"before all\" hook in \"Auth API Auth Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "77f490a0-67a5-4456-93c4-da04284272f0",
                            "parentUUID": "588d2497-e6b7-41b2-b97d-ac792c975295",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "eb1b1e43-bfeb-4a9b-acf0-d980e4910657",
                            "title": "getGuestToken",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return guest auth token",
                                    "fullTitle": "Auth API Auth Tests getGuestToken should return guest auth token",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet getGuestTokenEvent = await mocks.getGuestTokenEvent()\n\t\t\tlet results = await dbauth.getGuestToken(getGuestTokenEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n      expect(mockRes.body.length).to.be.greaterThan(1000);",
                                    "err": {},
                                    "uuid": "22addee4-f4ef-4316-81e7-eebda7f069a1",
                                    "parentUUID": "eb1b1e43-bfeb-4a9b-acf0-d980e4910657",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "22addee4-f4ef-4316-81e7-eebda7f069a1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 41,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "edf2119e-3e49-45f2-9f8d-6f33bbac6e48",
                            "title": "login",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a contact with a token",
                                    "fullTitle": "Auth API Auth Tests login should return a contact with a token",
                                    "timedOut": false,
                                    "duration": 112,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet loginEvent = await mocks.loginEvent()\n\t\t\tlet results = await dbauth.login(loginEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst contactInfo = mockRes.body;\n\t\t\texpect(contactInfo.userName).equal(loginEvent.body.username);\n\t\t\texpect(contactInfo.token).to.exist;",
                                    "err": {},
                                    "uuid": "2e8a6223-4bc3-4180-a7b0-bd7639b71679",
                                    "parentUUID": "edf2119e-3e49-45f2-9f8d-6f33bbac6e48",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2e8a6223-4bc3-4180-a7b0-bd7639b71679"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 112,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f1ec53e1-4d30-4ed1-a834-65702fce4511",
                            "title": "refreshJwt",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests refreshJwt refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 102,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\nlet loginEvent = await mocks.loginEvent()\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.login(loginEvent, mockRes);\nconst contactInfo = mockRes.body;\nlogoutEvent.cookies = {\"integrifyRefreshToken\": contactInfo.refreshToken };\nlogoutEvent.body = {token: contactInfo.token, refreshToken: contactInfo.refreshToken }\nawait jwtFuncs.refreshJwt(logoutEvent, await mocks.mockResponse());\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "82459f14-17d2-49b4-93c8-dfd070846a3b",
                                    "parentUUID": "f1ec53e1-4d30-4ed1-a834-65702fce4511",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "82459f14-17d2-49b4-93c8-dfd070846a3b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 102,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c4964c87-68ca-4e7d-ab68-43d8588cef40",
                            "title": "isAuthenticated",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests isAuthenticated refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\n\nawait jwtFuncs.isAuthenticated({cookies: {integrifyToken: \"fake\"}}, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "332064c3-4c51-4870-9ce4-17002812dc6a",
                                    "parentUUID": "c4964c87-68ca-4e7d-ab68-43d8588cef40",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "332064c3-4c51-4870-9ce4-17002812dc6a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3f22a925-9578-44ba-b4af-22774ad79099",
                            "title": "logout",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should log a user out",
                                    "fullTitle": "Auth API Auth Tests logout should log a user out",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.logout(logoutEvent, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body).to.deep.equal({message: 'OK'});",
                                    "err": {},
                                    "uuid": "0cbc133a-181b-4b27-b0a4-b6592ed4c6b4",
                                    "parentUUID": "3f22a925-9578-44ba-b4af-22774ad79099",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0cbc133a-181b-4b27-b0a4-b6592ed4c6b4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9ea528af-41a2-4e66-9456-3764d686d075",
                    "title": "Auth API Reset Password Tests",
                    "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                    "file": "/test/integration/functions/resetPassword.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Reset Password Tests\"",
                            "fullTitle": "Auth API Reset Password Tests \"before all\" hook in \"Auth API Reset Password Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000);\nprocess.env.TESTING = true;\nresetRewired.__set__('nodemailer', nodemailerMock);",
                            "err": {},
                            "uuid": "6e594bfe-1bee-4ae1-8f75-c4feafade81f",
                            "parentUUID": "9ea528af-41a2-4e66-9456-3764d686d075",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d9818aea-eb4d-4bcd-88b2-cbfceb074c0a",
                            "title": "emailUsernames",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should send an email of accounts for existing email",
                                    "fullTitle": "Auth API Reset Password Tests emailUsernames should send an email of accounts for existing email",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\n      const accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\n      const mockRes = mocks.mockResponse();\n      const mockReq = await mocks.emailUsernames();\n      await resetRewired.emailUsernames(mockReq, mockRes);\n      expect(mockRes.statusCode).equal(200);\n      expect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "6e492427-a44b-40c3-a129-da7026fd28ae",
                                    "parentUUID": "d9818aea-eb4d-4bcd-88b2-cbfceb074c0a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6e492427-a44b-40c3-a129-da7026fd28ae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "09176b6a-1bca-41af-a809-2477e12e148d",
                            "title": "passwordReset",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"passwordReset\"",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset \"before all\" hook in \"passwordReset\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "resetRewired.__set__('nodemailer', nodemailerMock);",
                                    "err": {},
                                    "uuid": "48b1969b-7417-4468-8019-a1cdaca0f448",
                                    "parentUUID": "09176b6a-1bca-41af-a809-2477e12e148d",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "emailPassworReset",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset emailPassworReset",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\nconst accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait resetRewired.emailPasswordReset(mockReq, mockRes);\n// check if security token was added to redis\nconst securityToken = await redisClient.getAsync(`pwReset:${accountGuid}`);\nconst accountEntry = await redisClient.getAsync(`pwReset:${securityToken}`);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(securityToken).to.exist;\nexpect(accountEntry).to.exist;\n// clean up entries leftover from calling emailPasswordReset\nawait redisClient.del(`pwReset:${accountGuid}`);\nawait redisClient.del(`pwReset:${securityToken}`);",
                                    "err": {},
                                    "uuid": "a90576d1-9cc2-43b6-a36e-39e22018610f",
                                    "parentUUID": "09176b6a-1bca-41af-a809-2477e12e148d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a90576d1-9cc2-43b6-a36e-39e22018610f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "56c24d55-37e2-4f8c-8658-f23c94c3dd0f",
                    "title": "Auth API SAML Settings Tests",
                    "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/samlSettings.test.js",
                    "file": "/test/integration/functions/samlSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "5b184757-ebb7-42ba-a4a5-091baa3b7492",
                            "parentUUID": "56c24d55-37e2-4f8c-8658-f23c94c3dd0f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await samlSettings.deleteSamlSettingsByName(testConfig.tenantOne.tenantId, 'unitTestIDP')",
                            "err": {},
                            "uuid": "ccf135fd-fc3a-4147-b4c1-ea7a38e93b2b",
                            "parentUUID": "56c24d55-37e2-4f8c-8658-f23c94c3dd0f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "605537bd-bf2f-40ae-a594-005249886bf4",
                            "title": "SAML Settings crud ",
                            "fullFile": "/home/will/code/integrify/api-auth/test/integration/functions/samlSettings.test.js",
                            "file": "/test/integration/functions/samlSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert saml settings and return a doc",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should insert saml settings and return a doc",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n           \nreq.body = data;\nawait samlSettings.createSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\n\nsamlId = inserted._id;\nexpect(inserted).to.exist;\nexpect(inserted.idpMetaData).to.equal(data.idpMetaData);\nexpect(inserted.idpName).to.equal(data.idpName);\nexpect(inserted.idpDescription).to.equal(data.idpDescription);\nexpect(inserted.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "17f629d3-b089-4550-8a18-45eadd20cb94",
                                    "parentUUID": "605537bd-bf2f-40ae-a594-005249886bf4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings without an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings without an id",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "fcdc439a-432d-46f9-90af-2b701e307ab9",
                                    "parentUUID": "605537bd-bf2f-40ae-a594-005249886bf4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings with an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings with an id",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId.toString();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result._id.toString()).to.equal(samlId.toString());",
                                    "err": {},
                                    "uuid": "cbce3944-89dc-45ba-9f23-ede1d65975c8",
                                    "parentUUID": "605537bd-bf2f-40ae-a594-005249886bf4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should update saml settings",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\n\nreq.body = data;\n\nawait samlSettings.updateSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.exist;",
                                    "err": {},
                                    "uuid": "8ca9e995-8842-456f-8128-38f54d0926f5",
                                    "parentUUID": "605537bd-bf2f-40ae-a594-005249886bf4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return sp metadata",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should return sp metadata",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait samlSettings.getMetaData(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst metadata = mockRes.body;\nexpect(metadata).to.exist;",
                                    "err": {},
                                    "uuid": "2cd2133f-06a8-4588-a85f-2534f94e8700",
                                    "parentUUID": "605537bd-bf2f-40ae-a594-005249886bf4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should delete saml settings",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.deleteSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "5bfdfb30-f7af-4e8c-a4a0-5990abd3b718",
                                    "parentUUID": "605537bd-bf2f-40ae-a594-005249886bf4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "17f629d3-b089-4550-8a18-45eadd20cb94",
                                "fcdc439a-432d-46f9-90af-2b701e307ab9",
                                "cbce3944-89dc-45ba-9f23-ede1d65975c8",
                                "8ca9e995-8842-456f-8128-38f54d0926f5",
                                "2cd2133f-06a8-4588-a85f-2534f94e8700",
                                "5bfdfb30-f7af-4e8c-a4a0-5990abd3b718"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 48,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "67f5dc4e-c44a-40a6-a494-0938ac9a7c2a"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        },
        {
            "uuid": "9fa68e7d-dc30-4bf5-9512-f3d8dc7d847b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "53828a84-788f-4a45-bece-66c8dbbbc0e8",
                    "title": "Dashboard controller tests",
                    "fullFile": "/home/will/code/integrify/api-dashboards/test/dashboard.controller.test.js",
                    "file": "/test/dashboard.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "f8896214-e952-49a8-b408-17c3661793f4",
                            "parentUUID": "53828a84-788f-4a45-bece-66c8dbbbc0e8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "33182389-d3f8-4cc2-89b9-fc5f31f209b3",
                            "parentUUID": "53828a84-788f-4a45-bece-66c8dbbbc0e8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8b5b7181-bf60-498b-a834-7e4208950c68",
                            "title": "dashboard crud ",
                            "fullFile": "/home/will/code/integrify/api-dashboards/test/dashboard.controller.test.js",
                            "file": "/test/dashboard.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.createDashboard(tenant, dashboardObj);\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "774dd0a7-6162-415e-b89a-6568decc8c6f",
                                    "parentUUID": "8b5b7181-bf60-498b-a834-7e4208950c68",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboards = await dashboardController.listDashboards(tenant);\n         expect(dashboards.length).to.be.gt(0);  \n         let createdDashord  = dashboards.find((d) => {\n             return d.sid === sid;\n         })\n         expect\n         (createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "b72af26f-1fe9-434b-be21-513c1d2c97c8",
                                    "parentUUID": "8b5b7181-bf60-498b-a834-7e4208950c68",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard = await dashboardController.getDashboard(tenant,sid);\n            expect(dashboard).to.exist         \n            expect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "f3709f5c-54fc-4527-91d0-4c0fcc263b60",
                                    "parentUUID": "8b5b7181-bf60-498b-a834-7e4208950c68",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard.banner = 'test-updated';\n            const updatedDashboard = await dashboardController.updateDashboard(tenant,dashboard.toObject());\n            expect(updatedDashboard).to.exist         \n            expect(updatedDashboard.sid).to.equal(sid)\n            expect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "d2bb66a8-020c-4e7b-9c88-86c0d88c85c6",
                                    "parentUUID": "8b5b7181-bf60-498b-a834-7e4208950c68",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const copiedDashboard = await dashboardController.copyDashboard(tenant, sid);\n            expect(copiedDashboard).to.exist         \n            expect(copiedDashboard.sid).to.not.equal(sid)\n            expect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "ab390194-0913-40a7-bfda-6f3ea67bcc3c",
                                    "parentUUID": "8b5b7181-bf60-498b-a834-7e4208950c68",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  delete a a dashboard",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await dashboardController.deleteDashboard(tenant,sid);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "0792d536-a28e-423d-bf2a-713bf69aefb9",
                                    "parentUUID": "8b5b7181-bf60-498b-a834-7e4208950c68",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "774dd0a7-6162-415e-b89a-6568decc8c6f",
                                "b72af26f-1fe9-434b-be21-513c1d2c97c8",
                                "f3709f5c-54fc-4527-91d0-4c0fcc263b60",
                                "d2bb66a8-020c-4e7b-9c88-86c0d88c85c6",
                                "ab390194-0913-40a7-bfda-6f3ea67bcc3c",
                                "0792d536-a28e-423d-bf2a-713bf69aefb9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 69,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b8798f8f-29e1-4f8a-aa50-a1a616174731",
                    "title": "Dashboard route handler tests",
                    "fullFile": "/home/will/code/integrify/api-dashboards/test/dashboard.handlers.test.js",
                    "file": "/test/dashboard.handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nsession = (await mocks.req()).oauth;\nperms  = await permissions.currentUserPermissions(session)\nlet permissionsWithRun = perms.concat([\n    {\n        \"objectType\": \"tab\",\n        \"ownerSid\": \"bb6cb26b-d179-4763-b2cb-69d107dfd1d8\",\n        \"ownerType\": \"system\",\n        \"permissions\": enums.permissionTypes.run,\n        \"roleName\": \"system administrators\",\n        \"roleGuid\": \"a48ea7cf-f1ba-4ca9-bf17-2c97d49336cd\"\n      }\n])\nawait permissions.cachePerms(session, permissionsWithRun);\nconsole.log(permissionsWithRun)",
                            "err": {},
                            "uuid": "2c44eb43-0854-4ec3-81e6-43bc2ab2e77e",
                            "parentUUID": "b8798f8f-29e1-4f8a-aa50-a1a616174731",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard route handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);\nawait permissions.cachePerms(session, perms);",
                            "err": {},
                            "uuid": "81f22869-4080-466b-9ce1-af7f1c23c622",
                            "parentUUID": "b8798f8f-29e1-4f8a-aa50-a1a616174731",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                            "title": "dashboard crud ",
                            "fullFile": "/home/will/code/integrify/api-dashboards/test/dashboard.handlers.test.js",
                            "file": "/test/dashboard.handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = dashboardObj;\nawait handlers.createDashboard(req,mockRes);\nconst dashboard = req.body;\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "a0d3cf8b-c5e1-4dfc-bee2-faa8ab354734",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "451a9c70-7f18-449e-a024-615326e1100a",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for admins",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for admins",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.admin = true;\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "acafcbbe-da07-4857-b706-b57b31785f5e",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.getDashboard(req,mockRes);\ndashboard = mockRes.body;\nexpect(dashboard).to.exist         \nexpect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "6ce28c44-b492-472e-aa5c-a37c7cb25d69",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.updateDashboard(req,mockRes);\nconst updatedDashboard = mockRes.body;\nexpect(updatedDashboard).to.exist         \nexpect(updatedDashboard.sid).to.equal(sid)\nexpect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "143c0017-d80c-447a-891b-80b18eeed566",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.copyDashboard(req,mockRes);\nconst copiedDashboard = mockRes.body;\nexpect(copiedDashboard).to.exist         \nexpect(copiedDashboard.sid).to.not.equal(sid)\nexpect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "7fce746f-5bbf-40e3-9829-7c57e05d537d",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should delete a dashboard",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.deleteDashboard(req,mockRes);\nlet deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "56d440b1-ae7f-47a6-9624-8c81bfaf03b0",
                                    "parentUUID": "9e85f021-0181-46e6-9fff-22cb065cf5a0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a0d3cf8b-c5e1-4dfc-bee2-faa8ab354734",
                                "451a9c70-7f18-449e-a024-615326e1100a",
                                "acafcbbe-da07-4857-b706-b57b31785f5e",
                                "6ce28c44-b492-472e-aa5c-a37c7cb25d69",
                                "143c0017-d80c-447a-891b-80b18eeed566",
                                "7fce746f-5bbf-40e3-9829-7c57e05d537d",
                                "56d440b1-ae7f-47a6-9624-8c81bfaf03b0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 33,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4a9e16f2-2d6c-496a-a4cf-678e373969d9",
                    "title": "Legacy tab mongo tests",
                    "fullFile": "/home/will/code/integrify/api-dashboards/test/tab.test.js",
                    "file": "/test/tab.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()\ntenant = testConfig.tenantOne.tenantId;;\ntab = await dashboardController.createTestTab(tenant)\nexpect(tab.SID).to.exist",
                            "err": {},
                            "uuid": "2e795d54-c09c-4687-b983-261d828d6e90",
                            "parentUUID": "4a9e16f2-2d6c-496a-a4cf-678e373969d9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteTabs(tenant, {Title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-migrated'});",
                            "err": {},
                            "uuid": "b042b3c8-2e0b-4527-89f4-f56c81c1a0dc",
                            "parentUUID": "4a9e16f2-2d6c-496a-a4cf-678e373969d9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                            "title": "tab crud ",
                            "fullFile": "/home/will/code/integrify/api-dashboards/test/tab.test.js",
                            "file": "/test/tab.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should create a legacy tab",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tab = await dashboardController.createTestTab(tenant);\n\n tabSid = tab.SID;\n expect(tabSid).to.exist",
                                    "err": {},
                                    "uuid": "7710885e-dec6-4f6d-8d18-2954914f28f7",
                                    "parentUUID": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list legacy tabs",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should list legacy tabs",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tabs = await dashboardController.listTabs(tenant);\n expect(tabs.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "43384687-c4f2-4384-9207-dda203bb2b25",
                                    "parentUUID": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should get a legacy tab",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "tab = await dashboardController.getTab(tenant,tabSid);\n            expect(tab).to.exist         \n            expect(tab.SID).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "cb90db40-c7b3-4b08-bf7d-aef68677f681",
                                    "parentUUID": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a tab using a dashboard object",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should update a tab using a dashboard object",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const dashboardObject = {\n    sid: tab.SID,\n    title: tab.Title,\n    ordinal: 5000,\n}\nconst dashboardMask = await dashboardController.updateTabFromDashboardObject(tenant,dashboardObject);\nexpect(dashboardObject.modifiedDate).to.exist\ntab = await dashboardController.getTab(tenant,tab.SID);\nexpect(tab).to.exist         \nexpect(tab.SID).to.equal(tabSid)\nexpect(tab.Ordinal).to.equal(dashboardObject.ordinal)",
                                    "err": {},
                                    "uuid": "f6c5c12f-9540-486b-80f9-5d6720f5a66f",
                                    "parentUUID": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should convert a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should convert a legacy tab",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.converTabToDashboard(tab);\n            expect(dashboard).to.exist         \n            expect(dashboard.layouts).to.exist;\n            expect(dashboard.legacySid).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "f00539a3-c987-4812-9788-d1d4e05e9053",
                                    "parentUUID": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should migrate legacy tab to dashboard",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should migrate legacy tab to dashboard",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  success = await dashboardController.migrateTabToDashboard(tenant, tabSid);\n            expect(success.sid).to.exist;",
                                    "err": {},
                                    "uuid": "90d71490-d755-48e4-aaf3-be29e2449921",
                                    "parentUUID": "763b7c0a-1675-41b7-ae75-aef119d9963d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7710885e-dec6-4f6d-8d18-2954914f28f7",
                                "43384687-c4f2-4384-9207-dda203bb2b25",
                                "cb90db40-c7b3-4b08-bf7d-aef68677f681",
                                "f6c5c12f-9540-486b-80f9-5d6720f5a66f",
                                "f00539a3-c987-4812-9788-d1d4e05e9053",
                                "90d71490-d755-48e4-aaf3-be29e2449921"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 23,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "49dd7093-ed68-4847-aff1-d6f78d269675",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "de1ca814-926c-4dac-87b3-03122a713e01",
                    "title": "Files db controller tests",
                    "fullFile": "/home/will/code/integrify/api-files/test/db/file.controller.test.js",
                    "file": "/test/db/file.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"before all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await testLib.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "b5c74b6e-27ba-4ca4-bd37-a46e2d35a855",
                            "parentUUID": "de1ca814-926c-4dac-87b3-03122a713e01",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"after all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await fileController.removeFiles(tenant, {path: \"/created/by/mocha/test\"});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "7abb21e4-ba18-4530-90e8-982d32f55438",
                            "parentUUID": "de1ca814-926c-4dac-87b3-03122a713e01",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fd9924d0-111a-48ff-835d-f707048346dc",
                            "title": "file crud ",
                            "fullFile": "/home/will/code/integrify/api-files/test/db/file.controller.test.js",
                            "file": "/test/db/file.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a file",
                                    "fullTitle": "Files db controller tests file crud  should create a file",
                                    "timedOut": false,
                                    "duration": 38,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const file = await fileController.createFile(tenant, fileObj);\nsid = file.sid;\nexpect(sid).to.exist;",
                                    "err": {},
                                    "uuid": "74bc6be2-6a7d-45a8-b049-44f8af6c3f2e",
                                    "parentUUID": "fd9924d0-111a-48ff-835d-f707048346dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a file",
                                    "fullTitle": "Files db controller tests file crud  should get a file",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.getFile(tenant, sid);\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "d8305e1b-4923-48ec-9b9b-207090b13e05",
                                    "parentUUID": "fd9924d0-111a-48ff-835d-f707048346dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should find a file",
                                    "fullTitle": "Files db controller tests file crud  should find a file",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.findFile(tenant, {filePath: \"/created/by/mocha/test\"});\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "699f2463-0b35-456b-a2b2-8a5bfe2e9a01",
                                    "parentUUID": "fd9924d0-111a-48ff-835d-f707048346dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a file",
                                    "fullTitle": "Files db controller tests file crud  should update a file",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const updatedFile = await fileController.updateFile(\n  tenant,\n  file.toObject()\n);\nexpect(updatedFile).to.exist;\nexpect(updatedFile.sid).to.equal(sid);\nexpect(updatedFile.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "7cab79ef-cf6b-48f1-8c96-f3639f5c6ab3",
                                    "parentUUID": "fd9924d0-111a-48ff-835d-f707048346dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a file",
                                    "fullTitle": "Files db controller tests file crud  delete a a file",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await fileController.removeFile(tenant, fileObj);\nexpect(deleted).to.exist;\nexpect(deleted.deletedCount).to.equal(1);",
                                    "err": {},
                                    "uuid": "1653ef97-7670-47d9-bac3-4a97d297c9be",
                                    "parentUUID": "fd9924d0-111a-48ff-835d-f707048346dc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "74bc6be2-6a7d-45a8-b049-44f8af6c3f2e",
                                "d8305e1b-4923-48ec-9b9b-207090b13e05",
                                "699f2463-0b35-456b-a2b2-8a5bfe2e9a01",
                                "7cab79ef-cf6b-48f1-8c96-f3639f5c6ab3",
                                "1653ef97-7670-47d9-bac3-4a97d297c9be"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 56,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                    "title": "Files API Tests",
                    "fullFile": "/home/will/code/integrify/api-files/test/functions/functions.test.js",
                    "file": "/test/functions/functions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Files API Tests\"",
                            "fullTitle": "Files API Tests \"before all\" hook in \"Files API Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nconst testConfig = await testLib.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "b7e8b537-8cc9-4cfb-943f-8c5176e343e1",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "writes a temp file (non file upload)",
                            "fullTitle": "Files API Tests writes a temp file (non file upload)",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .post(`/api/files/${parentFolder}/${encodeURIComponent(`${tenant}/testDir/mochaTest-WriteTextFile.txt`)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .set('content-type', 'text/plain')\n  .send('directly write text into a file (non file upload)')\n  \nexpect(res.status).to.equal(200);",
                            "err": {},
                            "uuid": "d4685f9c-f006-49f8-a920-640fe10b3e9c",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "uploads multiple files in multipart form using bearerAuth",
                            "fullTitle": "Files API Tests uploads multiple files in multipart form using bearerAuth",
                            "timedOut": false,
                            "duration": 45,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const token = await testLib.getAuthToken()\nlet res = await chai.request(baseUrl)\n  // .post(`/api/files/upload`)\n  .post(`/api/files/${parentFolder}/${path}/upload`)\n  .set('Authorization', 'Bearer ' + token)\n  .attach('files', './test/mocks/mochaTest.txt', 'mochaTest.txt')\n  .attach('files', './test/mocks/mochaTest.txt', 'mochaTest.txt')\n  \nexpect(res.status).to.equal(200);\nlet filePathParts = res.body[0].filePath.split('/')\nfilePathParts.shift()\ntestFilePath = filePathParts.join('/')\nuploadResultBody = res.body\nexpect(res.body.length).to.equal(2);\nexpect(res.body[0].originalFilename).to.equal('mochaTest.txt');\nexpect(res.body[1].originalFilename).to.equal('mochaTest.txt');\nsetTimeout(async () => {\n  // verify that we have records in mongo db for these files\n  let file = await fileController.getFile(tenant, res.body[0].sid);\n  expect(file).to.exist;\n  expect(file.sid).to.equal(res.body[0].sid);\n  file = await fileController.getFile(tenant, res.body[1].sid);\n  expect(file).to.exist;\n  expect(file.sid).to.equal(res.body[1].sid);\n}, 1000);",
                            "err": {},
                            "uuid": "6a200454-45c9-4e2f-aea9-c0b92539443b",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "uploads multiple files in multipart form using integrify env token for internal use",
                            "fullTitle": "Files API Tests uploads multiple files in multipart form using integrify env token for internal use",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const token = await testLib.getAuthToken()\nlet res = await chai.request(baseUrl)\n  // .post(`/api/files/upload`)\n  .post(`/api/files/${parentFolder}/${path}/upload/internal?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .attach('files', './test/mocks/mochaTest.txt', 'mochaTest.txt')\n  .attach('files', './test/mocks/mochaTest.txt', 'mochaTest.txt')\n  \nexpect(res.status).to.equal(200);\nlet filePathParts = res.body[0].filePath.split('/')\nfilePathParts.shift()\ntestFilePath = filePathParts.join('/')\nexpect(res.body.length).to.equal(2);\nexpect(res.body[0].originalFilename).to.equal('mochaTest.txt');\nexpect(res.body[1].originalFilename).to.equal('mochaTest.txt');\nsetTimeout(async () => {\n  // verify that we have records in mongo db for these files\n  let file = await fileController.getFile(tenant, res.body[0].sid);\n  expect(file).to.exist;\n  expect(file.sid).to.equal(res.body[0].sid);\n  file = await fileController.getFile(tenant, res.body[1].sid);\n  expect(file).to.exist;\n  expect(file.sid).to.equal(res.body[1].sid);\n  }, 1000);",
                            "err": {},
                            "uuid": "7d2c591a-3ee4-47a0-8f78-605d1096f596",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "uploads a file in octet stream",
                            "fullTitle": "Files API Tests uploads a file in octet stream",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .post(`/api/files/${parentFolder}/${filePath}/uploadStream`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .set('Content-Type', 'application/octet-stream')\n  .attach('files', './test/mocks/mochaTest.txt', 'mochaTest.txt')\n  \nexpect(res.status).to.equal(200);",
                            "err": {},
                            "uuid": "cfb69c31-7506-4903-82a7-f49a5b2dfdce",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "read file with attachment param = false",
                            "fullTitle": "Files API Tests read file with attachment param = false",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(testFilePath)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(res).to.have.status(200);\nexpect(res).to.have.header('content-type', 'text/plain; charset=utf-8');\nexpect(res).to.be.text;\nexpect(res.text).to.include('Hello World!');",
                            "err": {},
                            "uuid": "09c67eb8-7103-496e-984f-9faaae24a51c",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "read file with attachment param = true",
                            "fullTitle": "Files API Tests read file with attachment param = true",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const filePathParts = testFilePath.split('/')\nconst filename = filePathParts[filePathParts.length-1]\nlet res = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(testFilePath)}`)\n  .query({attachment: 'true'})\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(res.statusCode).to.equal(200)\nexpect(res).to.have.header('content-disposition', `attachment; filename=\"${filename}\"`);",
                            "err": {},
                            "uuid": "428a050b-7cc2-4c18-8c86-b183d85fa11f",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "downloads a file",
                            "fullTitle": "Files API Tests downloads a file",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const filePathParts = testFilePath.split('/')\nconst filename = filePathParts[filePathParts.length-1]\nlet downloadRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(testFilePath)}/download`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n\nexpect(downloadRes).to.have.status(200);\nexpect(downloadRes).to.have.header('content-type', 'application/octet-stream')\nexpect(downloadRes).to.have.header('content-disposition', `attachment; filename=\"${filename}\"`);",
                            "err": {},
                            "uuid": "f002ecce-52e9-4566-8027-27a4bc52ef75",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "checks if a file exists",
                            "fullTitle": "Files API Tests checks if a file exists",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(testFilePath)}/exists`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  \nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(true);",
                            "err": {},
                            "uuid": "61f81dd5-d4b5-4cf7-96a4-ef99a7575942",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "checks if a file exists by sid",
                            "fullTitle": "Files API Tests checks if a file exists by sid",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "setTimeout(async () => {\n  let res = await chai.request(baseUrl)\n    .get(`/api/files/${uploadResultBody[1].sid}/exists?tenant=${tenant}`)\n    .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n\n  expect(res.status).to.equal(200);\n  expect(res.body).to.equal(true);\n}, 1000);",
                            "err": {},
                            "uuid": "5d72f03f-0dea-4aeb-bfcd-f28c227dcf48",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "downloads a file by sid using integrify env token for internal use",
                            "fullTitle": "Files API Tests downloads a file by sid using integrify env token for internal use",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const token = await testLib.getAuthToken()\nlet downloadRes = await chai.request(`${baseUrl}`)\n  .get(`/api/files/${uploadResultBody[0].sid}/download/internal?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(downloadRes).to.have.status(200);\nexpect(downloadRes).to.have.header('content-type', 'application/octet-stream')\nexpect(downloadRes).to.have.header('content-disposition', 'attachment; filename=\"mochaTest.txt\"');",
                            "err": {},
                            "uuid": "ef7f3316-24db-421f-9790-ea1f9168b395",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets file info",
                            "fullTitle": "Files API Tests gets file info",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const token = await testLib.getAuthToken()\nconst result = await chai.request(baseUrl)\n  .get(`/api/files/${uploadResultBody[0].sid}/info?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(result.body.sid).to.equal(uploadResultBody[0].sid)\nexpect(result.body.originalFilename).to.equal(uploadResultBody[0].originalFilename)\nexpect(result.body.contentType).to.equal(uploadResultBody[0].contentType)\nexpect(result.body.filePath).to.equal(uploadResultBody[0].filePath)",
                            "err": {},
                            "uuid": "fdc9ff55-99f6-4be4-abeb-8dc1f318b4d6",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "read file by sid",
                            "fullTitle": "Files API Tests read file by sid",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .get(`/api/files/${uploadResultBody[0].sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(res).to.have.status(200);\nexpect(res).to.have.header('content-type', 'text/plain; charset=utf-8');\nexpect(res).to.be.text;\nexpect(res.text).to.include('Hello World!');",
                            "err": {},
                            "uuid": "4920a225-c16d-4fa9-9e29-79b54e54cfe4",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "copies a file",
                            "fullTitle": "Files API Tests copies a file",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// upload now modifies the filename so we need to use the new filename from fileInfo\nlet filePath = uploadResultBody[0].filePath.replace(parentFolder, '')\nlet copyRes = await chai.request(baseUrl)\n  .put(`/api/files/${parentFolder}/${encodeURIComponent(filePath)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .send({\n    targetParentFolder: \"temp\",\n    targetFilePath: `${tenant}/testDir/helloWorld2.txt`\n  })\nexpect(copyRes.statusCode).to.equal(200)\n// verify that original and copy have same contents\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(`${tenant}/testDir/mochaTest-WriteTextFile.txt`)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.text).to.include('directly write text into a file (non file upload)');\n// verify that mongodb record exists and has correct path exists for the file copy \nlet file = await fileController.getFile(tenant, copyRes.body.sid)\nexpect(file).to.exist;\nexpect(file.filePath).to.equal(`temp/${tenant}/testDir/helloWorld2.txt`);",
                            "err": {},
                            "uuid": "4935e0b2-2f12-439a-b07a-4ca254983a46",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "copies a file by sid",
                            "fullTitle": "Files API Tests copies a file by sid",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// const uploadedFilename = uploadResultBody[0].filePath.split('/')\nlet copyRes = await chai.request(baseUrl)\n  .put(`/api/files/${uploadResultBody[0].sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .send({\n    targetParentFolder: \"temp\",\n    targetPath: `${tenant}/testDirBySid`\n  })\ncopyResultBody = copyRes.body\nexpect(copyRes.statusCode).to.equal(200)\n// verify that original and copy have same contents\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${uploadResultBody[0].sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.text).to.include('Hello World!');\n// verify that mongodb record exists and has correct path exists for the file copy \nlet file = await fileController.getFile(tenant, copyResultBody.sid)\nexpect(file).to.exist;\nexpect(file.filePath).to.equal(`temp/${tenant}/testDirBySid/${copyResultBody.sid.substring(30)}_${uploadResultBody[0].originalFilename}`);",
                            "err": {},
                            "uuid": "ae273aa5-14f4-4cfa-a432-a023fde84909",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "moves a file",
                            "fullTitle": "Files API Tests moves a file",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// upload now modifies the filename so we need to use the new filename from fileInfo\nlet filePath = uploadResultBody[0].filePath.replace(parentFolder, '')\n// get mongo record by name\n// after moveFile, get mongo record by sid and verify that the path changed\nconst preMovefileInfo = await fileController.findFile(tenant, { filePath: uploadResultBody[0].filePath })\nlet moveRes = await chai.request(baseUrl)\n  .patch(`/api/files/${parentFolder}/${encodeURIComponent(filePath)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .send({\n    targetParentFolder: \"temp\",\n    targetFilePath: `${tenant}/testDir/helloWorld3.txt`\n  })\nexpect(moveRes.statusCode).to.equal(200)\n\nlet movedFileInfo = await fileController.getFile(tenant, preMovefileInfo.sid)\nexpect(movedFileInfo.sid).to.equal(preMovefileInfo.sid)\nexpect(movedFileInfo).to.exist;\nexpect(movedFileInfo.filePath).to.equal(`temp/${tenant}/testDir/helloWorld3.txt`);\n// verify that original file \"mochaTest.txt\" no longer exists\n\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${filePath}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.statusCode).to.equal(404)",
                            "err": {},
                            "uuid": "abd90620-f0aa-4020-9ba4-d27324d4480e",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "moves a file by sid",
                            "fullTitle": "Files API Tests moves a file by sid",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let moveRes = await chai.request(baseUrl)\n  .patch(`/api/files/${copyResultBody.sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .send({\n    targetParentFolder: \"temp\",\n    targetPath: `${tenant}/testDirBySid/move`\n  })\nexpect(moveRes.statusCode).to.equal(200)\n// query by sid and verify that contents and path are correct\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${moveRes.body.sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.text).to.include('Hello World!');\n// verify that mongodb record exists and has correct path exists for the file copy \nlet file = await fileController.getFile(tenant, moveRes.body.sid)\nexpect(file).to.exist;\nexpect(file.filePath).to.equal(`temp/${tenant}/testDirBySid/move/${copyResultBody.sid.substring(30)}_${copyResultBody.originalFilename}`);\n  \n// try to read by pre move path and make sure we get a 404\nconst copyResultFilePathParts = copyResultBody.filePath.split('/')\ncopyResultFilePathParts.shift()\nreadRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${copyResultFilePathParts.join('/')}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.statusCode).to.equal(404)",
                            "err": {},
                            "uuid": "d6f9c5d8-6839-47f1-90b5-278b7b506fc6",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "deletes a file",
                            "fullTitle": "Files API Tests deletes a file",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// for some reason, this errors with s3 filestore if you run all tests in mocha explorer at the same time\n// but works correctly if you run them one by one\nconst url = tenant + '/testDir/helloWorld3.txt'\nlet delRes = await chai.request(baseUrl)\n  .delete(`/api/files/${parentFolder}/${encodeURIComponent(url)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(delRes.statusCode).to.equal(200)\nexpect(delRes.text).to.equal('1');\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(url)}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.statusCode).to.equal(404)\n// verify that mongo record was deleted\nfile = await fileController.findFile(tenant, {filePath:`temp/${url}`})\nexpect(file).to.not.exist;",
                            "err": {},
                            "uuid": "5386ee0c-1696-45d8-9641-f5b2048b5c65",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "deletes a file by sid",
                            "fullTitle": "Files API Tests deletes a file by sid",
                            "timedOut": false,
                            "duration": 345,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// for some reason, this errors with s3 filestore if you run all tests in mocha explorer at the same time\n// but works correctly if you run them one by one\nlet delRes = await chai.request(baseUrl)\n  .delete(`/api/files/${uploadResultBody[1].sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(delRes.statusCode).to.equal(200)\nexpect(delRes.text).to.equal('1');\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${uploadResultBody[1].sid}?tenant=${tenant}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.statusCode).to.equal(404)\n// verify that mongo record was deleted\nfile = await fileController.getFile(tenant, uploadResultBody[1].sid)\nexpect(file).to.not.exist;",
                            "err": {},
                            "uuid": "525d0afd-734f-4ae3-9a90-fb4c63f4f779",
                            "parentUUID": "4a09170a-3828-4e36-8bd1-e3967276e4e0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "d4685f9c-f006-49f8-a920-640fe10b3e9c",
                        "6a200454-45c9-4e2f-aea9-c0b92539443b",
                        "7d2c591a-3ee4-47a0-8f78-605d1096f596",
                        "cfb69c31-7506-4903-82a7-f49a5b2dfdce",
                        "09c67eb8-7103-496e-984f-9faaae24a51c",
                        "428a050b-7cc2-4c18-8c86-b183d85fa11f",
                        "f002ecce-52e9-4566-8027-27a4bc52ef75",
                        "61f81dd5-d4b5-4cf7-96a4-ef99a7575942",
                        "5d72f03f-0dea-4aeb-bfcd-f28c227dcf48",
                        "ef7f3316-24db-421f-9790-ea1f9168b395",
                        "fdc9ff55-99f6-4be4-abeb-8dc1f318b4d6",
                        "4920a225-c16d-4fa9-9e29-79b54e54cfe4",
                        "4935e0b2-2f12-439a-b07a-4ca254983a46",
                        "ae273aa5-14f4-4cfa-a432-a023fde84909",
                        "abd90620-f0aa-4020-9ba4-d27324d4480e",
                        "d6f9c5d8-6839-47f1-90b5-278b7b506fc6",
                        "5386ee0c-1696-45d8-9641-f5b2048b5c65",
                        "525d0afd-734f-4ae3-9a90-fb4c63f4f779"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 530,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "acd2df8e-4fff-43b7-b98a-f15dd5ff90c9",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "48c23fcd-48b0-4c52-9f86-b839456c5b34",
                    "title": "Form controller tests",
                    "fullFile": "/home/will/code/integrify/api-forms/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Form controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenant = config.tenantOne.tenantId;\nsession = {jwt_token: 'xxxxx', tenant: config.tenantOne.tenantId, \nuser_sid: config.tenantOne.adminUser.sid,\nprofile: {\n  sid: config.tenantOne.adminUser.sid,\n  user_sid: config.tenantOne.adminUser.sid,\n  user_name: config.tenantOne.adminUser.userName,\n  email: \"test@nowhere.com\",\n  name: config.tenantOne.adminUser.userName + \" user\"\n}\n   }",
                            "err": {},
                            "uuid": "fdc04c39-f9d0-44b6-b543-515047aa51c6",
                            "parentUUID": "48c23fcd-48b0-4c52-9f86-b839456c5b34",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "be39700e-add6-467c-8aa4-14ca754b5990",
                            "title": "form retrieval",
                            "fullFile": "/home/will/code/integrify/api-forms/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should retrieve a form by id with default",
                                    "fullTitle": "Form controller tests form retrieval should retrieve a form by id with default",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const form = await controller.getForm(tenant, profileFormSid);\nexpect(form['name']).to.equal('Contact Profile Update Form');",
                                    "err": {},
                                    "uuid": "01c03b35-b562-4843-a902-ad0e5bf61fd3",
                                    "parentUUID": "be39700e-add6-467c-8aa4-14ca754b5990",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should parse out questions",
                                    "fullTitle": "Form controller tests form retrieval should parse out questions",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const questions = await controller.getFormQuestions(tenant, profileFormSid);\nexpect(questions.length).to.equal(12);\nexpect(Object.keys(questions[0])).to.have.members(['id', 'displayName', 'label', 'show', 'type', 'validation'])",
                                    "err": {},
                                    "uuid": "71865c1f-f6f4-4e58-a463-34787f2a0bf8",
                                    "parentUUID": "be39700e-add6-467c-8aa4-14ca754b5990",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms without a name search",
                                    "fullTitle": "Form controller tests form retrieval should list forms without a name search",
                                    "timedOut": false,
                                    "duration": 193,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const forms = await controller.listForms(tenant);\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].name).to.exist;",
                                    "err": {},
                                    "uuid": "84e7060a-3237-4a5c-8d76-bb85986c62fa",
                                    "parentUUID": "be39700e-add6-467c-8aa4-14ca754b5990",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms with a name search",
                                    "fullTitle": "Form controller tests form retrieval should list forms with a name search",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const forms = await controller.listForms(tenant, {sid: profileFormSid});\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].sid).to.equal(profileFormSid);",
                                    "err": {},
                                    "uuid": "c85152dc-113d-462b-8b4d-b4b3adca1584",
                                    "parentUUID": "be39700e-add6-467c-8aa4-14ca754b5990",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "01c03b35-b562-4843-a902-ad0e5bf61fd3",
                                "71865c1f-f6f4-4e58-a463-34787f2a0bf8",
                                "84e7060a-3237-4a5c-8d76-bb85986c62fa",
                                "c85152dc-113d-462b-8b4d-b4b3adca1584"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 249,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "df564a0f-f602-4340-9867-48521489b268",
                    "title": "Form route handler tests",
                    "fullFile": "/home/will/code/integrify/api-forms/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Form route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenant = config.tenantOne.tenantId;\nintegrifyEnvToken = config.tenantOne.tenantId + \" \" + process.env.INTEGRIFY_ENV_TOKEN\noauth = {jwt_token: 'xxxxx', tenant: config.tenantOne.tenantId, \nuser_sid: config.tenantOne.adminUser.sid,\nprofile: {\n  sid: config.tenantOne.adminUser.sid,\n  user_sid: config.tenantOne.adminUser.sid,\n  user_name: config.tenantOne.adminUser.userName,\n  email: \"test@nowhere.com\",\n  name: config.tenantOne.adminUser.userName + \" user\"\n}\n       }",
                            "err": {},
                            "uuid": "78809125-ba23-40cd-b220-991941584eb9",
                            "parentUUID": "df564a0f-f602-4340-9867-48521489b268",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c7404e8d-491b-4375-b265-a6e2fba2b1c2",
                            "title": "form retrieval",
                            "fullFile": "/home/will/code/integrify/api-forms/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should retrieve a form by id with default",
                                    "fullTitle": "Form route handler tests form retrieval should retrieve a form by id with default",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.formSid = profileFormSid;\nawait handlers.getForm(req,mockRes);\nconst form = mockRes.body;\nexpect(form.name).to.equal('Contact Profile Update Form');",
                                    "err": {},
                                    "uuid": "25c8fdb7-fd7e-4fa8-b977-aa2fb81fb461",
                                    "parentUUID": "c7404e8d-491b-4375-b265-a6e2fba2b1c2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should parse out questions",
                                    "fullTitle": "Form route handler tests form retrieval should parse out questions",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.formSid = profileFormSid;\nawait handlers.getFormQuestions(req, mockRes);\nconst questions = mockRes.body;\nexpect(questions.length).to.equal(12);\nexpect(Object.keys(questions[0])).to.have.members(['id', 'displayName', 'label', 'show', 'type', 'validation'])",
                                    "err": {},
                                    "uuid": "0ea45e9c-9e8a-45a4-a419-08e7ba9dd01d",
                                    "parentUUID": "c7404e8d-491b-4375-b265-a6e2fba2b1c2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms without a query or userPerms",
                                    "fullTitle": "Form route handler tests form retrieval should list forms without a query or userPerms",
                                    "timedOut": false,
                                    "duration": 400,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n//req.params.formSid = profileFormSid;\nawait handlers.searchForms(req,mockRes);\nconst forms = mockRes.body;\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].name).to.exist;\nexpect(forms[0].categoryName).to.exist;",
                                    "err": {},
                                    "uuid": "bcc8ef61-c9b1-4687-ae40-7133ea0bf9e2",
                                    "parentUUID": "c7404e8d-491b-4375-b265-a6e2fba2b1c2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms with a search term",
                                    "fullTitle": "Form route handler tests form retrieval should list forms with a search term",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.search = 'profile Update';\nawait handlers.searchForms(req,mockRes);\nconst forms = mockRes.body;\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].categoryName).to.exist;",
                                    "err": {},
                                    "uuid": "8bede719-9009-4b73-9a04-1159d5919c48",
                                    "parentUUID": "c7404e8d-491b-4375-b265-a6e2fba2b1c2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "25c8fdb7-fd7e-4fa8-b977-aa2fb81fb461",
                                "0ea45e9c-9e8a-45a4-a419-08e7ba9dd01d",
                                "bcc8ef61-c9b1-4687-ae40-7133ea0bf9e2",
                                "8bede719-9009-4b73-9a04-1159d5919c48"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 424,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "89ac813e-c6dd-4de8-b71a-28c1d71f3d7d",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "df6f8dea-3430-4df2-8599-5748f334ea9a",
                    "title": "Instance API Controller Tests",
                    "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceController.test.js",
                    "file": "/test/db/instanceController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\n// session = {tenant: config.tenantOne.tenantId, user_sid: '1e660111-de6f-4318-8f51-6e59cb33d8d7'} //process level\n// session = {tenant: config.tenantOne.tenantId, user_sid:'521a92c8-e77c-4537-811b-dea6e533d800'} //category level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "7c692c20-421c-4b64-86a7-1e0791cc3c07",
                            "parentUUID": "df6f8dea-3430-4df2-8599-5748f334ea9a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                            "title": "list tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "get a full instance",
                                    "fullTitle": "Instance API Controller Tests list tests get a full instance",
                                    "timedOut": false,
                                    "duration": 1380,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst fullInstance = await instanceController.getFullInstance(\n  sampleInstanceGuid\n);\nexpect(fullInstance).to.exist;\nexpect(fullInstance.instanceTasks.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "1a59dc0b-573f-4d55-9054-df3e4356b1f8",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid)\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "e68422bb-7cc4-4a27-b12c-6fa90785718d",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with requester",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with requester",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {requester: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.exist;\nexpect(instance.requester.contactGuid).to.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "b9982f52-0a42-4233-b606-f394f23e6b9d",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {client: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "0b6a4cc0-49bf-4fff-8985-2399d1edecbc",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client manager",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client manager",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\n// get instances for Joe User, who reports to System System\nlet instances = await Instance.query().where(\"clientGuid\", '92a73dad-d953-4c59-9c5e-5d037791d411');\n\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {clientManager: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;\nexpect(instance.client.manager).to.exist;\nexpect(instance.client.manager.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "26f234dc-6b58-426d-adc2-bf835ea95fd2",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance process",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance process",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instanceProcess = await instanceController.getInstanceProcess(sampleInstanceGuid)\nexpect(instanceProcess).to.exist;\nexpect(instanceProcess.instanceGuid).to.equal(sampleInstanceGuid)",
                                    "err": {},
                                    "uuid": "8f96e748-674a-44e0-a034-401d1877f24b",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance recipient tasks data by instanceSid",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance recipient tasks data by instanceSid",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(config.tenantOne);\nconst instanceSid = '6D4785AE-57A2-46C5-9141-DE2B134ED8EF'\nconst instanceTasks = await instanceController.getInstanceRecipientTasksData(instanceSid);\n\nexpect(instanceTasks).to.exist;\nexpect(instanceTasks.length).to.be.gt(0);\nconst maintenanceReqFormTask = instanceTasks[2]\nexpect(maintenanceReqFormTask.taskName).to.equal('Maintenance Request Form')\nexpect(maintenanceReqFormTask.recipientTasks.length).to.be.gt(0)\nconst recipientTask = maintenanceReqFormTask.recipientTasks[0]\nexpect(recipientTask.recipientGuid).to.equal('4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF');\nexpect(recipientTask.taskData.length).to.be.gt(0)\nexpect(recipientTask.taskData.find(x => x.dataLabel == 'Location of Problem').dataValue).to.equal('Inside the building');",
                                    "err": {},
                                    "uuid": "5ab42a1b-79db-479d-81da-584b0ef619b8",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests columns",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests columns",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getMyRequests();\n        \nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0);\nsampleInstance = firstInstance;",
                                    "err": {},
                                    "uuid": "e2bcbff6-0b03-4531-8a3e-5fd0e11e0d31",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - ID",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - ID",
                                    "timedOut": false,
                                    "duration": 158,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processId\",\n          data: {\n            comparison: \"eq\",\n            value: sampleInstance.processId,\n          },\n        },\n      ],\n      count: 5,\n    });\n        \n    expect(result.results[0].processId).to.equal(sampleInstance.processId);\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"gt\",\n            value: 500,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"asc\",\n      count: 5,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.length.should.equal(5); \n        \n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.gt(500);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"lt\",\n            value: 505,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"desc\",\n      count: 2,\n    });\n        \n    expect(result.results.length).to.equal(2);\n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.lt(505);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "d9d7c306-b6c7-4b76-8ddc-5cf5b756da06",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - date",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - date",
                                    "timedOut": false,
                                    "duration": 171,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let d = moment().day(-90);\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"90\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n      expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().year(-30);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"30\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n        expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().day(-7);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"7\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-3);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"3\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-1);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"1\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    const startDate = moment(\"2018-10-11\");\n    const endDate = moment(\"2018-11-23\");\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"gt\", value: \"2018-10-11\" },\n        },\n        {\n          field: \"StartDate\",\n          data: { comparison: \"lt\", value: \"2018-11-23\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length) {\n        expect(result.results[0].startDate).to.be.gt(startDate.toDate());\n        expect(result.results[0].startDate).to.be.lt(endDate.toDate());\n    }\n  })\n);",
                                    "err": {},
                                    "uuid": "c55bb034-b30d-4c8b-8fa3-bef39914fdfc",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - name",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - name",
                                    "timedOut": false,
                                    "duration": 142,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.instanceName.toLowerCase()).to.contain(\"test\");\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.forEach((instance) => {\n    //   instance.processName.should.contain(\"test\");\n    // });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requester\",\n          data: { comparison: \"contains\", value: \"system system\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid.toLowerCase());\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "149a61bb-0559-4f65-833b-9393f046a6a8",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - guid",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - guid",
                                    "timedOut": false,
                                    "duration": 98,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processGuid\",\n          data: { comparison: \"contains\", value: sampleInstance.processGuid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.processName.indexOf(sampleInstance.processName)).to.be.gt(-1);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requesterGuid\",\n          data: { comparison: \"contains\", value: session.user_sid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "9f001fac-ebe0-42e5-9b1a-0997bee620c2",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - count",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - count",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, { count: 2 });\n        \n    expect(result.results).to.exist;\n    expect(result.results.length).to.equal(2);\n  })\n);",
                                    "err": {},
                                    "uuid": "5686f16e-e3dd-4780-9031-1e0abd244a40",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests params - sort, dir",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests params - sort, dir",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      count: 2,\n      dir: \"asc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.lt(\n      result.results[1].createdDate\n    );\n        \n    result = await f.call(instanceController, {\n      count: 2,\n      dir: \"desc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.gt(\n      result.results[1].createdDate\n    );\n  })\n);",
                                    "err": {},
                                    "uuid": "62e6f7a6-8d12-4645-a3d6-2d1d7179dd77",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests param - start",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests param - start",
                                    "timedOut": false,
                                    "duration": 47,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      start: 0,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startZeroId = result.results[0].instanceId;\n        \n    result = await f.call(instanceController, {\n      start: 1,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startOneId = result.results[0].instanceId;\n        \n    expect(startZeroId).to.be.lessThan(startOneId);\n  })\n);",
                                    "err": {},
                                    "uuid": "e06e8ab8-b001-4f65-9c0f-7564989cdf2d",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "a009e6b9-9276-4812-9d90-ce85d6ccf23d",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with search term against procssName, instanceName and requester",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with search term against procssName, instanceName and requester",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.processName, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "c5cd1283-fb97-4a7c-8395-89a8a31e473f",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with a numeric term against instanceId",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with a numeric term against instanceId",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.instanceId, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "d3b9ce4b-944c-4a79-be1e-6c66e481c33a",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get manage requests",
                                    "fullTitle": "Instance API Controller Tests list tests get manage requests",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'manage'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "08e81e5e-af54-430f-8308-b4128b639409",
                                    "parentUUID": "b4e762d7-88f4-4509-a82b-a6d490376c5a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1a59dc0b-573f-4d55-9054-df3e4356b1f8",
                                "e68422bb-7cc4-4a27-b12c-6fa90785718d",
                                "b9982f52-0a42-4233-b606-f394f23e6b9d",
                                "0b6a4cc0-49bf-4fff-8985-2399d1edecbc",
                                "26f234dc-6b58-426d-adc2-bf835ea95fd2",
                                "8f96e748-674a-44e0-a034-401d1877f24b",
                                "5ab42a1b-79db-479d-81da-584b0ef619b8",
                                "e2bcbff6-0b03-4531-8a3e-5fd0e11e0d31",
                                "d9d7c306-b6c7-4b76-8ddc-5cf5b756da06",
                                "c55bb034-b30d-4c8b-8fa3-bef39914fdfc",
                                "149a61bb-0559-4f65-833b-9393f046a6a8",
                                "9f001fac-ebe0-42e5-9b1a-0997bee620c2",
                                "5686f16e-e3dd-4780-9031-1e0abd244a40",
                                "62e6f7a6-8d12-4645-a3d6-2d1d7179dd77",
                                "e06e8ab8-b001-4f65-9c0f-7564989cdf2d",
                                "a009e6b9-9276-4812-9d90-ce85d6ccf23d",
                                "c5cd1283-fb97-4a7c-8395-89a8a31e473f",
                                "d3b9ce4b-944c-4a79-be1e-6c66e481c33a",
                                "08e81e5e-af54-430f-8308-b4128b639409"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2279,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "c3b28d72-cead-4c0d-87d3-0435e1526911",
                            "title": "delete/undelete tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "deletes a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a request",
                                    "timedOut": false,
                                    "duration": 195,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nsampleInstances = result.results;\n    \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\nsampleInstanceGuid = firstInstance.instanceGuid;\n      \nlet deleted = await instanceController.deleteInstance(sampleInstanceGuid);\n\nexpect(sampleInstanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.deletedDate).not.be.null\nconst Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet excludeDeleted = await Instance.query().where({instanceGuid: sampleInstanceGuid})\nexpect(excludeDeleted.length).to.equal(0);\n\t\t\t\t//await delay(5000);",
                                    "err": {},
                                    "uuid": "5d935305-f91b-4b5d-8a97-6f40c7768d8c",
                                    "parentUUID": "c3b28d72-cead-4c0d-87d3-0435e1526911",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retores a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests retores a request",
                                    "timedOut": false,
                                    "duration": 119,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet undeleted = await instanceController.restoreInstance(sampleInstanceGuid);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(sampleInstanceGuid).to.equal(undeleted.instanceGuid)\nexpect(undeleted.deletedDate).to.be.null;\n\t\t\t\t//await delay(5000);",
                                    "err": {},
                                    "uuid": "979e29d3-ffaf-47e9-87cb-c533782cbe85",
                                    "parentUUID": "c3b28d72-cead-4c0d-87d3-0435e1526911",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "deletes a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a batch of requests",
                                    "timedOut": false,
                                    "duration": 235,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.deleteInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\n//expect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).not.to.be.null;\n\t\t\t\t//await delay(5000);",
                                    "err": {},
                                    "uuid": "0baecd23-7bcb-405b-88b7-16ce0ea5d8c5",
                                    "parentUUID": "c3b28d72-cead-4c0d-87d3-0435e1526911",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores a batch of requests",
                                    "timedOut": false,
                                    "duration": 255,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.restoreInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\nexpect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).to.be.null;\n\t\t\t\t//await delay(5000);",
                                    "err": {},
                                    "uuid": "8c2c619c-1186-4725-8d74-ee9cdbeec38d",
                                    "parentUUID": "c3b28d72-cead-4c0d-87d3-0435e1526911",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores all",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores all",
                                    "timedOut": false,
                                    "duration": 1576,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet restored = await instanceController.restoreAllInstances();\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(restored.length).to.gt(0);\n\t\t\t\t//await delay(5000);",
                                    "err": {},
                                    "uuid": "035142d4-d6be-4d03-a73e-1163070acd40",
                                    "parentUUID": "c3b28d72-cead-4c0d-87d3-0435e1526911",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5d935305-f91b-4b5d-8a97-6f40c7768d8c",
                                "979e29d3-ffaf-47e9-87cb-c533782cbe85",
                                "0baecd23-7bcb-405b-88b7-16ce0ea5d8c5",
                                "8c2c619c-1186-4725-8d74-ee9cdbeec38d",
                                "035142d4-d6be-4d03-a73e-1163070acd40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2380,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "f0ffd406-a3e4-485e-b9a8-1a0138852580",
                            "title": "insert tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts an instance data",
                                    "fullTitle": "Instance API Controller Tests insert tests inserts an instance data",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceDataRow = {\n  itaskRecipientGuid: '8ad1a6f2-9f6f-4667-9750-d961044ed817',\n  itaskGuid: '5bde578f-615f-4494-86b2-ca61044ed883',\n  taskGuid: '6386f905-7fac-41c6-9b6b-86d53f14d61c',\n  objectGuid: null,\n  objectType: null,\n  objectId: null,\n  dataProperty: '1491430190541',\n  dataType: 'String',\n  dataSid: '14777392-ac81-44f0-b1f2-87d53f14d65d',\n  dataId: null,\n  dataClientId: '1491430190541',\n  dataLabel: 'Enter Details:',\n  dataValue: 'Need a background check',\n  META_1: 'TEST_INSERT_INSTANCE_DATA',\n  META_2: null,\n  dataHide: null,\n  instanceContactGuid: null,\n  roleGuid: null,\n  dataValueExt: null,\n  questionType: 'LongText',\n  deletedDate: new Date().toISOString() // so that it doesnt interfere with its instance\n}\nconst instanceController = new InstanceController(session)\nlet instanceDataGuid = await instanceController.insertInstanceData(instanceDataRow)\nexpect(instanceDataGuid).to.be.a.uuid()\n\t\t\t\t//await delay(5000);",
                                    "err": {},
                                    "uuid": "b36c6ed4-49f9-4d67-a458-c1343730b16d",
                                    "parentUUID": "f0ffd406-a3e4-485e-b9a8-1a0138852580",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b36c6ed4-49f9-4d67-a458-c1343730b16d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "4d56f129-4da7-470b-aa6c-4e4e34b98776",
                            "title": "update tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates an instance task recipient task state",
                                    "fullTitle": "Instance API Controller Tests update tests updates an instance task recipient task state",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session)\nconst recipTaskSid = 'b3fef53a-7742-46d1-9faf-be573c14d6fa'\nlet taskState = 'Cancelled'\nlet updated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)\n// change it back to Completed\ntaskState = 'Completed'\nupdated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)",
                                    "err": {},
                                    "uuid": "92854609-4e97-4479-a29c-454e4bb23d21",
                                    "parentUUID": "4d56f129-4da7-470b-aa6c-4e4e34b98776",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92854609-4e97-4479-a29c-454e4bb23d21"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "613f8959-399c-49d5-8911-0578f03e34e1",
                    "title": "Instance API Model Tests",
                    "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceModel.test.js",
                    "file": "/test/db/instanceModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8bfb26fb-e85c-4086-9f74-1dd1c36d511b",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/instanceModel.test.js",
                            "file": "/test/db/instanceModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Instance API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "d15e97fe-9988-4254-ad51-5efe3aa54878",
                                    "parentUUID": "8bfb26fb-e85c-4086-9f74-1dd1c36d511b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Instance API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = await sqldb.models.bindModel(config.tenantOne.tenantId, instanceModels.Instance)\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "0f05cfde-1dba-4fa9-9d7a-54e44ff6703b",
                                    "parentUUID": "8bfb26fb-e85c-4086-9f74-1dd1c36d511b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Instance API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = (await models.getModels(config.tenantOne.tenantId)).Instance;\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "317ee6bd-cb59-4825-98e1-b446ef1fbf77",
                                    "parentUUID": "8bfb26fb-e85c-4086-9f74-1dd1c36d511b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Instance API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\n          let results = await models._tenantModels[config.tenantOne.tenantId].Instance.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "24ce73ce-68d2-41c5-a23e-5395b7bc10f4",
                                    "parentUUID": "8bfb26fb-e85c-4086-9f74-1dd1c36d511b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0f05cfde-1dba-4fa9-9d7a-54e44ff6703b",
                                "317ee6bd-cb59-4825-98e1-b446ef1fbf77",
                                "24ce73ce-68d2-41c5-a23e-5395b7bc10f4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "d7253e6c-d314-493a-bf03-2fcefcf1641d",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/will/code/integrify/api-instance/test/db/myTaskController.test.js",
                    "file": "/test/db/myTaskController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "f12a8a30-4445-4646-b39a-6dfe8930cd26",
                            "parentUUID": "d7253e6c-d314-493a-bf03-2fcefcf1641d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                            "title": "list tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/myTaskController.test.js",
                            "file": "/test/db/myTaskController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 215,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "b07807e5-1a3b-41e9-ad27-9d32787da8de",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 221,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\n//expect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "ceb4cde2-af49-4bcd-9710-176bf291cadb",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 166,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "05f7aec2-800c-4e04-9d4c-ea31271777e3",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 169,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "dc31c9e9-7017-4113-9af6-5018151fe1a1",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 179,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "287ba9b4-d3ac-45e7-a14b-7a4d5ffe1e48",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 164,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "82d416ca-c948-4d19-a824-9bd21d3f9616",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 175,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "11a69d06-82d1-4f69-bbfd-43f1b190caa2",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 122,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "1643dcfc-6904-49da-a525-9f07e7cffab9",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 197,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "b3c12ca7-7bcd-4609-b508-ca64ad16a635",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 668,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "2a8d99f6-0e5c-48a1-aa9b-3117114be610",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 314,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "ba812069-f017-4f91-9cc4-e83a0004ecda",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 295,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "3acd1123-4fd0-402f-a000-b5af805894a5",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 134,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "1c6b2a1c-834d-43d7-9ee6-49bf3374383e",
                                    "parentUUID": "e63963c4-b0f2-42cf-b8b3-a28355659587",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b07807e5-1a3b-41e9-ad27-9d32787da8de",
                                "ceb4cde2-af49-4bcd-9710-176bf291cadb",
                                "05f7aec2-800c-4e04-9d4c-ea31271777e3",
                                "dc31c9e9-7017-4113-9af6-5018151fe1a1",
                                "287ba9b4-d3ac-45e7-a14b-7a4d5ffe1e48",
                                "82d416ca-c948-4d19-a824-9bd21d3f9616",
                                "11a69d06-82d1-4f69-bbfd-43f1b190caa2",
                                "1643dcfc-6904-49da-a525-9f07e7cffab9",
                                "b3c12ca7-7bcd-4609-b508-ca64ad16a635",
                                "2a8d99f6-0e5c-48a1-aa9b-3117114be610",
                                "ba812069-f017-4f91-9cc4-e83a0004ecda",
                                "3acd1123-4fd0-402f-a000-b5af805894a5",
                                "1c6b2a1c-834d-43d7-9ee6-49bf3374383e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3019,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "aebfe19b-01cd-41f0-8c76-27be0091f80d",
                    "title": "My Task API Model Tests",
                    "fullFile": "/home/will/code/integrify/api-instance/test/db/myTaskModel.test.js",
                    "file": "/test/db/myTaskModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9b297fa0-5745-4e8e-a635-ced9870a1254",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/api-instance/test/db/myTaskModel.test.js",
                            "file": "/test/db/myTaskModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "My Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "c9a50eed-7304-4bd5-a507-e125cfb60c21",
                                    "parentUUID": "9b297fa0-5745-4e8e-a635-ced9870a1254",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "My Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "d6e88118-4877-43e5-abd4-05e19c49a066",
                                    "parentUUID": "9b297fa0-5745-4e8e-a635-ced9870a1254",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "My Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "cac7eaf1-3b13-4f83-92a9-bc1aaea59816",
                                    "parentUUID": "9b297fa0-5745-4e8e-a635-ced9870a1254",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "My Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "d3ba1273-f6a4-4371-9df1-90aafba9189f",
                                    "parentUUID": "9b297fa0-5745-4e8e-a635-ced9870a1254",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d6e88118-4877-43e5-abd4-05e19c49a066",
                                "cac7eaf1-3b13-4f83-92a9-bc1aaea59816",
                                "d3ba1273-f6a4-4371-9df1-90aafba9189f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "2e24fc76-0622-4293-b153-aa95b0fc3b6b",
                    "title": "Instance API Tests",
                    "fullFile": "/home/will/code/integrify/api-instance/test/integration/instance.test.js",
                    "file": "/test/integration/instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken()\nthis.timeout(105000); \nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "950d0486-a0fe-4f61-a9dc-0b6225fc2816",
                            "parentUUID": "2e24fc76-0622-4293-b153-aa95b0fc3b6b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "088ee9d6-0a33-42b6-a771-f6c8ac056003",
                            "title": "getInstancesByPermission",
                            "fullFile": "/home/will/code/integrify/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of instances for a user with monitor permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with monitor permissions",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "163e253d-b306-46bb-9e3e-8a019fc6154d",
                                    "parentUUID": "088ee9d6-0a33-42b6-a771-f6c8ac056003",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances for a user with manage permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with manage permissions",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "010f777a-f15d-4274-870b-0c6db74164b3",
                                    "parentUUID": "088ee9d6-0a33-42b6-a771-f6c8ac056003",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances started by the user calling the endpoint",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances started by the user calling the endpoint",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "b5532f11-5465-48aa-a7ea-db19af1b86e5",
                                    "parentUUID": "088ee9d6-0a33-42b6-a771-f6c8ac056003",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"monitor\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"monitor\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 110,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"gteq\",\"type\":\"date\",\"value\":'2010-01-01'}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"lteq\",\"type\":\"date\",\"value\":'2030-01-01'}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "57d764ac-df86-44da-a96f-c36baa72134c",
                                    "parentUUID": "088ee9d6-0a33-42b6-a771-f6c8ac056003",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"mine\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"mine\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 113,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "18c38567-e104-446a-a8f4-2c0a605f0c5d",
                                    "parentUUID": "088ee9d6-0a33-42b6-a771-f6c8ac056003",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "163e253d-b306-46bb-9e3e-8a019fc6154d",
                                "010f777a-f15d-4274-870b-0c6db74164b3",
                                "b5532f11-5465-48aa-a7ea-db19af1b86e5",
                                "57d764ac-df86-44da-a96f-c36baa72134c",
                                "18c38567-e104-446a-a8f4-2c0a605f0c5d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 244,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "0a45f3a9-f852-431a-9a0a-b1ef01b9f052",
                            "title": "deleteInstances",
                            "fullFile": "/home/will/code/integrify/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a batch of instances",
                                    "fullTitle": "Instance API Tests deleteInstances should delete a batch of instances",
                                    "timedOut": false,
                                    "duration": 376,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n            let result = await instanceController.getMyRequests()\n            let instanceGuids= result.results.map((i) => {\n                return i.instanceGuid;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.body = JSON.stringify(instanceGuids);\n           \n\t\t\tawait handlers.deleteInstances(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n            expect(mockRes.body).to.exist;\n\t\t\tlet deleted = mockRes.body;\n            expect(deleted.instancesDeleted).to.exist;\n            expect(deleted.instancesDeleted).to.equal(instanceGuids.length);\n            \n            //retore them\n            \n            let restored = await instanceController.restoreInstances(instanceGuids);\n            //expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\n            expect(restored.length).to.equal(instanceGuids.length);",
                                    "err": {},
                                    "uuid": "5536e0c1-0c2d-4608-b37b-b6e0578b536d",
                                    "parentUUID": "0a45f3a9-f852-431a-9a0a-b1ef01b9f052",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5536e0c1-0c2d-4608-b37b-b6e0578b536d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 376,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "56a72ade-8dd8-4279-9020-d4f407451c8d",
                    "title": "MyTask API Tests",
                    "fullFile": "/home/will/code/integrify/api-instance/test/integration/myTask.test.js",
                    "file": "/test/integration/myTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "MyTask API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "9a880bdc-43cb-4c4b-ae79-9b24cd5c83b7",
                            "parentUUID": "56a72ade-8dd8-4279-9020-d4f407451c8d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "MyTask API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 111,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "4a20568d-8ddb-4f9e-985f-8395af3b57b7",
                            "parentUUID": "56a72ade-8dd8-4279-9020-d4f407451c8d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4a20568d-8ddb-4f9e-985f-8395af3b57b7"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 111,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "8d2f7fa9-e227-46c5-b040-57995c245cdf",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "ebfb9c6a-b10a-47dc-bd56-2f009674b207",
                    "title": "Process controller tests",
                    "fullFile": "/home/will/code/integrify/api-processes/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Process controller tests\"",
                            "fullTitle": "Process controller tests \"before all\" hook in \"Process controller tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nconfig = await mocks.getTestConfig();\ntenant = config.tenantOne.tenantId;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "eb0f670a-0743-4594-920c-1a4a15ab8aee",
                            "parentUUID": "ebfb9c6a-b10a-47dc-bd56-2f009674b207",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fb862730-af74-455a-81a7-2efe0a9b77ba",
                            "title": "process crud ",
                            "fullFile": "/home/will/code/integrify/api-processes/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "searches for a process with run permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with run permissions",
                                    "timedOut": false,
                                    "duration": 195,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'run', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "aab2fd34-50ca-44b3-9ecd-489fa2cef5c1",
                                    "parentUUID": "fb862730-af74-455a-81a7-2efe0a9b77ba",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "searches for a process with viewConfig permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with viewConfig permissions",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'viewconfig', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "c1dabb55-d5e4-4d3d-a7e1-b5d8a081f07d",
                                    "parentUUID": "fb862730-af74-455a-81a7-2efe0a9b77ba",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "searches for a process with edit permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with edit permissions",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'edit', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "c8e94911-5c8c-4f0f-9ba6-940679b3b769",
                                    "parentUUID": "fb862730-af74-455a-81a7-2efe0a9b77ba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "aab2fd34-50ca-44b3-9ecd-489fa2cef5c1",
                                "c1dabb55-d5e4-4d3d-a7e1-b5d8a081f07d",
                                "c8e94911-5c8c-4f0f-9ba6-940679b3b769"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 205,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d841f71e-84bc-4bf3-9d37-b65a5f950ad5",
                            "title": "process tasks",
                            "fullFile": "/home/will/code/integrify/api-processes/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets all process tasks for given processSid",
                                    "fullTitle": "Process controller tests process tasks gets all process tasks for given processSid",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const emailMonProcessSid = '8cd0fdcd-3e88-4b5a-b8b2-9ddc4c3b2239'\nconst processConstroller = new ProcessController(session);\nconst  processTasks = await processConstroller.getProcessTasks({processSid:emailMonProcessSid});\nexpect(processTasks.length).to.equal(6);\nexpect(processTasks[0].taskType.taskTypeName).to.equal('Power Form')",
                                    "err": {},
                                    "uuid": "cadf6a29-a1e9-4528-9047-523add06784d",
                                    "parentUUID": "d841f71e-84bc-4bf3-9d37-b65a5f950ad5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets process tasks for given processSid that match taskType filters",
                                    "fullTitle": "Process controller tests process tasks gets process tasks for given processSid that match taskType filters",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const emailMonProcessSid = '8cd0fdcd-3e88-4b5a-b8b2-9ddc4c3b2239'\nconst processConstroller = new ProcessController(session);\nconst taskTypes = ['Power Form']\nconst  processTasks = await processConstroller.getProcessTasks({processSid:emailMonProcessSid, taskTypes});\nexpect(processTasks.length).to.equal(2);\nexpect(processTasks[0].taskType.taskTypeName).to.equal('Power Form')\nexpect(processTasks[1].taskType.taskTypeName).to.equal('Power Form')",
                                    "err": {},
                                    "uuid": "f8ac72ae-ef28-4ff6-8861-b1a230e4f100",
                                    "parentUUID": "d841f71e-84bc-4bf3-9d37-b65a5f950ad5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cadf6a29-a1e9-4528-9047-523add06784d",
                                "f8ac72ae-ef28-4ff6-8861-b1a230e4f100"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ebcc1692-614e-47ce-b806-7608a5effa29",
                    "title": "Process route handler tests",
                    "fullFile": "/home/will/code/integrify/api-processes/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Process route handler tests\"",
                            "fullTitle": "Process route handler tests \"before all\" hook in \"Process route handler tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "9f92a560-bfca-4a0a-84df-a5814bbe9f8d",
                            "parentUUID": "ebcc1692-614e-47ce-b806-7608a5effa29",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "210ec06d-95e4-4944-a6bc-f54b1e00310b",
                            "title": "process crud ",
                            "fullFile": "/home/will/code/integrify/api-processes/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should search processes with run perms",
                                    "fullTitle": "Process route handler tests process crud  should search processes with run perms",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query = {permissionType: 'run', search:'Update my profile'}\nawait handlers.searchProcesses(req,mockRes);\nconst processes = mockRes.body;\nconst process= processes[0];\nexpect(process).to.exist",
                                    "err": {},
                                    "uuid": "15c1ca88-71d3-405d-ae80-2583683c2222",
                                    "parentUUID": "210ec06d-95e4-4944-a6bc-f54b1e00310b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should search processes with view config perms",
                                    "fullTitle": "Process route handler tests process crud  should search processes with view config perms",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query = {permissionType: 'viewconfig', search:'Update my profile'}\nawait handlers.searchProcesses(req,mockRes);\nconst processes = mockRes.body;\nconst process= processes[0];\nexpect(process).to.exist",
                                    "err": {},
                                    "uuid": "1b5d0eb3-0933-4026-8b36-e6bd65d1ee08",
                                    "parentUUID": "210ec06d-95e4-4944-a6bc-f54b1e00310b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "15c1ca88-71d3-405d-ae80-2583683c2222",
                                "1b5d0eb3-0933-4026-8b36-e6bd65d1ee08"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8d290e4a-482b-49eb-bdc8-b4fa5517a810",
                            "title": "process tasks",
                            "fullFile": "/home/will/code/integrify/api-processes/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets all process tasks for given processSid",
                                    "fullTitle": "Process route handler tests process tasks gets all process tasks for given processSid",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nconst emailMonProcessSid = '8cd0fdcd-3e88-4b5a-b8b2-9ddc4c3b2239'\nreq.params = {processSid: emailMonProcessSid}\nreq.query = {taskTypes: ''}\nawait handlers.getProcessTasks(req,mockRes);\nexpect(mockRes.statusCode).equal(200);\nconst processTasks = mockRes.body;\nexpect(processTasks.length).to.equal(6);\nexpect(processTasks[0].taskType.taskTypeName).to.equal('Power Form')",
                                    "err": {},
                                    "uuid": "0a007213-c341-450a-89c6-7de3607bc51d",
                                    "parentUUID": "8d290e4a-482b-49eb-bdc8-b4fa5517a810",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets process tasks for given processSid that match taskType filters",
                                    "fullTitle": "Process route handler tests process tasks gets process tasks for given processSid that match taskType filters",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nconst emailMonProcessSid = '8cd0fdcd-3e88-4b5a-b8b2-9ddc4c3b2239'\nreq.params = {processSid: emailMonProcessSid}\nreq.query = {taskTypes: 'Form,Power Form,Developer Form'}\nawait handlers.getProcessTasks(req,mockRes);\nexpect(mockRes.statusCode).equal(200);\nconst processTasks = mockRes.body;\nexpect(processTasks.length).to.equal(2);\nexpect(processTasks[0].taskType.taskTypeName).to.equal('Power Form')\nexpect(processTasks[1].taskType.taskTypeName).to.equal('Power Form')",
                                    "err": {},
                                    "uuid": "79156f15-addf-45b6-8dbd-22df678eec15",
                                    "parentUUID": "8d290e4a-482b-49eb-bdc8-b4fa5517a810",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0a007213-c341-450a-89c6-7de3607bc51d",
                                "79156f15-addf-45b6-8dbd-22df678eec15"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "90182978-7c37-49c0-b88b-bdedc7db9316",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "4beb4844-644e-4e20-bcd5-602ccc70bdc6",
                    "title": "Report controller tests",
                    "fullFile": "/home/will/code/integrify/api-reports/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Report controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "275d7ead-5760-475a-bcbf-e53f5fdeb76f",
                            "parentUUID": "4beb4844-644e-4e20-bcd5-602ccc70bdc6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "79557907-d08f-47e7-b5a7-9b508270bae8",
                            "title": "process crud ",
                            "fullFile": "/home/will/code/integrify/api-reports/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a report",
                                    "fullTitle": "Report controller tests process crud  should create a report",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const reportJson = { name: \"test report\",\n                     categorySid: 'test-category-sid' };\nconst report = await reportController.createReport(tenant, reportJson);\nexpect(report.sid).to.exist\nreportSid = report.sid",
                                    "err": {},
                                    "uuid": "1da89563-3854-4985-ad5f-ecdf0cb5cc72",
                                    "parentUUID": "79557907-d08f-47e7-b5a7-9b508270bae8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should retrieve a report",
                                    "fullTitle": "Report controller tests process crud  should retrieve a report",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.sid).to.equal(reportSid)",
                                    "err": {},
                                    "uuid": "bac88c33-83ac-4eb5-8b64-a6b9d8ee9598",
                                    "parentUUID": "79557907-d08f-47e7-b5a7-9b508270bae8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should populate core-service expected default values",
                                    "fullTitle": "Report controller tests process crud  should populate core-service expected default values",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.limits.get('DateRange')).to.equal(30);\nexpect(report.limits.get('UserFilter')).to.equal('No');\nexpect(report.limits.get('PageSize')).to.equal(10);",
                                    "err": {},
                                    "uuid": "cbde4a81-7e38-4f96-a7c0-26bf812fc2e5",
                                    "parentUUID": "79557907-d08f-47e7-b5a7-9b508270bae8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a report",
                                    "fullTitle": "Report controller tests process crud  should update a report",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const columnMap = { \"column\" : {\n  \"@alias\" : \"Address Line 1\",\n  \"@sortable\" : \"No\",\n  \"mapping_val\" : \"Client|AddressLine1\",\n  \"mapping_text\" : \"Client - Address Line 1\"\n}}\nconst newFields = { \"columns\" : [ columnMap ]}\nconst updatedReport = await reportController.updateReport(tenant,reportSid,newFields)\nexpect(updatedReport).to.exist\nexpect(updatedReport.sid).to.equal(reportSid)\nexpect(updatedReport.modifiedDate).to.be.above(updatedReport.createdDate);\nexpect(updatedReport.columns.length).to.equal(1)",
                                    "err": {},
                                    "uuid": "3f167e33-20af-4e6d-a0ac-d43680fec20b",
                                    "parentUUID": "79557907-d08f-47e7-b5a7-9b508270bae8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "soft deletes a report",
                                    "fullTitle": "Report controller tests process crud  soft deletes a report",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.deletedDate).to.not.exist\nconst deleted = await reportController.deleteReport(tenant,reportSid);\nexpect(deleted).to.exist\nexpect(deleted.deletedDate).to.exist",
                                    "err": {},
                                    "uuid": "ef2a6f51-6323-47e8-86f8-9b87fb0f5cc9",
                                    "parentUUID": "79557907-d08f-47e7-b5a7-9b508270bae8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1da89563-3854-4985-ad5f-ecdf0cb5cc72",
                                "bac88c33-83ac-4eb5-8b64-a6b9d8ee9598",
                                "cbde4a81-7e38-4f96-a7c0-26bf812fc2e5",
                                "3f167e33-20af-4e6d-a0ac-d43680fec20b",
                                "ef2a6f51-6323-47e8-86f8-9b87fb0f5cc9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 71,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3ee07a32-4bf9-44df-b4e0-ef66121a92c1",
                    "title": "Report route handler tests",
                    "fullFile": "/home/will/code/integrify/api-reports/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Report route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "0f66183a-51a0-4fee-9c61-d5371b949373",
                            "parentUUID": "3ee07a32-4bf9-44df-b4e0-ef66121a92c1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fe3dbd53-872f-45b8-9d09-39e013c39d1a",
                            "title": "handler report crud ",
                            "fullFile": "/home/will/code/integrify/api-reports/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a report",
                                    "fullTitle": "Report route handler tests handler report crud  should create a report",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { name: \"handler test report\",\n             categorySid: 'test-category-sid' }\nconst response = await handlers.createReport(req,mockRes);\nconst report = response.body;\nexpect(report.sid).to.exist;\nreportSid = report.sid;",
                                    "err": {},
                                    "uuid": "2dc2e753-3257-4706-9f62-0c2f362dbaa3",
                                    "parentUUID": "fe3dbd53-872f-45b8-9d09-39e013c39d1a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a report",
                                    "fullTitle": "Report route handler tests handler report crud  should get a report",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nconst response = await handlers.getReport(req,mockRes);\nconst report = response.body;\nexpect(report).to.exist\nexpect(report.sid).to.equal(reportSid)",
                                    "err": {},
                                    "uuid": "e38eeb2a-8fbc-41a7-ab64-91771dc01a0e",
                                    "parentUUID": "fe3dbd53-872f-45b8-9d09-39e013c39d1a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a report",
                                    "fullTitle": "Report route handler tests handler report crud  should update a report",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nreq.body = { Description: 'handler test description' }\nconst response = await handlers.updateReport(req,mockRes);\nconst updatedReport = response.body;\nexpect(updatedReport).to.exist\nexpect(updatedReport.sid).to.equal(reportSid)\nexpect(updatedReport.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "dd308237-c067-449d-8e4c-1c2a9026d64f",
                                    "parentUUID": "fe3dbd53-872f-45b8-9d09-39e013c39d1a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a report",
                                    "fullTitle": "Report route handler tests handler report crud  should delete a report",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nconst response = await handlers.deleteReport(req,mockRes);\nlet deletedReport = response.body;\nexpect(deletedReport).to.exist;\nexpect(deletedReport.deletedDate).to.exist;",
                                    "err": {},
                                    "uuid": "a851278b-8a9d-4e51-baf3-42b1c75adc9e",
                                    "parentUUID": "fe3dbd53-872f-45b8-9d09-39e013c39d1a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2dc2e753-3257-4706-9f62-0c2f362dbaa3",
                                "e38eeb2a-8fbc-41a7-ab64-91771dc01a0e",
                                "dd308237-c067-449d-8e4c-1c2a9026d64f",
                                "a851278b-8a9d-4e51-baf3-42b1c75adc9e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "28b746fc-8b38-4cf1-8730-c62abc72d580",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "448cc054-71f7-4947-b84a-11227571ff2a",
                    "title": "Settings API Holiday Controller tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/db/holidays.controller.test.js",
                    "file": "/test/integration/db/holidays.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Holiday Controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 9,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenantId: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}\ntenantId = config.tenantOne.tenantId;\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "6860c8a2-1713-4489-b80c-60e53f9a456b",
                            "parentUUID": "448cc054-71f7-4947-b84a-11227571ff2a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should insert, select, delete and list holidays",
                            "fullTitle": "Settings API Holiday Controller tests should insert, select, delete and list holidays",
                            "timedOut": false,
                            "duration": 339,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let holiday = {\n  holidayName: \"O Day\",\n  startDate: \"2019-10-10T00:00:00.000Z\",\n  endDate: \"2019-10-11T00:00:00.000Z\",\n  country: \"USA\"\n};\nlet holidayController = new HolidayController(oauth);\n// insert\nconst inserted = await holidayController.insertHoliday(holiday);\nvalidateHoliday(holiday, inserted);\n// select\nlet gotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n// update\nholiday.holidayGuid = inserted.holidayGuid;\nholiday.holidayName = \"Easter Monday\";\nholiday.country = \"Papa New Guinea\";\nawait holidayController.updateHoliday(holiday);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n//list\nconst holidays = await holidayController.listHolidays();\nexpect(holidays.length).to.be.gt(0);\nholiday = holidays[0];\nexpect(holiday.holidayGuid).to.exist;\nexpect(holiday.holidayName).to.exist;\nexpect(holiday.startDate).to.exist;\nexpect(holiday.endDate).to.exist;\nexpect(holiday.country).to.exist;\n// delete\nconst holidayGuids = [inserted.holidayGuid];\nawait holidayController.deleteHolidays(holidayGuids);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nexpect(gotOne).to.not.exist;",
                            "err": {},
                            "uuid": "50d7f64b-c30e-43d2-bee7-20a8a8ce46e1",
                            "parentUUID": "448cc054-71f7-4947-b84a-11227571ff2a",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "50d7f64b-c30e-43d2-bee7-20a8a8ce46e1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 339,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5fc3c5df-7c5f-4a44-b286-1e9708eee9eb",
                    "title": "Settings API Language Controller test",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/db/languages.controller.test.js",
                    "file": "/test/integration/db/languages.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Language Controller test \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}",
                            "err": {},
                            "uuid": "a692621f-aa92-4522-9ffb-b4911a0808e6",
                            "parentUUID": "5fc3c5df-7c5f-4a44-b286-1e9708eee9eb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of languages",
                            "fullTitle": "Settings API Language Controller test should get a list of languages",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const languageCtrl = new LanguageController(oauth);\nconst languages = await languageCtrl.listLanguages();\nexpect(languages.length).to.be.gt(0);\nconst language = languages[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "831d457e-0fa1-4a0a-8d45-9beb35cafcc2",
                            "parentUUID": "5fc3c5df-7c5f-4a44-b286-1e9708eee9eb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "831d457e-0fa1-4a0a-8d45-9beb35cafcc2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8db2824e-894f-4f64-b4ef-a3e6f62177d4",
                    "title": "Settings API System Setting Controller Tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                    "file": "/test/integration/db/systemsetting.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API System Setting Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} \nthis.timeout(105000);",
                            "err": {},
                            "uuid": "e51b5378-b436-4b3b-bd85-48a03c0382b8",
                            "parentUUID": "8db2824e-894f-4f64-b4ef-a3e6f62177d4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e3f86f1f-5313-442d-a635-06f23c2b17fa",
                            "title": "Model Tests",
                            "fullFile": "/home/will/code/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a system setting model",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should get a system setting model",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nexpect(SystemSettingsModel).to.exist;",
                                    "err": {},
                                    "uuid": "d387b724-8c19-40c3-a8e6-fe421aaed14a",
                                    "parentUUID": "e3f86f1f-5313-442d-a635-06f23c2b17fa",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should return system settings",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nlet results = await SystemSettingsModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "e55f9ed5-1716-4246-82e2-efd04b943783",
                                    "parentUUID": "e3f86f1f-5313-442d-a635-06f23c2b17fa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d387b724-8c19-40c3-a8e6-fe421aaed14a",
                                "e55f9ed5-1716-4246-82e2-efd04b943783"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d279535f-d492-4f6f-adce-03492b0e26f5",
                            "title": "Controller Tests",
                            "fullFile": "/home/will/code/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list system settings",
                                    "timedOut": false,
                                    "duration": 38,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listSystemSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\nexpect(systemSettings[0].masterSettings.settingsGuid).to.exist;",
                                    "err": {},
                                    "uuid": "47d4b829-0c23-48be-8b49-5655b1f4727f",
                                    "parentUUID": "d279535f-d492-4f6f-adce-03492b0e26f5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list password settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list password settings",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\n// only system settings listed should be the ones related to passwords   \nexpect(systemSettings.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(systemSettings.length);",
                                    "err": {},
                                    "uuid": "60dd2aa6-8c1c-4d9d-94ad-c6a9c8f2c8da",
                                    "parentUUID": "d279535f-d492-4f6f-adce-03492b0e26f5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should update system settings",
                                    "timedOut": false,
                                    "duration": 150,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let pwdSettings = [{\n  \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION\",\n  \"settingsValue\":\"14\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n    \"settingsKey\":\"PWD_EXPIRATION\",\n    \"keyDefault\":\"7\",\n    \"keyOptions\":null,\n    \"description\":\"Length in days before a user is prompted to change his or her password.\"\n  }\n}, {\n  \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n  \"settingsValue\":\"1\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n    \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n    \"keyDefault\":\"0\",\n    \"keyOptions\":\"1|0\",\n    \"description\":\"Flag to turn enforcement of password expiration.  1 = On, 0 = Off\"\n  }\n}]\n// save the changes above, query to verify changes, set them back to the defaults\nlet systemSettingController = new SystemSettingController(session)\nawait systemSettingController.updateSystemSettings(pwdSettings)\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('14')\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1')\npwdSettings.forEach(setting => {\n  setting.settingsValue = setting.masterSettings.keyDefault\n})\nawait systemSettingController.updateSystemSettings(pwdSettings)\nsystemSettings = await systemSettingController.listPasswordSettings();\nlet pwdExpiration = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION')\nlet pwdExpirationActive = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE')\nexpect(pwdExpiration.settingsValue).to.equal(pwdExpiration.masterSettings.keyDefault)\nexpect(pwdExpirationActive.settingsValue).to.equal(pwdExpirationActive.masterSettings.keyDefault)",
                                    "err": {},
                                    "uuid": "b36468cb-dda4-462a-ac7a-6ef17dd90ee0",
                                    "parentUUID": "d279535f-d492-4f6f-adce-03492b0e26f5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "47d4b829-0c23-48be-8b49-5655b1f4727f",
                                "60dd2aa6-8c1c-4d9d-94ad-c6a9c8f2c8da",
                                "b36468cb-dda4-462a-ac7a-6ef17dd90ee0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 207,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9f88abfb-c890-4695-a67c-7c15ef913f99",
                    "title": "Biztime API Tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/biztimes.test.js",
                    "file": "/test/integration/functions/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Biztime API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nmockRes = await mocks.mockResponse();\nreq = await mocks.req(jwt);",
                            "err": {},
                            "uuid": "cd54de66-d67c-478d-83d4-044c3d823b65",
                            "parentUUID": "9f88abfb-c890-4695-a67c-7c15ef913f99",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of biztimes",
                            "fullTitle": "Biztime API Tests should return a list of biztimes",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.listBiztimes(req, mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body.length).to.be.gt(0);\nvalidateBiztime(mockRes.body[0]);",
                            "err": {},
                            "uuid": "88c2926b-0f05-47a3-8ccd-64ca386d2cae",
                            "parentUUID": "9f88abfb-c890-4695-a67c-7c15ef913f99",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert a biztime",
                            "fullTitle": "Biztime API Tests should insert a biztime",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.insertBiztime(\n  {...req, body: {...biztimeToInsert}},\n  mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\ninsertedBiztime = mockRes.body;\nvalidateBiztime(biztimeToInsert, insertedBiztime);",
                            "err": {},
                            "uuid": "58e97cbb-1e63-44ed-82ff-97fee95518cd",
                            "parentUUID": "9f88abfb-c890-4695-a67c-7c15ef913f99",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update a biztime",
                            "fullTitle": "Biztime API Tests should update a biztime",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.updateBiztime(\n  {\n    ...req,\n    params: {bizTimeGuid: insertedBiztime.bizTimeGuid},\n    body: {...biztimeToUpdate}},\n  mockRes\n  );\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nvalidateBiztime(biztimeToUpdate, mockRes.body);",
                            "err": {},
                            "uuid": "9759ac39-f479-46f9-8522-ace2f0bb8500",
                            "parentUUID": "9f88abfb-c890-4695-a67c-7c15ef913f99",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "88c2926b-0f05-47a3-8ccd-64ca386d2cae",
                        "58e97cbb-1e63-44ed-82ff-97fee95518cd",
                        "9759ac39-f479-46f9-8522-ace2f0bb8500"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 36,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5246c068-7629-4a81-b576-51ad2c678840",
                    "title": "Settings API Holiday Tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/holidays.test.js",
                    "file": "/test/integration/functions/holidays.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "insert, list, get, delete holiday",
                            "fullTitle": "Settings API Holiday Tests insert, list, get, delete holiday",
                            "timedOut": false,
                            "duration": 28,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nlet listHolidaysEvent = await mocks.listHolidaysEvent()\nlet insertHolidayEvent = await mocks.insertHolidayEvent();\nlet getHolidayEvent = await mocks.getHolidayEvent();\n\n// insert\nawait holidays.insert(insertHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nvalidateHoliday(insertHolidayEvent.body, inserted);\n//list\nawait holidays.list(listHolidaysEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nexpect(mockRes.body.length).to.be.greaterThan(0);\nexpectDefinedHoliday(mockRes.body[0]);\n// get\ngetHolidayEvent.params.holidayGuid = inserted.holidayGuid;\nawait holidays.get(getHolidayEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst got = mockRes.body;\nvalidateHoliday(inserted, got);\n// delete\nlet deleteEvent = Object.assign({}, listHolidaysEvent);\ndeleteEvent.body = [inserted.holidayGuid];\nawait holidays.remove(deleteEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\ngetHolidayEvent.params = {\n  holidayGuid: inserted.holidayGuid\n};\nawait holidays.get(getHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(404);",
                            "err": {},
                            "uuid": "7fd327c7-d99f-4925-a2be-b20e54d0e7cd",
                            "parentUUID": "5246c068-7629-4a81-b576-51ad2c678840",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7fd327c7-d99f-4925-a2be-b20e54d0e7cd"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 28,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e9df100a-faa1-4c7d-bead-0de09cd85f57",
                    "title": "Settings API Languages Test",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/languages.test.js",
                    "file": "/test/integration/functions/languages.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of holidays",
                            "fullTitle": "Settings API Languages Test should get a list of holidays",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nconst listLanguagesEvent = await mocks.listLanguagesEvent();\nawait languages.list(listLanguagesEvent, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nexpect(mockRes.body.length).to.be.gt(0);\nconst language = mockRes.body[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "847d2c6a-a00b-4651-b7ac-8eb627c12870",
                            "parentUUID": "e9df100a-faa1-4c7d-bead-0de09cd85f57",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "847d2c6a-a00b-4651-b7ac-8eb627c12870"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "644b368c-df77-420a-8340-98904c43003e",
                    "title": "Settings API Password Settings Tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/passwordSettings.test.js",
                    "file": "/test/integration/functions/passwordSettings.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the password settings",
                            "fullTitle": "Settings API Password Settings Tests lists the password settings",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait passwordSettings.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\n// only system settings listed should be the ones related to passwords\nexpect(result.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(result.length);",
                            "err": {},
                            "uuid": "ad526a52-0f39-4b9c-a177-ccb2405966e2",
                            "parentUUID": "644b368c-df77-420a-8340-98904c43003e",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ad526a52-0f39-4b9c-a177-ccb2405966e2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 14,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "98e3efe1-39f7-4960-8cd5-f292611c5686",
                    "title": "Settings API System Config Tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/systemConfig.test.js",
                    "file": "/test/integration/functions/systemConfig.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the system config settings",
                            "fullTitle": "Settings API System Config Tests lists the system config settings",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait systemConfig.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(40);\nexpect(result[0].settingsGuid).to.exist\nexpect(result[0].settingsKey).to.exist\nexpect(result[0].settingsValue).to.exist\nexpect(result[0].masterSettings.description).to.exist\nexpect(result[0].masterSettings.keyDefault).to.exist\nexpect(result[0].masterSettings.keyOptions).to.exist",
                            "err": {},
                            "uuid": "a7744f5b-c3fa-4435-a779-715ba29d4bb9",
                            "parentUUID": "98e3efe1-39f7-4960-8cd5-f292611c5686",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates system config settings",
                            "fullTitle": "Settings API System Config Tests updates system config settings",
                            "timedOut": false,
                            "duration": 148,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"true\"\n}]\nawait systemConfig.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nlet result = mockRes.body\nexpect(result).to.equal('1');\n// verify that change was made\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nlet allowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('true')\n// revert the change\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"false\"\n}]\nawait systemConfig.update(mockReq, mockRes);\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nallowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('false')",
                            "err": {},
                            "uuid": "b82e68f4-3802-40ef-80c8-a42358407b1a",
                            "parentUUID": "98e3efe1-39f7-4960-8cd5-f292611c5686",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a7744f5b-c3fa-4435-a779-715ba29d4bb9",
                        "b82e68f4-3802-40ef-80c8-a42358407b1a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 167,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a0a73d26-a30f-4eb5-a6b1-66985f525713",
                    "title": "Settings API Utilities Tests",
                    "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/utilities.test.js",
                    "file": "/test/integration/functions/utilities.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "10c972d8-7af7-46e0-aedd-d2b24146b934",
                            "title": "locales",
                            "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "lists locales",
                                    "fullTitle": "Settings API Utilities Tests locales lists locales",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\nawait utils.listLocales(mocks.req(), mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "108f8428-4899-4b92-a0a0-ea0fb6bd6a8f",
                                    "parentUUID": "10c972d8-7af7-46e0-aedd-d2b24146b934",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "108f8428-4899-4b92-a0a0-ea0fb6bd6a8f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1e02ed2c-808f-44b3-ab44-9a01f59af5aa",
                            "title": "timezones",
                            "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list timezones",
                                    "fullTitle": "Settings API Utilities Tests timezones should list timezones",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listTimezones(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "2728ed67-b788-46e5-928a-be472e4e20dd",
                                    "parentUUID": "1e02ed2c-808f-44b3-ab44-9a01f59af5aa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2728ed67-b788-46e5-928a-be472e4e20dd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3947cc92-a959-423d-993b-4e1540bda57b",
                            "title": "running versions",
                            "fullFile": "/home/will/code/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list running versions",
                                    "fullTitle": "Settings API Utilities Tests running versions should list running versions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listRunningVersions(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "0f2115df-ec4a-47a7-b5b8-9450002d1470",
                                    "parentUUID": "3947cc92-a959-423d-993b-4e1540bda57b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0f2115df-ec4a-47a7-b5b8-9450002d1470"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "70271bd2-0148-444a-8b35-c10db09b68ff",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "994b1619-1419-4e86-989d-f463b4e27306",
                    "title": "Task Dispatcher API Controller Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                    "file": "/test/integration/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "fullTitle": "Task Dispatcher API Controller Tests \"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}",
                            "err": {},
                            "uuid": "20e67ef2-b743-47b2-b819-67a697b2f856",
                            "parentUUID": "994b1619-1419-4e86-989d-f463b4e27306",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5b9db9f4-c221-4378-afdb-b06950f48b43",
                            "title": "ProcessTaskController",
                            "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get process tasks",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskController should get process tasks",
                                    "timedOut": false,
                                    "duration": 217,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskController = new controllers.ProcessTaskController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nlet processTasks = await processTaskController.getProcessTasks(updateMyProfileProcessSid)\nexpect(processTasks).to.exist;\nexpect(processTasks.length).to.be.gt(0);\nexpect(processTasks[0].processTaskGuid).to.exist;",
                                    "err": {},
                                    "uuid": "877539d8-1438-4788-b40e-ab49c92ea053",
                                    "parentUUID": "5b9db9f4-c221-4378-afdb-b06950f48b43",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "877539d8-1438-4788-b40e-ab49c92ea053"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 217,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "841976cf-e88b-41d3-990c-ff970dedc86e",
                            "title": "ProcessTaskAttributeController",
                            "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task attributes",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should list process task attributes",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet includeExt = false\nlet processTaskAttributes = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributes[6].extendedAtt).to.not.exist;\nincludeExt = true\nlet processTaskAttributesIncExt = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributesIncExt).to.exist;\nexpect(processTaskAttributesIncExt.length).to.be.gt(0);\nexpect(processTaskAttributesIncExt[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributesIncExt[6].extendedAtt.extAttribute).to.exist;",
                                    "err": {},
                                    "uuid": "fa0415b1-a491-4019-9e4c-ed19dbe53d6e",
                                    "parentUUID": "841976cf-e88b-41d3-990c-ff970dedc86e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get and update a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get and update a process task attribute",
                                    "timedOut": false,
                                    "duration": 74,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeGuid = '7cece0ab-bda6-4b13-a8fb-3f5c467371e6'  \nlet processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nlet processTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\n// console.log(processTaskAttribute)\nexpect(processTaskAttribute.attributeValue).to.equal('0')\nlet numberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: 'TEST'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('TEST')\n// must set it back to original value so that we don't break anything\nnumberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: '0'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('0')",
                                    "err": {},
                                    "uuid": "714092f7-e95e-46a9-8974-c26dca3793c1",
                                    "parentUUID": "841976cf-e88b-41d3-990c-ff970dedc86e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should insert a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should insert a process task attribute",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// pick any process task and insert a process task attribute\n// then delete it\nconst processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// give \"Update my profile - Start task\" a test process task att\nconst processTaskGuid = '27cb04ea-b19d-4327-8b3a-e82cc538d44d'\nconst attributeKey = 'TEST_KEY'\nconst attributeValue = 'TEST_VALUE'\nconst ordinal = 1\nconst processTaskAttribute = await processTaskAttributeController.insert({\n  processTaskGuid,\n  attributeKey,\n  attributeValue,\n  ordinal\n})\nexpect(processTaskAttribute.processTaskAttributeGuid).to.be.a.uuid()\nexpect(processTaskAttribute.processTaskGuid).to.equal(processTaskGuid)\nexpect(processTaskAttribute.attributeKey).to.equal(attributeKey)\nexpect(processTaskAttribute.attributeValue).to.equal(attributeValue)\nexpect(processTaskAttribute.ordinal).to.equal(ordinal)\n// cleanup\n// const numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nconst numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nexpect(numberOfAffectedRows).to.equal(1)",
                                    "err": {},
                                    "uuid": "7ae627df-d7f8-4714-8d3d-e801cca6b6d2",
                                    "parentUUID": "841976cf-e88b-41d3-990c-ff970dedc86e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get the process task attribute max ordinal value for a process task",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get the process task attribute max ordinal value for a process task",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// \"Update my profile - Start task\" a test process task att\nlet processTaskGuid = \"27cb04ea-b19d-4327-8b3a-e82cc538d44d\";\n// that process task has no atts so its max ordinal should be null\nlet maxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(null);\n// \"Update my profile - User Profile\" task does have atts.  seed db goes up to 12\nprocessTaskGuid = \"28d88aa5-fc4c-4e16-b32d-2964c738d49b\";\nmaxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(12);",
                                    "err": {},
                                    "uuid": "c32695fc-0201-4fa5-9ac3-b9063311e195",
                                    "parentUUID": "841976cf-e88b-41d3-990c-ff970dedc86e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fa0415b1-a491-4019-9e4c-ed19dbe53d6e",
                                "714092f7-e95e-46a9-8974-c26dca3793c1",
                                "7ae627df-d7f8-4714-8d3d-e801cca6b6d2",
                                "c32695fc-0201-4fa5-9ac3-b9063311e195"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 139,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "54ebe0db-e95b-429a-8d42-f23802f45937",
                            "title": "ProcessTaskMappingController",
                            "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task mappings",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskMappingController should list process task mappings",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskMappingController = new controllers.ProcessTaskMappingController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet processTaskAttributes = await processTaskMappingController.list(profileFormProcessTaskSid)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[0].processTaskMappingGuid).to.exist;",
                                    "err": {},
                                    "uuid": "d7e24302-7965-4aec-abdf-7c617bba4135",
                                    "parentUUID": "54ebe0db-e95b-429a-8d42-f23802f45937",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d7e24302-7965-4aec-abdf-7c617bba4135"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "35646d17-e15e-42b6-9718-418a032f4ed1",
                            "title": "ProcessController",
                            "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should update a process's modified by and date fields",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessController should update a process's modified by and date fields",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processController = new controllers.ProcessController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nconst systemUserGuid = 'D8C469C3-F781-4179-A09C-6D148885FB30'\nlet process = await processController.get(updateMyProfileProcessSid)\nexpect(process).to.exist;\nexpect(process.processGuid.toLowerCase()).to.equal(updateMyProfileProcessSid);\nconst oldModifiedDate = process.modifiedDate\nconst numberOfAffectedRows = await processController.updateModifiedByAndDate(updateMyProfileProcessSid)\nexpect(numberOfAffectedRows).to.equal(1)\nprocess = await processController.get(updateMyProfileProcessSid) \nexpect(process.modifiedDate).to.be.greaterThan(oldModifiedDate)\n// for some reason when executed in a test the db record's modifiedBy is set to \n// the systemUserGuid instead of the contact sid specified in the session (4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF)\nexpect(process.modifiedBy).to.equal(systemUserGuid)",
                                    "err": {},
                                    "uuid": "d2f3f059-d2a4-43e2-83ba-215fd409d3e2",
                                    "parentUUID": "35646d17-e15e-42b6-9718-418a032f4ed1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d2f3f059-d2a4-43e2-83ba-215fd409d3e2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "eb1b8a00-ae80-41ff-a531-cceeccafb4fd",
                    "title": "Task Dispatcher API Model Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/model.test.js",
                    "file": "/test/integration/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1b6123f5-0b34-4186-8543-ea694b3897f4",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/db/model.test.js",
                            "file": "/test/integration/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Task Dispatcher API Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "f5bfd27a-57cf-473d-9eea-aa8089cd9a5b",
                                    "parentUUID": "1b6123f5-0b34-4186-8543-ea694b3897f4",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = await sqldb.models.bindModel(\n  config.tenantOne.tenantId,\n  vwProcessTasksModels.vwProcessTasks\n);\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "cbf926d1-1b39-4557-8322-bf7f5e9dde2f",
                                    "parentUUID": "1b6123f5-0b34-4186-8543-ea694b3897f4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = (await models.getModels(config.tenantOne.tenantId))\n  .vwProcessTasks;\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "7a6222b5-1156-4349-be5a-58908f89aa26",
                                    "parentUUID": "1b6123f5-0b34-4186-8543-ea694b3897f4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tentantModels[config.tenantOne.tenantId]).to.exist;\nlet results = await models._tentantModels[\n  config.tenantOne.tenantId\n].vwProcessTasks.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "e1f92783-3c06-4e66-8050-fb319929cbca",
                                    "parentUUID": "1b6123f5-0b34-4186-8543-ea694b3897f4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cbf926d1-1b39-4557-8322-bf7f5e9dde2f",
                                "7a6222b5-1156-4349-be5a-58908f89aa26",
                                "e1f92783-3c06-4e66-8050-fb319929cbca"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 132,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                    "title": "Task Dispatcher API Excel Batch Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/functions/excelBatch.test.js",
                    "file": "/test/integration/functions/excelBatch.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Excel Batch Tests\"",
                            "fullTitle": "Task Dispatcher API Excel Batch Tests \"before all\" hook in \"Task Dispatcher API Excel Batch Tests\"",
                            "timedOut": false,
                            "duration": 25,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n// upload sample excel file to temp folder\nconst testConfig = await config.getConfig();\nconst tenant = testConfig.test.tenantOne.tenantId;\nconst baseUrl = testConfig.portalUrl;\nconst token = await testLib.getAuthToken();\nconst res = await chai.request(baseUrl)\n  .post(`/api/files/temp/${tenant}/upload`)\n  .set('Authorization', 'Bearer ' + token)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .attach('files', './test/files/student_records.xlsx', 'student_records.xlsx');\n// add sampleFileSid to excelBatchTaskSettings\nexcelBatchTaskSettings.push({\"attributeKey\":\"SampleSpreadsheetSID\",\"attributeValue\": res.body[0].sid});",
                            "err": {},
                            "uuid": "4ffd1532-71e1-4162-86a3-cef4df6002f8",
                            "parentUUID": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should post general settings",
                            "fullTitle": "Task Dispatcher API Excel Batch Tests should post general settings",
                            "timedOut": false,
                            "duration": 271,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = {processTaskSid, op: 'script_postgeneralsettings', tasktype};\nmockReq.body = excelBatchTaskSettings;\nawait functions.saveConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.eq(200);",
                            "err": {},
                            "uuid": "8017ffe1-1d78-43c4-90a8-471136de0f4b",
                            "parentUUID": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get general settings",
                            "fullTitle": "Task Dispatcher API Excel Batch Tests should get general settings",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = {processTaskSid, op: 'script_getgeneralsettings', tasktype};\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nconst data = mockRes.body?.Data;\nexpect(data).to.exist;\nexpect(data.ProcessSID).to.eq(childProcessSid);\nexcelBatchTaskSettings.forEach(setting => {\n  expect(data[setting.attributeKey]).to.eq(setting.attributeValue);\n})",
                            "err": {},
                            "uuid": "67b8ad2e-9d86-4768-a256-559e1b9c98ed",
                            "parentUUID": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save excel mappings",
                            "fullTitle": "Task Dispatcher API Excel Batch Tests should save excel mappings",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = {processTaskSid, op: 'script_savemappings', tasktype};\nmockReq.body = excelBatchTaskMappings;\nawait functions.saveConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.eq(200);",
                            "err": {},
                            "uuid": "c17f78c4-8ae0-4d58-bbc6-737bb26f7748",
                            "parentUUID": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should load excel mappings",
                            "fullTitle": "Task Dispatcher API Excel Batch Tests should load excel mappings",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = {processTaskSid, op: 'script_loadexcelmappings', tasktype};\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nconst data = mockRes.body?.Data;\nexpect(data).to.exist;\nexpect(data.length).to.be.gt(0);\nexcelBatchTaskMappings.forEach((mapping, idx) => {\n  const coordinate = `${data[idx][3]}|${data[idx][4]}|${data[idx][5]}`;\n  expect(mapping[0]).to.eq(coordinate);\n});",
                            "err": {},
                            "uuid": "96172a73-a9b8-4848-a45e-492e535efb5b",
                            "parentUUID": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should load excel sheets",
                            "fullTitle": "Task Dispatcher API Excel Batch Tests should load excel sheets",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = {processTaskSid, op: 'script_loadsheets', tasktype};\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.eq(200);",
                            "err": {},
                            "uuid": "f84b9537-8c2c-4e42-891b-5c43d9b0070b",
                            "parentUUID": "f5c8cd5c-0256-4892-8713-3db2a114da7d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "8017ffe1-1d78-43c4-90a8-471136de0f4b",
                        "67b8ad2e-9d86-4768-a256-559e1b9c98ed",
                        "c17f78c4-8ae0-4d58-bbc6-737bb26f7748",
                        "96172a73-a9b8-4848-a45e-492e535efb5b",
                        "f84b9537-8c2c-4e42-891b-5c43d9b0070b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 343,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "925a36c7-80d0-421a-bae2-fd0e4dbdbbe1",
                    "title": "Task Dispatcher API Excel Import Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/functions/excelImport.test.js",
                    "file": "/test/integration/functions/excelImport.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Excel Import Tests\"",
                            "fullTitle": "Task Dispatcher API Excel Import Tests \"before all\" hook in \"Task Dispatcher API Excel Import Tests\"",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n// upload sample excel file to temp folder\nconst testConfig = await config.getConfig();\ntenant = testConfig.test.tenantOne.tenantId;\nconst baseUrl = testConfig.portalUrl;\nconst token = await testLib.getAuthToken();\nconst res = await chai.request(baseUrl)\n  .post(`/api/files/temp/${tenant}/upload`)\n  .set('Authorization', 'Bearer ' + token)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .attach('files', './test/files/student_records.xlsx', 'student_records.xlsx');\nattachmentSid = res.body[0].sid;",
                            "err": {},
                            "uuid": "4b245b22-3f32-4904-9551-993ec6c24b2f",
                            "parentUUID": "925a36c7-80d0-421a-bae2-fd0e4dbdbbe1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "saves Excel Import config options",
                            "fullTitle": "Task Dispatcher API Excel Import Tests saves Excel Import config options",
                            "timedOut": false,
                            "duration": 54,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid,\n                   op: \"script_savesettings\",\n                   tasktype }\nmockReq.body = { AttachmentSID: attachmentSid,\n                 tenant: tenant,\n                 FormSID: formSid }\nconst result = await functions.saveConfig(mockReq, mockRes);",
                            "err": {},
                            "uuid": "10e46a91-64b1-4c3b-b94b-686ba19d15a0",
                            "parentUUID": "925a36c7-80d0-421a-bae2-fd0e4dbdbbe1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists Excel Import rule options",
                            "fullTitle": "Task Dispatcher API Excel Import Tests lists Excel Import rule options",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"listRuleOptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.eql([{ Value: \"1483989525681\", Label: \"First Name\", Type: \"ShortText\"}])",
                            "err": {},
                            "uuid": "d2a997ce-e5d8-41e9-9648-5677a9dcaa63",
                            "parentUUID": "925a36c7-80d0-421a-bae2-fd0e4dbdbbe1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "loads spreadsheet file info and form config",
                            "fullTitle": "Task Dispatcher API Excel Import Tests loads spreadsheet file info and form config",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_loadconfig\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.Data).to.eql({\n  SelectedForm: 'Contact Profile Update Form',\n  FormSID: formSid,\n  AttachmentName: 'student_records.xlsx',\n  AttachmentSID: attachmentSid });",
                            "err": {},
                            "uuid": "da3eca77-fb90-4b54-99f7-00fbfae2b17d",
                            "parentUUID": "925a36c7-80d0-421a-bae2-fd0e4dbdbbe1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "loads mappings",
                            "fullTitle": "Task Dispatcher API Excel Import Tests loads mappings",
                            "timedOut": false,
                            "duration": 279,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_loadpfexcelmappings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nconst mappedField = result.Data[0];\nexpect(mappedField).to.eql({\n  Coordinates: 'Sheet1|a1|a1',\n  ordinal: 2,\n  'Question ID': '1483989525681',\n  QuestionLabel: 'First Name',\n  QuestionType: 'ShortText'\n});",
                            "err": {},
                            "uuid": "35007c3e-9bae-46b9-8af9-2ffbed241e78",
                            "parentUUID": "925a36c7-80d0-421a-bae2-fd0e4dbdbbe1",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "10e46a91-64b1-4c3b-b94b-686ba19d15a0",
                        "d2a997ce-e5d8-41e9-9648-5677a9dcaa63",
                        "da3eca77-fb90-4b54-99f7-00fbfae2b17d",
                        "35007c3e-9bae-46b9-8af9-2ffbed241e78"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 358,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "52875031-d0bf-4949-9ad3-97955150167d",
                    "title": "Task Dispatcher API FTP Push Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/functions/ftpPush.test.js",
                    "file": "/test/integration/functions/ftpPush.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task file settings",
                            "fullTitle": "Task Dispatcher API FTP Push Tests gets task file settings",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfilesettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst data = mockRes.body.Data;\nexpect(data).to.include({PickDirectory: \"No\"});\nexpect(data).to.include({FileToFTP: \"4a6c9613-bac9-4448-93c9-d9342bf5d897;96865aec-667c-4db5-8116-f1d1bae512ab\"});\nexpect(data).to.include({FTPSite: \"ftp\"});\nexpect(data).to.include({FTPUsername: \"ftp_user\"});\nexpect(data).to.include({FTPPassword: \"ftp_pass\"});",
                            "err": {},
                            "uuid": "e4082e3f-e745-4d90-833e-8a542c3356e0",
                            "parentUUID": "52875031-d0bf-4949-9ad3-97955150167d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets task file options",
                            "fullTitle": "Task Dispatcher API FTP Push Tests gets task file options",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfileoptions\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nconst data = mockRes.body.Data[0];\nexpect(data).to.include('4a6c9613-bac9-4448-93c9-d9342bf5d897;96865aec-667c-4db5-8116-f1d1bae512ab');\nexpect(data).to.include('Form : File Attachment:  (Task Output)'),\nexpect(data).to.include('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "7d2edb0f-d623-4a69-b707-964c38d46153",
                            "parentUUID": "52875031-d0bf-4949-9ad3-97955150167d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e4082e3f-e745-4d90-833e-8a542c3356e0",
                        "7d2edb0f-d623-4a69-b707-964c38d46153"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 15,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                    "title": "Task Dispatcher API PDF Generator Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/functions/pdfGenerator.test.js",
                    "file": "/test/integration/functions/pdfGenerator.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Task Dispatcher API PDF Generator Tests\"",
                            "fullTitle": "Task Dispatcher API PDF Generator Tests \"before each\" hook in \"Task Dispatcher API PDF Generator Tests\"",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockReq = await mocks.req()\nmockRes = await mocks.mockResponse()\nawait uploadTestFile();",
                            "err": {},
                            "uuid": "714c4bb1-9bcd-4492-bcee-d99e52ca54e6",
                            "parentUUID": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "Get GeneralSettings",
                            "fullTitle": "Task Dispatcher API PDF Generator Tests Get GeneralSettings",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockReq.params = { processTaskSid, op: \"script_getgeneralsettings\", tasktype }\n\nsetTimeout(async () => {\n  await functions.getConfig(mockReq, mockRes);\n  expect(mockRes.statusCode).to.equal(200);\n  const result = mockRes.body; \n  \n  expect(result.Data).to.exist;\n  expect(result.Data[0][0]).to.equal('PDFTemplateSID');\n  expect(result.Data[1][0]).to.equal('PDFTemplate');\n  expect(result.Data[2][0]).to.equal('GeneratedFileName');\n  expect(result.Data[3][0]).to.equal('PDFSource');\n  expect(result.Data[4][0]).to.equal('PDFTask');\n  \n  expect(result.Data[0][1]).to.equal(fileAttachment.sid); // PDF Form SID\n  expect(result.Data[1][1]).to.equal(fileAttachment.originalFilename); // PDF Form Name\n  expect(result.Data[2][1]).to.exist; // Generated File Name\n  expect(result.Data[3][1]).to.equal('Template'); // Only Template is allowed atm\n  expect(result.Data[4][1]).to.be.null; // Only relevant when PDFSource is set to Task, which we're not doing\n}, 100);",
                            "err": {},
                            "uuid": "defffc4e-947f-4ec3-b66f-66149beda5ca",
                            "parentUUID": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "Get Loadparams (prefill mappings)",
                            "fullTitle": "Task Dispatcher API PDF Generator Tests Get Loadparams (prefill mappings)",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nsetTimeout(async () => {\n  await functions.getConfig(mockReq, mockRes)\n  expect(mockRes.statusCode).to.equal(200)    \n  const result = mockRes.body.Data.Items\n  \n  expect(result).to.exist\n  expect(result.length).to.be.greaterThan(0); // we will always have a row for mapping 'columnNames'\n  \n  expect(result[0][0]).to.equal('ParameterName');\n  expect(result[0][1]).to.equal('PrefillType');\n  expect(result[0][2]).to.equal('PrefillField');\n  expect(result[0][3]).to.equal('Description');\n  expect(result[0][4]).to.equal('TaskSID');\n}, 100);",
                            "err": {},
                            "uuid": "22fae6f3-95c7-4222-85d3-58d88198d84d",
                            "parentUUID": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "Get PDF Fields",
                            "fullTitle": "Task Dispatcher API PDF Generator Tests Get PDF Fields",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nsetTimeout(async () => {\n  await functions.getConfig(mockReq, mockRes)\n  expect(mockRes.statusCode).to.equal(200)\n  const result = mockRes.body\n  expect(result.Data).to.exist;\n  expect(Array.isArray(result.Data)).to.equal(true);\n}, 100);",
                            "err": {},
                            "uuid": "0e31b83a-9357-426b-8ce3-bf118bef038f",
                            "parentUUID": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "Save General Settings",
                            "fullTitle": "Task Dispatcher API PDF Generator Tests Save General Settings",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockReq.params = { processTaskSid, op: \"script_postgeneralsettings\", tasktype }\nmockReq.query = { processSid }\nmockReq.body = {\n  \"PDFTemplateSID\": fileAttachment.sid,\n  \"PDFTask\":null,\n  \"GeneratedFileName\":\"{FILE_NAME}.pdf\",\n  \"PDFSource\":\"Template\",\n  \"PDFTemplate\": fileAttachment.originalFilename\n}\nsetTimeout(async () => {\n  await functions.getConfig(mockReq, mockRes);\n  expect(mockRes.statusCode).to.equal(200);\n  const result = mockRes.body;\n  expect(result).to.equal(true);\n}, 100);",
                            "err": {},
                            "uuid": "a7c244a1-792f-4c99-865a-03dd41c399b8",
                            "parentUUID": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "Save Mappings",
                            "fullTitle": "Task Dispatcher API PDF Generator Tests Save Mappings",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockReq.params = { processTaskSid, op: \"script_postloadparams\", tasktype }\nmockReq.query = { processSid }\nmockReq.body = [\n  [\"ParameterName\",\"PrefillType\",\"PrefillField\",\"Description\",\"TaskSID\"],\n  [\"Name\",\"Task_Input\",\"1624564861260\",\"Data - Form - Name\",\"53819ebc-05f2-475d-909b-7bf9ceb4de28\"]\n];\nsetTimeout(async () => {\n  await functions.getConfig(mockReq, mockRes);\n  expect(mockRes.statusCode).to.equal(200);\n  const result = mockRes.body;\n  expect(result).to.equal(true);\n}, 100);",
                            "err": {},
                            "uuid": "f5216ca7-dff4-40a5-975f-97513c3a64a3",
                            "parentUUID": "333d02c0-bd11-4d40-84cb-6233c731e2cf",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "defffc4e-947f-4ec3-b66f-66149beda5ca",
                        "22fae6f3-95c7-4222-85d3-58d88198d84d",
                        "0e31b83a-9357-426b-8ce3-bf118bef038f",
                        "a7c244a1-792f-4c99-865a-03dd41c399b8",
                        "f5216ca7-dff4-40a5-975f-97513c3a64a3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                    "title": "Task Dispatcher API PDF Merge Tests",
                    "fullFile": "/home/will/code/integrify/api-task-dispatcher/test/integration/functions/pdfMerge.test.js",
                    "file": "/test/integration/functions/pdfMerge.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task settings",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets task settings",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_gettasksettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\n// vue output\n// expect(result.length).to.be.greaterThan(1);\n// expect(result[0].attributeKey).to.exist;\n// expect(result[0].attributeValue).to.exist;\n// expect(result.find(x => x.attributeKey == 'GeneratedFileName')).to.exist\n// expect(result.find(x => x.attributeKey == 'FirstPDF')).to.exist\n// angular output\nexpect(result.Data.GeneratedFileName).to.exist;\nexpect(result.Data.FirstPDF).to.exist;\nexpect(result.Data.SecondPDF).to.exist;",
                            "err": {},
                            "uuid": "ee5ef74f-0d23-4f5e-858f-7b5b6e290bd3",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF options",
                            "timedOut": false,
                            "duration": 12,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getpdfoptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.length).to.be.greaterThan(1);\n// vue output\n// expect(result[0].displayName).to.exist;\n// expect(result[0].processTaskGuid).to.exist;\n// expect(result[0].taskTypeGuid).to.exist;\n// angular output\nexpect(result[0].length).to.be.greaterThan(1);\nexpect(result[0][0]).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e;52407ad7-bd98-4023-8d88-91ef4464cd98');\nexpect(result[0][1]).to.equal('second PDF Merge Form : File Attachment (Task Output)');\nexpect(result[0][2]).to.equal('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "9e7dd497-f34b-416f-a208-1b9d02e6066b",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists PDF rule options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests lists PDF rule options",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"listRuleOptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.eql([{ Value: \"GeneratedPDF\", Label: \"Generated PDF\", Type: \"FileAttachment\"}])",
                            "err": {},
                            "uuid": "b093dcb2-ff98-4b7b-81c6-4a8f1e12aca4",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF fields",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF fields",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\n// vue output\n// expect(result.length).to.equal(1)\n// expect(result[0]).to.equal('FILE_NAME')\n// angular output\nexpect(result.Data.length).to.equal(1)\nexpect(result.Data[0][0]).to.equal('FILE_NAME')\nexpect(result.Data[0][1]).to.equal('FILE_NAME')",
                            "err": {},
                            "uuid": "3d6f249c-35df-473b-b553-ded76925d20b",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - data source - form mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - data source - form mapping",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_Input')\nexpect(result[0].PrefillField).to.equal('1601919933647')\nexpect(result[0].Description).to.equal('Data - second PDF Merge Form - Merged PDF Filename:')\nexpect(result[0].TaskSID).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e')",
                            "err": {},
                            "uuid": "6cd11d06-618c-4531-97e9-1f4b75cdf91a",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - fixed value mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - fixed value mapping",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_fixedValue = 'c2095ccf-896b-46a0-b5e9-8e5b7e288270' \nconst processTaskSid_fixedValue = '5f719bb1-11b8-43d9-a9fd-66e55306f4eb'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_fixedValue, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_fixedValue }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Fixed_Value')\nexpect(result[0].PrefillField).to.equal('fixValFileName')\nexpect(result[0].Description).to.equal('Fixed Value - fixValFileName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "f782c53a-e7db-4804-b70c-66a2ffa64e77",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - request id mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - request id mapping",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_requestId = 'f9f94cfe-d4b3-4d89-9695-1b32c6cee55d' \nconst processTaskSid_requestId = '9b4f1444-7bd7-481a-8008-69a0490da139'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_requestId, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_requestId }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Request')\nexpect(result[0].PrefillField).to.equal('ID')\nexpect(result[0].Description).to.equal('Request - ID')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "abf12a11-f23e-4bb2-a451-c084ff701b6a",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - client username mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - client username mapping",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_clientUsername = 'd1a7c44e-1e6e-4cdf-9d39-deac08a8b5cc' \nconst processTaskSid_clientUsername = 'a79cde56-9f3a-4be4-9824-dd634eddbff3'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_clientUsername, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_clientUsername }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Client')\nexpect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Client - UserName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "8474571c-5ca6-44b8-9896-014cc27cf075",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - status pdfmerge mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - status pdfmerge mapping",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_statusPdfMerge = 'ab3a8404-c208-4ca7-8ae6-637b16c23368' \nconst processTaskSid_statusPdfMerge = '7f4f1f42-228c-46dc-90a3-77fe15fe7412'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_statusPdfMerge, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_statusPdfMerge }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_State')\n// expect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Status - PDF Merge - ')\nexpect(result[0].TaskSID).to.equal('7f4f1f42-228c-46dc-90a3-77fe15fe7412')",
                            "err": {},
                            "uuid": "90c367dd-0b3a-48a0-b1de-cc95b532af33",
                            "parentUUID": "f226b0a4-d4bc-4c74-a658-7d53233f3723",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ee5ef74f-0d23-4f5e-858f-7b5b6e290bd3",
                        "9e7dd497-f34b-416f-a208-1b9d02e6066b",
                        "b093dcb2-ff98-4b7b-81c6-4a8f1e12aca4",
                        "3d6f249c-35df-473b-b553-ded76925d20b",
                        "6cd11d06-618c-4531-97e9-1f4b75cdf91a",
                        "f782c53a-e7db-4804-b70c-66a2ffa64e77",
                        "abf12a11-f23e-4bb2-a451-c084ff701b6a",
                        "8474571c-5ca6-44b8-9896-014cc27cf075",
                        "90c367dd-0b3a-48a0-b1de-cc95b532af33"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 65,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "53a7f320-1b74-4858-a8cb-cab1ca4699f3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "c5e80cb7-9d0e-4860-9902-069b78d2ad73",
                    "title": "Tenant API Sessions Tests",
                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/activeSessions.test.js",
                    "file": "/test/integration/activeSessions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \ntestConfig = await testLib.getTestConfig();\n    \ntenant = testConfig.tenantOne.tenantId;\ngroup = \"sessionServiceGroup\"\ntestEventType = 'extendSession'\nfullStreamName = tenant + '.stream.' + testStreamName\neventProcessedName = fullStreamName + \".\" + group + \".processed\";\neventHistoryName = fullStreamName + \".history\"",
                            "err": {},
                            "uuid": "f6a9331f-5f2b-4b70-9863-14ea19e00aa9",
                            "parentUUID": "c5e80cb7-9d0e-4860-9902-069b78d2ad73",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "ba2faa11-af15-4eac-933e-84bb2572d4f9",
                            "parentUUID": "c5e80cb7-9d0e-4860-9902-069b78d2ad73",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "00941505-aab0-4bf5-ab89-aa7e0ae6444d",
                            "title": "Active Sessions",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/activeSessions.test.js",
                            "file": "/test/integration/activeSessions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "b61999d4-51dd-4f88-8035-145c3f63cdcf",
                                    "title": "count active sessions",
                                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/activeSessions.test.js",
                                    "file": "/test/integration/activeSessions.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return activeSessions",
                                            "fullTitle": "Tenant API Sessions Tests Active Sessions count active sessions should return activeSessions",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions  = await getActiveSessions(tenant);\n//console.log(sessions)\nexpect(sessions).to.exist;\nexpect(sessions).to.have.property(\"activeSessions\")\nexpect(sessions).to.have.property(\"activeUsers\")",
                                            "err": {},
                                            "uuid": "084a2261-419a-42aa-9db0-365403126902",
                                            "parentUUID": "b61999d4-51dd-4f88-8035-145c3f63cdcf",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "084a2261-419a-42aa-9db0-365403126902"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5cdd6719-1d25-4ab6-8d49-b18d7613b674",
                    "title": "Tenant API licsense stats",
                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/licenseStats.test.js",
                    "file": "/test/integration/licenseStats.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API licsense stats \"before all\" hook",
                            "timedOut": false,
                            "duration": 3004,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \nconfig = await testLib.getTestConfig();\nlet sp = new stream.StreamPublisher('sessions',config.tenantOne.tenantId);\nawait sp.sendEvent(\"extendSession\", {\n    token: \"abcd234\",\n    user: {\n        sid:\"11111\", \n        user_name: \"iapprove\", \n        email: \"iapprove@integrify.com\", \n        name: \"System System\"\n    }\n})\n    \nawait delay(3000);",
                            "err": {},
                            "uuid": "f4f27a62-161e-459d-b792-205b1c34bfb0",
                            "parentUUID": "5cdd6719-1d25-4ab6-8d49-b18d7613b674",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API licsense stats \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "5a60c1ce-d18a-4181-810b-5c27617ae5ef",
                            "parentUUID": "5cdd6719-1d25-4ab6-8d49-b18d7613b674",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c92afa5f-cdaf-4552-a890-4010435ab162",
                            "title": "Post all stats",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/licenseStats.test.js",
                            "file": "/test/integration/licenseStats.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return ok",
                                    "fullTitle": "Tenant API licsense stats Post all stats should return ok",
                                    "timedOut": false,
                                    "duration": 694,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let result = await postAllStats();\nexpect(result).to.eq(\"ok\");",
                                    "err": {},
                                    "uuid": "281de511-2a7b-470c-8979-67f976a35de3",
                                    "parentUUID": "c92afa5f-cdaf-4552-a890-4010435ab162",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "281de511-2a7b-470c-8979-67f976a35de3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 694,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cb8dc5b6-cf34-4f90-a8c9-d7f8fb233ccb",
                    "title": "Tenant API Stream-Manager Tests",
                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/monitor.test.js",
                    "file": "/test/integration/monitor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9c062be2-e7b8-4539-80eb-c47a68c686c6",
                            "title": "listTenantStreams",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of the streams for a tenant",
                                    "fullTitle": "Tenant API Stream-Manager Tests listTenantStreams should return a list of the streams for a tenant",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\tlet results = await streamMonitor.listTenantStreams(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\tstreamName = apps[0]\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "67af002f-54f4-4ca5-8b88-e670f526c64d",
                                    "parentUUID": "9c062be2-e7b8-4539-80eb-c47a68c686c6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "67af002f-54f4-4ca5-8b88-e670f526c64d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2e709ace-6747-4f82-8cee-b046f3cc8c36",
                            "title": "streamInfoReqHandler",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests streamInfoReqHandler should return info for the stream",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.streamInfoReqHandler(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.exist",
                                    "err": {},
                                    "uuid": "deadfa30-db28-40ce-891f-c98d00aa2159",
                                    "parentUUID": "2e709ace-6747-4f82-8cee-b046f3cc8c36",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "deadfa30-db28-40ce-891f-c98d00aa2159"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cfc85a8e-198b-46a4-8085-cf89bee1963a",
                            "title": "getGroupInfo",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return group info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests getGroupInfo should return group info for the stream",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.getGroupInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "ae87b027-3f28-4176-ba7b-ee663c10fe41",
                                    "parentUUID": "cfc85a8e-198b-46a4-8085-cf89bee1963a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ae87b027-3f28-4176-ba7b-ee663c10fe41"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8c25d561-5ce7-40e5-99c6-fd6b497db817",
                            "title": "getConsumerInfo",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return consumer info for the group",
                                    "fullTitle": "Tenant API Stream-Manager Tests getConsumerInfo should return consumer info for the group",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\treq.params.groupName = \"sessionServiceGroup\" \n\t\t\tlet results = await streamMonitor.getConsumerInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "68abb2fa-83dd-43c5-9c99-ee6e6bd45ff2",
                                    "parentUUID": "8c25d561-5ce7-40e5-99c6-fd6b497db817",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "68abb2fa-83dd-43c5-9c99-ee6e6bd45ff2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b414aab3-3309-46e8-935f-2815fdc1f535",
                    "title": "Tenant API License, Apps and Settings Tests",
                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/tenant.test.js",
                    "file": "/test/integration/tenant.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bd5252cd-2342-4a13-9542-e2b8c32cbca2",
                            "title": "getTenantLicense",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a license for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicense should return a license for a tenant",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req()\n\t\t\tlet results = await getTenantLicense(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseInfo = mockRes.body;\n\t\t\texpect(licenseInfo.instanceId).equal(req.oauth.tenant);",
                                    "err": {},
                                    "uuid": "525f1132-e0d8-40a6-900f-b0d228224a4a",
                                    "parentUUID": "bd5252cd-2342-4a13-9542-e2b8c32cbca2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "525f1132-e0d8-40a6-900f-b0d228224a4a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "5a06b967-f8a3-4cee-a0fc-c45c63c5dc18",
                            "title": "getTenantApps",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return apps for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantApps should return apps for a tenant",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantApps(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "8d4c77dc-a652-46fe-9e49-659be35f047a",
                                    "parentUUID": "5a06b967-f8a3-4cee-a0fc-c45c63c5dc18",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8d4c77dc-a652-46fe-9e49-659be35f047a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b86453f4-87e5-4220-9015-b1328fc98bb1",
                            "title": "getTenantLicenseLocation",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return license location for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicenseLocation should return license location for a tenant",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantLicenseLocation(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseLocation = mockRes.body;\n      expect(licenseLocation).to.satisfy(function(val) { return val === 'onpremise' || val.toLowerCase().includes('cloud'); });",
                                    "err": {},
                                    "uuid": "2004e403-18d1-49c9-8712-e7f51cf0b696",
                                    "parentUUID": "b86453f4-87e5-4220-9015-b1328fc98bb1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2004e403-18d1-49c9-8712-e7f51cf0b696"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "46e1c539-3dcf-44c6-936f-eef35584be91",
                            "title": "getTenantLoginSettings",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should login settings for a tenant based on a tenant id",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a tenant id",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {tenant: req.config.tenantOne.tenantId}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "bd04cf5d-643b-4e37-8a2d-a5e6585ff87d",
                                    "parentUUID": "46e1c539-3dcf-44c6-936f-eef35584be91",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should login settings for a tenant based on a host header",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a host header",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {hostHeader: req.config.tenantOne.hostHeader}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "fdc65721-f809-4fde-a62a-6e501a3047ea",
                                    "parentUUID": "46e1c539-3dcf-44c6-936f-eef35584be91",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bd04cf5d-643b-4e37-8a2d-a5e6585ff87d",
                                "fdc65721-f809-4fde-a62a-6e501a3047ea"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "527100c3-6551-4bd6-a7f5-a44a21633dd4",
                    "title": "Tenant API Translation controller tests",
                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.controller.test.js",
                    "file": "/test/integration/translation.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "0a44abce-cade-4322-a67e-2f44efc57cc1",
                            "parentUUID": "527100c3-6551-4bd6-a7f5-a44a21633dd4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "49749e43-b54c-4d78-861a-79d3a5f76c43",
                            "parentUUID": "527100c3-6551-4bd6-a7f5-a44a21633dd4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6ab266f2-6692-4861-b18e-cb0adc20a9d4",
                            "title": "language crud ",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  language = await translationController.createLanguage(tenant, languageObj);\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "1fbe5c51-9cfc-42e1-9325-cad94e60e1e7",
                                    "parentUUID": "6ab266f2-6692-4861-b18e-cb0adc20a9d4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  languages = await translationController.listLanguages(tenant);\n         console.log(JSON.stringify(languages));\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "27a5e490-18e9-44c5-a988-43e9f3b3552c",
                                    "parentUUID": "6ab266f2-6692-4861-b18e-cb0adc20a9d4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language = await translationController.getLanguage(tenant,_id);\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "dd689919-3969-49ef-b5cc-3bde8e0b2145",
                                    "parentUUID": "6ab266f2-6692-4861-b18e-cb0adc20a9d4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language.translationCode = 'test-updated';\n            language.modifiedBy = IntegrifySystemContactSid;\n            const updatedLanguage = await translationController.updateLanguage(tenant,language.toObject());\n            expect(updatedLanguage).to.exist         \n            expect(updatedLanguage._id.toString()).to.equal(_id)\n            expect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "bd8a01ea-c23f-42e5-8fd6-149671691195",
                                    "parentUUID": "6ab266f2-6692-4861-b18e-cb0adc20a9d4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  delete a a language",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLanguage(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "d27840f4-e48c-4a98-8cfe-3350d79df370",
                                    "parentUUID": "6ab266f2-6692-4861-b18e-cb0adc20a9d4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1fbe5c51-9cfc-42e1-9325-cad94e60e1e7",
                                "27a5e490-18e9-44c5-a988-43e9f3b3552c",
                                "dd689919-3969-49ef-b5cc-3bde8e0b2145",
                                "bd8a01ea-c23f-42e5-8fd6-149671691195",
                                "d27840f4-e48c-4a98-8cfe-3350d79df370"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 47,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                            "title": "label crud ",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  label = await translationController.createLabel(tenant, labelObj);\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "3df10104-c729-40ba-bbfe-2d1034f4890c",
                                    "parentUUID": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  labels = await translationController.listLabels(tenant);\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "b1a640a8-651b-4200-bc5b-e8ffb15f64aa",
                                    "parentUUID": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label = await translationController.getLabel(tenant,_id);\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "34fe1153-d56d-426c-a195-2fd76a2a5b40",
                                    "parentUUID": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\n            label.modifiedBy = IntegrifySystemContactSid;\n            const updatedLabel = await translationController.updateLabel(tenant,label.toObject());\n            expect(updatedLabel).to.exist         \n            expect(updatedLabel._id.toString()).to.equal(_id)\n            expect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "ee863a29-1b7f-4c89-874b-eeb14d593046",
                                    "parentUUID": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  delete a a label",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLabel(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "12a37c59-b081-48c1-a532-8b888fb38582",
                                    "parentUUID": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation controller tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst savedCount = await translationController.saveNewDefaultLabels(tenant, unsaved);\nexpect(savedCount).to.exist         \nexpect(savedCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "1f35cb51-765c-4cf5-bbed-d3a10551902f",
                                    "parentUUID": "56141014-4de0-4e51-8cd3-2aeba3b12141",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3df10104-c729-40ba-bbfe-2d1034f4890c",
                                "b1a640a8-651b-4200-bc5b-e8ffb15f64aa",
                                "34fe1153-d56d-426c-a195-2fd76a2a5b40",
                                "ee863a29-1b7f-4c89-874b-eeb14d593046",
                                "12a37c59-b081-48c1-a532-8b888fb38582",
                                "1f35cb51-765c-4cf5-bbed-d3a10551902f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "7bda566f-d2b2-48d5-ae2e-4950ffd557aa",
                            "title": "seed functions ",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should seed languages",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed languages",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLanguages(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "dc800161-b70c-4726-837b-066fccb060b9",
                                    "parentUUID": "7bda566f-d2b2-48d5-ae2e-4950ffd557aa",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should seed labels",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed labels",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLabels(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "85dbc1e0-34ae-411b-bf4d-89daf71cfd36",
                                    "parentUUID": "7bda566f-d2b2-48d5-ae2e-4950ffd557aa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dc800161-b70c-4726-837b-066fccb060b9",
                                "85dbc1e0-34ae-411b-bf4d-89daf71cfd36"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0f7899d8-713f-4a21-9815-216149d66153",
                    "title": "Tenant API Translation handler tests",
                    "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.handler.test.js",
                    "file": "/test/integration/translation.handler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "4c099c37-9b5f-4743-8429-bf06740fffcc",
                            "parentUUID": "0f7899d8-713f-4a21-9815-216149d66153",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "198555bd-7945-41d3-a912-4bebf07c5375",
                            "parentUUID": "0f7899d8-713f-4a21-9815-216149d66153",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                            "title": "language crud ",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = languageObj;\nawait translationHandler.createLanguage(req, mockRes);\nlanguage = mockRes.body;\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "0e0f1afd-42bd-4f18-840e-526857c60cff",
                                    "parentUUID": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         await translationHandler.listLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "68ccbed6-1995-4721-b25e-1bd4fdf748bd",
                                    "parentUUID": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list tenant languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list tenant languages",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.params.tenant = tenant\n         await translationHandler.listTenantLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "58e749de-0d0e-4a7c-9217-6e9fdec8b106",
                                    "parentUUID": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLanguage(req,mockRes);\n            language = mockRes.body;\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "8327b923-e0b0-4482-8444-a80efa1a8a3d",
                                    "parentUUID": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = language;\nawait translationHandler.updateLanguage(req, mockRes);\nconst updatedLanguage = mockRes.body;\nexpect(updatedLanguage).to.exist         \nexpect(updatedLanguage._id.toString()).to.equal(_id)\nexpect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "ba704d30-d2ea-402b-8aed-80a433e32026",
                                    "parentUUID": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  delete a language",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLanguage(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "d64383ef-7c4e-47fb-97b1-ef7ca86c84a2",
                                    "parentUUID": "0c4156e6-da69-4d9f-9093-424c6b6c3081",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0e0f1afd-42bd-4f18-840e-526857c60cff",
                                "68ccbed6-1995-4721-b25e-1bd4fdf748bd",
                                "58e749de-0d0e-4a7c-9217-6e9fdec8b106",
                                "8327b923-e0b0-4482-8444-a80efa1a8a3d",
                                "ba704d30-d2ea-402b-8aed-80a433e32026",
                                "d64383ef-7c4e-47fb-97b1-ef7ca86c84a2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                            "title": "label crud ",
                            "fullFile": "/home/will/code/integrify/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = labelObj;\nawait translationHandler.createLabel(req, mockRes);\nlabel = mockRes.body;\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "09230c98-85cb-4a1b-b1e5-676a7846e6d6",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.query.tenant = tenant\n         await translationHandler.listLabels(req,mockRes);\n         const  labels = mockRes.body;\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "c1f4ab64-c35b-4fea-b59a-6399e3f283c9",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLabel(req,mockRes);\n            label = mockRes.body;\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "8cd512e4-ef6c-4458-a7cd-46c82e2195dc",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\nlabel.modifiedBy = IntegrifySystemContactSid;\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = label;\nawait translationHandler.updateLabel(req, mockRes);\nconst updatedLabel = mockRes.body;   \nexpect(updatedLabel).to.exist         \nexpect(updatedLabel._id.toString()).to.equal(_id)\nexpect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "d2b2d1d1-a11d-4e4c-8357-cd58e6136cd6",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete aa label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete aa label",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLabel(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "be2eb76c-c66d-4b14-bdd9-183527cf212b",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete labels",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let results = await translationController.listLabels(tenant,{_id})\n            let labelIds= results.map((i) => {\n                return i._id;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req()\n            req.body = labelIds;\n            await translationHandler.deleteLabels(req,mockRes);\n\t\t\tconst  deleted = mockRes.body;\n            expect(deleted).to.exist         \n            expect(deleted.deletedCount).to.exist",
                                    "err": {},
                                    "uuid": "63062012-72fe-4313-a4d3-1a62d63aebfd",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation handler tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst mockRes = await mocks.mockResponse();\nlet req = await mocks.req()\nreq.body = unsaved;\nawait translationHandler.saveNewDefaultLabels(req,mockRes);\nconst result = mockRes.body;\nexpect(result).to.exist         \nexpect(result.saved).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "9af98114-bc55-4b3b-89f0-753d8babee8c",
                                    "parentUUID": "7dd42747-62d0-4c83-a2c3-f81e89745a48",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "09230c98-85cb-4a1b-b1e5-676a7846e6d6",
                                "c1f4ab64-c35b-4fea-b59a-6399e3f283c9",
                                "8cd512e4-ef6c-4458-a7cd-46c82e2195dc",
                                "d2b2d1d1-a11d-4e4c-8357-cd58e6136cd6",
                                "be2eb76c-c66d-4b14-bdd9-183527cf212b",
                                "63062012-72fe-4313-a4d3-1a62d63aebfd",
                                "9af98114-bc55-4b3b-89f0-753d8babee8c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "d44fc77f-210f-4f0d-a99e-b5b660752566",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "2e1723a0-e9b9-498c-94ed-83317d8f61db",
                    "title": "api-user Group Controller Tests",
                    "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                    "file": "/test/db/groupController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 470,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = { tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase() }; // system level\ntenantId = config.tenantOne.tenantId;\nfor (i = 1; i <= 10; i++) {\n  const groupController = new GroupController(session);\n  const result = await groupController.addGroup({ groupName: `Test Automation Group ${i}` });\n  testGroups.push(result);\n}",
                            "err": {},
                            "uuid": "297b8eb6-1c7b-4e8f-afd2-cf6e24b19d7c",
                            "parentUUID": "2e1723a0-e9b9-498c-94ed-83317d8f61db",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 59,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// clean up our test data\nconst Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst ContactGroup = await models.getModel(config.tenantOne.tenantId, 'ContactGroup');\nawait Promise.all(testGroups.map(async (group) => {\n  await Group.query().hardDelete(group);\n  await ContactGroup.query()\n    .where('groupGuid', group.groupGuid)\n    .delete();\n}));",
                            "err": {},
                            "uuid": "d8273e38-5fcc-48a9-9f95-953814227e33",
                            "parentUUID": "2e1723a0-e9b9-498c-94ed-83317d8f61db",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c9eb6dc2-ba49-41f9-8304-ac452477b77a",
                            "title": "get tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "retrieves a group",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves a group",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groups = await Group.query().where('group_name', '=', 'Administrators');\nexpect(groups.length).to.equal(1);\nadminGroupGuid = groups[0].groupGuid;\nconst groupController = new GroupController(config.tenantOne);\nconst adminGroup = await groupController.getGroup(adminGroupGuid);\nexpect(adminGroup).to.exist;\nexpect(adminGroup.groupName).to.equal('Administrators');\nexpect(adminGroup.groupDesc).to.equal('System administrators');\nexpect(adminGroup.groupSql).to.be.null;",
                                    "err": {},
                                    "uuid": "0b4d2b7f-3431-4fca-b7ea-7a5c924403ed",
                                    "parentUUID": "c9eb6dc2-ba49-41f9-8304-ac452477b77a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all groups by default",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all groups by default",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups();\nconst groups = response.results;\nexpect(groups.length).to.be.above(10);",
                                    "err": {},
                                    "uuid": "dceb7094-b71f-491f-bc92-24c96b94d068",
                                    "parentUUID": "c9eb6dc2-ba49-41f9-8304-ac452477b77a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves filtered list of groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves filtered list of groups",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups({ search: 'Test Automation Group', count: 4 });\nconst groups = response.results;\nexpect(groups.length).to.equal(4);",
                                    "err": {},
                                    "uuid": "b08292d1-d8b5-49f0-8540-a2f0fe2e4f61",
                                    "parentUUID": "c9eb6dc2-ba49-41f9-8304-ac452477b77a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all possible members for adding to groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all possible members for adding to groups",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst group = testGroups[9];\nconst response = await groupController.getNonMembers(group.groupGuid);\nconst results = response.results;\nexpect(results.length).to.be.equal(response.total);\n// empty group, so test a sampling of accounts that should be non-members\nexpect(results).to.include.deep({ memberGuid: \"A03BDD24-A0BA-4071-9A5B-2833C865EC3D\",\n                                  memberId: 1,\n                                  memberName: \"Administrators\",\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: testGroups[8].groupGuid.toUpperCase(),\n                                  memberId: testGroups[8].groupId,\n                                  memberName: testGroups[8].groupName,\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n                                  memberId: 1,\n                                  memberName: 'System System',\n                                  memberType: 'User'\n                                })\n// two system accounts that should not be returned, plus the group itself\nexpect(results).to.not.include.deep({ memberGuid: 'D8C469C3-F781-4179-A09C-6D148885FB30',\n                                               memberId: 92,\n                                               memberName: \"Integrify System\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: '64EC8FC9-B426-4376-A1A4-3AD16F0F9906',\n                                               memberId: 96,\n                                               memberName: \"Guest Account\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: testGroups[9].groupGuid.toUpperCase(),\n                                           memberId: testGroups[9].groupId,\n                                           memberName: testGroups[9].groupName,\n                                           memberType: \"Group\"\n                                         })",
                                    "err": {},
                                    "uuid": "86fd991b-7bf3-441c-ba4d-01e412064b2f",
                                    "parentUUID": "c9eb6dc2-ba49-41f9-8304-ac452477b77a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0b4d2b7f-3431-4fca-b7ea-7a5c924403ed",
                                "dceb7094-b71f-491f-bc92-24c96b94d068",
                                "b08292d1-d8b5-49f0-8540-a2f0fe2e4f61",
                                "86fd991b-7bf3-441c-ba4d-01e412064b2f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 62,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "1e528f81-996d-4db4-8330-a14fbec83831",
                            "title": "insert tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts a non-dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a non-dynamic group",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (non-dynamic)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.dynamic).to.equal('No'); // ensure defaulting to \"No\" rather than null\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "3a657093-8cec-4fa8-8038-4843a9a5ce1f",
                                    "parentUUID": "1e528f81-996d-4db4-8330-a14fbec83831",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "inserts a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a dynamic group",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (dynamic)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "cb110191-9400-4ee8-98dd-5a46a5907acf",
                                    "parentUUID": "1e528f81-996d-4db4-8330-a14fbec83831",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with bad SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with bad SQL",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"bad_column_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "1c9d523f-2b8d-4e65-8ac0-134d0b3a34e9",
                                    "parentUUID": "1e528f81-996d-4db4-8330-a14fbec83831",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a group with no name",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a group with no name",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nawait expect(groupController.addGroup({ groupDesc: 'Test Group' })).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "60dd8eb5-1232-48f5-8a67-1796e0dc329e",
                                    "parentUUID": "1e528f81-996d-4db4-8330-a14fbec83831",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with no SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with no SQL",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupData = {\n  groupName: 'Dynamic Test Group',\n  dynamic: 'Yes',\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "d1526ade-0a0c-4c70-b5aa-33bad26ad64b",
                                    "parentUUID": "1e528f81-996d-4db4-8330-a14fbec83831",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3a657093-8cec-4fa8-8038-4843a9a5ce1f",
                                "cb110191-9400-4ee8-98dd-5a46a5907acf",
                                "1c9d523f-2b8d-4e65-8ac0-134d0b3a34e9",
                                "60dd8eb5-1232-48f5-8a67-1796e0dc329e",
                                "d1526ade-0a0c-4c70-b5aa-33bad26ad64b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 89,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "2cc7ea59-a98a-496e-95cb-cd7a21327845",
                            "title": "update tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates a group",
                                    "fullTitle": "api-user Group Controller Tests update tests updates a group",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nconst result = await groupController.updateGroup({\n  groupGuid: group.groupGuid,\n  groupName: 'Updated Test Automation Group',\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n});\nexpect(result.groupName).to.equal('Updated Test Automation Group');\nexpect(result.dynamic).to.equal('Yes');\nexpect(result.groupSql).to.equal(\"first_name = 'Admin'\");",
                                    "err": {},
                                    "uuid": "35d8f174-087b-4350-95d9-26821f4d4d82",
                                    "parentUUID": "2cc7ea59-a98a-496e-95cb-cd7a21327845",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update with no group name",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update with no group name",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "8fa6194a-ee96-4729-85e4-cb209d93108d",
                                    "parentUUID": "2cc7ea59-a98a-496e-95cb-cd7a21327845",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic without sql",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic without sql",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'Yes',\n    groupSql: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "ba19b2b5-71e8-4947-b507-480982c97063",
                                    "parentUUID": "2cc7ea59-a98a-496e-95cb-cd7a21327845",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic other than Yes/No",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic other than Yes/No",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: true,\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'yes',\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "a7e65496-2a53-4b41-89bd-49607f250353",
                                    "parentUUID": "2cc7ea59-a98a-496e-95cb-cd7a21327845",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "35d8f174-087b-4350-95d9-26821f4d4d82",
                                "8fa6194a-ee96-4729-85e4-cb209d93108d",
                                "ba19b2b5-71e8-4947-b507-480982c97063",
                                "a7e65496-2a53-4b41-89bd-49607f250353"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "11ed5920-dad5-49f8-aa03-7fd9ff2d2f8b",
                            "title": "delete tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "soft deletes a list of groups",
                                    "fullTitle": "api-user Group Controller Tests delete tests soft deletes a list of groups",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst timeBeforeDelete = Date.now();\nconst firstGroup = testGroups[0];\nconst response = await groupController.deleteGroups(testGroups.slice(0, 5).map((group) => group.groupGuid));\nexpect(response).to.eql([1, 1, 1, 1, 1]);\nconst deletedGroup = groupController.getGroup(firstGroup.groupGuid);\nexpect(deletedGroup).to.be.empty;",
                                    "err": {},
                                    "uuid": "990facc6-41ae-4d8d-867b-44c759138d4d",
                                    "parentUUID": "11ed5920-dad5-49f8-aa03-7fd9ff2d2f8b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "990facc6-41ae-4d8d-867b-44c759138d4d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                            "title": "membership test",
                            "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "adds a user to a group",
                                    "fullTitle": "api-user Group Controller Tests membership test adds a user to a group",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9]; // 0-4 get deleted in a previous test\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(0); // make sure group starts empty\nlet result = await groupController.addMembersToGroup({\n  groupGuid: group.groupGuid,\n  members: [{\n    memberGuid: session.user_sid,\n    memberType: 'User',\n  },\n  ],\n});\nexpect(result).to.not.be.undefined;\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(1);\nexpect(result[0].memberGuid.toLowerCase()).to.equal(session.user_sid);\nexpect(result[0].groupGuid.toLowerCase()).to.equal(group.groupGuid);\nexpect(result[0].memberType).to.equal('User');",
                                    "err": {},
                                    "uuid": "d23494fd-b586-409b-8414-6b0e2dfe4eed",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "removes members from a group",
                                    "fullTitle": "api-user Group Controller Tests membership test removes members from a group",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9];\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(1); // should have 1 member from preceding addUser test\nlet result = await groupController.removeMembersFromGroup({\n  groupGuid: group.groupGuid,\n  members: [session.user_sid],\n});\nexpect(result).to.equal(1);\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "04365d25-606b-454d-b3de-e7e73bb24665",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a group",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid);\nexpect(res.results.length).to.be.at.least(2);",
                                    "err": {},
                                    "uuid": "7ace5308-adc1-4eee-9817-2dd83943c736",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "filters members of a group based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test filters members of a group based on search string",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid, { search: 'no-reply@integrify.com' });\nexpect(res.results.length).to.equal(2);",
                                    "err": {},
                                    "uuid": "62bc1937-958f-4c98-9f18-6adefc4ff763",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits result members of a group based start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits result members of a group based start/count",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nlet res = await groupController.getMembers(usersGroupGuid);\nconst groupSize = res.results.length;\nexpect(groupSize).to.equal(res.total);\nres = await groupController.getMembers(usersGroupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(groupSize);\nres = await groupController.getMembers(usersGroupGuid, { start: 1 });\nexpect(res.results.length).to.equal(groupSize - 1);\nexpect(res.total).to.equal(groupSize);",
                                    "err": {},
                                    "uuid": "3e7957df-1d13-47ba-8be5-a19e397409a6",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to users only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to users only",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'true', groups: 'false' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('User'));",
                                    "err": {},
                                    "uuid": "0c7867a9-9d98-4502-8d53-136edb34f51b",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to groups only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to groups only",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'false', groups: 'true' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('Group'));",
                                    "err": {},
                                    "uuid": "ea5d2f94-84a1-4580-a08f-584d63ae60a5",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves groups a user belongs to",
                                    "fullTitle": "api-user Group Controller Tests membership test retrieves groups a user belongs to",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst userGuid = '4e99e0dd-b3b3-4d5d-826d-3d5ae62a16cf';\nconst res = await groupController.getUserGroups(userGuid);\nexpect(res.results.find((result) => result.groupName == 'Administrators')).to.not.be.undefined;\nexpect(res.results.find((result) => result.groupDesc == 'All users')).to.not.be.undefined;",
                                    "err": {},
                                    "uuid": "c938bcbe-6aaf-4a17-a9e1-403ff5d4cfc9",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on start/count",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 0, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 1, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);",
                                    "err": {},
                                    "uuid": "81955db2-0766-4df1-809c-78cfe189f69e",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on search string",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { search: 'System' });\nconst { results } = res;\nexpect(results).to.eql([{\n  memberGuid: 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D',\n  memberName: 'Administrators',\n  memberType: 'Group',\n  memberId: 1,\n},\n{\n  memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n  memberId: 1,\n  memberName: 'System System',\n  memberType: 'User',\n},\n]);",
                                    "err": {},
                                    "uuid": "9a18eb65-a424-4d48-ac34-3fad70dd83d0",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a dynamic group",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst allUsersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst result = await groupController.getMembers(allUsersGroupGuid);",
                                    "err": {},
                                    "uuid": "23af2759-1a8f-4eaf-ab52-d1d24786db66",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists all members of a group containing groups",
                                    "fullTitle": "api-user Group Controller Tests membership test lists all members of a group containing groups",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "",
                                    "err": {},
                                    "uuid": "f52a4e10-18df-43ae-9624-ca411f7647fa",
                                    "parentUUID": "2ef8cb13-c545-43a1-bdbb-44f8865652b9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d23494fd-b586-409b-8414-6b0e2dfe4eed",
                                "04365d25-606b-454d-b3de-e7e73bb24665",
                                "7ace5308-adc1-4eee-9817-2dd83943c736",
                                "62bc1937-958f-4c98-9f18-6adefc4ff763",
                                "3e7957df-1d13-47ba-8be5-a19e397409a6",
                                "0c7867a9-9d98-4502-8d53-136edb34f51b",
                                "ea5d2f94-84a1-4580-a08f-584d63ae60a5",
                                "c938bcbe-6aaf-4a17-a9e1-403ff5d4cfc9",
                                "81955db2-0766-4df1-809c-78cfe189f69e",
                                "9a18eb65-a424-4d48-ac34-3fad70dd83d0",
                                "23af2759-1a8f-4eaf-ab52-d1d24786db66",
                                "f52a4e10-18df-43ae-9624-ca411f7647fa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 185,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "4460e9ec-342f-4489-b457-b1582a4cf935",
                            "title": "association tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(47);\n// should not include categoryLevel by default\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName');",
                                    "err": {},
                                    "uuid": "3ada3b38-b284-4bbc-b2dd-b244657ed663",
                                    "parentUUID": "4460e9ec-342f-4489-b457-b1582a4cf935",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 78,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D', { include: ['category'] });\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName', 'categoryLevel');",
                                    "err": {},
                                    "uuid": "42e297fa-d979-48c0-8782-585d1acca662",
                                    "parentUUID": "4460e9ec-342f-4489-b457-b1582a4cf935",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list roles associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list roles associated to a group",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getRoleAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(1);",
                                    "err": {},
                                    "uuid": "8a3a6f37-c30d-4ee5-8fb8-7e36b5050da2",
                                    "parentUUID": "4460e9ec-342f-4489-b457-b1582a4cf935",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3ada3b38-b284-4bbc-b2dd-b244657ed663",
                                "42e297fa-d979-48c0-8782-585d1acca662",
                                "8a3a6f37-c30d-4ee5-8fb8-7e36b5050da2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 107,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "c62a81f9-6490-41da-91e6-e326581959cb",
                    "title": "api-user User Controller Tests",
                    "fullFile": "/home/will/code/integrify/api-user/test/db/userController.test.js",
                    "file": "/test/db/userController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1172,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenantId = config.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nMetadataValue = await models.getModel(tenantId, 'MetadataValue');\nUserAuth = await models.getModel(tenantId, 'UserAuth');\n// add user\nuserCtrl = new UserController(session);\nfor (let i=1; i<=limit; i++) {\n  const user = {\n    firstName: 'test first name' + i,\n    lastName: 'last' + i,\n    userName: 'test_username' + i,\n    email: `test${i}@test.test${i}`,\n    locale: 'en-US',\n    languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460', // US English\n    password: testPwd,\n    confirmPassword: testPwd,\n    title: 'title' + i\n  };\n  const dbUser = await userCtrl.insertUser(user)\n  testUsers.push(dbUser);\n}",
                            "err": {},
                            "uuid": "e347914a-5009-47e9-af93-7cbd759173f7",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 132,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await Promise.all( testUsers.map( async (user) => {\n  return UserAuth.query().deleteById(user.contactGuid);\n}));\nawait User.query().delete().where('firstName', 'like', 'test first%');",
                            "err": {},
                            "uuid": "9e520126-bdee-4e7b-8b32-4978dcc3cd7d",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should retrieves users",
                            "fullTitle": "api-user User Controller Tests should retrieves users",
                            "timedOut": false,
                            "duration": 37,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenantId, 'User');\nconst UserAuth = await models.getModel(tenantId, 'UserAuth');\nconst users = await User.query()\n  .orderBy('createdDate', 'desc')\n  .limit(limit);\nawait Promise.all(users.map(async user => {\n  const result = await userCtrl.getUser(user.contactGuid);\n  const {userName, managerGuid, ...userToCompare1} = result;\n  user.languageGuid = user.languageGuid.toLowerCase() // 'user' from Database query has \"upper case\" language guid - but userToCompare1 from API should be in lower case\n  user.contactGuid = user.contactGuid.toLowerCase()\n  user.createdBy = user.createdBy.toLowerCase()\n  expect(userToCompare1).to.deep.eq(user);\n  // compare testUser to user\n  const testUser = testUsers.find(u => u.contactGuid === user.contactGuid);\n  ['firstName', 'lastName', 'email', 'locale', 'languageGuid', 'contactId', 'title'].forEach(p => {\n    expect(testUser[p]).to.eq(user[p]);\n  });\n  // check userNames\n  const userAuth = await UserAuth.query()\n    .findById(user.contactGuid);\n  expect(userAuth).to.exist;\n  expect(userAuth.userName).to.eq(testUser.userName);\n}));",
                            "err": {},
                            "uuid": "d35e695b-5fbc-496b-81da-8b5b699c637b",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should search in users",
                            "fullTitle": "api-user User Controller Tests should search in users",
                            "timedOut": false,
                            "duration": 53,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\n// search by id\nlet result = await userCtrl.getUsers({search: testUser.contactId});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(1);\n// search by username\nresult = await userCtrl.getUsers({search: testUser.userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = testUser.userName);\nexpect(found).to.exist;\n// search by first & last names\nresult = await userCtrl.getUsers({search: testUser.firstName.slice(0, -2)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.first === testUser.first);\nexpect(found).to.exist;\nresult = await userCtrl.getUsers({search: testUser.lastName.slice(0, -1)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.lastName === testUser.lastName);\nexpect(found).to.exist;\n// search by email\nresult = await userCtrl.getUsers({search: testUser.email.slice(-10)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.email === testUser.email);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "ed81350e-8f3a-4ea3-ab2e-97b5347d1346",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should limit results",
                            "fullTitle": "api-user User Controller Tests should limit results",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const result = await userCtrl.getUsers({count: 4});\nexpect(result.results.length).to.eq(4);",
                            "err": {},
                            "uuid": "50f5f09e-39ec-4fff-85bc-ac93c0e31161",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should retrieve filtered users ",
                            "fullTitle": "api-user User Controller Tests should retrieve filtered users ",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nconst filters = [\n  {\n    field: 'lastName',\n    data: {comparison: 'eq', type: 'string', value: user.lastName,}\n  },\n  {\n    field: 'firstName',\n    data: {comparison: 'contains', value: user.firstName}\n  },\n  {\n    field: 'userName',\n    data: {comparison: 'eq', value: user.userName}\n  },\n  {\n    field: 'email',\n    data: {comparison: 'contains', value: user.email}\n  },\n  {\n    field: 'title',\n    data: {comparison: 'contains', value: user.title}\n  },\n  {\n    field: 'constCenter',\n    data: {comparison: 'contains', value: user.constCenter}\n  },\n  {\n    field: 'country',\n    data: {comparison: 'contains', value: user.country}\n  },\n  {\n    field: 'department',\n    data: {comparison: 'contains', value: user.department}\n  },\n  {\n    field: 'managerName',\n    data: {comparison: 'contains', value: user.managerName}\n  },\n  {\n    field: 'managerGuid',\n    data: {comparison: 'contains', value: user.managerGuid}\n  },\n];\nconst result = await userCtrl.getUsers({filters});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst found = result.results.find(u => u.contactGuid === testUser.contactGuid);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "dd807515-b4fe-4f58-8767-3e3edfb68e9a",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a list of managers",
                            "fullTitle": "api-user User Controller Tests should get a list of managers",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const exceptGuid = testUsers[0].contactGuid;\nconst managers = await userCtrl.getManagers({exceptGuid});\nmanagers.forEach(manager => {\n  expect(manager.contactGuid).to.not.eq(exceptGuid);\n});\ntestUsers.filter(u => u.contactGuid !== exceptGuid).forEach(u => {\n  const manager = managers.find(m => m.contactGuid === u.contactGuid);\n  const {contactGuid, firstName, lastName, email, title} = u;\n  const testUser = {contactGuid, firstName, lastName, email, title};\n  expect(manager).to.deep.eq(testUser);\n});",
                            "err": {},
                            "uuid": "48f1c5bd-36a5-471a-924c-e44f374b6099",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a single user",
                            "fullTitle": "api-user User Controller Tests should get a single user",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[3];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nexpect(user).to.exist;\n['contactGuid', 'contactId', 'firstName', 'lastName', 'userName', 'email', 'locale', 'languageGuid', 'title'].forEach(p => {\n  expect(user[p]).to.eq(testUser[p]);\n});\n['middleName', 'phone', 'address1', 'address2', 'city', 'state', 'zip', 'country',\n  'department', 'costCenter', 'division', 'managerGuid', 'cField1', 'cField2'].forEach(p => {\n  expect(!!user[p] || user[p] === null || user[p] === '').to.eq(true);\n});",
                            "err": {},
                            "uuid": "1129f085-d10e-4b56-ba44-74176582b0fd",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update and get delegate",
                            "fullTitle": "api-user User Controller Tests should update and get delegate",
                            "timedOut": false,
                            "duration": 61,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// insert delegate\nconst testDelegate = {\n  contactGuid: testUsers[3].contactGuid,\n  processes: [{id: 'a6714779-4bde-4000-8361-ad37c838d440'}, {id: '3545404d-6fff-4ed5-ba9a-1100ce38d421'}, {id: 'cfc36de0-a71b-451f-817a-2092c3c247ca'}],\n  startDate: '2021-01-14',\n  startTime: '06:00',\n  endDate: '2021-01-15',\n  endTime: '17:35',\n};\nawait userCtrl.updateDelegate(testUsers[3].contactGuid, testDelegate);\n// get delegate\nlet delegate = await userCtrl.getDelegate(testDelegate.contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.exist;\n  expect(delegate[p]).to.eq(testDelegate[p]);\n})\nexpect(delegate.processes).to.exist;\nexpect(delegate.processes.length).to.eq(testDelegate.processes.length);\ntestDelegate.processes.forEach(p => {\n  const process = delegate.processes.find(dp => dp.id === p.id);\n  expect(process).to.exist;\n});\n// for user without delegate\ndelegate = await userCtrl.getDelegate(testUsers[1].contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.be.null;\n});\nexpect(delegate.processes.length).to.eq(0);\n// delete delegate\nawait MetadataValue.query()\n  .where('ownerSid', testDelegate.contactGuid)\n  .delete();",
                            "err": {},
                            "uuid": "0de2b6d0-400d-430f-a855-fdf79ba103ca",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "password should be hashed",
                            "fullTitle": "api-user User Controller Tests password should be hashed",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await UserAuth.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.password).to.not.eq(testPwd);",
                            "err": {},
                            "uuid": "9c32a6c3-0651-4335-b09b-d2bf548c687f",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "user should be active (not deleted)",
                            "fullTitle": "api-user User Controller Tests user should be active (not deleted)",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await User.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.deletedDate).to.be.null;\nexpect(user.deletedBy).to.be.null;",
                            "err": {},
                            "uuid": "1a07d385-680b-4090-b885-326b5576f447",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should convert user Guids",
                            "fullTitle": "api-user User Controller Tests should convert user Guids",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = {\n  contactGuid: 'SomeRandomString',\n  managerGuid: 'SomeRandomString',\n  signatureGuid: 'SomeRandomString',\n  languageGuid: 'SomeRandomString',\n  createdBy: 'SomeRandomString',\n};\nconst convertedUser1 = userCtrl.convertUserGuids(testUser);\nconst convertedUser2 = userCtrl.convertUserGuids({contactGuid: testUser.contactGuid});\n[convertedUser1, convertedUser2].forEach(u => {\n  Object.keys(u).forEach(key => {\n    expect(u[key]).to.eq(u[key].toLowerCase());\n  });\n});",
                            "err": {},
                            "uuid": "8c4438e8-4359-4683-aa7c-1d68370fbc81",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if username is taken",
                            "fullTitle": "api-user User Controller Tests should check if username is taken",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[0].contactGuid;\nconst username = testUsers[0].userName;\nlet isTaken = await userCtrl.isUserNameTaken(username);\nexpect(isTaken).to.be.true;\nisTaken = await userCtrl.isUserNameTaken(username.toUpperCase());\nexpect(isTaken).to.be.true;\n// with un-taken username\nisTaken = await userCtrl.isUserNameTaken('someUnusedUsernameTest');\nexpect(isTaken).to.be.false;\n// with Guid provided\nisTaken = await userCtrl.isUserNameTaken(username, userGuid);\nexpect(isTaken).to.be.false;",
                            "err": {},
                            "uuid": "d686acc3-1f69-4d76-8bc1-ff7e37563ff6",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Controller Tests should update user",
                            "timedOut": false,
                            "duration": 110,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[3].contactGuid;\nconst data = {\n  firstName: 'test first updated',\n  middleName: 'up mid name',\n  lastName: 'up last name',\n  email: 'updated@email.com',\n  title: 'updatedTitle',\n  division: 'up division',\n  department: 'upd department',\n  costCenter: 'upd cost center',\n  location: 'upd loc',\n  phone: '094-242-5654 ext 4',\n  managerGuid: testUsers[0].contactGuid,\n  address1: '654 Some ave',\n  address2: 'apt 589',\n  city: 'New London',\n  state: 'OR',\n  zip: '98353',\n  country: 'USM',\n  languageGuid: testUsers[0].languageGuid,\n  timezone: 'PFT-09',\n  locale: 'en-US',\n  cField1: 'upd cust field 1',\n  cField2: 'upd cust field 2',\n  active: false,\n  userName: 'updatedUserName',\n  password: 'updatedPwd',\n  signatureGuid: '36b65bca-140d-41b9-ac8b-89b50c86e7ba'\n};\n// get current password\nlet user = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst previousPwd = user.password;\n// update\nuser = await userCtrl.updateUser(userGuid, data);\nconst {contactGuid, contactId, createdBy, createdDate, deletedBy, deletedDate, modifiedBy, modifiedDate, ntId, reportsToGuid, lastUpdate, ...updatedUser} = user;\nconst {password, active, ...testData} = data;\nexpect(updatedUser).to.deep.eq(testData);\n// should be inactive/deleted\nexpect(!!deletedBy).to.be.true;\nexpect(!!deletedDate).to.be.true;\n// should change the password\nuser = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst updatedPwd = user.password;\nexpect(previousPwd).to.not.eq(updatedPwd);",
                            "err": {},
                            "uuid": "f0fe4387-cdb9-499a-a43f-586042f7e3c2",
                            "parentUUID": "c62a81f9-6490-41da-91e6-e326581959cb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "d35e695b-5fbc-496b-81da-8b5b699c637b",
                        "ed81350e-8f3a-4ea3-ab2e-97b5347d1346",
                        "50f5f09e-39ec-4fff-85bc-ac93c0e31161",
                        "dd807515-b4fe-4f58-8767-3e3edfb68e9a",
                        "48f1c5bd-36a5-471a-924c-e44f374b6099",
                        "1129f085-d10e-4b56-ba44-74176582b0fd",
                        "0de2b6d0-400d-430f-a855-fdf79ba103ca",
                        "9c32a6c3-0651-4335-b09b-d2bf548c687f",
                        "1a07d385-680b-4090-b885-326b5576f447",
                        "8c4438e8-4359-4683-aa7c-1d68370fbc81",
                        "d686acc3-1f69-4d76-8bc1-ff7e37563ff6",
                        "f0fe4387-cdb9-499a-a43f-586042f7e3c2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 307,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "575ec110-4267-44f3-b71e-a7f7820cbb85",
                    "title": "api-user Group Handler Tests",
                    "fullFile": "/home/will/code/integrify/api-user/test/groupHandler.test.js",
                    "file": "/test/groupHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 111,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nconst userCtl = new UserController({tenantId: tenant})\nrestrictedUser = await userCtl.insertUser({firstName: 'groups test',\n                                           lastName: 'groups test',\n                                           userName: 'restricted user for groups permission test',\n                                           password: 'password'})",
                            "err": {},
                            "uuid": "ea22aad8-b5c6-437e-8554-29a3a0db56ce",
                            "parentUUID": "575ec110-4267-44f3-b71e-a7f7820cbb85",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 31,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenant, 'User');\nawait User.query().hardDelete(restrictedUser)",
                            "err": {},
                            "uuid": "59583c20-b23b-4563-8265-5787b069b8af",
                            "parentUUID": "575ec110-4267-44f3-b71e-a7f7820cbb85",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0093d307-addf-4753-93dc-3c19682f52ed",
                            "title": "crud tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a group",
                                    "fullTitle": "api-user Group Handler Tests crud tests should create a group",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nconst group = response.body\nexpect(response.statusCode).to.equal(200)\nexpect(group.groupGuid).to.match(/([-\\w]+)/)\nexpect(group.groupName).to.equal(groupName);\n// cleanup\nreq.body = [group.groupGuid]\nconst foo = await handlers.deleteGroups(req, mockRes)",
                                    "err": {},
                                    "uuid": "de798a34-863a-4940-b652-8aaae0ad0d46",
                                    "parentUUID": "0093d307-addf-4753-93dc-3c19682f52ed",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "de798a34-863a-4940-b652-8aaae0ad0d46"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "d26c0de3-66a4-4a21-8304-d789399929f6",
                            "title": "permission tests",
                            "fullFile": "/home/will/code/integrify/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "admin should have manage/edit permissions per group",
                                    "fullTitle": "api-user Group Handler Tests permission tests admin should have manage/edit permissions per group",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = testConfig.tenantOne.adminUser.sid;\nconst response = await handlers.getGroups(req,mockRes);\nconst groups = response.body.results;\ngroups.forEach( group => {\n  expect(group.canManage).to.equal(true);\n  expect(group.canEdit).to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "701d76b5-3d48-4248-bade-2405eb9c472d",
                                    "parentUUID": "d26c0de3-66a4-4a21-8304-d789399929f6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to create a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to create a group",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid;\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "b5818b66-8932-49a7-b5e0-3f4dc89fa091",
                                    "parentUUID": "d26c0de3-66a4-4a21-8304-d789399929f6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to list groups members",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to list groups members",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.groupGuid = group.groupGuid\nconst response = await handlers.getGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "b303a3d3-ce61-477a-bed4-cab6b21ca8a2",
                                    "parentUUID": "d26c0de3-66a4-4a21-8304-d789399929f6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to delete a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to delete a group",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.body = [ group.groupGuid ]\nconst response = await handlers.deleteGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "9ca7d8e2-6dff-46a3-8ee8-1f4fb218ca33",
                                    "parentUUID": "d26c0de3-66a4-4a21-8304-d789399929f6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "701d76b5-3d48-4248-bade-2405eb9c472d",
                                "b5818b66-8932-49a7-b5e0-3f4dc89fa091",
                                "b303a3d3-ce61-477a-bed4-cab6b21ca8a2",
                                "9ca7d8e2-6dff-46a3-8ee8-1f4fb218ca33"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "3431615e-32cc-46f2-9267-3d9a663257e1",
                    "title": "api-user User Handler Tests",
                    "fullFile": "/home/will/code/integrify/api-user/test/userHandler.test.js",
                    "file": "/test/userHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenantId = testConfig.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: testConfig.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nUserAuth = await models.getModel(tenantId, 'UserAuth');",
                            "err": {},
                            "uuid": "28222a0a-96ed-4253-90b6-ce657e605782",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": true,
                            "skipped": false
                        },
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "api-user User Handler Tests \"before each\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req = await mocks.req();\nmockRes = await mocks.mockResponse();\ntestUser = (await User.query().limit(1))[0];\ntestUser.userName  = (await UserAuth.query().select('userName').where('contactGuid', testUser.contactGuid))[0].userName;",
                            "err": {},
                            "uuid": "6d6b0490-6102-40ba-8bd9-b2ff32fca6ae",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 55,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await UserAuth.query().delete().where('userName', 'like', 'user_to_delete%');\nawait User.query().delete().where('firstName', 'like', 'user_to_delete%');",
                            "err": {},
                            "uuid": "755fbe1e-dc68-42f2-982e-72cf50f8b4a1",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should get a list of users",
                            "fullTitle": "api-user User Handler Tests should get a list of users",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getUsers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.results).to.exist;\nexpect(response.body.results.length).to.be.gt(0);\nexpect(response.body.total).to.exist;\nexpect(response.body.total).to.be.gt(0);",
                            "err": {},
                            "uuid": "a8ef4e23-595d-435b-9f4a-d24517b2b029",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return a list of managers",
                            "fullTitle": "api-user User Handler Tests should return a list of managers",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getManagers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.length).to.be.gt(0);",
                            "err": {},
                            "uuid": "e83074aa-a3f7-4b7f-b758-f5ceede846a1",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get single user",
                            "fullTitle": "api-user User Handler Tests should get single user",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.params.userGuid = testUser.contactGuid;\nconst response = await handlers.getUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.delegate).to.exist;",
                            "err": {},
                            "uuid": "b49a76e1-5dc3-40d4-affe-ec4a0885cf6d",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if userName is taken",
                            "fullTitle": "api-user User Handler Tests should check if userName is taken",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.query.userName = testUser.userName;\nreq.query.userGuid = testUser.contactGuid;\nconst response = await handlers.checkIfUserNameIsTaken(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.isTaken).to.exist;\nexpect(response.body.isTaken).to.be.false;",
                            "err": {},
                            "uuid": "fcbbd4c5-5e01-4342-809e-5602e373e241",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not insert user without data",
                            "fullTitle": "api-user User Handler Tests should not insert user without data",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;\nexpect(response.body.password).to.exist;",
                            "err": {},
                            "uuid": "6f3f5f6e-83d9-42f3-bf3f-5fb61b6c7e66",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert user",
                            "fullTitle": "api-user User Handler Tests should insert user",
                            "timedOut": false,
                            "duration": 117,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = {\n  firstName: 'user_to_delete',\n  lastName: 'lastName',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n  email: 'random@test.com',\n  locale: 'en-US',\n  timezone: 'Pacific',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n}\nconst response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;",
                            "err": {},
                            "uuid": "38c9b441-5e67-4aaa-bf10-37bb4035846f",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should register a user",
                            "fullTitle": "api-user User Handler Tests should register a user",
                            "timedOut": false,
                            "duration": 6700,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userName = 'register_user' + Math.random().toString(36).substring(7) // random string\nreq.body = {\n  firstName: 'register_user',\n  lastName: 'lastName',\n  userName,\n  email: 'random@test.com',\n  // locale: 'en-US',\n  timezone: 'US/Central',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n  tenant: tenantId\n}\nreq.bypassRecaptcha = true\nconst response = await handlers.registerUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\n// search by username to verify user record was created\nconst userCtrl = new UserController(session);\nconst result = await userCtrl.getUsers({search: userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = userName);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "18d7cd62-e19e-4d55-93d5-b7b5e76dfe64",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not update user with empty data",
                            "fullTitle": "api-user User Handler Tests should not update user with empty data",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = '{}';\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;",
                            "err": {},
                            "uuid": "f44b88f3-b476-4ab9-9f5d-9e89d0652cb7",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Handler Tests should update user",
                            "timedOut": false,
                            "duration": 42,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let userToDelete = (await UserAuth.query().where('userName', 'like', 'user_to_delete%').limit(1))[0];\nif (!userToDelete) {\n  req.body = {\n    firstName: 'user_to_delete',\n    lastName: 'lastName',\n    userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n    email: 'random@test.com',\n    locale: 'en-US',\n    timezone: 'Pacific',\n    languageGuid: testUser.languageGuid,\n    password: 'randomPwd',\n  }\n  userToDelete  = (await handlers.insertUser(req, mockRes)).body;\n}\nconst data = {\n  firstName: 'user_to_delete',\n  lastName: 'updated last',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7),\n  email: 'random@test.updated',\n  locale: 'en-US',\n  timezone: 'Atlantic/New York',\n  languageGuid: testUser.languageGuid,\n};\nreq.params.userGuid = userToDelete.contactGuid;\nreq.body = JSON.stringify(data);\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.eq(data.firstName);\nexpect(response.body.timezone).to.exist;\nexpect(response.body.timezone).to.eq(data.timezone);",
                            "err": {},
                            "uuid": "37d8e347-2b2a-4dd9-998a-c277971a433a",
                            "parentUUID": "3431615e-32cc-46f2-9267-3d9a663257e1",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a8ef4e23-595d-435b-9f4a-d24517b2b029",
                        "e83074aa-a3f7-4b7f-b758-f5ceede846a1",
                        "b49a76e1-5dc3-40d4-affe-ec4a0885cf6d",
                        "fcbbd4c5-5e01-4342-809e-5602e373e241",
                        "6f3f5f6e-83d9-42f3-bf3f-5fb61b6c7e66",
                        "38c9b441-5e67-4aaa-bf10-37bb4035846f",
                        "18d7cd62-e19e-4d55-93d5-b7b5e76dfe64",
                        "f44b88f3-b476-4ab9-9f5d-9e89d0652cb7",
                        "37d8e347-2b2a-4dd9-998a-c277971a433a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6877,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "48d9b071-7021-48a2-a95d-7df5adecdf2d",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "c495dbcc-b3f2-4131-bb0d-0c4652597c9e",
                    "title": "Config Processor ENV.CONFIG tests",
                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/config.test.js",
                    "file": "/test/integration/config.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor ENV.CONFIG tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 23,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nprocess.env.TESTING = true;\n\nconfigHelper = require(\"../../src/helpers/config\")\nredis = require(\"integrify-libs\").redisClient\npubSubClient = redis.makeCopy();\npubSubClient.subscribe('updateEnvConfig')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n//let deletes = await redis.delAsync(['ENV.CONFIG']);\n//console.log(deletes)",
                            "err": {},
                            "uuid": "4461ffb5-502b-4690-a046-7a989d67ec9c",
                            "parentUUID": "c495dbcc-b3f2-4131-bb0d-0c4652597c9e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "254f7b5d-45e1-4534-a375-d6452a3b72a8",
                            "title": "config helper",
                            "fullFile": "/home/will/code/integrify/config-processor/test/integration/config.test.js",
                            "file": "/test/integration/config.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "6e091b52-3780-44f1-b35b-418f9b416122",
                                    "title": "setConfig",
                                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/config.test.js",
                                    "file": "/test/integration/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a local config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a local config file",
                                            "timedOut": false,
                                            "duration": 336,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\n//console.log(\"wow\",storedConfig)\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\n//expect(storedConfig.cacheTime).to.exist;\nawait delay(300)",
                                            "err": {},
                                            "uuid": "901436c8-8c3c-49e9-b1ee-56141eb715cb",
                                            "parentUUID": "6e091b52-3780-44f1-b35b-418f9b416122",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateEnvConfig pub/sub channel",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should get a message on the updateEnvConfig pub/sub channel",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(pubSubMessage.channel).to.equal('updateEnvConfig');",
                                            "err": {},
                                            "uuid": "74e98c69-365f-4278-b1fe-ea7895329ca7",
                                            "parentUUID": "6e091b52-3780-44f1-b35b-418f9b416122",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a S3 config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a S3 config file",
                                            "timedOut": false,
                                            "duration": 35,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.USE_S3_FILES=\"true\"\nawait configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\nexpect(storedConfig.cacheTime).to.exist;",
                                            "err": {},
                                            "uuid": "4f95f0f6-3462-42e8-9617-153732bab071",
                                            "parentUUID": "6e091b52-3780-44f1-b35b-418f9b416122",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "901436c8-8c3c-49e9-b1ee-56141eb715cb",
                                        "74e98c69-365f-4278-b1fe-ea7895329ca7",
                                        "4f95f0f6-3462-42e8-9617-153732bab071"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 371,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "17133324-6309-4303-8a39-af0f9d9670dd",
                    "title": "Config Processor Event Handler Tests",
                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/configEventHandler.test.js",
                    "file": "/test/integration/configEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10025,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName]);\n\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"updateEnvConfig\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateDataInstances\", {\n  update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n  update: new Date().toISOString(),\n  tenantId: 'integrifydev'\n      });\n\n\nforkedProcessor = await configStreamConsumer.monitorStream(tenant);\nawait delay(10000);",
                            "err": {},
                            "uuid": "4dce9b57-e3d3-49c7-aa02-03fda0d28e5d",
                            "parentUUID": "17133324-6309-4303-8a39-af0f9d9670dd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "2458a4c6-0b0b-4027-9163-0a0e539bb99e",
                            "parentUUID": "17133324-6309-4303-8a39-af0f9d9670dd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "35df9eda-db03-42e8-8b51-f0c315d2186e",
                            "title": "config stream processor",
                            "fullFile": "/home/will/code/integrify/config-processor/test/integration/configEventHandler.test.js",
                            "file": "/test/integration/configEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "e947deb1-5518-45ef-82cb-1fc637e8519d",
                                    "title": "reads from config stream",
                                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/configEventHandler.test.js",
                                    "file": "/test/integration/configEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Config Processor Event Handler Tests config stream processor reads from config stream should process events",
                                            "timedOut": false,
                                            "duration": 4,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "0b2a824d-6435-4d16-b613-4a9759744850",
                                            "parentUUID": "e947deb1-5518-45ef-82cb-1fc637e8519d",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "0b2a824d-6435-4d16-b613-4a9759744850"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 4,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a78ce72c-44a1-448a-a51f-c927164fc41f",
                    "title": "Config data instance tests",
                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/dataInstance.test.js",
                    "file": "/test/integration/dataInstance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config data instance tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateDataInstances')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n  \nlet deletes = await redis.delAsync(['data_instances']);",
                            "err": {},
                            "uuid": "99c4d826-4743-4035-9a0a-aa195d3c8858",
                            "parentUUID": "a78ce72c-44a1-448a-a51f-c927164fc41f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ada5eac5-3101-47a9-b26f-7b111a06e1ff",
                            "title": "dataInstasnce helper",
                            "fullFile": "/home/will/code/integrify/config-processor/test/integration/dataInstance.test.js",
                            "file": "/test/integration/dataInstance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "c5578d34-40a7-4daf-9cda-8630f2b4a85f",
                                    "title": "updateDataInstances",
                                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/dataInstance.test.js",
                                    "file": "/test/integration/dataInstance.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set data_instances in redis",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should set data_instances in redis",
                                            "timedOut": false,
                                            "duration": 713,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await dataInstanceHelper.updateDataInstances();\nlet storedDataInstances = await redis.getAsync('data_instances')\nexpect(storedDataInstances).to.exist;\nstoredDataInstances = JSON.parse(storedDataInstances);\nexpect(Object.keys(storedDataInstances).length).to.be.gt(0);",
                                            "err": {},
                                            "uuid": "c57097d8-a2d1-4295-8d71-fe0f9f8eda0f",
                                            "parentUUID": "c5578d34-40a7-4daf-9cda-8630f2b4a85f",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateDataInstances pub/sub channel",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should get a message on the updateDataInstances pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateDataInstances');",
                                            "err": {},
                                            "uuid": "fe5006db-d468-46f2-ad38-c0bfd87a68f1",
                                            "parentUUID": "c5578d34-40a7-4daf-9cda-8630f2b4a85f",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "c57097d8-a2d1-4295-8d71-fe0f9f8eda0f",
                                        "fe5006db-d468-46f2-ad38-c0bfd87a68f1"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1014,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b186b64b-e60e-433d-a5b5-6048328c71d2",
                    "title": "Config license tests",
                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/license.test.js",
                    "file": "/test/integration/license.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config license tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateLicenses')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});",
                            "err": {},
                            "uuid": "f0fad302-b81e-417c-a7f9-e80e8b1f1d50",
                            "parentUUID": "b186b64b-e60e-433d-a5b5-6048328c71d2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7a3dd0fb-6eae-48e0-8818-00cbfb1da4e7",
                            "title": "license helper",
                            "fullFile": "/home/will/code/integrify/config-processor/test/integration/license.test.js",
                            "file": "/test/integration/license.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "7614ccb9-8e7c-4fcf-bca8-5fbcff7f19e3",
                                    "title": "updateLicenses",
                                    "fullFile": "/home/will/code/integrify/config-processor/test/integration/license.test.js",
                                    "file": "/test/integration/license.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set licenses and x.license in redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set licenses and x.license in redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 485,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses()\nlet storedLicences = await redis.hgetallAsync('licenses')\nlicenseId = Object.keys(storedLicences)[0]\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "c75975e8-f723-4bf4-a816-77b0c79c5df4",
                                            "parentUUID": "7614ccb9-8e7c-4fcf-bca8-5fbcff7f19e3",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateLicenses pub/sub channel",
                                            "fullTitle": "Config license tests license helper updateLicenses should get a message on the updateLicenses pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateLicenses');",
                                            "err": {},
                                            "uuid": "c4147b5b-6ec9-44a2-a706-e2a97c10da29",
                                            "parentUUID": "7614ccb9-8e7c-4fcf-bca8-5fbcff7f19e3",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set license redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set license redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 192,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses(licenseId)\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "10778bf0-69f2-4267-92f6-39c0b7943990",
                                            "parentUUID": "7614ccb9-8e7c-4fcf-bca8-5fbcff7f19e3",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "c75975e8-f723-4bf4-a816-77b0c79c5df4",
                                        "c4147b5b-6ec9-44a2-a706-e2a97c10da29",
                                        "10778bf0-69f2-4267-92f6-39c0b7943990"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 978,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "626fb856-1278-486a-8599-f250e61f9482",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "78755335-6b8c-418c-974f-92810041c24c",
                    "title": "Core Service biztimes",
                    "fullFile": "/home/will/code/integrify/core-service/test/biztimes.test.js",
                    "file": "/test/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service biztimes \"before all\" hook",
                            "timedOut": false,
                            "duration": 11,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nbiz = { \"Active\": false, \"EndHour\": 17, \"EndMinute\": 0, \"SID\": test_data.biz_sid, \"StartHour\": 9, \"StartMinute\": 15, \"Weekday\": 0 }",
                            "err": {},
                            "uuid": "e84bf113-f0b6-4b42-8407-63064727e94c",
                            "parentUUID": "78755335-6b8c-418c-974f-92810041c24c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3d841e0a-1419-4f89-a8c6-370d2f208bf4",
                            "title": "GET /biztimes",
                            "fullFile": "/home/will/code/integrify/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets biztimes",
                                    "fullTitle": "Core Service biztimes GET /biztimes gets biztimes",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/biztimes')\n    .set('Authorization', 'Bearer ' + token)\n// biz = res.body.Items[0];\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "62d2cabc-12c2-4ad1-9e40-b50e5f99f706",
                                    "parentUUID": "3d841e0a-1419-4f89-a8c6-370d2f208bf4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "62d2cabc-12c2-4ad1-9e40-b50e5f99f706"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 60,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8fbc8b14-7642-4a5d-baf9-b2d867725295",
                            "title": "POST /biztimes/save",
                            "fullFile": "/home/will/code/integrify/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "if (biz.EndHour < 24)\n    biz.EndHour = biz.EndHour + 1\nelse\n    biz.EndHour = biz.EndHour - 23",
                                    "err": {},
                                    "uuid": "394025fc-7457-4209-a432-db3b11e0aa41",
                                    "parentUUID": "8fbc8b14-7642-4a5d-baf9-b2d867725295",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves biztimes",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save saves biztimes",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/biztimes/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(biz)\n//console.log(res.body)\nexpect(res.status).to.equal(200);\nexpect(res.body.EndHour).to.exist;",
                                    "err": {},
                                    "uuid": "47f43cac-b24d-486c-bb12-56804fcea948",
                                    "parentUUID": "8fbc8b14-7642-4a5d-baf9-b2d867725295",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "47f43cac-b24d-486c-bb12-56804fcea948"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "a9edd3d1-d399-4302-93da-8d640870d3c6",
                    "title": "Core Service category",
                    "fullFile": "/home/will/code/integrify/core-service/test/category.test.js",
                    "file": "/test/category.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service category \"before all\" hook",
                            "timedOut": false,
                            "duration": 11,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "5ada4dd8-f320-453b-9cab-a9c47c5d28e8",
                            "parentUUID": "a9edd3d1-d399-4302-93da-8d640870d3c6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0e37e462-2458-428b-82f3-022a2520cf3f",
                            "title": "GET tree/{object_type}",
                            "fullFile": "/home/will/code/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET tree/{object_type} core-service",
                                    "timedOut": false,
                                    "duration": 56,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = res.body[0]\n            coreResult = res.body;\n            //console.log(res.body)\n            expect(res.status).to.equal(200);\n            // expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "ebfe6722-24bb-41f5-8591-f60fdddfa513",
                                    "parentUUID": "0e37e462-2458-428b-82f3-022a2520cf3f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ebfe6722-24bb-41f5-8591-f60fdddfa513"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 56,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0a461165-ca5a-4185-9903-ffbcfc11a91c",
                            "title": "GET {sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/category/' + category.id)\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "b58d24b9-0123-478b-b2b1-834dafcf7902",
                                    "parentUUID": "0a461165-ca5a-4185-9903-ffbcfc11a91c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b58d24b9-0123-478b-b2b1-834dafcf7902"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c4a51e62-9c84-4e6d-829b-874fa1680767",
                            "title": "POST save",
                            "fullFile": "/home/will/code/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category POST save core-service",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/category/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(category_save)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.CreatedDate).to.exist;\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "6a2f068a-3571-472e-abd8-7e9f6dab3ac8",
                                    "parentUUID": "c4a51e62-9c84-4e6d-829b-874fa1680767",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6a2f068a-3571-472e-abd8-7e9f6dab3ac8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1eb1a166-ecd3-4db5-a8e0-3b94f32fbc2d",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/will/code/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service category GET {sid}/delete \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 81,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//Fetch category sid to delete\n            let resp = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = resp.body;\n            category.forEach(element => {\n                //console.log(element.Name);\n                if (element.Name == 'Qa Auto')\n                    cate_delete = element;\n            });",
                                    "err": {},
                                    "uuid": "68c5b95d-7add-42ee-a481-7fde359f9993",
                                    "parentUUID": "1eb1a166-ecd3-4db5-a8e0-3b94f32fbc2d",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid}/delete core-service",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/category/' + cate_delete.id + '/delete')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(0);\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "a1e6d6d2-1291-4e79-9371-cc927286f117",
                                    "parentUUID": "1eb1a166-ecd3-4db5-a8e0-3b94f32fbc2d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a1e6d6d2-1291-4e79-9371-cc927286f117"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "294e1bd5-24c9-436e-9ef2-7ea9e63c69c2",
                    "title": "Core Service contacts",
                    "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                    "file": "/test/contact.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service contacts \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "7fa45a59-c5ed-4931-bf10-6e90eaeb7a3f",
                            "parentUUID": "294e1bd5-24c9-436e-9ef2-7ea9e63c69c2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6b9913ae-a802-4de2-ad03-d61d06058d9e",
                            "title": "GET /contacts/current",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/current core service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/current/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;\n                  currentUser_sid = res.body.SID",
                                    "err": {},
                                    "uuid": "c7f93924-8eec-4464-bbb0-4686db18d558",
                                    "parentUUID": "6b9913ae-a802-4de2-ad03-d61d06058d9e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c7f93924-8eec-4464-bbb0-4686db18d558"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6705b353-e08a-487b-8f06-6b605d58a272",
                            "title": "GET detail/{contact_sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET detail/{contact_sid} core-service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/detail/' + currentUser_sid)\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;",
                                    "err": {},
                                    "uuid": "5998e132-4f03-46f9-b88c-cc627e3780ff",
                                    "parentUUID": "6705b353-e08a-487b-8f06-6b605d58a272",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5998e132-4f03-46f9-b88c-cc627e3780ff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "304adaa1-6217-42a2-aa39-5482d63fccb4",
                            "title": "GET {contact_sid}/attributes",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/attributes core-service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/attributes')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \nexpect(res.body[0]).to.exist;\nexpect(res.body[1]).to.exist;\nexpect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "f1570376-5f2d-46ae-a83a-c746490630c4",
                                    "parentUUID": "304adaa1-6217-42a2-aa39-5482d63fccb4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f1570376-5f2d-46ae-a83a-c746490630c4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "9f25afc8-dcbe-4174-91c9-e541c28321ce",
                            "title": "GET {contact_sid}/delegations",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/delegations core-service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/delegations')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\n// //console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "d0c9495c-7dd9-4228-a733-77c316a17e73",
                                    "parentUUID": "9f25afc8-dcbe-4174-91c9-e541c28321ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d0c9495c-7dd9-4228-a733-77c316a17e73"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ab74a8ac-7a3d-4c57-8f69-56b8b520295f",
                            "title": "GET byuserid/{user_id}",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET byuserid/{user_id} core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/byuserid/iApprove')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\n//console.log(res.body)\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \n// expect(res.body[0]).to.exist;\n// expect(res.body[1]).to.exist;\n// expect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "19d68edb-e528-41fd-9077-cfc814ff2a9e",
                                    "parentUUID": "ab74a8ac-7a3d-4c57-8f69-56b8b520295f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "19d68edb-e528-41fd-9077-cfc814ff2a9e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "54eefada-3589-4ff7-b8cc-0ab7ff38be0a",
                            "title": "GET /contacts/search",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET /contacts/search core-service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search?search=System')\n      .set('Authorization', 'Bearer ' + token);\n// //console.log(res.body)\ncoreResult = res.body;\n//console.log(res.body);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "4b64f07c-6547-4188-8684-ce487c725dc5",
                                    "parentUUID": "54eefada-3589-4ff7-b8cc-0ab7ff38be0a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b64f07c-6547-4188-8684-ce487c725dc5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a6eaa3b1-8aea-45ac-aaff-8ad3f9256d76",
                            "title": "GET /contact/search/quick/name",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contact/search/quick/name core service",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search/quick/name/script/?start=0&count=20&sort=Name&dir=ASC&filter=System')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "dd146dfa-ab8d-49f8-852e-b187b067f6dd",
                                    "parentUUID": "a6eaa3b1-8aea-45ac-aaff-8ad3f9256d76",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dd146dfa-ab8d-49f8-852e-b187b067f6dd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 64,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "069c13c3-c3e9-44d3-aee7-d80345158157",
                            "title": "GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/contactdetailsearch/0/10/LAST_NAME/ASC/script/')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\nexpect(res.status).to.equal(200);\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "82bfba2c-7a7b-4971-ac80-b6ce39cb7a4c",
                                    "parentUUID": "069c13c3-c3e9-44d3-aee7-d80345158157",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "82bfba2c-7a7b-4971-ac80-b6ce39cb7a4c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1c95487f-1add-41d8-8791-174680b15e01",
                            "title": "POST /contacts/save | update",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service",
                                    "timedOut": false,
                                    "duration": 301,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/contacts/save')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\ninsertedSid = res.text\n//console.log(res.text)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "bc42d7e9-a6c7-4428-b3c8-5c01f7a993a1",
                                    "parentUUID": "1c95487f-1add-41d8-8791-174680b15e01",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service update",
                                    "timedOut": false,
                                    "duration": 307,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/update')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "1444eb1e-b80e-42d4-8533-75573d86186a",
                                    "parentUUID": "1c95487f-1add-41d8-8791-174680b15e01",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bc42d7e9-a6c7-4428-b3c8-5c01f7a993a1",
                                "1444eb1e-b80e-42d4-8533-75573d86186a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 608,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b9f0ccc5-de5a-4291-ae05-ec41a4c5fbd0",
                            "title": "POST /contacts/replace POST",
                            "fullFile": "/home/will/code/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "replace_user = [[\"OldContactSid\", insertedSid], [\"ReplacementContactSid\", insertedSid2], [\"RecipientReplace\", \"No\"], [\"OpenTaskReplace\", \"No\"], [\"GroupReplace\", \"No\"], [\"RoleReplace\", \"No\"], [\"DelegationReplace\", \"No\"]]",
                                    "err": {},
                                    "uuid": "80ba01ca-5c96-42fa-b85d-f0fa1773ae5b",
                                    "parentUUID": "b9f0ccc5-de5a-4291-ae05-ec41a4c5fbd0",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST core service update",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/replace ')\n      .set('Authorization', 'Bearer ' + token)\n      .send(replace_user);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "593611c8-9d00-41f3-ac80-d208b2aead66",
                                    "parentUUID": "b9f0ccc5-de5a-4291-ae05-ec41a4c5fbd0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "593611c8-9d00-41f3-ac80-d208b2aead66"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "f88fc363-7f7e-4a48-8612-73a073b88528",
                    "title": "Core service dbconns",
                    "fullFile": "/home/will/code/integrify/core-service/test/dbconn.test.js",
                    "file": "/test/dbconn.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core service dbconns \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "9447e4ce-ec92-490c-89bd-5c316d6fcdd9",
                            "parentUUID": "f88fc363-7f7e-4a48-8612-73a073b88528",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "it should GET all dbconns",
                            "fullTitle": "Core service dbconns it should GET all dbconns",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                            "err": {},
                            "uuid": "9b89ab23-2199-4010-9229-d98674e895b8",
                            "parentUUID": "f88fc363-7f7e-4a48-8612-73a073b88528",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should add a test dbconn",
                            "fullTitle": "Core service dbconns it should add a test dbconn",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/save/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\n  .send(testDbConn)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.be.a.guid()\ntestDbConnSid = res.text\n// verify testDbConn comes back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.be.greaterThan(-1);",
                            "err": {},
                            "uuid": "2d20bf0c-93b9-4b2f-afc3-058353f23082",
                            "parentUUID": "f88fc363-7f7e-4a48-8612-73a073b88528",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should delete the test dbconn",
                            "fullTitle": "Core service dbconns it should delete the test dbconn",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/delete/script/')\n  .set('Authorization', 'Bearer ' + token)\n  .send([testDbConnSid])\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n// verify testDbConn does not come back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.equal(-1);",
                            "err": {},
                            "uuid": "501d749e-2732-4a6e-85a1-e05f1224673c",
                            "parentUUID": "f88fc363-7f7e-4a48-8612-73a073b88528",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "9b89ab23-2199-4010-9229-d98674e895b8",
                        "2d20bf0c-93b9-4b2f-afc3-058353f23082",
                        "501d749e-2732-4a6e-85a1-e05f1224673c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5d795fd1-9931-4f3c-a3c3-0a74fa2230f4",
                    "title": "Core Service groups",
                    "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                    "file": "/test/group.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service groups \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "eac2b849-77ef-46e3-ba1e-e6d8f83d776b",
                            "parentUUID": "5d795fd1-9931-4f3c-a3c3-0a74fa2230f4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "17604ee3-7be1-4f67-9203-2287f6270469",
                            "title": "POST /group/save",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /group/save core service",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .post('/groups/save/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                        .send({ \"Name\": \"Qa Auto\", \"Description\": \"This is an automation\", \"Dynamic\": 0 })\n                  new_groupSid = res.text;\n                  expect(res.status).to.equal(200);\n                  expect(res.text).to.exist;\n                  expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "dd58f6b8-a03a-44f1-bc66-e919fbec0af4",
                                    "parentUUID": "17604ee3-7be1-4f67-9203-2287f6270469",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dd58f6b8-a03a-44f1-bc66-e919fbec0af4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 23,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8ad55abb-4de5-43f4-9c07-7ffba6c3dedf",
                            "title": "POST /groups/members/{groupSid}/add",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/add core service",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/add') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5a478e59-47c8-4c4b-a7d9-5a40c5d559e2",
                                    "parentUUID": "8ad55abb-4de5-43f4-9c07-7ffba6c3dedf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5a478e59-47c8-4c4b-a7d9-5a40c5d559e2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "dba681a4-f64b-474b-907d-11f7b1abbfa5",
                            "title": "POST /groups/members/{groupSid}/remove",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/remove core service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/remove') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "7a869cd3-a10d-4cf7-a174-0567ce4c3e83",
                                    "parentUUID": "dba681a4-f64b-474b-907d-11f7b1abbfa5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7a869cd3-a10d-4cf7-a174-0567ce4c3e83"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "aede1417-6f66-403b-a37e-69dee7a327e7",
                            "title": "GET /groups​/{sid}​/delete",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service groups GET /groups​/{sid}​/delete core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + new_groupSid + '/delete')\n      .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('true')",
                                    "err": {},
                                    "uuid": "5380f5c4-bdc8-429e-b92f-4a906fecf717",
                                    "parentUUID": "aede1417-6f66-403b-a37e-69dee7a327e7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5380f5c4-bdc8-429e-b92f-4a906fecf717"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f9082b55-4e3e-47ab-9d38-25a62168e889",
                            "title": "GET /groups/list/simple",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/list/simple core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/simple')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Administrators');",
                                    "err": {},
                                    "uuid": "4d211367-821c-465c-baa2-b2265afab878",
                                    "parentUUID": "f9082b55-4e3e-47ab-9d38-25a62168e889",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4d211367-821c-465c-baa2-b2265afab878"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3a925afb-af45-4567-b523-402052d60b39",
                            "title": "GET /groups/{sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/{sid} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.SID).to.exist\nexpect(res.body.SID).to.be.guid\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "c8464f3e-ef2e-43a3-8347-92c47f0d9e11",
                                    "parentUUID": "3a925afb-af45-4567-b523-402052d60b39",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c8464f3e-ef2e-43a3-8347-92c47f0d9e11"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "788f67da-839b-44f8-a475-4ddf59ad2780",
                            "title": "GET /groups/listroleassociation/{groupSid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listroleassociation/{groupSid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listroleassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('System Administrators');\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "24afe67e-7713-48bb-86ee-ac4b5e63afdd",
                                    "parentUUID": "788f67da-839b-44f8-a475-4ddf59ad2780",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "24afe67e-7713-48bb-86ee-ac4b5e63afdd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a1accb62-e731-4784-b62a-c8790fa296b3",
                            "title": "GET /groups/select/{contact_sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/select/{contact_sid} core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/select/' + system_user)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "900b024a-9bc6-46ec-af72-811769209275",
                                    "parentUUID": "a1accb62-e731-4784-b62a-c8790fa296b3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "900b024a-9bc6-46ec-af72-811769209275"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "12f62988-c20c-480b-b1bd-2208fc046c46",
                            "title": "GET /groups​/nondynamic​/list​/simple",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups​/nondynamic​/list​/simple core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/nondynamic/list/simple')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "68d93d80-1307-41d9-bfe1-8ac5a9f15de0",
                                    "parentUUID": "12f62988-c20c-480b-b1bd-2208fc046c46",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "68d93d80-1307-41d9-bfe1-8ac5a9f15de0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "96a85108-a632-467d-b085-6013ed7f42ee",
                            "title": "​GET /groups​/listmembers​/{sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/listmembers​/{sid} core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listmembers/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "bb365f9f-9563-4107-aa8d-c6ef5a81651e",
                                    "parentUUID": "96a85108-a632-467d-b085-6013ed7f42ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bb365f9f-9563-4107-aa8d-c6ef5a81651e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "50d6d0dc-92c4-4a3c-8449-b777d0031c48",
                            "title": "​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir} core service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "f510c73a-e0b2-4194-b3f1-d384ffc90b18",
                                    "parentUUID": "50d6d0dc-92c4-4a3c-8449-b777d0031c48",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f510c73a-e0b2-4194-b3f1-d384ffc90b18"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6b1c6b46-8eac-4217-ac1e-a2b84682b419",
                            "title": "GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listbypage/' + groupSid + '/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "9ac5e8c3-e066-4f31-a47c-0370e5967994",
                                    "parentUUID": "6b1c6b46-8eac-4217-ac1e-a2b84682b419",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ac5e8c3-e066-4f31-a47c-0370e5967994"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ebcb6646-31d2-428e-a716-106b637502c5",
                            "title": "GET /groups/listprocessassociation/{sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listprocessassociation/{sid} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listprocessassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "87faf4b1-f224-48d8-8218-a77f5965a283",
                                    "parentUUID": "ebcb6646-31d2-428e-a716-106b637502c5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "87faf4b1-f224-48d8-8218-a77f5965a283"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "e80afb91-24a4-466b-bfb3-cec6faa72692",
                    "title": "Core Service Members",
                    "fullFile": "/home/will/code/integrify/core-service/test/member.test.js",
                    "file": "/test/member.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Members \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "402994cd-692f-4def-a498-73335d1ed92d",
                            "parentUUID": "e80afb91-24a4-466b-bfb3-cec6faa72692",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "907178e8-bcb8-4d6f-a3cf-8ad4b0a5463a",
                            "title": "{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/will/code/integrify/core-service/test/member.test.js",
                            "file": "/test/member.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Members {page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/member/0/10/Name/Asc/script/?filter=&include=3')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "a8013e30-6d50-4ec1-bda9-d4ec26b9c55e",
                                    "parentUUID": "907178e8-bcb8-4d6f-a3cf-8ad4b0a5463a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a8013e30-6d50-4ec1-bda9-d4ec26b9c55e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "485465be-84c6-429e-979b-088130eac14f",
                    "title": "Core Service myTasks",
                    "fullFile": "/home/will/code/integrify/core-service/test/myTasks.test.js",
                    "file": "/test/myTasks.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service myTasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "81a83263-0451-4ce6-b660-7932b4d259e6",
                            "parentUUID": "485465be-84c6-429e-979b-088130eac14f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cd4c3a7e-ab35-47f9-a9b2-c14a54774736",
                            "title": "GEt {status}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/will/code/integrify/core-service/test/myTasks.test.js",
                            "file": "/test/myTasks.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service myTasks GEt {status}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 72,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/myTasks/status/0/10/Name/Asc')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;",
                                    "err": {},
                                    "uuid": "bac1f025-1418-4c0a-8969-797871f3e4d6",
                                    "parentUUID": "cd4c3a7e-ab35-47f9-a9b2-c14a54774736",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bac1f025-1418-4c0a-8969-797871f3e4d6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 72,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "7c85ab89-7435-4337-88e9-f813acfe8839",
                    "title": "Core Service powerForm",
                    "fullFile": "/home/will/code/integrify/core-service/test/powerform.test.js",
                    "file": "/test/powerform.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service powerForm \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\n// //console.log(test_data);\nnew_role = '{ \"Name\": \"Qatest\", \"ExtendedDescription\": \"qa automated\", \"OwnerSID\":' + test_data.object_sid + ', \"OwnerType\": 2 }'\npowerform = {\n    CategorySID: test_data.category_sid,\n    Name: \"test\",\n    PowerFormType: \"0\",\n    Version: 1\n}\n// { \"ID\": 9999, \"Mode\": 2, \"ObjectType\": 1, \"RoleSID\": test_data.role_sid, \"SID\": \"90645d40-9de6-48b1-b689-0a610ef1d716\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 3, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"4711a8f4-68be-4772-b389-0a610ef1d7fe\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 4, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"b1e03457-e202-4a99-a389-0a610ef1d79d\", \"Permissions\": 0 }, { \"ID\": 0, \"Mode\": 5, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"f221751c-ba9f-4b19-9708-1f22372dffde\", \"Permissions\": 1023 }",
                            "err": {},
                            "uuid": "81d86a7f-6743-4315-8ff4-108cb7127970",
                            "parentUUID": "7c85ab89-7435-4337-88e9-f813acfe8839",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "11151c78-e515-419c-bf09-5cd88595c82f",
                            "title": "POST /Powerform/save",
                            "fullFile": "/home/will/code/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm POST /Powerform/save core service",
                                    "timedOut": false,
                                    "duration": 49,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/powerform/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(powerform)\nexpect(res.status).to.equal(200);\nsid = res.body.SID\n//console.log(sid)",
                                    "err": {},
                                    "uuid": "16bc9fcd-b6c4-4770-8fb5-b0eaf364af9f",
                                    "parentUUID": "11151c78-e515-419c-bf09-5cd88595c82f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "16bc9fcd-b6c4-4770-8fb5-b0eaf364af9f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 49,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "85b88460-768f-45bd-83f1-40ff4622f8b7",
                            "title": "GET /Powerform/{sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid} core service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid)\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a1ee18e7-5708-44c0-a8c2-c889cbabff39",
                                    "parentUUID": "85b88460-768f-45bd-83f1-40ff4622f8b7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a1ee18e7-5708-44c0-a8c2-c889cbabff39"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "01525aef-0f4d-4647-81a1-a0389e4acdb2",
                            "title": "GET /Powerform/{sid}/detail",
                            "fullFile": "/home/will/code/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "7a66328b-6e69-4e5d-a9b5-48b169f6321b",
                                    "parentUUID": "01525aef-0f4d-4647-81a1-a0389e4acdb2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7a66328b-6e69-4e5d-a9b5-48b169f6321b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "38400832-b3f9-4e67-bae5-016b1cac8961",
                            "title": "GET /Powerform/{sid}/delete",
                            "fullFile": "/home/will/code/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/delete core service",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5c0e7b0d-47b3-4f52-8c41-810f30d17d62",
                                    "parentUUID": "38400832-b3f9-4e67-bae5-016b1cac8961",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c0e7b0d-47b3-4f52-8c41-810f30d17d62"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 23,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5284903d-17eb-4b62-9f0b-12b62a1fb92d",
                    "title": "Core Service Process",
                    "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                    "file": "/test/process.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken();\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nprc = { Name: new Date().toISOString(), Description: \"Qa Automation\", CategorySID: test_data.category_sid }",
                            "err": {},
                            "uuid": "bbe7cc34-3353-4fd5-be68-642320e14c2a",
                            "parentUUID": "5284903d-17eb-4b62-9f0b-12b62a1fb92d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fe81d597-dea4-4648-9583-e7542eadface",
                            "title": "POST /process​/create|delete",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service",
                                    "timedOut": false,
                                    "duration": 159,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/process/create')\n    .set('Authorization', 'Bearer ' + token)\n    .send(prc)\np1 = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "c0530597-6e68-4af8-8bb5-97c4852c0563",
                                    "parentUUID": "fe81d597-dea4-4648-9583-e7542eadface",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | Delete",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service | Delete",
                                    "timedOut": false,
                                    "duration": 168,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/process/' + p1 + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nconsole.log(res);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5115b56d-90a6-4c63-9034-25f93ea7b1d5",
                                    "parentUUID": "fe81d597-dea4-4648-9583-e7542eadface",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c0530597-6e68-4af8-8bb5-97c4852c0563",
                                "5115b56d-90a6-4c63-9034-25f93ea7b1d5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 327,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d281f361-bcff-4dc7-b824-72ac142bed8d",
                            "title": "GET /process/{sid}/copy",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /process/{sid}/copy core service",
                                    "timedOut": false,
                                    "duration": 3173,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/' + test_data.process_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            expect(res.status).to.equal(200);\n            //delete copied process\n            let del = await chai.request(newUrlBase)\n                .get('/process/' + res.text + '/delete')\n                .set('Authorization', 'Bearer ' + token)\n            expect(del.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "fb70e1ec-96af-4c19-a19e-2d63a25e65d0",
                                    "parentUUID": "d281f361-bcff-4dc7-b824-72ac142bed8d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fb70e1ec-96af-4c19-a19e-2d63a25e65d0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3173,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2564987d-c3e3-4d0a-aa1e-12fe4e6b0f8b",
                            "title": "GET /processes",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes core service",
                                    "timedOut": false,
                                    "duration": 110,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "52130e48-39d4-4b74-915f-aa83c5023897",
                                    "parentUUID": "2564987d-c3e3-4d0a-aa1e-12fe4e6b0f8b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "52130e48-39d4-4b74-915f-aa83c5023897"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "84bc08b6-eee9-4047-9113-b25505753c29",
                            "title": "GET /processes/{SID}",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{SID} core service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "25020c24-6ada-4af7-b88b-e6f09e36b81c",
                                    "parentUUID": "84bc08b6-eee9-4047-9113-b25505753c29",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "25020c24-6ada-4af7-b88b-e6f09e36b81c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0358cbcd-3e32-468c-8aa6-653f29de3dbc",
                            "title": "GET /processes/{sid}/detail",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "0559ed36-071f-43fc-b46c-1477b93f2443",
                                    "parentUUID": "0358cbcd-3e32-468c-8aa6-653f29de3dbc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0559ed36-071f-43fc-b46c-1477b93f2443"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "092496e4-6e44-425c-bc97-ffee87b7d2bb",
                            "title": "GET /processes/{sid}/name",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/name core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/name')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "0634b99b-ecac-4605-bc63-34f6b65a61f1",
                                    "parentUUID": "092496e4-6e44-425c-bc97-ffee87b7d2bb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0634b99b-ecac-4605-bc63-34f6b65a61f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c5726d3e-de39-4f47-9370-c2c25414c9ff",
                            "title": "GET ​/processes​/{sid}​/summary",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET ​/processes​/{sid}​/summary core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/summary')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "d8018bc2-6a72-43b2-a5ad-979e684dcd7d",
                                    "parentUUID": "c5726d3e-de39-4f47-9370-c2c25414c9ff",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d8018bc2-6a72-43b2-a5ad-979e684dcd7d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1ddae079-2357-40a5-a151-f959d360b1a6",
                            "title": "​GET /processes​/{process_sid}​/tasks",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process ​GET /processes​/{process_sid}​/tasks core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "4f9859af-1019-484e-9672-3161b65b59af",
                                    "parentUUID": "1ddae079-2357-40a5-a151-f959d360b1a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4f9859af-1019-484e-9672-3161b65b59af"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "bab169e7-a8a1-46d1-a148-f26ddffb98cb",
                            "title": "GET /processes/{process_sid}/tasks/{task_sid}/rules",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{process_sid}/tasks/{task_sid}/rules core service",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "4e2ead61-12c8-43d2-80aa-f3c5e233b7b8",
                                    "parentUUID": "bab169e7-a8a1-46d1-a148-f26ddffb98cb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4e2ead61-12c8-43d2-80aa-f3c5e233b7b8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1b0ee580-9ff0-41f2-902a-a4fdd6ea0225",
                            "title": "POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete ",
                            "fullFile": "/home/will/code/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/update/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(rule)\nsids.one = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a07709cd-e8d8-4f35-b5b2-f6159ff25dc5",
                                    "parentUUID": "1b0ee580-9ff0-41f2-902a-a4fdd6ea0225",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | reorder",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service | reorder",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let reorder = { \"SID\": sids.two, \"Ordinal\": 2, \"ConditionType\": 1, \"MatchGuid\": \"\", \"RecipientSID\": null, \"DestinationAction\": \"0\" }\nlet res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/reorder/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(reorder)\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2e1c14c6-e868-4df5-a6f0-8457de2925bf",
                                    "parentUUID": "1b0ee580-9ff0-41f2-902a-a4fdd6ea0225",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a07709cd-e8d8-4f35-b5b2-f6159ff25dc5",
                                "2e1c14c6-e868-4df5-a6f0-8457de2925bf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 43,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "bf25bc84-0c34-4bba-bb35-d335e73c0e09",
                    "title": "Core Service processes/tasks",
                    "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                    "file": "/test/processTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service processes/tasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nrecipient = [{ \"BaseObjectSID\": \"\", \"ContactType\": 2, \"ReferenceObjectSID\": \"\", \"SID\": test_data.contact_sid }]",
                            "err": {},
                            "uuid": "abaa2a85-423c-4673-86e5-6bbc75f958a3",
                            "parentUUID": "bf25bc84-0c34-4bba-bb35-d335e73c0e09",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6db1ef4e-de66-4af7-9df2-e12baa1af820",
                            "title": "GET {sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.task_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "f184234e-a0d0-475a-9185-db76d04bd153",
                                    "parentUUID": "6db1ef4e-de66-4af7-9df2-e12baa1af820",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f184234e-a0d0-475a-9185-db76d04bd153"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "be120153-d396-47f2-894e-b8a3f1d8b6c6",
                            "title": "GET {task_sid}/copy",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/copy core-service",
                                    "timedOut": false,
                                    "duration": 256,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/tasks/' + test_data.task_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            //console.log(res.body);\n            expect(res.status).to.equal(200);\n            expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "0860b086-1a95-48a6-90ce-e1142dd01336",
                                    "parentUUID": "be120153-d396-47f2-894e-b8a3f1d8b6c6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0860b086-1a95-48a6-90ce-e1142dd01336"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 256,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ef08758d-ea2f-4ebc-9561-cfc26652fac8",
                            "title": "GET {task_sid}/notification",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification core-service",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "ecd3982b-eaec-4ed6-97cc-92d537c1c736",
                                    "parentUUID": "ef08758d-ea2f-4ebc-9561-cfc26652fac8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ecd3982b-eaec-4ed6-97cc-92d537c1c736"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "61fdaafc-668c-4943-b871-d07ac4764ab9",
                            "title": "GET {task_sid}/notification/restore",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/restore core-service",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/restore')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "5738185f-4e0e-4a2b-8f1a-4260ee7328ac",
                                    "parentUUID": "61fdaafc-668c-4943-b871-d07ac4764ab9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5738185f-4e0e-4a2b-8f1a-4260ee7328ac"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 46,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5d0888fc-ebe6-4b36-ba90-9b258cec231a",
                            "title": "GET {task_sid}/notification/{enabledisable}",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/{enabledisable} core-service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/enabled')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "7dd6f2c9-a8d5-4970-a8bf-fd4345e715c6",
                                    "parentUUID": "5d0888fc-ebe6-4b36-ba90-9b258cec231a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7dd6f2c9-a8d5-4970-a8bf-fd4345e715c6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2c45dcd9-f5b9-419e-9511-f90d51bf8831",
                            "title": "POST notification/save",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST notification/save core-service",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/notification/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(notification)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "4457e8c8-50d6-4ffc-b32b-b9e24825df7c",
                                    "parentUUID": "2c45dcd9-f5b9-419e-9511-f90d51bf8831",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4457e8c8-50d6-4ffc-b32b-b9e24825df7c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fd0474c5-1fde-4252-998a-11b8e0b7089d",
                            "title": "GET {task_sid}/notification/advancedsettings",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/advancedsettings core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/advancesettings')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "c3072890-ebce-43b1-a6e1-317444494a93",
                                    "parentUUID": "fd0474c5-1fde-4252-998a-11b8e0b7089d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c3072890-ebce-43b1-a6e1-317444494a93"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e9eb37f7-b907-48aa-bc0c-15361078719e",
                            "title": "GET {task_sid}/recipients",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipients core-service",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "1a459293-33b2-4ac0-9193-dad96ba3913d",
                                    "parentUUID": "e9eb37f7-b907-48aa-bc0c-15361078719e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1a459293-33b2-4ac0-9193-dad96ba3913d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 44,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e4f5ddff-0cc3-4dd3-8860-1ed84a440ead",
                            "title": "POST {task_sid}/recipients/add",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/add core-service",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/add')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "1c46a6f9-4c81-46b8-8b72-f41367f35d90",
                                    "parentUUID": "e4f5ddff-0cc3-4dd3-8860-1ed84a440ead",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1c46a6f9-4c81-46b8-8b72-f41367f35d90"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "581fb089-e6a3-48f1-aa89-abf674a67b48",
                            "title": "POST {task_sid}/recipients/remove",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/remove core-service",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/remove')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "b07df4e8-6c64-4a5e-b629-084d25964d4e",
                                    "parentUUID": "581fb089-e6a3-48f1-aa89-abf674a67b48",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b07df4e8-6c64-4a5e-b629-084d25964d4e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "10005a9d-9293-4282-b583-8c38326c9129",
                            "title": "GET {task_sid}/recipsettings",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipsettings core-service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipsettings/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n// expect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "d52bb4ff-3611-4961-a447-36ebab75d89c",
                                    "parentUUID": "10005a9d-9293-4282-b583-8c38326c9129",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d52bb4ff-3611-4961-a447-36ebab75d89c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ccb39abd-0a47-4bf7-acfd-5d74079cc178",
                            "title": "GET task_sid}/recipients/dynamic",
                            "fullFile": "/home/will/code/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET task_sid}/recipients/dynamic core-service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/dynamic/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body.TotalItemCnt).to.exist;",
                                    "err": {},
                                    "uuid": "03a1ff37-89fe-4ff3-b378-aae1cf26d0c3",
                                    "parentUUID": "ccb39abd-0a47-4bf7-acfd-5d74079cc178",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "03a1ff37-89fe-4ff3-b378-aae1cf26d0c3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "fd0ae26e-53b2-4783-b2c5-60baa14e9d43",
                    "title": "Core Service systemmessages",
                    "fullFile": "/home/will/code/integrify/core-service/test/systemmessage.test.js",
                    "file": "/test/systemmessage.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service systemmessages \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "85a956ca-a5aa-4979-b2bf-f9ee9b7e73e8",
                            "parentUUID": "fd0ae26e-53b2-4783-b2c5-60baa14e9d43",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "882c7c9d-a30d-4af3-9a4b-7ee96055ad2f",
                            "title": "POST /systemmessages/save",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service systemmessages POST /systemmessages/save it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 47,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/systemmessages/save/script/')\n      .set('Authorization', 'Bearer ' + token)\n      .send(testMsg)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\n\n// verify systemMessage is in the list\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.MessageBody == testMsg.MessageBody);\nexpect(idx).to.be.greaterThan(-1);",
                                    "err": {},
                                    "uuid": "a0d69fc3-3d33-4b77-b476-e6e293a89fb4",
                                    "parentUUID": "882c7c9d-a30d-4af3-9a4b-7ee96055ad2f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a0d69fc3-3d33-4b77-b476-e6e293a89fb4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 47,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a209951a-dbfc-4fdd-8723-7c0f23e3ac78",
                            "title": "GET /systemmessages/list",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET all systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/list it should GET all systemmessages",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "9993715b-11e8-4205-9c1e-86479812ae98",
                                    "parentUUID": "a209951a-dbfc-4fdd-8723-7c0f23e3ac78",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9993715b-11e8-4205-9c1e-86479812ae98"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "79d7c9a6-4912-4b6a-933b-d9cc043be32e",
                            "title": "GET /systemmessages/active/list",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET active systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/active/list it should GET active systemmessages",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/active/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "ad64afcb-edef-4e9a-8c06-4512c5766106",
                                    "parentUUID": "79d7c9a6-4912-4b6a-933b-d9cc043be32e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ad64afcb-edef-4e9a-8c06-4512c5766106"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2a8fc26f-324e-42a8-a421-310b39e74512",
                            "title": "/systemmessages/{sid}}",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET system message by SID",
                                    "fullTitle": "Core Service systemmessages /systemmessages/{sid}} it should GET system message by SID",
                                    "timedOut": false,
                                    "duration": 66,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n             .get('/systemmessages/list/script/')\n             .set('Authorization', 'Bearer ' + token);\n       \n             expect(res.status).to.equal(200);\n             expect(res.body.Items).to.exist;\n             const testSystemMsgSID = res.body.Items[0].SID;\n             res = await chai.request(newUrlBase)\n             .get(`/systemmessages/${testSystemMsgSID}/script/`)\n             .set('Authorization', 'Bearer ' + token);\n             expect(res.status).to.equal(200);\n             expect(res.body.SID).to.equal(testSystemMsgSID);",
                                    "err": {},
                                    "uuid": "51660321-5be5-439f-93ce-f701b890171b",
                                    "parentUUID": "2a8fc26f-324e-42a8-a421-310b39e74512",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "51660321-5be5-439f-93ce-f701b890171b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 66,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "aa8ba1ff-a487-434b-a1fb-1c730915d88c",
                            "title": "GET /systemmessages/delete",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should DELETE system message",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/delete it should DELETE system message",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n      \nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst testSystemMsgSID = res.body.Items[0].SID;\nres = await chai.request(newUrlBase)\n  .post('/systemmessages/delete/script/') \n  .set('Authorization', 'Bearer ' + token)\n  .send([testSystemMsgSID])\n        \nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n        \n// verify that system message is not in the list anymore\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testSystemMsgSID);\nexpect(idx).to.equal(-1);",
                                    "err": {},
                                    "uuid": "3218b3e9-f0d3-427f-9db5-f42c69457f5d",
                                    "parentUUID": "aa8ba1ff-a487-434b-a1fb-1c730915d88c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3218b3e9-f0d3-427f-9db5-f42c69457f5d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 64,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "2b49c974-d075-4f53-9307-314a115eb054",
                    "title": "Core Service System Process",
                    "fullFile": "/home/will/code/integrify/core-service/test/systemProcess.test.js",
                    "file": "/test/systemProcess.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service System Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "a5294a6c-4b45-4f39-a510-353cf19d0f88",
                            "parentUUID": "2b49c974-d075-4f53-9307-314a115eb054",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cb131f49-c3f3-497c-97c8-bef37effee1e",
                            "title": "GET S/SystemProcess/list",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemProcess.test.js",
                            "file": "/test/systemProcess.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service System Process GET S/SystemProcess/list it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/SystemProcess/list')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "2550aa55-8e70-4eb2-92b9-15cde65e2a04",
                                    "parentUUID": "cb131f49-c3f3-497c-97c8-bef37effee1e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2550aa55-8e70-4eb2-92b9-15cde65e2a04"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 65,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "926c1702-02c6-48ae-a9df-477a9de1fae4",
                    "title": "Core Service system Settings",
                    "fullFile": "/home/will/code/integrify/core-service/test/systemSettings.test.js",
                    "file": "/test/systemSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service system Settings \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "19606a76-bf64-44ce-ae17-294c4707fd80",
                            "parentUUID": "926c1702-02c6-48ae-a9df-477a9de1fae4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0169daf6-5d44-439d-978e-8ff26ef06e13",
                            "title": "GET /systemsettings/list",
                            "fullFile": "/home/will/code/integrify/core-service/test/systemSettings.test.js",
                            "file": "/test/systemSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service system Settings GET /systemsettings/list core-service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/systemsettings/list/script/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n// expect(res.body.InstanceSID).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "e74a4aec-1d5d-4f6c-ac58-550cc4d8282d",
                                    "parentUUID": "0169daf6-5d44-439d-978e-8ff26ef06e13",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e74a4aec-1d5d-4f6c-ac58-550cc4d8282d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "e217e2e5-edce-4c77-925b-a61e52ceb222",
                    "title": "Core Service Tabs",
                    "fullFile": "/home/will/code/integrify/core-service/test/tabs.test.js",
                    "file": "/test/tabs.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Tabs \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "aaaedf52-c140-430a-a856-b546796cb136",
                            "parentUUID": "e217e2e5-edce-4c77-925b-a61e52ceb222",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c7283407-bbb1-4ef3-9c69-cba921ed842b",
                            "title": "GET {sid}",
                            "fullFile": "/home/will/code/integrify/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service Tabs GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "1bdfcdfb-257a-45b2-8504-640b0ff68966",
                                    "parentUUID": "c7283407-bbb1-4ef3-9c69-cba921ed842b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1bdfcdfb-257a-45b2-8504-640b0ff68966"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "314754a6-7057-4722-baa9-143ca33e501c",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/will/code/integrify/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service ",
                                    "fullTitle": "Core Service Tabs GET {sid}/delete core-service ",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "c50b157d-04d3-4526-817c-5137f1bbd3ad",
                                    "parentUUID": "314754a6-7057-4722-baa9-143ca33e501c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c50b157d-04d3-4526-817c-5137f1bbd3ad"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "6d6c4405-e89d-42b7-8371-60c635949621",
                    "title": "Core Service Utilities",
                    "fullFile": "/home/will/code/integrify/core-service/test/utilities.test.js",
                    "file": "/test/utilities.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Utilities \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "f38b68d7-ea3b-49f7-bd79-1f0ce63d9366",
                            "parentUUID": "6d6c4405-e89d-42b7-8371-60c635949621",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "69f55d85-d97b-459a-b6d9-7ea8bbf24f84",
                            "title": "locale",
                            "fullFile": "/home/will/code/integrify/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities locale core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/Utilities/locales/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            // expect(res.text).to.exist;\n            // expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "8c61e20e-1a06-4317-af23-14e4844ead40",
                                    "parentUUID": "69f55d85-d97b-459a-b6d9-7ea8bbf24f84",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8c61e20e-1a06-4317-af23-14e4844ead40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7c732411-789f-491f-8083-f73c26fde815",
                            "title": "GET /Utilities/timezone",
                            "fullFile": "/home/will/code/integrify/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/timezone core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/timezone')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Etc/GMT+12');",
                                    "err": {},
                                    "uuid": "a75dab2a-9021-49b2-b7f1-d135c0de3377",
                                    "parentUUID": "7c732411-789f-491f-8083-f73c26fde815",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a75dab2a-9021-49b2-b7f1-d135c0de3377"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 100000
        },
        {
            "uuid": "bbaed9bd-ec23-4305-8bce-bbbfda9bac7b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "1eee711b-8747-465a-a134-590cbb15f274",
                    "title": "Integrify Libs JWT Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                    "file": "/test/integration/auth/jwt.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "b5b01593-a534-4d0d-b72b-782d14457b1e",
                            "parentUUID": "1eee711b-8747-465a-a134-590cbb15f274",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9a4ac072-5de5-47f3-a716-85e0063e9c08",
                            "title": "getSystemToken",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a system token",
                                    "fullTitle": "Integrify Libs JWT Tests getSystemToken should return a system token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet token = await jwt.getSystemToken(process.env.INTEGRIFY_ENV_TOKEN, tenant)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "43f8251e-1197-4063-b2f6-c6f81a4eb66d",
                                    "parentUUID": "9a4ac072-5de5-47f3-a716-85e0063e9c08",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "43f8251e-1197-4063-b2f6-c6f81a4eb66d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a30087f6-b7b9-4f65-bc56-9a12d04389af",
                            "title": "createRefreshToken",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests createRefreshToken should return a refresh token",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(refreshToken).to.exist;\nexpect(exists !== null).to.be.true",
                                    "err": {},
                                    "uuid": "18932ade-964a-43cd-8bd4-cfcdbaa374c0",
                                    "parentUUID": "a30087f6-b7b9-4f65-bc56-9a12d04389af",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "18932ade-964a-43cd-8bd4-cfcdbaa374c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "5dd841cb-adfa-410c-adc0-912a75f2d35a",
                            "title": "verifyRefreshToken",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for the non-expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return true for the non-expired token",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.exist",
                                    "err": {},
                                    "uuid": "05623b71-098d-4102-a254-58a5a062579c",
                                    "parentUUID": "5dd841cb-adfa-410c-adc0-912a75f2d35a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for the expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return false for the expired token",
                                    "timedOut": false,
                                    "duration": 5007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, options)\nawait delay(5000);\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.be.false\nexists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(exists === null).to.be.true",
                                    "err": {},
                                    "uuid": "e7f68814-3c0e-4319-9e51-0ee87299f40b",
                                    "parentUUID": "5dd841cb-adfa-410c-adc0-912a75f2d35a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "05623b71-098d-4102-a254-58a5a062579c",
                                "e7f68814-3c0e-4319-9e51-0ee87299f40b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5008,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1ee58589-3047-488c-ab93-f1a0950ff32c",
                            "title": "issueJwt",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests issueJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 15\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\n//let exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\noptions.expiresInAmount = 5\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "ce88c067-9eda-408a-82a0-0e2ca127ae99",
                                    "parentUUID": "1ee58589-3047-488c-ab93-f1a0950ff32c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ce88c067-9eda-408a-82a0-0e2ca127ae99"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2dc37c9e-7123-43df-add8-074e3d968982",
                            "title": "verifyJwt",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nlet verified = jwt.verifyJwt(token, options);\nexpect(verified).to.exist",
                                    "err": {},
                                    "uuid": "73b5ecb0-22eb-45c2-b9f1-191bb05ce055",
                                    "parentUUID": "2dc37c9e-7123-43df-add8-074e3d968982",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail for an expired JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should fail for an expired JWT",
                                    "timedOut": false,
                                    "duration": 5009,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000);\nlet verified, error;\ntry {\n   verified = await jwt.verifyJwt(token, options)\n} catch(e) {\n    error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\nexpect(verified).to.not.exist",
                                    "err": {},
                                    "uuid": "18271eba-6343-4b09-a910-fbc83f1d54a7",
                                    "parentUUID": "2dc37c9e-7123-43df-add8-074e3d968982",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "73b5ecb0-22eb-45c2-b9f1-191bb05ce055",
                                "18271eba-6343-4b09-a910-fbc83f1d54a7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5017,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a9abb34d-25d4-4ff6-94e9-80d8aa68402c",
                            "title": "renewJwt",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an expired token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should return a new JWT using a valid refresh token and an expired token",
                                    "timedOut": false,
                                    "duration": 3012,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(3000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntoken = await jwt.renewJwt(token,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "a69f5507-1580-46f4-881d-32365d90724e",
                                    "parentUUID": "a9abb34d-25d4-4ff6-94e9-80d8aa68402c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail to return a new JWT using a invalid refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should fail to return a new JWT using a invalid refresh token",
                                    "timedOut": false,
                                    "duration": 5018,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 2;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntry {\n    token = await jwt.renewJwt(token,refreshToken, options)\n} catch(e) {\n    error = e\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")",
                                    "err": {},
                                    "uuid": "60fa43c3-826f-4f7e-9f33-39554fd03bbf",
                                    "parentUUID": "a9abb34d-25d4-4ff6-94e9-80d8aa68402c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a69f5507-1580-46f4-881d-32365d90724e",
                                "60fa43c3-826f-4f7e-9f33-39554fd03bbf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8030,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "25b08d8c-013e-409c-bc78-b3cc3cfabb8f",
                            "title": "reIssueJwt",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an Contact",
                                    "fullTitle": "Integrify Libs JWT Tests reIssueJwt should return a new JWT using a valid refresh token and an Contact",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\ntoken = await jwt.reIssueJwt(Contact,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "35bc3a74-fd83-4376-aed8-8943c4119480",
                                    "parentUUID": "25b08d8c-013e-409c-bc78-b3cc3cfabb8f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "35bc3a74-fd83-4376-aed8-8943c4119480"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8ec4c90e-54f6-4ebd-9684-67a822ea675b",
                    "title": "Integrify Libs Config Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/config/config.test.js",
                    "file": "/test/integration/config/config.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ff0108ad-76ab-4d9a-8491-49754197a2b1",
                            "title": "Config",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/config/config.test.js",
                            "file": "/test/integration/config/config.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Config Tests Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "c1458f01-83ea-4038-81a8-c8c117c1b6c5",
                                    "parentUUID": "ff0108ad-76ab-4d9a-8491-49754197a2b1",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "9222896c-57ee-41cb-8800-04140b4716c1",
                                    "title": "get a config from redis",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Config Tests Config get a config from redis should have config.mongo",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(config.mongo).to.exist;\n                //expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "b9e4cabb-419c-489e-83f8-1f4451d6e113",
                                            "parentUUID": "9222896c-57ee-41cb-8800-04140b4716c1",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "b9e4cabb-419c-489e-83f8-1f4451d6e113"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "c91c7ab7-ef05-4334-8de3-349f086ba0d7",
                                    "title": "log the latest git commit",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return the lates git commit",
                                            "fullTitle": "Integrify Libs Config Tests Config log the latest git commit should return the lates git commit",
                                            "timedOut": false,
                                            "duration": 4,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let commit = Config.logRunningGitCommit('integrify-libs', true);\nexpect(commit).to.exist;\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "0c4823b7-d3ff-4be0-9bf7-409e1cd20d7e",
                                            "parentUUID": "c91c7ab7-ef05-4334-8de3-349f086ba0d7",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "0c4823b7-d3ff-4be0-9bf7-409e1cd20d7e"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 4,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ef8d4635-bb04-4a91-9dae-a701d44b2e05",
                    "title": "Integrify Libs Logger Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/logger/logger.test.js",
                    "file": "/test/integration/logger/logger.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5162bddb-0396-4e17-b443-fa1baf73bd12",
                            "title": "Logger",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/logger/logger.test.js",
                            "file": "/test/integration/logger/logger.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Logger Tests Logger \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "65a90af5-8fa6-40be-bf99-d78b97fcc9a2",
                                    "parentUUID": "5162bddb-0396-4e17-b443-fa1baf73bd12",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "0f960f5e-a051-4da9-b157-e43c55b76b06",
                                    "title": "info",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/logger/logger.test.js",
                                    "file": "/test/integration/logger/logger.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect log a message",
                                            "fullTitle": "Integrify Libs Logger Tests Logger info should connect log a message",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "logger.info(config.tenantOne.tenantId);\n  \nexpect(logger).to.exist;\n              \n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "8c530171-1db4-42d7-9660-9027db188b50",
                                            "parentUUID": "0f960f5e-a051-4da9-b157-e43c55b76b06",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "8c530171-1db4-42d7-9660-9027db188b50"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d44d3208-6598-491c-b769-db2d53269a9c",
                    "title": "Integrify Libs Parse JWT Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                    "file": "/test/integration/middleware/parseJWT.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Parse JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);        config = await Config.getConfig()\nContact = {\n    contactSid: \"1234\",\n    userName: \"testuser\",\n    tenant: config.test.tenantOne.tenantId,\n    email: \"test@test.com\",\n    name: \"Test User\"\n}\nrefreshTokenPayload = {userName: Contact.userName, contactSid: Contact.contactSid}",
                            "err": {},
                            "uuid": "12a8aa34-9fc6-4128-92dc-b78498020a6e",
                            "parentUUID": "d44d3208-6598-491c-b769-db2d53269a9c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c56defc1-735e-45ab-8bed-83b656b31c84",
                            "title": "parse token",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": config.test.tenantOne.tenantId});\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "097ffa76-6d22-4d9f-8b21-6d01f8d584fd",
                                    "parentUUID": "c56defc1-735e-45ab-8bed-83b656b31c84",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "097ffa76-6d22-4d9f-8b21-6d01f8d584fd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "c59d9893-8b47-4f16-86fe-16cb75c4aea0",
                            "title": "auto refresh and parse token",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests auto refresh and parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 20025,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(Contact.tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": Contact.tenant, expiresIn:1});\n           \nawait delay(20000)\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\n          \nlet mockRes = await mocks.mockResponse();\n\nawait parseJWT(req, mockRes, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "c24f469d-95a3-4264-b2a0-d8d7f314a0c4",
                                    "parentUUID": "c59d9893-8b47-4f16-86fe-16cb75c4aea0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c24f469d-95a3-4264-b2a0-d8d7f314a0c4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20025,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "2470751c-9303-4f1a-8fb6-014de60cc643",
                            "title": "use system token",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests use system token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let req = {headers: {\"integrify-system-token\": config.test.tenantOne.tenantId + \" \" +  process.env.INTEGRIFY_ENV_TOKEN}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"d8c469c3-f781-4179-a09c-6d148885fb30\");\nexpect(req.oauth.profile.user_name).to.equal(\"Integrify\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "b92084c4-e091-4e8a-93da-8948ba4c5bbd",
                                    "parentUUID": "2470751c-9303-4f1a-8fb6-014de60cc643",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b92084c4-e091-4e8a-93da-8948ba4c5bbd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "361e5ee9-aa87-412d-9e92-83a7f4411f32",
                    "title": "Integrify Libs Mongeese Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                    "file": "/test/integration/mongeese/db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2a9cd0b3-f0c1-47db-9eec-58c4c5485322",
                            "title": "Mongeese",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                            "file": "/test/integration/mongeese/db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Mongeese Tests Mongeese \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconsole.log(config)\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "0f72cca0-102f-473d-9a15-944a0a60c197",
                                    "parentUUID": "2a9cd0b3-f0c1-47db-9eec-58c4c5485322",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "eda29c61-710f-46f1-96e2-9a050f0d2a59",
                                    "title": "mongoConn",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                                    "file": "/test/integration/mongeese/db.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect to mongo based on a tenant id",
                                            "fullTitle": "Integrify Libs Mongeese Tests Mongeese mongoConn should connect to mongo based on a tenant id",
                                            "timedOut": false,
                                            "duration": 12,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const tenantId = await config.tenantOne.tenantId;\nvar db = await mongeese.getConn(tenantId);\n    \nexpect(db).to.exist;\nexpect(db.name).to.equal(tenantId);\nexpect(db.readyState).to.equal(2);\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "9bde440d-750e-4f6b-ab6e-cea7d9ede695",
                                            "parentUUID": "eda29c61-710f-46f1-96e2-9a050f0d2a59",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "9bde440d-750e-4f6b-ab6e-cea7d9ede695"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 12,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2641cea4-38ef-45a7-8f75-27997a510ece",
                    "title": "Integrify Libs Permissions Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                    "file": "/test/integration/permissions/permissions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet config = await Config.getConfig();\nconfig = config.test;\nsession = {user_sid: config.tenantOne.adminUser.sid.toLowerCase(), user_name: config.tenantOne.adminUser.userName, tenant: config.tenantOne.tenantId }\nlet deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\nconsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                            "err": {},
                            "uuid": "6fd51448-7379-4d2a-8ccc-9a9247362f24",
                            "parentUUID": "2641cea4-38ef-45a7-8f75-27997a510ece",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);",
                            "err": {},
                            "uuid": "2aa55d20-6996-41c8-981c-ae8f3ebc6756",
                            "parentUUID": "2641cea4-38ef-45a7-8f75-27997a510ece",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1f250592-b52a-4b94-bd1e-6c0497b514b0",
                            "title": "currentUserPermssions",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests currentUserPermssions should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 211,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.currentUserPermissions(session);\nlet cached =  await redis.getAsync([`${session.tenant}.permissions.${session.user_sid}`]);\ncached = JSON.parse(cached)\nexpect(perms).length.to.be.gt(0);\nexpect(cached.length).to.equal(perms.length)",
                                    "err": {},
                                    "uuid": "4b500dfe-29c6-45e9-871c-bd7f1bd28c76",
                                    "parentUUID": "1f250592-b52a-4b94-bd1e-6c0497b514b0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b500dfe-29c6-45e9-871c-bd7f1bd28c76"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 211,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b6e57985-150e-475e-a9d4-51ffa31fa274",
                            "title": "isSysAdmin",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests isSysAdmin should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.exist",
                                    "err": {},
                                    "uuid": "ba7e41f9-5ca4-47af-94c6-1f611b51859c",
                                    "parentUUID": "b6e57985-150e-475e-a9d4-51ffa31fa274",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ba7e41f9-5ca4-47af-94c6-1f611b51859c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                            "title": "hasPermissions",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for sysAdmin permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for sysAdmin permissions",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.sysAdmin);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\", \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "e92d1bff-5e6b-4ae6-80f4-7fd756a486c2",
                                    "parentUUID": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for System scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for System scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.systemScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\",\n    \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.be.undefined",
                                    "err": {},
                                    "uuid": "b14a0f10-5e5b-4eab-87fd-0dfdbc4a0e75",
                                    "parentUUID": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for category scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for category scoped permissions",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.categoryScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    mocks.categoryScoped[0].ownerSid,\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "3af4d8fc-c5d7-4487-9458-33d0672591e7",
                                    "parentUUID": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for Object scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for Object scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "afddbe5a-86c1-41ed-bc1c-0b7fd004aaca",
                                    "parentUUID": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for Object scoped permissions with wrong publish status",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for Object scoped permissions with wrong publish status",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    \"production\");\nexpect(hasPerms).to.be.false;",
                                    "err": {},
                                    "uuid": "2472bb0c-150e-4102-b5d8-4f19558c365f",
                                    "parentUUID": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for bogus permission type",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for bogus permission type",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edizt',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.false;\nhasPerms = await permissions.hasPermissions(session,\n    'holiday',\n    'viewconfig');\nexpect(hasPerms).to.be.false",
                                    "err": {},
                                    "uuid": "b32e0c33-8ed4-41bc-a8b3-f0d7c6f71b1d",
                                    "parentUUID": "4a0e8361-5360-4901-b11d-2c23c3f2158d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e92d1bff-5e6b-4ae6-80f4-7fd756a486c2",
                                "b14a0f10-5e5b-4eab-87fd-0dfdbc4a0e75",
                                "3af4d8fc-c5d7-4487-9458-33d0672591e7",
                                "afddbe5a-86c1-41ed-bc1c-0b7fd004aaca",
                                "2472bb0c-150e-4102-b5d8-4f19558c365f",
                                "b32e0c33-8ed4-41bc-a8b3-f0d7c6f71b1d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fc716613-cae1-400b-8f1c-56c0207bfb15",
                    "title": "Integrify Libs SwaggerClient Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                    "file": "/test/integration/serviceClient/serviceClient.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d346e5d9-0d99-4b60-b253-fd38e3cb6e23",
                            "title": "Test portalUrl",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                            "file": "/test/integration/serviceClient/serviceClient.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs SwaggerClient Tests Test portalUrl \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "13fa01db-ae80-44e7-9c6e-235a75eacf45",
                                    "parentUUID": "d346e5d9-0d99-4b60-b253-fd38e3cb6e23",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "bc73313e-1594-40f5-8ca8-32a570621256",
                                    "title": "first check PORTAL_URL env var, then check redis",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                                    "file": "/test/integration/serviceClient/serviceClient.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have gotten portalUrl from redis",
                                            "fullTitle": "Integrify Libs SwaggerClient Tests Test portalUrl first check PORTAL_URL env var, then check redis should have gotten portalUrl from redis",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.PORTAL_URL = ''\nconst serviceClient = new ServiceClient('constructor param no longer used')\nconst portalUrl = await serviceClient._getPortalUrl()\nexpect(portalUrl).to.exist\nexpect(portalUrl.startsWith('http')).to.be.true",
                                            "err": {},
                                            "uuid": "0adec5d3-666d-40bc-8835-ae33438a0c16",
                                            "parentUUID": "bc73313e-1594-40f5-8ca8-32a570621256",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "0adec5d3-666d-40bc-8835-ae33438a0c16"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "12672c2b-dce5-4e1a-9455-7fbb80f4242b",
                    "title": "Integrify Libs Contact Model Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/contacts.test.js",
                    "file": "/test/integration/sqldb/contacts.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/contacts.test.js",
                            "file": "/test/integration/sqldb/contacts.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "4a69f1df-5f80-43e4-95d4-5b8e38df6a0d",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContact",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ContactModel = await model.getModel(config.test.tenantOne.tenantId, 'Contact')\n//console.dir(ContactModel)\nlet results = await ContactModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleContactGuid = results[0].contactGuid\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContact(sampleContactGuid);\nexpect(Contact).to.exist;\nexpect(Contact.contactGuid).equal(sampleContactGuid)",
                                    "err": {},
                                    "uuid": "cf98d86f-d331-43cb-ac1b-4d723ed4be22",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getContactByUserName",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContactByUserName",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nlet sampleUserName = user.userName\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContactByUserName(sampleUserName);\nexpect(Contact).to.exist;\nexpect(Contact.userName).equal(sampleUserName)",
                                    "err": {},
                                    "uuid": "45bbec2e-0888-4a61-93bd-3700d4b62b60",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should searchContacts",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should searchContacts",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne)\n            let Contacts = await contactController.searchContacts({'auth.userName': 'iApprov', firstName: 'Sys', lastName: 'S'});\n            expect(Contacts[0]).to.exist;\n            expect(Contacts[0].userName).equal('iApprove')\n            Contacts = await contactController.searchContacts({'auth.userName': 'iApprove'});\n            let Contact = Contacts[0]\n            expect(Contact).to.exist;\n            expect(Contact.userName).equal('iApprove')",
                                    "err": {},
                                    "uuid": "c48bf934-4f18-4e08-a004-c830b04aaec5",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should dbAuthContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should dbAuthContact",
                                    "timedOut": false,
                                    "duration": 90,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            expect(Contact.token).to.exist;\n            expect(Contact.refreshToken).to.exist;\n            expect(Contact).to.have.property('passwordResetDate');\n            expect(Contact.userName).equal(user.userName);",
                                    "err": {},
                                    "uuid": "c0889109-e394-4f93-b47a-5ba0b665e450",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should indicate that juser password is not expired (passwordResetDate 2121)",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should indicate that juser password is not expired (passwordResetDate 2121)",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nconst isPasswordExpired = await contactController.isPasswordExpired('juser')\n\nexpect(isPasswordExpired).to.exist\nexpect(isPasswordExpired).to.be.false",
                                    "err": {},
                                    "uuid": "71ddd0a0-4037-40e1-ae17-b29f4cff05da",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should indicate that password is expired (passwordResetDate is NULL)",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should indicate that password is expired (passwordResetDate is NULL)",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nconst isPasswordExpired = await contactController.isPasswordExpired(user.userName)\n\nexpect(isPasswordExpired).to.exist\nexpect(isPasswordExpired).to.be.true",
                                    "err": {},
                                    "uuid": "6d5bec71-f104-4041-8b02-1f740d621cd7",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getGroupSids",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getGroupSids",
                                    "timedOut": false,
                                    "duration": 94,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            let groupSids = await contactController.getGroupSids(Contact.contactSid)\n            expect(groupSids.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "89c62e50-3dbf-40da-ac3f-445fc9dbbf86",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getAccountsByEmail",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getAccountsByEmail",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contacts = await contactController.getAccountsByEmail(config.test.tenantOne.adminUser.email);\nexpect(Contacts.length).to.be.gt(0);\nContacts.forEach(contact => {\n  expect(contact).to.have.all.keys('contactGuid', 'ntId', 'email');\n  expect(contact.email).to.equal(config.test.tenantOne.adminUser.email);\n});",
                                    "err": {},
                                    "uuid": "a0d5f912-471c-47d1-88f6-bff73001ad39",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should updatePassword",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should updatePassword",
                                    "timedOut": false,
                                    "duration": 106,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contact = await contactController.updatePassword(\n  config.test.tenantOne.adminUser.sid,\n  bcrypt.hashSync(config.test.tenantOne.adminUser.password)\n);\nexpect(Contact).to.exist\n  .and.to.equal(1)",
                                    "err": {},
                                    "uuid": "2396f235-0275-4a3b-83dd-0b880dc9ae4a",
                                    "parentUUID": "3f9ddfba-61be-40fb-9468-055e502cda0e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cf98d86f-d331-43cb-ac1b-4d723ed4be22",
                                "45bbec2e-0888-4a61-93bd-3700d4b62b60",
                                "c48bf934-4f18-4e08-a004-c830b04aaec5",
                                "c0889109-e394-4f93-b47a-5ba0b665e450",
                                "71ddd0a0-4037-40e1-ae17-b29f4cff05da",
                                "6d5bec71-f104-4041-8b02-1f740d621cd7",
                                "89c62e50-3dbf-40da-ac3f-445fc9dbbf86",
                                "a0d5f912-471c-47d1-88f6-bff73001ad39",
                                "2396f235-0275-4a3b-83dd-0b880dc9ae4a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 345,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c49284a8-11fb-4e1b-947d-ef9541300c6e",
                    "title": "Integrify Libs Controller Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/controller.test.js",
                    "file": "/test/integration/sqldb/controller.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cd8c4740-ee85-4ee5-a1c4-5022832f32d9",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/controller.test.js",
                            "file": "/test/integration/sqldb/controller.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "3b6cd09d-d8cd-4252-9874-ba2c87086a23",
                                    "parentUUID": "cd8c4740-ee85-4ee5-a1c4-5022832f32d9",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Controller Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(controllers.BaseController).to.exist;\nclass TestController extends controllers.BaseController {}            \nconst testController = new TestController(config.test.tenantOne)\nlet tenantDb =  await testController.getTenantDb()\n\nexpect(tenantDb).to.exist",
                                    "err": {},
                                    "uuid": "17c2566c-75ff-438c-a93d-ab819353e100",
                                    "parentUUID": "cd8c4740-ee85-4ee5-a1c4-5022832f32d9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "17c2566c-75ff-438c-a93d-ab819353e100"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "854855f4-38bb-4407-8016-e0aaf435a121",
                    "title": "Integrify Libs Data Instance Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                    "file": "/test/integration/sqldb/data-instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Data Instance Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await Config.getConfig();\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "926c1e76-12f7-478d-9712-05310d6f813b",
                            "parentUUID": "854855f4-38bb-4407-8016-e0aaf435a121",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ebf3f171-ebc1-42f5-89f5-445d1378daeb",
                            "title": "Model Tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a consumer model",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should get a consumer model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;",
                                    "err": {},
                                    "uuid": "0c5d07d6-cf92-4d35-b7b8-304dc3e8fad5",
                                    "parentUUID": "ebf3f171-ebc1-42f5-89f5-445d1378daeb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query()\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "4ef27570-62a0-4313-b62b-d28e516ccd01",
                                    "parentUUID": "ebf3f171-ebc1-42f5-89f5-445d1378daeb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances with settings",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances with settings",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query().eager('[dataInstanceSettings]')\nconsole.dir(results)\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "7cb3c5cc-d2da-45a9-9346-4c5f69ba7c71",
                                    "parentUUID": "ebf3f171-ebc1-42f5-89f5-445d1378daeb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0c5d07d6-cf92-4d35-b7b8-304dc3e8fad5",
                                "4ef27570-62a0-4313-b62b-d28e516ccd01",
                                "7cb3c5cc-d2da-45a9-9346-4c5f69ba7c71"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2433cbbf-aa79-491a-b985-d669061c2f47",
                            "title": "Controller Tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list datainstances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should list datainstances",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstances = await dataInstanceController.listDataInstances()\nexpect(dataInstances).to.exist;\nexpect(dataInstances.length).to.be.gt(0)\nexpect(dataInstances[0].dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "fdda27b5-8ee9-488d-a8db-ca3e5213a251",
                                    "parentUUID": "2433cbbf-aa79-491a-b985-d669061c2f47",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstance",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nexpect(dataInstance).to.exist;\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "5ee3dee8-69d4-4fea-ade3-81f3238ba596",
                                    "parentUUID": "2433cbbf-aa79-491a-b985-d669061c2f47",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstances hash",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstances hash",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstanceHt = await dataInstanceController.GetDataInstancesHash()\nexpect(dataInstanceHt).to.exist;\nexpect(dataInstanceHt[config.test.tenantOne.tenantId]).to.exist;",
                                    "err": {},
                                    "uuid": "095a9888-487b-4e22-933c-52ec5befd412",
                                    "parentUUID": "2433cbbf-aa79-491a-b985-d669061c2f47",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should update a datainstance",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let settingVal = new Date().toISOString()\nlet dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nlet settingIdx  = dataInstance.dataInstanceSettings.findIndex((s => s.settingsKey === 'HelpURL'));\ndataInstance.dataInstanceSettings[settingIdx].settingsValue = settingVal\ndataInstance  = await dataInstanceController.updateDataInstance(dataInstance)\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)\nlet setting  = dataInstance.dataInstanceSettings.find((s => s.settingsKey === 'HelpURL'));\nexpect(setting).to.exist\nexpect(setting.settingsValue).to.equal(settingVal)",
                                    "err": {},
                                    "uuid": "7261d7a5-de9c-49d1-8076-a8fce5502898",
                                    "parentUUID": "2433cbbf-aa79-491a-b985-d669061c2f47",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fdda27b5-8ee9-488d-a8db-ca3e5213a251",
                                "5ee3dee8-69d4-4fea-ade3-81f3238ba596",
                                "095a9888-487b-4e22-933c-52ec5befd412",
                                "7261d7a5-de9c-49d1-8076-a8fce5502898"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 101,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "74f60787-c687-4769-ac3b-caaf2376acc3",
                    "title": "Integrify Libs Model Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/model.test.js",
                    "file": "/test/integration/sqldb/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8f31aa9b-d661-4f88-af1d-3a5fdfe30672",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/model.test.js",
                            "file": "/test/integration/sqldb/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "97f33c58-f35b-418f-91fb-bc8dbde71816",
                                    "parentUUID": "8f31aa9b-d661-4f88-af1d-3a5fdfe30672",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nthis.timeout(105000);\nconst ContactModel = await model.bindModel(config.test.tenantOne.tenantId, models.Contact)\n//console.dir(ContactModel)\n//ContactModel.setOptions({excludeDeleted:false})\n//let results = await ContactModel.query().where('contactId', '>', 0)\n//console.log(results)\nlet results;\nresults = await ContactModel.query().setOptions({excludeDeleted:false}).where('contactId', '>', 0)\nresults = await ContactModel.query().where('contactId', '>', 0)\nlet c = await ContactModel.query().findOne({userName: 'iApprove'}).joinRelated('auth').select('contact.*', 'contact.contactGuid as contactSid','auth.userName as userName')\nconsole.log(c)\nlet patched = await c.$query().patch({middleName: \"bob\"})\nconsole.log(patched)\n\n\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "6e1a6f89-054d-44bc-b0f6-700050daf0fe",
                                    "parentUUID": "8f31aa9b-d661-4f88-af1d-3a5fdfe30672",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6e1a6f89-054d-44bc-b0f6-700050daf0fe"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "5c6c0b34-e341-4f90-b959-a32e234d65a9",
                    "title": "Integrify Libs Permissions Controller Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/permissions.test.js",
                    "file": "/test/integration/sqldb/permissions.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "16945483-ef45-4ba7-8c5f-673aabf9cf58",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/permissions.test.js",
                            "file": "/test/integration/sqldb/permissions.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "36d13d40-bfc3-4b11-87f6-70d60ed71037",
                                    "parentUUID": "16945483-ef45-4ba7-8c5f-673aabf9cf58",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getUserPermissionsFromDb",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests should getUserPermissionsFromDb",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst session = {tenantId: config.test.tenantOne.tenantId, user_sid: user.sid}\nlet permissionsController = new PermissionsController(session)\nlet permissions = await permissionsController.getWorkflowPermissionsFromDb(session);\nconsole.log(permissions)\nexpect(permissions[0]).to.exist;",
                                    "err": {},
                                    "uuid": "bb3ef836-6122-4a7b-9d91-f3ec8bd0dcc7",
                                    "parentUUID": "16945483-ef45-4ba7-8c5f-673aabf9cf58",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bb3ef836-6122-4a7b-9d91-f3ec8bd0dcc7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1a391dc7-491d-45e1-9566-d32a1bffeadb",
                    "title": "Integrify Libs Process Model Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/process.test.js",
                    "file": "/test/integration/sqldb/process.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8927bc1f-9bf5-44da-a3a4-1aed97e6007a",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/process.test.js",
                            "file": "/test/integration/sqldb/process.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Process Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "f515750d-8231-4035-8fd4-73223dbc9532",
                                    "parentUUID": "8927bc1f-9bf5-44da-a3a4-1aed97e6007a",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a process from sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should get a process from sql",
                                    "timedOut": false,
                                    "duration": 68,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n\n\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nconst Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nconsole.log([Process])\nexpect(Process.processGuid).equal(sampleProcesstGuid)",
                                    "err": {},
                                    "uuid": "3370b00d-86e7-4030-9b9a-772ac49b1ca1",
                                    "parentUUID": "8927bc1f-9bf5-44da-a3a4-1aed97e6007a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should upsert a process in sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should upsert a process in sql",
                                    "timedOut": false,
                                    "duration": 305,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n//console.dir(ContactModel)\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nlet Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nexpect(Process.processGuid).equal(sampleProcesstGuid)\nlet newName = 'Updated ' + new Date().toISOString()\nclonedProcess = JSON.parse(JSON.stringify(Process));\n           \nProcess.objective = newName;\nProcess.tasks[0].internalNotes = newName;\nProcess.processCategory.ordinal = 1;\nawait processController.upsertFullProcess(Process);\nProcess = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process.objective).to.equal(newName);\nexpect(Process.tasks[0].internalNotes).to.equal(newName);\nexpect(Process.processCategory.ordinal).equal(1)",
                                    "err": {},
                                    "uuid": "d2e53d02-414d-40ad-ac42-76e72bc40fc4",
                                    "parentUUID": "8927bc1f-9bf5-44da-a3a4-1aed97e6007a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3370b00d-86e7-4030-9b9a-772ac49b1ca1",
                                "d2e53d02-414d-40ad-ac42-76e72bc40fc4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 373,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "977df9fb-f93b-4563-bd60-8d3804510bcf",
                    "title": "Integrify Libs Tenant tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                    "file": "/test/integration/sqldb/sqldb-db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0fae666d-d57a-4416-b1de-73f1ba294582",
                            "title": "tentantSql tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                            "file": "/test/integration/sqldb/sqldb-db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// let configClass = await require('../../../config')\n            // await configClass.setConfigs();\n            // config = await configClass.getConfig();\n            config = await Config.getConfig();\n            this.timeout(100000);",
                                    "err": {},
                                    "uuid": "7e40fbb7-91e7-4536-b7bc-25545d4ed1ce",
                                    "parentUUID": "0fae666d-d57a-4416-b1de-73f1ba294582",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get the consumer Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests should get the consumer Db",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getConsumersDb(config.consumersConn)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`SELECT * FROM sys.tables WHERE name = 'data_instance'`)\nexpect(queyResults.length).equal(1)\n//console.log(queyResults)",
                                    "err": {},
                                    "uuid": "ff074f3f-5bce-49b0-834a-80680102929c",
                                    "parentUUID": "0fae666d-d57a-4416-b1de-73f1ba294582",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "shoulld get the tenant Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests shoulld get the tenant Db",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getTenantDb(config.test.tenantOne.tenantId)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`select * from contact`)\nexpect(queyResults.length).to.be.gt(0)\nqueyResults = await db.raw(\"select * from contact_auth where user_name = :uname\", {uname: 'iApprove'})\nexpect(queyResults.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "77363340-c906-497d-a457-6f6038d4a450",
                                    "parentUUID": "0fae666d-d57a-4416-b1de-73f1ba294582",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ff074f3f-5bce-49b0-834a-80680102929c",
                                "77363340-c906-497d-a457-6f6038d4a450"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 63,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "75343818-0423-4153-a37d-8c596a4c687d",
                    "title": "Integrify Libs StreamConsumer Load Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2845,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\n/*\nRedis stream stuff:\nYou can scale up by running additional processors in the group. This creates a new Node process and runs a new consumer\nin the existing stream group. The consumer name for each processor will have an incremental suffix so it will be unique\nensuring that each consumer processes a unique set of events.\nWith 3 processors, it handeld a loadSize of a million events as they came in with no backlog build up in the group.\n */\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nforkedProcessor2 = await streamConsumer.forkStreamProcessor()\nforkedProcessor3 = await streamConsumer.forkStreamProcessor()\nfor (let index = 0; index < loadSize; index++) {\n\n    await sp.sendEvent(\"extendSession\",{\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\", \n            user_name: \"iapprove\", \n            email: \"iapprove@integrify.com\", \n            name: \"System System\"\n        }\n    })\n\n}\n       \nawait delay(1000);",
                            "err": {},
                            "uuid": "352b4b25-e85c-4e9f-8154-6876025dbfbb",
                            "parentUUID": "75343818-0423-4153-a37d-8c596a4c687d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill()\nforkedProcessor2.kill()\nforkedProcessor3.kill()",
                            "err": {},
                            "uuid": "3baa94d2-ab4e-448f-b57d-d7f7d2558bde",
                            "parentUUID": "75343818-0423-4153-a37d-8c596a4c687d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0fe873a1-96ef-41da-94d0-427e92ebecf6",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                            "file": "/test/integration/stream/streamConsumer.load.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "b0f5347b-764b-4253-9c43-ad178d70cc6e",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Load Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "55e8918d-b8e5-459c-ad06-bc53861cad00",
                                            "parentUUID": "b0f5347b-764b-4253-9c43-ad178d70cc6e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "55e8918d-b8e5-459c-ad06-bc53861cad00"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "af457f89-4fe6-447a-9a17-57a87f50f381",
                    "title": "Integrify Libs StreamConsumer Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                    "file": "/test/integration/stream/streamConsumer.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5033,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\",\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nawait delay(5000);",
                            "err": {},
                            "uuid": "e0fd018c-809e-4e33-99cf-feec215430c3",
                            "parentUUID": "af457f89-4fe6-447a-9a17-57a87f50f381",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "f28765c4-682c-4efa-bc55-c97d203fa5f4",
                            "parentUUID": "af457f89-4fe6-447a-9a17-57a87f50f381",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ed358b58-2b3f-40c1-957b-dee8e5762dce",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                            "file": "/test/integration/stream/streamConsumer.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "ab9cdb64-5d39-4b15-9031-5b1e4a157efa",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                                    "file": "/test/integration/stream/streamConsumer.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "8acbbc7c-1944-4255-8311-95e1aba4067f",
                                            "parentUUID": "ab9cdb64-5d39-4b15-9031-5b1e4a157efa",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "8acbbc7c-1944-4255-8311-95e1aba4067f"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8cad725c-51fe-4761-8fb8-5ebee06c0fb8",
                    "title": "Integrify Libs Stream Processor Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamProcessor.test.js",
                    "file": "/test/integration/stream/streamProcessor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8e4f202f-5952-4e38-a092-0b87d544004b",
                            "title": "Integrify Libs multiple Stream Processor Tests",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamProcessor.test.js",
                            "file": "/test/integration/stream/streamProcessor.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Processor Tests Integrify Libs multiple Stream Processor Tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 5628,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(105000);\nconst tenantCount = 20;\nfor (let i = 0; i < tenantCount; i++) {\n    const xtestStreamName = 'teststream'\n    xtenant = \"tenant\" + i\n    const xfullStreamName = xtenant + '.stream.' + xtestStreamName\n    xeventProcessedName = xfullStreamName + \".\" + xgroup + \".processed\";\n    xeventHistoryName = xfullStreamName + \".history\"\n    let sp = new StreamPublisher(xtestStreamName,xtenant);\n    const xstreamConsumer = new StreamConsumer(xtestStreamName,xtenant, xgroup, null, true, 5)\n    let streamName = fullStreamName + i;\n    let deletes = await redis.delAsync([xfullStreamName, xeventHistoryName, xeventProcessedName, `${xtenant}.activeSessions`]);\n    console.log(deletes)\n    for (let index = 0; index < 5; index++) {\n        await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n            token: \"abcd234\",\n            user: {\n                sid:\"11111\",\n                user_name: \"iapprove\",\n                email: \"iapprove@integrify.com\",\n                name: \"System System\"\n            }\n        })\n    }\n    await xstreamConsumer.runStreamProcessor(10, false, sessionHandler, 1);\n}\nawait delay(5000);",
                                    "err": {},
                                    "uuid": "cddc69fc-0e51-408d-ae08-62eea68fb732",
                                    "parentUUID": "8e4f202f-5952-4e38-a092-0b87d544004b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [
                                {
                                    "title": "\"after all\" hook",
                                    "fullTitle": "Integrify Libs Stream Processor Tests Integrify Libs multiple Stream Processor Tests \"after all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//forkedProcessor.kill('SIGTERM')",
                                    "err": {},
                                    "uuid": "9007bf72-ace3-4ed2-9137-9e25b1ebcc6f",
                                    "parentUUID": "8e4f202f-5952-4e38-a092-0b87d544004b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "fd97f3dd-cca3-4117-8492-d0d82ad410f7",
                                    "title": "runStreamProcessor",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamProcessor.test.js",
                                    "file": "/test/integration/stream/streamProcessor.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [],
                                    "suites": [
                                        {
                                            "uuid": "a1c6360d-6444-48c1-8692-a3a3ba5213eb",
                                            "title": "processed event count  = history count",
                                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamProcessor.test.js",
                                            "file": "/test/integration/stream/streamProcessor.test.js",
                                            "beforeHooks": [],
                                            "afterHooks": [],
                                            "tests": [
                                                {
                                                    "title": "should process events",
                                                    "fullTitle": "Integrify Libs Stream Processor Tests Integrify Libs multiple Stream Processor Tests runStreamProcessor processed event count  = history count should process events",
                                                    "timedOut": false,
                                                    "duration": 2,
                                                    "state": "passed",
                                                    "speed": "fast",
                                                    "pass": true,
                                                    "fail": false,
                                                    "pending": false,
                                                    "context": null,
                                                    "code": "console.log(xeventProcessedName)\nlet processedCount = await redis.zcardAsync(xeventProcessedName)\nlet historyCount = await redis.zcardAsync(xeventHistoryName)\nexpect(historyCount).to.equal(processedCount)",
                                                    "err": {},
                                                    "uuid": "3bd91ce7-57b7-4042-9b8b-f41452465d41",
                                                    "parentUUID": "a1c6360d-6444-48c1-8692-a3a3ba5213eb",
                                                    "isHook": false,
                                                    "skipped": false
                                                }
                                            ],
                                            "suites": [],
                                            "passes": [
                                                "3bd91ce7-57b7-4042-9b8b-f41452465d41"
                                            ],
                                            "failures": [],
                                            "pending": [],
                                            "skipped": [],
                                            "duration": 2,
                                            "root": false,
                                            "rootEmpty": false,
                                            "_timeout": 2000
                                        }
                                    ],
                                    "passes": [],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 0,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f8732ee1-083a-4bfe-81b4-b7d606507a07",
                    "title": "Integrify Libs Stream Publisher Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamPublisher.test.js",
                    "file": "/test/integration/stream/streamPublisher.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c15ee27c-8737-4431-a6e9-91fc4e6cd384",
                            "title": "stream publisher",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/stream/streamPublisher.test.js",
                            "file": "/test/integration/stream/streamPublisher.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(100000)\nprocess.env.jest = \"true\";\nawait redis.delAsync([fullStreamName, eventHistoryName])",
                                    "err": {},
                                    "uuid": "88997960-ac64-472a-928f-3a3ba7010f63",
                                    "parentUUID": "c15ee27c-8737-4431-a6e9-91fc4e6cd384",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should handle the constructor",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should handle the constructor",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant);\nexpect(sp.streamName).equal(fullStreamName)\nexpect(sp.baseStreamName).equal(testStreamName)",
                                    "err": {},
                                    "uuid": "324c0a4c-bdcf-4a4a-a5da-9232a8c1bcb2",
                                    "parentUUID": "c15ee27c-8737-4431-a6e9-91fc4e6cd384",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should an sendEvent",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should an sendEvent",
                                    "timedOut": false,
                                    "duration": 105,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant,1000);\nexpect(sp.streamName).equal(fullStreamName)\n//sendEvent(eventType, data) data will get stringified\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}})   \nexpect(id).to.exist;\nexpect (id.indexOf(\"-\")).to.be.gt(-1)  \nawait delay(100);\nlet id2 = await sp.sendEvent(testEventType, {foo:\"bar2\", biz:\"buzz2\", beep:{bop:\"bam2\"}})   \nexpect (Number(id2.split(\"-\")[0])).to.be.gt(Number(id.split(\"-\")[0]))",
                                    "err": {},
                                    "uuid": "76385fe9-e45f-425e-825f-a0119966f60e",
                                    "parentUUID": "c15ee27c-8737-4431-a6e9-91fc4e6cd384",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should append to eventhistory",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should append to eventhistory",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant, 1000); \n\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}}) \n           \n//console.log(historySet)\nlet historyCount = await redis.zcardAsync(eventHistoryName)\nexpect(historyCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "364b325d-e97c-47aa-bf0c-7328d39b93ba",
                                    "parentUUID": "c15ee27c-8737-4431-a6e9-91fc4e6cd384",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "324c0a4c-bdcf-4a4a-a5da-9232a8c1bcb2",
                                "76385fe9-e45f-425e-825f-a0119966f60e",
                                "364b325d-e97c-47aa-bf0c-7328d39b93ba"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 108,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fe1ca81e-4988-4439-a5fa-02f5626c46c6",
                    "title": "Integrify Libs Tes-lib Tests",
                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                    "file": "/test/integration/test-lib/test-lib.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c48ab1f2-5479-48d4-9bfb-7d6a8ca412bd",
                            "title": "Test Config",
                            "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                            "file": "/test/integration/test-lib/test-lib.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tes-lib Tests Test Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "8a60d142-7a06-4753-a9b4-4b2064442677",
                                    "parentUUID": "c48ab1f2-5479-48d4-9bfb-7d6a8ca412bd",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "09cf43f8-3285-479d-9f59-9be5a2c35d9d",
                                    "title": "get a test config",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get a test config should have config.mongo",
                                            "timedOut": false,
                                            "duration": 44,
                                            "state": "passed",
                                            "speed": "medium",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const testConfig = await testLib.getTestConfig();\nconsole.log(testConfig)\nexpect(testConfig).to.exist;",
                                            "err": {},
                                            "uuid": "748edfe0-16bd-4f57-81e7-58f84ac741c0",
                                            "parentUUID": "09cf43f8-3285-479d-9f59-9be5a2c35d9d",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "748edfe0-16bd-4f57-81e7-58f84ac741c0"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 44,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "b7e6cf74-7f2c-4103-bc88-2c46704116c0",
                                    "title": "get an auth Token ",
                                    "fullFile": "/home/will/code/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have a auth token",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get an auth Token  should have a auth token",
                                            "timedOut": false,
                                            "duration": 11,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const authToken = await testLib.getAuthToken();\nconsole.log(authToken)\nexpect(authToken).to.exist;",
                                            "err": {},
                                            "uuid": "a48cecec-f4b6-4f80-ba8c-18c622b07c94",
                                            "parentUUID": "b7e6cf74-7f2c-4103-bc88-2c46704116c0",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a48cecec-f4b6-4f80-ba8c-18c622b07c94"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 11,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "971e1b09-0f44-4614-9768-74af3cdcfd5d",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "c687e8ca-bd98-4277-b80b-db0b252a0a97",
                    "title": "Schedulers API Email Monitor Controller Tests",
                    "fullFile": "/home/will/code/integrify/scheduler/test/db/emailMonitorController.test.js",
                    "file": "/test/db/emailMonitorController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Schedulers API Email Monitor Controller Tests\"",
                            "fullTitle": "Schedulers API Email Monitor Controller Tests \"before all\" hook in \"Schedulers API Email Monitor Controller Tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "ac75b595-f451-42ca-a1dc-1a80c4524ae6",
                            "parentUUID": "c687e8ca-bd98-4277-b80b-db0b252a0a97",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "inserts an email monitor",
                            "fullTitle": "Schedulers API Email Monitor Controller Tests inserts an email monitor",
                            "timedOut": false,
                            "duration": 215,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const emailMonitor = {\n  emailMonitorName: 'TEST email mon name',\n  emailMonitorDesc: 'TEST email mon desc',\n  mailServerUrl: 'imap.gmail.com',\n  mailServerPort: '993',\n  loginName: 'juserintegrify@gmail.com',\n  loginPassword: 'I6XUHIv7d/SeWajKYk2+5eqCQjk7dD1zOSVgefeNXsPFve544xxhAA==',\n  protocol: 'IMAP',\n  processToLaunch: '8cd0fdcd-3e88-4b5a-b8b2-9ddc4c3b2239',\n  taskForData: '10504a6a-72be-4856-9249-a87f56db5d35',\n  lastCheckDate: null,\n  useSsl: 'Yes',\n  folder: null,\n  active: 'No',\n  destFolder: null,\n  afterProcessAction: null\n};\nconst emailMonitorController = new EmailMonitorController(session)\ninsertedEmailMonitor = await emailMonitorController.insertEmailMonitor(emailMonitor)\nexpect(insertedEmailMonitor.emailMonitorGuid).to.exist;",
                            "err": {},
                            "uuid": "a2477731-1506-466b-b64a-9fc1e8141190",
                            "parentUUID": "c687e8ca-bd98-4277-b80b-db0b252a0a97",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets a list of email monitors",
                            "fullTitle": "Schedulers API Email Monitor Controller Tests gets a list of email monitors",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const emailMonitorController = new EmailMonitorController(session);\nconst result = await emailMonitorController.listEmailMonitors();\nexpect(result).to.exist;\nexpect(result.length).to.be.greaterThan(0);\nexpect(result[0].process.processName).to.exist;",
                            "err": {},
                            "uuid": "a417703c-d3a1-4852-80c3-1fa7930c79be",
                            "parentUUID": "c687e8ca-bd98-4277-b80b-db0b252a0a97",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates an email monitor",
                            "fullTitle": "Schedulers API Email Monitor Controller Tests updates an email monitor",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const emailMonitor = {\n  emailMonitorGuid: insertedEmailMonitor.emailMonitorGuid,\n  emailMonitorName: 'TEST email mon name UPDATE',\n  emailMonitorDesc: 'TEST email mon desc',\n  mailServerUrl: 'imap.gmail.com',\n  mailServerPort: '993',\n  loginName: 'juserintegrify@gmail.com',\n  loginPassword: 'I6XUHIv7d/SeWajKYk2+5eqCQjk7dD1zOSVgefeNXsPFve544xxhAA==',\n  protocol: 'IMAP',\n  processToLaunch: '8cd0fdcd-3e88-4b5a-b8b2-9ddc4c3b2239',\n  taskForData: '10504a6a-72be-4856-9249-a87f56db5d35',\n  lastCheckDate: null,\n  useSsl: 'Yes',\n  folder: null,\n  active: 'No',\n  destFolder: null,\n  afterProcessAction: null\n};\nconst emailMonitorController = new EmailMonitorController(session)\nconst numUpdated = await emailMonitorController.updateEmailMonitor(emailMonitor)\nexpect(numUpdated).to.equal(1)",
                            "err": {},
                            "uuid": "2092bfaa-3438-4cd8-826b-89f6bae4d4b9",
                            "parentUUID": "c687e8ca-bd98-4277-b80b-db0b252a0a97",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "deletes an email monitor",
                            "fullTitle": "Schedulers API Email Monitor Controller Tests deletes an email monitor",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const emailMonitorController = new EmailMonitorController(session);\n\nlet result = await emailMonitorController.listEmailMonitors();\nconst beforeDeleteCount = result.length\n\nawait emailMonitorController.deleteEmailMonitors([insertedEmailMonitor.emailMonitorGuid]);\nresult = await emailMonitorController.listEmailMonitors();\nexpect(beforeDeleteCount).to.be.greaterThan(result.length);",
                            "err": {},
                            "uuid": "26a7714a-67ee-478d-b154-102d510b1978",
                            "parentUUID": "c687e8ca-bd98-4277-b80b-db0b252a0a97",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a2477731-1506-466b-b64a-9fc1e8141190",
                        "a417703c-d3a1-4852-80c3-1fa7930c79be",
                        "2092bfaa-3438-4cd8-826b-89f6bae4d4b9",
                        "26a7714a-67ee-478d-b154-102d510b1978"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 265,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "00f4e428-783a-4924-9338-ba74487574c8",
                    "title": "Schedulers API Email Monitor Model Tests",
                    "fullFile": "/home/will/code/integrify/scheduler/test/db/emailMonitorModel.test.js",
                    "file": "/test/db/emailMonitorModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "041c6a1d-b5e3-47a7-9230-c615fdf8eaa1",
                            "title": "tests",
                            "fullFile": "/home/will/code/integrify/scheduler/test/db/emailMonitorModel.test.js",
                            "file": "/test/db/emailMonitorModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Schedulers API Email Monitor Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "b5143627-3215-490a-97a3-0386280af5e6",
                                    "parentUUID": "041c6a1d-b5e3-47a7-9230-c615fdf8eaa1",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Schedulers API Email Monitor Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const emailMonitorModel = await sqldb.models.bindModel(config.tenantOne.tenantId, EmailMonitor);\nconst results = await emailMonitorModel.query();\nexpect(results.length).to.be.a('number')",
                                    "err": {},
                                    "uuid": "47737057-09d4-4bf5-b251-53a3c717ec92",
                                    "parentUUID": "041c6a1d-b5e3-47a7-9230-c615fdf8eaa1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Schedulers API Email Monitor Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const modals = await models.getModels(config.tenantOne.tenantId)\nconst emailMonitorModel = modals.EmailMonitor;\nconst results = await emailMonitorModel.query();\nexpect(results.length).to.be.a('number')",
                                    "err": {},
                                    "uuid": "00d5edab-3e48-456d-97e9-5fa51def298d",
                                    "parentUUID": "041c6a1d-b5e3-47a7-9230-c615fdf8eaa1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Schedulers API Email Monitor Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\nlet results = await models._tenantModels[config.tenantOne.tenantId].EmailMonitor.query()\nexpect(results.length).to.be.a('number')",
                                    "err": {},
                                    "uuid": "68d572a6-5337-41d8-9824-8d859967fa73",
                                    "parentUUID": "041c6a1d-b5e3-47a7-9230-c615fdf8eaa1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "47737057-09d4-4bf5-b251-53a3c717ec92",
                                "00d5edab-3e48-456d-97e9-5fa51def298d",
                                "68d572a6-5337-41d8-9824-8d859967fa73"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "71070158-f599-48e5-bf69-00f2f883ea81",
                    "title": "Schedulers API Email Monitor Function Tests",
                    "fullFile": "/home/will/code/integrify/scheduler/test/functions/emailMonitors.test.js",
                    "file": "/test/functions/emailMonitors.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "creates an email monitor",
                            "fullTitle": "Schedulers API Email Monitor Function Tests creates an email monitor",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.createEmailMonitorEvent()\nconst mockRes = await mocks.mockResponse();\nawait emailMonitors.insert(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nemailMonitor = mockRes.body",
                            "err": {},
                            "uuid": "5d875053-7dd4-4428-bad4-ade1107e4148",
                            "parentUUID": "71070158-f599-48e5-bf69-00f2f883ea81",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists the email monitors",
                            "fullTitle": "Schedulers API Email Monitor Function Tests lists the email monitors",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.listEmailMonitorsEvent()\nconst mockRes = await mocks.mockResponse();\nawait emailMonitors.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\nemailMonitorCountBeforeDelete = result.length",
                            "err": {},
                            "uuid": "b776d7e5-d54b-4fd7-b82f-9e2d89106efe",
                            "parentUUID": "71070158-f599-48e5-bf69-00f2f883ea81",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates an email monitor",
                            "fullTitle": "Schedulers API Email Monitor Function Tests updates an email monitor",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "emailMonitor.emailMonitorName += ' UPDATED' \nlet mockReq = await mocks.updateEmailMonitorsEvent()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = emailMonitor\nawait emailMonitors.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nmockReq = await mocks.listEmailMonitorsEvent()\nawait emailMonitors.list(mockReq, mockRes);\n\nmockRes.body.forEach(x => {\n  if (x.emailMonitorGuid.toLowerCase() == emailMonitor.emailMonitorGuid.toLowerCase()){\n    expect(x.emailMonitorName).to.contain('UPDATED')\n  }\n})",
                            "err": {},
                            "uuid": "f93d6a1c-96b2-4181-a059-3cd676c15323",
                            "parentUUID": "71070158-f599-48e5-bf69-00f2f883ea81",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "deletes an email monitor",
                            "fullTitle": "Schedulers API Email Monitor Function Tests deletes an email monitor",
                            "timedOut": false,
                            "duration": 12,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockDeleteReq = await mocks.deleteEmailMonitorsEvent()\nconst mockRes = await mocks.mockResponse()\nmockDeleteReq.body = [emailMonitor.emailMonitorGuid]\nawait emailMonitors.remove(mockDeleteReq, mockRes)\n\n\t\texpect(mockRes.statusCode).to.equal(200)\nconst mockListReq = await mocks.listEmailMonitorsEvent()\nawait emailMonitors.list(mockListReq, mockRes)\nconst emailMonitorCountAfterDelete = mockRes.body.length\nexpect(emailMonitorCountBeforeDelete).to.be.greaterThan(emailMonitorCountAfterDelete)",
                            "err": {},
                            "uuid": "065c2d0c-05f8-41b4-a262-da7c09ac996b",
                            "parentUUID": "71070158-f599-48e5-bf69-00f2f883ea81",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "5d875053-7dd4-4428-bad4-ade1107e4148",
                        "b776d7e5-d54b-4fd7-b82f-9e2d89106efe",
                        "f93d6a1c-96b2-4181-a059-3cd676c15323",
                        "065c2d0c-05f8-41b4-a262-da7c09ac996b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 64,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "6583c6e5-98f4-47f8-92ff-be8333f3797b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "a65dd7cb-9e33-4bce-86c4-ecd3d3b0b9f4",
                    "title": "Session Processor Tests",
                    "fullFile": "/home/will/code/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                    "file": "/test/integration/sessionEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Session Processor Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10034,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let testConfig = await testLib.getTestConfig();\n       \nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"login\", {\n  token: \"abcd234\",\n  user:  {jwt_token: 'xxxxx', tenantId: testConfig.tenantOne.tenantId, sid: testConfig.tenantOne.adminUser.sid}\n})\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {\n        token: \"abcd234\",\n        user: {\n            sid: testConfig.tenantOne.adminUser.sid,\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\n\nforkedProcessor = await sessionStreamConsumer.forkStreamProcessor(tenant)\nawait delay(10000);",
                            "err": {},
                            "uuid": "cbc0ae48-1d8a-4606-86d6-cab0fec45991",
                            "parentUUID": "a65dd7cb-9e33-4bce-86c4-ecd3d3b0b9f4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Session Processor Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "6499a7af-12e9-41ee-90d2-78914b9564e1",
                            "parentUUID": "a65dd7cb-9e33-4bce-86c4-ecd3d3b0b9f4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "58d0f8b4-cbaa-402b-8d32-d6356e86ed7b",
                            "title": "stream processor",
                            "fullFile": "/home/will/code/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                            "file": "/test/integration/sessionEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "c626fd2d-f350-4033-9fca-282665a2b6a5",
                                    "title": "reads from session stream",
                                    "fullFile": "/home/will/code/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Session Processor Tests stream processor reads from session stream should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n//              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "9aad7599-339a-4470-9313-74ae692c4a32",
                                            "parentUUID": "c626fd2d-f350-4033-9fca-282665a2b6a5",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "9aad7599-339a-4470-9313-74ae692c4a32"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "2df6739c-bfc6-4672-bcd7-4d0165f5083e",
                                    "title": "handles events",
                                    "fullFile": "/home/will/code/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should push events into REDIS activeSession set",
                                            "fullTitle": "Session Processor Tests stream processor handles events should push events into REDIS activeSession set",
                                            "timedOut": false,
                                            "duration": 5,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions = await redis.zrangebyscoreAsync(`${tenant}.activeSessions`, \"-inf\", \"+inf\");\nconsole.log(sessions)\nexpect(sessions).to.exist;",
                                            "err": {},
                                            "uuid": "ce76b35f-e30a-4aa4-9057-a2876997c28c",
                                            "parentUUID": "2df6739c-bfc6-4672-bcd7-4d0165f5083e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "ce76b35f-e30a-4aa4-9057-a2876997c28c"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 5,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "15ad5a0f-1e23-4fe8-be84-2dda0ba676b2",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "ffd3f1da-4bb1-4944-86c8-2950497a0706",
                    "title": "adminCategoryConfig.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminCategoryConfig.vue should render correctly",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=btn_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_editCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_deleteCategory]').exists()).to.equal(true);",
                            "err": {},
                            "uuid": "c33168db-4681-4d69-9cdd-8ce7694d67b1",
                            "parentUUID": "ffd3f1da-4bb1-4944-86c8-2950497a0706",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c33168db-4681-4d69-9cdd-8ce7694d67b1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "28a3f7d9-17e7-4518-a02a-5b9f3a69a1f4",
                    "title": "adminTreeAddObjectButton.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeAddObjectButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_addObject.exists()).to.be.true;",
                            "err": {},
                            "uuid": "9227dabf-a951-4a9e-a075-c006d6dd5ea8",
                            "parentUUID": "28a3f7d9-17e7-4518-a02a-5b9f3a69a1f4",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "9227dabf-a951-4a9e-a075-c006d6dd5ea8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7ccd2a3d-c1fb-426d-b2e0-d73522b0d3a8",
                    "title": "adminTreePermsButton.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreePermsButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_permsButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "a1525499-39e4-4a19-bc28-fe0f0d2f7aed",
                            "parentUUID": "7ccd2a3d-c1fb-426d-b2e0-d73522b0d3a8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a1525499-39e4-4a19-bc28-fe0f0d2f7aed"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "487a800e-9c07-4d69-9552-e9343cdec4cc",
                    "title": "adminTreeViewButton.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeViewButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_viewButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "90675142-0a49-4f90-9f19-5f8f20a17c73",
                            "parentUUID": "487a800e-9c07-4d69-9552-e9343cdec4cc",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "90675142-0a49-4f90-9f19-5f8f20a17c73"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "58aca8aa-5fec-4ace-86b1-70657fda0eed",
                    "title": "AddGroupDialog.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "AddGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 65,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_AddGroupDialog.default);",
                            "err": {},
                            "uuid": "4ecc8b9e-9081-4cc8-8475-68e51c326fdb",
                            "parentUUID": "58aca8aa-5fec-4ace-86b1-70657fda0eed",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b71baccc-e7a0-409d-9415-358732644184",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "AddGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]')).to.exist;\nexpect(wrapper.find('[data-test=descField]')).to.exist;\nexpect(wrapper.find('[data-test=dynamicField]')).to.exist;\nexpect(wrapper.find('[data-test=sqlField]')).to.exist;",
                                    "err": {},
                                    "uuid": "9ab38dcb-bdea-45fc-8f68-382c0d07ca40",
                                    "parentUUID": "b71baccc-e7a0-409d-9415-358732644184",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save button disabled",
                                    "fullTitle": "AddGroupDialog.vue inital state save button disabled",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=saveButton]').element.disabled).to.equal(true);",
                                    "err": {},
                                    "uuid": "20337f48-f057-46f1-a45c-209e8b2f8b7f",
                                    "parentUUID": "b71baccc-e7a0-409d-9415-358732644184",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ab38dcb-bdea-45fc-8f68-382c0d07ca40",
                                "20337f48-f057-46f1-a45c-209e8b2f8b7f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1415a215-1c7c-4ab3-a5af-11ccf985c31a",
                    "title": "EditGroupDialog.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "EditGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 50,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\"\n};\nwrapper = (0, _mocks.initWrapper)(_EditGroupDialog.default, {\n  propsData: {\n    group\n  },\n  data() {\n    return {\n      activeTab: 0\n    };\n  },\n  store\n});",
                            "err": {},
                            "uuid": "e6ad1752-258e-4c63-a180-3cf73ceb85e9",
                            "parentUUID": "1415a215-1c7c-4ab3-a5af-11ccf985c31a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3f75ccdb-0325-4ef9-b285-b83d3d85a624",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=descField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dynamicField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=sqlField]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "5358b7a3-b392-4835-bdfe-7c3bf67a2dd2",
                                    "parentUUID": "3f75ccdb-0325-4ef9-b285-b83d3d85a624",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "populates group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state populates group fields",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').element.value).to.equal(group.groupName);\nexpect(wrapper.find('[data-test=descField]').element.value).to.equal(group.groupDesc);\nexpect(wrapper.find('[data-test=sqlField]').element.value).to.equal(group.groupSql);",
                                    "err": {},
                                    "uuid": "dfd41745-65d7-4c39-a0c6-69446ef1e2ff",
                                    "parentUUID": "3f75ccdb-0325-4ef9-b285-b83d3d85a624",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5358b7a3-b392-4835-bdfe-7c3bf67a2dd2",
                                "dfd41745-65d7-4c39-a0c6-69446ef1e2ff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "36e4d5e8-c44b-4d63-a3de-b5b25e418df9",
                    "title": "GroupList.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 47,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_GroupList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "4f922e64-1d67-41ab-b069-e862540e16f5",
                            "parentUUID": "36e4d5e8-c44b-4d63-a3de-b5b25e418df9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cd4b3fcc-a221-4d6a-b8ed-30c288b98ce7",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "GroupList.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const toolbar = wrapper.find('[data-test=buttonBar]');\nexpect(toolbar.exists()).to.equal(true);\nconst buttons = toolbar.findAll('button');\nexpect(buttons.at(0).text()).to.equal('Add Group');\nexpect(buttons.at(1).text()).to.equal('Delete Group');\nexpect(buttons.at(1).props().disabled).to.equal(true);\nexpect(buttons.at(2).text()).to.equal('Set Roles & Permissions');",
                                    "err": {},
                                    "uuid": "b8dfe58a-3bdc-4915-8e9e-5ac0e90c216f",
                                    "parentUUID": "cd4b3fcc-a221-4d6a-b8ed-30c288b98ce7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays list of groups",
                                    "fullTitle": "GroupList.vue inital state displays list of groups",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const table = wrapper.find('div.v-data-table');\nexpect(table.exists()).to.equal(true);\nconst rows = table.findAll('table > tbody > tr');\nconst adminRow = rows.at(0).findAll('td');\nconst userRow = rows.at(1).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(adminRow.at(3).text()).to.equal('Administrators'); // group name column\nexpect(userRow.at(3).text()).to.equal('Users');\nexpect(adminRow.at(5).text()).to.equal('No'); // dynamic column\nexpect(userRow.at(5).text()).to.equal('Yes');",
                                    "err": {},
                                    "uuid": "27ab51e8-02ee-481f-b59f-c8b0d0d4be6f",
                                    "parentUUID": "cd4b3fcc-a221-4d6a-b8ed-30c288b98ce7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b8dfe58a-3bdc-4915-8e9e-5ac0e90c216f",
                                "27ab51e8-02ee-481f-b59f-c8b0d0d4be6f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b3a0cc74-39b7-42af-91b4-001f356a306b",
                    "title": "GroupMembershipDialog.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupMembershipDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 92,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\",\n  canManage: true,\n  canEdit: true\n};\nwrapper = (0, _mocks.initWrapper)(_GroupMembershipDialog.default, {\n  propsData: {\n    group\n  },\n  store\n});",
                            "err": {},
                            "uuid": "a2f6c77a-e58c-4bcb-9cf0-e5bbe82425b9",
                            "parentUUID": "b3a0cc74-39b7-42af-91b4-001f356a306b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "994917a7-8f56-464b-874b-94938c0f6dfd",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "membership tables",
                                    "fullTitle": "GroupMembershipDialog.vue inital state membership tables",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const nonMembersTable = wrapper.find('[data-test=nonMembersTable]');\nconst membersTable = wrapper.find('[data-test=membersTable]');\nexpect(nonMembersTable.exists()).to.equal(true);\nexpect(membersTable.exists()).to.equal(true); // Non members table\nlet rows = nonMembersTable.findAll('table > tbody > tr');\nlet firstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(3);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-plus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('97'); // member id\nexpect(firstRow.at(4).text()).to.equal('Joe User'); // member name\nexpect(rows.at(2).find('i.mdi-account-multiple').exists()).to.equal(true); // check a group member row renders with the group icon\n// Members table\nrows = membersTable.findAll('table > tbody > tr');\nexpect(rows.length).to.equal(2);\nfirstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-minus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('98'); // member id\nexpect(firstRow.at(4).text()).to.equal('Integrify Services'); // member name",
                                    "err": {},
                                    "uuid": "536572ec-f7ec-4020-bff0-947a02f37943",
                                    "parentUUID": "994917a7-8f56-464b-874b-94938c0f6dfd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "536572ec-f7ec-4020-bff0-947a02f37943"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1eaa376a-ea08-4ae1-9113-aa521db98028",
                    "title": "UserCreate.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserCreate.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 64,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserCreate.default, {\n  store\n});",
                            "err": {},
                            "uuid": "a0af65e8-2be7-4245-8f4d-807eea0e2d0b",
                            "parentUUID": "1eaa376a-ea08-4ae1-9113-aa521db98028",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all necessary fields",
                            "fullTitle": "UserCreate.vue should display all necessary fields",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['firstName', 'middleName', 'lastName', 'username', 'email', 'locale', 'timezone', 'language', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.text()).to.be.empty;\n});",
                            "err": {},
                            "uuid": "7365eb6c-8a2b-4b79-a47b-52a8f62aa15d",
                            "parentUUID": "1eaa376a-ea08-4ae1-9113-aa521db98028",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display cancel and save btns",
                            "fullTitle": "UserCreate.vue should display cancel and save btns",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "7ef22d57-a157-4194-b89f-23caf84fd5be",
                            "parentUUID": "1eaa376a-ea08-4ae1-9113-aa521db98028",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7365eb6c-8a2b-4b79-a47b-52a8f62aa15d",
                        "7ef22d57-a157-4194-b89f-23caf84fd5be"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7a80184e-a1ea-4372-a07f-580e2d4adf38",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 17,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// store = new Vuex.Store({modules: mockStore().modules})\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    },\n    actions: {\n      getUser: function () {\n        console.log('--- getUser()');\n        return { ..._mockedData.mockedUser\n        };\n      }\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEdit.default, {\n  store,\n  propsData: {\n    id: _mockedData.mockedUser.contactGuid\n  }\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "e23fb936-2057-4253-bc61-91b37853e466",
                            "parentUUID": "7a80184e-a1ea-4372-a07f-580e2d4adf38",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should always display page title",
                            "fullTitle": "UserEdit.vue should always display page title",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.text()).to.eq('Edit User');",
                            "err": {},
                            "uuid": "88e472e1-1d59-44c2-894a-b6a4025cf67f",
                            "parentUUID": "7a80184e-a1ea-4372-a07f-580e2d4adf38",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not display form if loading",
                            "fullTitle": "UserEdit.vue should not display form if loading",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.false;",
                            "err": {},
                            "uuid": "6318748c-669d-406f-8f58-4ad640724e54",
                            "parentUUID": "7a80184e-a1ea-4372-a07f-580e2d4adf38",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display form and btns if user information present",
                            "fullTitle": "UserEdit.vue should display form and btns if user information present",
                            "timedOut": false,
                            "duration": 203,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.userLoading = false;\nawait wrapper.vm.$nextTick();\nconst form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.true;\n[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "a1a192e3-017d-4bb1-b7a7-6e7b2196b8ca",
                            "parentUUID": "7a80184e-a1ea-4372-a07f-580e2d4adf38",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "88e472e1-1d59-44c2-894a-b6a4025cf67f",
                        "6318748c-669d-406f-8f58-4ad640724e54",
                        "a1a192e3-017d-4bb1-b7a7-6e7b2196b8ca"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 203,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c91746dd-148a-4b0f-a847-93592c7c280e",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 43,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditDelegation.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "d2e0f041-55b6-41d3-96ef-ab0b9a710967",
                            "parentUUID": "c91746dd-148a-4b0f-a847-93592c7c280e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEdit.vue should display all fields",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['delegate', 'processes'] // 'startDate', 'startTime', 'endDate', 'endTime'\n.forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n});",
                            "err": {},
                            "uuid": "727199d3-6fad-4645-b249-8e75b42cbdf6",
                            "parentUUID": "c91746dd-148a-4b0f-a847-93592c7c280e",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "727199d3-6fad-4645-b249-8e75b42cbdf6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f930a359-ec2b-4d61-9ec3-f4eedbd82619",
                    "title": "UserEditOrganizationalDetails.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditOrganizationalDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 35,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditOrganizationalDetails.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "e3c957dd-1ad2-4ded-a90f-2c914b0e75b4",
                            "parentUUID": "f930a359-ec2b-4d61-9ec3-f4eedbd82619",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditOrganizationalDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['title', 'division', 'department', 'costCenter', 'location', 'phone', 'manager'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value || !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value).to.eq(_mockedData.mockedUser[fieldName]);\n  }\n});",
                            "err": {},
                            "uuid": "0d41dff8-d938-49f1-bea9-21541eaa834e",
                            "parentUUID": "f930a359-ec2b-4d61-9ec3-f4eedbd82619",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "0d41dff8-d938-49f1-bea9-21541eaa834e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 20,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1dbd8cdf-aba6-49ad-8b6b-5887b5b8b0cd",
                    "title": "UserEditUserDetails.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditUserDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 77,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditUserDetails.default, {\n  store\n});",
                            "err": {},
                            "uuid": "afa31fe9-7d75-4578-878a-d262d3d21e82",
                            "parentUUID": "1dbd8cdf-aba6-49ad-8b6b-5887b5b8b0cd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display card title",
                            "fullTitle": "UserEditUserDetails.vue should display card title",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title');\nexpect(title.exists()).to.be.true;\nexpect(title.text()).contains('User Details');",
                            "err": {},
                            "uuid": "b68f4a7d-879a-42d2-a06c-7e41eeb37534",
                            "parentUUID": "1dbd8cdf-aba6-49ad-8b6b-5887b5b8b0cd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditUserDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['firstName', 'middleName', 'lastName', 'contactId', 'userName', 'email', 'address1', 'address2', 'city', 'state', 'zip', 'country', 'language', 'timezone', 'locale', 'cField1', 'cField2', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value && !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value.toString()).to.eq(_mockedData.mockedUser[fieldName].toString());\n  }\n});",
                            "err": {},
                            "uuid": "1d2057a5-00a1-4963-9f17-1406ac9e7415",
                            "parentUUID": "1dbd8cdf-aba6-49ad-8b6b-5887b5b8b0cd",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "b68f4a7d-879a-42d2-a06c-7e41eeb37534",
                        "1d2057a5-00a1-4963-9f17-1406ac9e7415"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 62,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4d005abf-a72f-4122-b696-a7d501a32632",
                    "title": "UserFilterDialog.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserFilterDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 42,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserFilterDialog.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "718c50b2-e864-452a-9fc4-c2f2ebcca0a6",
                            "parentUUID": "4d005abf-a72f-4122-b696-a7d501a32632",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "UserFilterDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title .headline');\nexpect(title.text()).to.eq('User Filters');\n['lastName', 'firstName', 'username', 'email', 'title', 'managerName', 'costCenter', 'country', 'department'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.element.value).to.be.empty;\n});",
                            "err": {},
                            "uuid": "42015d72-7ca5-41ed-8e00-d9b8de029612",
                            "parentUUID": "4d005abf-a72f-4122-b696-a7d501a32632",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog on clicking Close btn",
                            "fullTitle": "UserFilterDialog.vue should close dialog on clicking Close btn",
                            "timedOut": false,
                            "duration": 23,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.vm.showDialog).to.be.false;\nwrapper.vm.$store.state.users.showDialog = true;\nawait wrapper.vm.$nextTick();\nexpect(wrapper.vm.showDialog).to.be.true;\nconst closeBtn = wrapper.find('[data-test=closeBtn]');\nexpect(closeBtn.exists()).to.be.true;\nawait closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.actions.getUsers).to.have.been.called;",
                            "err": {},
                            "uuid": "02d8580b-82a9-4c2a-a379-ca0014a4d067",
                            "parentUUID": "4d005abf-a72f-4122-b696-a7d501a32632",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "42015d72-7ca5-41ed-8e00-d9b8de029612",
                        "02d8580b-82a9-4c2a-a379-ca0014a4d067"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 52,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "644d6fac-e6f0-497f-a657-9609deb0f241",
                    "title": "UserList.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 42,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "313b7aec-035b-4ca7-b074-61000d2462be",
                            "parentUUID": "644d6fac-e6f0-497f-a657-9609deb0f241",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should contain pageTitle and search input",
                            "fullTitle": "UserList.vue should contain pageTitle and search input",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nconst pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Users'); // searchInput\nconst searchInput = wrapper.get('input#searchText');\nexpect(searchInput.exists()).to.be.true;\nexpect(searchInput.text()).to.be.empty;",
                            "err": {},
                            "uuid": "81c36372-228f-4a6a-b76a-e89dbb56a220",
                            "parentUUID": "644d6fac-e6f0-497f-a657-9609deb0f241",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display toolbar buttons",
                            "fullTitle": "UserList.vue should display toolbar buttons",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'addUserBtn',\n  value: 'Add User'\n}, {\n  key: 'replaceUserBtn',\n  value: 'Replace User'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "0e50a8fd-2469-40d9-8668-affe68820c6a",
                            "parentUUID": "644d6fac-e6f0-497f-a657-9609deb0f241",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display list of users",
                            "fullTitle": "UserList.vue should display list of users",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const table = wrapper.find('[data-test=usersTable]');\nexpect(table.exists()).to.be.true;\nconst header = table.find('table > thead');\n['Last Name', 'First Name', 'Username', 'Email', 'Created', 'Last Updated', 'Active'].forEach(colName => {\n  expect(header.text()).contains(colName);\n});",
                            "err": {},
                            "uuid": "73799f29-815a-4be8-b77e-0e83f56e3ace",
                            "parentUUID": "644d6fac-e6f0-497f-a657-9609deb0f241",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "81c36372-228f-4a6a-b76a-e89dbb56a220",
                        "0e50a8fd-2469-40d9-8668-affe68820c6a",
                        "73799f29-815a-4be8-b77e-0e83f56e3ace"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                    "title": "users store actions",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "users store actions \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = { ..._users.default.state\n};",
                            "err": {},
                            "uuid": "63c707ed-8f8c-4940-b972-ec96f4e25068",
                            "parentUUID": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook",
                            "fullTitle": "users store actions \"after each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "d6e25248-66a6-4b8c-b498-895de7f46725",
                            "parentUUID": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getUsers",
                            "fullTitle": "users store actions should getUsers",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getUsers({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS', [..._mockedData.mockedUsers]]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS_TOTAL', _mockedData.mockedUsers.length]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', false]);",
                            "err": {},
                            "uuid": "3ce56962-872b-43c9-8f26-c0a628339923",
                            "parentUUID": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should getUser",
                            "fullTitle": "users store actions should getUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser\n};\nawait _actions.default.getUser({\n  commit,\n  state\n}, {\n  userGuid: user.contactGuid,\n  $commonLib: _commonLib.default\n});\nuser.active = !user.deletedDate;\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', user]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', false]);",
                            "err": {},
                            "uuid": "d70c64e8-4cbf-46f3-95eb-2e6bbab0c95a",
                            "parentUUID": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insertUser",
                            "fullTitle": "users store actions should insertUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.insertUser({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', _mockedData.mockedUser]);",
                            "err": {},
                            "uuid": "ff6d5b53-d925-484d-ac51-444a4fa6ddde",
                            "parentUUID": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should clearFiltersAndOptions",
                            "fullTitle": "users store actions should clearFiltersAndOptions",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_actions.default.clearFiltersAndOptions({\n  commit,\n  state\n});\n(0, _chai.expect)(commit.args).to.deep.eq([['CLEAR_FILTERS'], ['SET_LIST_OPTIONS']]);",
                            "err": {},
                            "uuid": "a2e4eea4-4288-4908-8482-e98e2aee5692",
                            "parentUUID": "0425c3fe-0df6-46f2-99b5-cd87fb8778e8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3ce56962-872b-43c9-8f26-c0a628339923",
                        "d70c64e8-4cbf-46f3-95eb-2e6bbab0c95a",
                        "ff6d5b53-d925-484d-ac51-444a4fa6ddde",
                        "a2e4eea4-4288-4908-8482-e98e2aee5692"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "465c3189-11b7-4667-a780-b872950238e3",
                    "title": "users store getters",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get users",
                            "fullTitle": "users store getters should get users",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.users = [..._mockedData.mockedUsers];\nconst users = _getters.default.users(state);\n(0, _chai.expect)(users).to.deep.equal(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "99f5283d-7864-44fd-8adf-b8379c7d1115",
                            "parentUUID": "465c3189-11b7-4667-a780-b872950238e3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get filterCount",
                            "fullTitle": "users store getters should get filterCount",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(0);\nstate.filters.lastName = 'foo';\nstate.filters.firstName = 'bar';\nstate.filters.costCenter = 'costCenter';\nstate.filters.country = '';\nstate.filters.activeOnly = true;\n(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(4);",
                            "err": {},
                            "uuid": "cd1e195d-b1c8-444f-babb-e15dea1b8967",
                            "parentUUID": "465c3189-11b7-4667-a780-b872950238e3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "99f5283d-7864-44fd-8adf-b8379c7d1115",
                        "cd1e195d-b1c8-444f-babb-e15dea1b8967"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                    "title": "users store mutations",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_USERS",
                            "fullTitle": "users store mutations should SET_USERS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS(state, [..._mockedData.mockedUsers]);\n(0, _chai.expect)(state.users).to.deep.eq(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "200f2598-befb-46fa-a39d-bd93fc804948",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USERS_TOTAL",
                            "fullTitle": "users store mutations should SET_USERS_TOTAL",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS_TOTAL(state, _mockedData.mockedUsers.length);\n(0, _chai.expect)(state.total).to.eq(_mockedData.mockedUsers.length);",
                            "err": {},
                            "uuid": "ddc24ee8-a63a-4a93-b163-cd733e6096fc",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SEARCH",
                            "fullTitle": "users store mutations should SET_SEARCH",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const searchTxt = 'searching for something';\nSET_SEARCH(state, searchTxt);\n(0, _chai.expect)(state.search).to.eq(searchTxt);",
                            "err": {},
                            "uuid": "cb755d7c-cfac-4c91-a2b2-1a97a5def9c8",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_LOADING",
                            "fullTitle": "users store mutations should SET_LIST_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LIST_LOADING(state, true);\n(0, _chai.expect)(state.listLoading).to.eq(true);",
                            "err": {},
                            "uuid": "ed0821ae-bfe0-4e62-85b1-6b7dc938c04c",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should CLEAR_FILTERS",
                            "fullTitle": "users store mutations should CLEAR_FILTERS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.filters = {\n  lastName: 'test last name',\n  firstName: 'first name',\n  userName: 'fooBar',\n  email: 'foo@bar.com',\n  title: 'my title',\n  managerName: 'manager name',\n  managerGuid: 123,\n  costCenter: 'cost center',\n  country: 'USM',\n  department: 'manager of managers',\n  activeOnly: true\n};\nCLEAR_FILTERS(state);\n(0, _chai.expect)(state.filters).to.deep.eq({\n  lastName: null,\n  firstName: null,\n  userName: null,\n  email: null,\n  title: null,\n  managerName: null,\n  managerGuid: null,\n  costCenter: null,\n  country: null,\n  department: null,\n  activeOnly: false\n});",
                            "err": {},
                            "uuid": "79f2b215-a765-434b-b3ca-d90a858ea511",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_OPTIONS",
                            "fullTitle": "users store mutations should SET_LIST_OPTIONS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const listOptions = {\n  sortBy: ['firstName'],\n  sortDesc: [true],\n  page: 2\n};\nSET_LIST_OPTIONS(state, listOptions);\n(0, _chai.expect)(state.listOptions).to.deep.eq(listOptions); // clear listOptions\nSET_LIST_OPTIONS(state);\n(0, _chai.expect)(state.listOptions).to.deep.eq({\n  sortBy: [],\n  sortDesc: [],\n  page: 1\n});",
                            "err": {},
                            "uuid": "3ab05ab7-2260-4845-ad67-08d269e982ff",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "users store mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.eq(true);",
                            "err": {},
                            "uuid": "5201ea99-6d5d-4584-9714-7bb7049af826",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USER_LOADING",
                            "fullTitle": "users store mutations should SET_USER_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USER_LOADING(state, false);\n(0, _chai.expect)(state.userLoading).to.be.false;",
                            "err": {},
                            "uuid": "955a5c95-f8f4-4ad7-8f14-7afdb4604200",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_IS_CHECKING_USERNAME",
                            "fullTitle": "users store mutations should SET_IS_CHECKING_USERNAME",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_IS_CHECKING_USERNAME(state, true);\n(0, _chai.expect)(state.isCheckingUsername).to.be.true;",
                            "err": {},
                            "uuid": "07496c76-10f1-4294-b08b-3a01b95264b1",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_USER",
                            "fullTitle": "users store mutations should SET_SELECTED_USER",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser,\n  password: 'testPwd',\n  confirmPassword: 'testPwd'\n};\nSET_SELECTED_USER(state, user);\n(0, _chai.expect)(state.selectedUser).to.deep.eq(user); // when no user specified\nSET_SELECTED_USER(state);\n(0, _chai.expect)(state.selectedUser).to.deep.eq({\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  userName: '',\n  email: '',\n  locale: 'en-US',\n  timezone: '',\n  languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460',\n  // US English\n  password: '',\n  confirmPassword: ''\n});",
                            "err": {},
                            "uuid": "0d283686-9df2-44d4-8011-17dd2a78ceb2",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LOCALES",
                            "fullTitle": "users store mutations should SET_LOCALES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LOCALES(state, [..._mockedData.mockedLocales]);\n(0, _chai.expect)(state.locales).to.deep.eq(_mockedData.mockedLocales);\nSET_LOCALES(state);\n(0, _chai.expect)(state.locales).to.deep.eq([]);\nSET_LOCALES(state, []);\n(0, _chai.expect)(state.locales).to.deep.eq([]);",
                            "err": {},
                            "uuid": "8fe6de58-0f4e-4f69-9f86-9e1ed36fb5f0",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_DELEGATION_START_DATE",
                            "fullTitle": "users store mutations should SET_DELEGATION_START_DATE",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const date = '2020-01-12';\nSET_SELECTED_USER(state, { ..._mockedData.mockedUser\n});\nSET_DELEGATION_START_DATE(state, date);\n(0, _chai.expect)(state.selectedUser.delegate.startDate).to.eq(date);",
                            "err": {},
                            "uuid": "9fac6d55-7f17-40eb-a5a5-deff57f310d3",
                            "parentUUID": "80a97a1f-9fa1-49f0-aa1a-aa820f376d16",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "200f2598-befb-46fa-a39d-bd93fc804948",
                        "ddc24ee8-a63a-4a93-b163-cd733e6096fc",
                        "cb755d7c-cfac-4c91-a2b2-1a97a5def9c8",
                        "ed0821ae-bfe0-4e62-85b1-6b7dc938c04c",
                        "79f2b215-a765-434b-b3ca-d90a858ea511",
                        "3ab05ab7-2260-4845-ad67-08d269e982ff",
                        "5201ea99-6d5d-4584-9714-7bb7049af826",
                        "955a5c95-f8f4-4ad7-8f14-7afdb4604200",
                        "07496c76-10f1-4294-b08b-3a01b95264b1",
                        "0d283686-9df2-44d4-8011-17dd2a78ceb2",
                        "8fe6de58-0f4e-4f69-9f86-9e1ed36fb5f0",
                        "9fac6d55-7f17-40eb-a5a5-deff57f310d3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "3ad34674-fa4b-4806-8225-e0e1eb2b116b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "23ce3833-9fe6-4066-972d-f1072848e933",
                    "title": "recentlyVisited",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/libs/commonLib/tests/unit/bookmarks.spec.js",
                    "file": "/tests/unit/bookmarks.spec.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"recentlyVisited\"",
                            "fullTitle": "recentlyVisited \"before each\" hook in \"recentlyVisited\"",
                            "timedOut": false,
                            "duration": 14,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const dom = new JSDOM(\"<html>\\n       <body>\\n          <div class=\\\"v-toolbar__title hidden-sm-and-down\\\">Holidays</div>\\n       </body>\\n     </html>\");\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.location = {\n  hostname: hostname\n};",
                            "err": {},
                            "uuid": "cfdd725f-4808-4e6e-a53d-4492c2aeb6f4",
                            "parentUUID": "23ce3833-9fe6-4066-972d-f1072848e933",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "adds to recently visted history",
                            "fullTitle": "recentlyVisited adds to recently visted history",
                            "timedOut": false,
                            "duration": 24,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const bookmarks = require('./mocks/bookmarks');\nexpect(bookmarks.recentlyVisited).to.be.empty;\nawait bookmarks.addRecentlyVisited();\nexpect(bookmarks.recentlyVisited.length).to.equal(1);\nexpect(bookmarks.recentlyVisited[0].label).to.equal('Holidays');\nexpect(bookmarks.recentlyVisited[0].icon).to.equal('mdi-calendar-month');",
                            "err": {},
                            "uuid": "f5f51d14-6c42-40eb-a3c2-7859cda4ca07",
                            "parentUUID": "23ce3833-9fe6-4066-972d-f1072848e933",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f5f51d14-6c42-40eb-a3c2-7859cda4ca07"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 24,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "94966e97-2ddd-4fa5-8a0e-6e34f263f97d",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "a1794734-1ecf-4b47-8db4-015c5c3a5ffb",
                    "title": "CategorySelect.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelect.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 111,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelect.CategorySelect, {\n  showDialog: false\n});",
                            "err": {},
                            "uuid": "c59040d9-bbf0-4dd5-8ad3-07fb07d8039b",
                            "parentUUID": "a1794734-1ecf-4b47-8db4-015c5c3a5ffb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ca3797ba-9d87-486a-a71d-6e621e101f6d",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelect.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=input_categorySelect]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_categorySelect]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "894ea58a-460f-406a-96e0-b5eeb1e24751",
                                    "parentUUID": "ca3797ba-9d87-486a-a71d-6e621e101f6d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "894ea58a-460f-406a-96e0-b5eeb1e24751"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "29e3f1ab-5761-4e7c-8e09-29182bc3696f",
                    "title": "CategorySelectDialog.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelectDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 50,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelectDialog.default, {\n  items: _mockedCategoryResponse.default\n});",
                            "err": {},
                            "uuid": "7721db51-639b-487a-a1c9-6ceaf36c1fac",
                            "parentUUID": "29e3f1ab-5761-4e7c-8e09-29182bc3696f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "567faf3b-896c-4b4c-8950-ded53456dab1",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelectDialog.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "58a3b968-61be-4e08-9261-b95dcd59f5a0",
                                    "parentUUID": "567faf3b-896c-4b4c-8950-ded53456dab1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "58a3b968-61be-4e08-9261-b95dcd59f5a0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0083c1bf-724b-4c90-ac7c-b3e71852cc3d",
                    "title": "CategoryTreeTable.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategoryTreeTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 35,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategoryTreeTable.CategoryTreeTable, {\n  objectType: 'forms',\n  objectData: _mockedData.mockedObjectData,\n  items: _mockedCategoryResponse.mockedCategoryResponse\n});",
                            "err": {},
                            "uuid": "cab3bfa2-dc2e-44b5-8c61-f718c4df6c15",
                            "parentUUID": "0083c1bf-724b-4c90-ac7c-b3e71852cc3d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "302d747b-d16e-40ae-9b2e-d09699d1e750",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategoryTreeTable.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=objectCatTree_permsButtonComponent]').exists()).to.equal(false);\nexpect(wrapper.find('[data-test=objectCatTree_datatable]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "2883a47b-7bde-4d77-84f4-76b76ffa1cd2",
                                    "parentUUID": "302d747b-d16e-40ae-9b2e-d09699d1e750",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2883a47b-7bde-4d77-84f4-76b76ffa1cd2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d655954d-a2ca-49b0-9b57-92bb1cb24c15",
                    "title": "Report.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "Report.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 49,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.Report);\ndocument.body.setAttribute('data-app', true);",
                            "err": {},
                            "uuid": "62440e99-63fb-4239-ae83-a50a1246bc12",
                            "parentUUID": "d655954d-a2ca-49b0-9b57-92bb1cb24c15",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2054d993-d076-4df8-82c2-e010554807b7",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "Report.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button i.mdi-refresh').exists()).to.equal(true);\nexpect(wrapper.find('button i.mdi-filter-plus-outline').exists()).to.equal(true);\nexpect(wrapper.find('button.mdi-export').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "b5445949-dabf-4fcd-b083-5731f09eba5b",
                                    "parentUUID": "2054d993-d076-4df8-82c2-e010554807b7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays report name",
                                    "fullTitle": "Report.vue inital state displays report name",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('.v-toolbar__title').text()).to.equal('Report - Update profile tasks');",
                                    "err": {},
                                    "uuid": "7a5037c5-66ad-48aa-9493-deac87b93891",
                                    "parentUUID": "2054d993-d076-4df8-82c2-e010554807b7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b5445949-dabf-4fcd-b083-5731f09eba5b",
                                "7a5037c5-66ad-48aa-9493-deac87b93891"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c3945aa1-5737-46fe-8d35-00f19443f756",
                    "title": "ReportTable.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "ReportTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 71,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.ReportTable, {\n  propsData: {\n    report: _mockedData.mockedFormattedReport\n  }\n});",
                            "err": {},
                            "uuid": "84fd985e-ddce-4d2a-9039-1d26bf638865",
                            "parentUUID": "c3945aa1-5737-46fe-8d35-00f19443f756",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "16705fce-2f36-45b2-8a9c-784f052235cc",
                            "title": "inital state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders column headers",
                                    "fullTitle": "ReportTable.vue inital state renders column headers",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const headers = wrapper.findAll('th');\nconst expectedHeaders = [\"Request Link\", \"Username\", \"ID For Manage Task\", \"Status\", \"Time from Start to Complete\", \"Date Completed\", \"Manager ID\", \"System ID\", \"Name\"];\nexpectedHeaders.forEach((title, i) => expect(headers.at(i).text()).to.equal(title));",
                                    "err": {},
                                    "uuid": "3e6f09f9-1314-4007-8d67-01635e511fde",
                                    "parentUUID": "16705fce-2f36-45b2-8a9c-784f052235cc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "renders links with the correct icons",
                                    "fullTitle": "ReportTable.vue inital state renders links with the correct icons",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const firstRow = wrapper.find('tbody > tr').findAll('td');\nexpect(firstRow.length).to.equal(9);\nexpect(firstRow.at(0).find('button.mdi-magnify').exists()).to.equal(true); // Request link\nexpect(firstRow.at(1).text()).to.equal('juser'); // Username\nexpect(firstRow.at(2).find('.mdi-menu-open').exists()).to.equal(true); // Manage Task menu icon\nexpect(firstRow.at(2).find('.v-menu').exists()).to.equal(true); // manage task menu\nexpect(firstRow.at(3).text()).to.equal('Completed'); // status\nexpect(firstRow.at(5).text()).to.equal('2/24/2021'); // date completed\nexpect(firstRow.at(6).text()).to.equal('1'); // manager id\nexpect(firstRow.at(7).find('button.mdi-magnify').exists()).to.equal(true); // link to Task\nexpect(firstRow.at(8).text()).to.equal('System Task - Update Profile'); // task name",
                                    "err": {},
                                    "uuid": "28594f3e-18cd-4f3d-b9f3-3dfa6b8dbf64",
                                    "parentUUID": "16705fce-2f36-45b2-8a9c-784f052235cc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3e6f09f9-1314-4007-8d67-01635e511fde",
                                "28594f3e-18cd-4f3d-b9f3-3dfa6b8dbf64"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "9c95c8b3-d76a-43c3-bef5-21e674126ad6",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
                {
                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                    "fullTitle": "commits SET_SELECTED_FOR_EDIT mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                    "err": {},
                    "uuid": "90bda617-dcf9-4817-8939-24e8856d77d0",
                    "parentUUID": "9c95c8b3-d76a-43c3-bef5-21e674126ad6",
                    "isHook": false,
                    "skipped": true
                },
                {
                    "title": "commits SET_SHOW_DIALOG mutation",
                    "fullTitle": "commits SET_SHOW_DIALOG mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                    "err": {},
                    "uuid": "73379ce3-fe56-4aa1-91b1-37ec4b544272",
                    "parentUUID": "9c95c8b3-d76a-43c3-bef5-21e674126ad6",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "fd7a528c-1724-4f5b-b69f-c46a43a388f3",
                    "title": "PasswordSettings.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "renders correctly",
                            "fullTitle": "PasswordSettings.vue renders correctly",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(pwdSettingsApi.listPasswordSettings).to.have.been.called;\nexpect(pwdExpirationActiveCheckBox).to.be.exist;\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(false);\nexpect(pwdExpirationTextBox).to.be.exist;\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal('disabled');\nexpect(pwdExpirationTextBox.element.value).to.equal('7');\nexpect(pwdStrengthActiveCheckBox).to.be.exist;\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(false);\nexpect(minPwdLengthTextBox).to.be.exist;\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(minPwdLengthTextBox.element.value).to.equal('3');\nexpect(maxPwdLengthTextBox).to.be.exist;\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(maxPwdLengthTextBox.element.value).to.equal('10');\nexpect(pwdStrengthExpressionTextBox).to.be.exist;\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal('disabled'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton).to.be.exist;\nexpect(restoreButton.attributes('disabled')).to.equal('disabled');\nexpect(wrapper.find('button#save')).to.be.exist;",
                            "err": {},
                            "uuid": "7f64eeed-94ee-4e09-bfc3-2a59bb310fe5",
                            "parentUUID": "fd7a528c-1724-4f5b-b69f-c46a43a388f3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [
                        {
                            "uuid": "5d3048ee-883d-4fcb-ac0b-f4cd7c4bebbc",
                            "title": "checkboxes enabling textboxes",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdExpirationActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(true);\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "a6ba668f-0f88-40ce-8c23-f7e917646817",
                                    "parentUUID": "5d3048ee-883d-4fcb-ac0b-f4cd7c4bebbc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(true);\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal(undefined);\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "8b8f8e61-6205-49d8-a3bb-7a357ecf8b75",
                                    "parentUUID": "5d3048ee-883d-4fcb-ac0b-f4cd7c4bebbc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a6ba668f-0f88-40ce-8c23-f7e917646817",
                                "8b8f8e61-6205-49d8-a3bb-7a357ecf8b75"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d8b0d41c-9fda-452d-9b47-a17eff9f7830",
                            "title": "password length change effects on strength regular expression",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "correctly adjusts strength expression when min pwd length changes",
                                    "fullTitle": "PasswordSettings.vue password length change effects on strength regular expression correctly adjusts strength expression when min pwd length changes",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nminPwdLengthTextBox.element.value = '4';\nminPwdLengthTextBox.trigger('input');\nmaxPwdLengthTextBox.element.value = '11';\nmaxPwdLengthTextBox.trigger('input');\nawait wrapper.vm.$nextTick(); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "14f7a072-1ad9-4b5a-9b9c-07b1eb925d11",
                                    "parentUUID": "d8b0d41c-9fda-452d-9b47-a17eff9f7830",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "14f7a072-1ad9-4b5a-9b9c-07b1eb925d11"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "12990af3-0295-42b6-832d-d1ea543f7d90",
                            "title": "restore default password strength",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "restores default password strength values when restore button is clicked",
                                    "fullTitle": "PasswordSettings.vue restore default password strength restores default password strength values when restore button is clicked",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nawait wrapper.find('button#restoreDefaultPwdStrengthExpression').trigger('click'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');",
                                    "err": {},
                                    "uuid": "1211cf93-347d-47de-96de-efea2307c41b",
                                    "parentUUID": "12990af3-0295-42b6-832d-d1ea543f7d90",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1211cf93-347d-47de-96de-efea2307c41b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4b4d3582-1c32-4644-9047-635ecc79ff96",
                            "title": "save password settings",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "calls updatePasswordSettings with correct params when Save button is clicked",
                                    "fullTitle": "PasswordSettings.vue save password settings calls updatePasswordSettings with correct params when Save button is clicked",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(pwdExpirationActiveCheckBox.element.checked).to.equal(true); // change some settings in ui. make sure api call has correct params when saved\npwdExpirationTextBox.setValue('10');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nwrapper.find('button#save').trigger('click');\nexpect(pwdSettingsApi.updatePasswordSettings).to.have.been.called;\nconst requestBody = pwdSettingsApi.updatePasswordSettings.args[0][1].requestBody;\nexpect(requestBody).to.be.ok;\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('10');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH').settingsValue).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "4d1fadfc-e12f-438e-a3dd-3a67ed82a051",
                                    "parentUUID": "4b4d3582-1c32-4644-9047-635ecc79ff96",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4d1fadfc-e12f-438e-a3dd-3a67ed82a051"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [
                        "7f64eeed-94ee-4e09-bfc3-2a59bb310fe5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7d6b0a21-12b5-4f97-8968-ad9b7b6c2348",
                    "title": "BiztimeDialog.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimeDialog.vue\"",
                            "fullTitle": "BiztimeDialog.vue \"before each\" hook in \"BiztimeDialog.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "de855344-2171-4699-9329-878ef9abbe02",
                            "parentUUID": "7d6b0a21-12b5-4f97-8968-ad9b7b6c2348",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimeDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// console.log('-- dd:', wrapper.vm.$store.state.biztimes.selectedForEdit);\n// headline\nconst headline = wrapper.find('span.headline');\nexpect(headline.exists()).to.be.true;\nexpect(headline.text()).to.eq(`Edit Business Hours for ${biztime.dayOfWeek}`); // inputs\nexpect(startTimeRef.value).to.deep.equal(biztime.startTime);\nexpect(endTimeRef.value).to.deep.equal(biztime.endTime);\nexpect(activeRef.inputValue).to.equal(biztime.active); // btns\nexpect(saveBtn.exists()).to.be.true;\nexpect(closeBtn.exists()).to.be.true;",
                            "err": {},
                            "uuid": "ba538e9f-6515-4bea-b275-83ecb42c16b4",
                            "parentUUID": "7d6b0a21-12b5-4f97-8968-ad9b7b6c2348",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save biztime",
                            "fullTitle": "BiztimeDialog.vue should save biztime",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await saveBtn.trigger('click');\nexpect(mockstore.actions.saveBiztime).to.have.been.called;",
                            "err": {},
                            "uuid": "694f6dc3-3ad3-4db0-a85e-9de9222db3e9",
                            "parentUUID": "7d6b0a21-12b5-4f97-8968-ad9b7b6c2348",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog",
                            "fullTitle": "BiztimeDialog.vue should close dialog",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.calledWith(store.state.biztimes, {});",
                            "err": {},
                            "uuid": "51fe9d91-b390-4002-ab0a-a2274538cd55",
                            "parentUUID": "7d6b0a21-12b5-4f97-8968-ad9b7b6c2348",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ba538e9f-6515-4bea-b275-83ecb42c16b4",
                        "694f6dc3-3ad3-4db0-a85e-9de9222db3e9",
                        "51fe9d91-b390-4002-ab0a-a2274538cd55"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "872a5877-8838-45e8-9d2a-1a761f75d74b",
                    "title": "BiztimesTable.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimesTable.vue\"",
                            "fullTitle": "BiztimesTable.vue \"before each\" hook in \"BiztimesTable.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "103edc8d-29f3-4fc9-9af6-2ac17227db8a",
                            "parentUUID": "872a5877-8838-45e8-9d2a-1a761f75d74b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimesTable.vue should render correctly",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Business Hours'); // link to set permissions\nexpect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true); // getBiztimes\nexpect(mockstore.actions.getBiztimes).to.have.been.called;",
                            "err": {},
                            "uuid": "e42b7e5b-5f75-4397-a648-8975fd486144",
                            "parentUUID": "872a5877-8838-45e8-9d2a-1a761f75d74b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e42b7e5b-5f75-4397-a648-8975fd486144"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a4876ee8-f7f2-4e3c-a4cf-d2f2cbf87e83",
                    "title": "HolidaysTable.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6e39f69a-2680-402d-827b-52ce4ca1c27a",
                            "title": "initial state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook",
                                    "fullTitle": "HolidaysTable.vue initial state \"before each\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_HolidaysTable.default, {\n  store\n});",
                                    "err": {},
                                    "uuid": "eb1ac300-ff0e-4b95-95aa-62bf1a660ffd",
                                    "parentUUID": null,
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "abf4fad5-06af-4589-8da7-f35d4f705bec",
                    "title": "Menu.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Menu.vue\"",
                            "fullTitle": "Menu.vue \"before each\" hook in \"Menu.vue\"",
                            "timedOut": false,
                            "duration": 20,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n}); // data-app prevents warning during test: [Vuetify] Unable to locate target [data-app]\n// https://forum.vuejs.org/t/vuetify-data-app-true-and-problems-rendering-v-dialog-in-unit-tests/27495\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");",
                            "err": {},
                            "uuid": "9e708494-46d0-496f-b4c5-17a080dadee2",
                            "parentUUID": "abf4fad5-06af-4589-8da7-f35d4f705bec",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "546e36b1-010f-4646-92d0-aae6575671aa",
                            "title": "initial state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Menu.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "0821535d-9d53-4080-9f1b-3c02ffc9f71f",
                                    "parentUUID": "546e36b1-010f-4646-92d0-aae6575671aa",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Menu.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('[data-test=\"setPermissionsMobile\"').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "524a8b8e-9b09-416a-875d-6118eda97e6d",
                                    "parentUUID": "546e36b1-010f-4646-92d0-aae6575671aa",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Menu.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 49,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.exists()).to.equal(true);\n  expect(deleteButton.attributes('disabled')).to.not.be.undefined;\n  done();\n});",
                                    "err": {},
                                    "uuid": "0ca3c4e5-840d-4541-bb06-23eca89bd313",
                                    "parentUUID": "546e36b1-010f-4646-92d0-aae6575671aa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0821535d-9d53-4080-9f1b-3c02ffc9f71f",
                                "524a8b8e-9b09-416a-875d-6118eda97e6d",
                                "0ca3c4e5-840d-4541-bb06-23eca89bd313"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 173,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "29330ec5-5025-424d-8ab1-98f8d64e0892",
                            "title": "Menu item clicks",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add holiday button click",
                                    "fullTitle": "Menu.vue Menu item clicks add holiday button click",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  wrapper.find('button#addHolidayMobile').trigger('click');\n  it('commits SET_SELECTED_FOR_EDIT mutation', () => {\n    expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;\n  });\n  it('commits SET_SHOW_DIALOG mutation', () => {\n    expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\n  });\n  done();\n});",
                                    "err": {},
                                    "uuid": "a90b3d09-f7cb-45c4-ae6f-cd41c2284410",
                                    "parentUUID": "29330ec5-5025-424d-8ab1-98f8d64e0892",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Menu.vue Menu item clicks enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 75,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n});\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");\nmenuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.attributes('disabled')).to.equal(undefined);\n  done();\n});",
                                    "err": {},
                                    "uuid": "ad98997c-2d28-4982-9cec-9ab0cc71f8c2",
                                    "parentUUID": "29330ec5-5025-424d-8ab1-98f8d64e0892",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a90b3d09-f7cb-45c4-ae6f-cd41c2284410",
                                "ad98997c-2d28-4982-9cec-9ab0cc71f8c2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 128,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a2dd0928-6b64-40de-a80b-b0c35cc1e970",
                    "title": "Toolbar.vue",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ad8d8b9f-3a0b-4413-a299-f583a2d3ba7b",
                            "title": "initial state",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"initial state\"",
                                    "fullTitle": "Toolbar.vue initial state \"before each\" hook in \"initial state\"",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "feadb8e1-0ec5-4176-bc67-1c2a0b2f13f0",
                                    "parentUUID": "ad8d8b9f-3a0b-4413-a299-f583a2d3ba7b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Toolbar.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button#addHoliday').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "237b30d4-22fa-40bd-a757-cb51bd09c096",
                                    "parentUUID": "ad8d8b9f-3a0b-4413-a299-f583a2d3ba7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Toolbar.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "034f56f0-6fd6-4b71-94f9-f8090df44811",
                                    "parentUUID": "ad8d8b9f-3a0b-4413-a299-f583a2d3ba7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Toolbar.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.exists()).to.equal(true);\nexpect(deleteButton.attributes('disabled')).to.equal('disabled');",
                                    "err": {},
                                    "uuid": "a5782822-1a4d-4dfb-868c-c8239f15fd05",
                                    "parentUUID": "ad8d8b9f-3a0b-4413-a299-f583a2d3ba7b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "237b30d4-22fa-40bd-a757-cb51bd09c096",
                                "034f56f0-6fd6-4b71-94f9-f8090df44811",
                                "a5782822-1a4d-4dfb-868c-c8239f15fd05"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9df27ada-58fd-420e-babc-f48e20f147b6",
                            "title": "add holiday button click",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"add holiday button click\"",
                                    "fullTitle": "Toolbar.vue add holiday button click \"before each\" hook in \"add holiday button click\"",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "mockstore = (0, _store.mockStore)();\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\nwrapper.find('button#addHoliday').trigger('click');",
                                    "err": {},
                                    "uuid": "a968e988-634e-4bef-b78c-d2185bd0adc1",
                                    "parentUUID": "9df27ada-58fd-420e-babc-f48e20f147b6",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SELECTED_FOR_EDIT mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                                    "err": {},
                                    "uuid": "95d9d543-136a-434b-9202-0226f81a8aee",
                                    "parentUUID": "9df27ada-58fd-420e-babc-f48e20f147b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "commits SET_SHOW_DIALOG mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SHOW_DIALOG mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                                    "err": {},
                                    "uuid": "b3526908-afc7-4d9c-9b2a-57ae9eb6bc2d",
                                    "parentUUID": "9df27ada-58fd-420e-babc-f48e20f147b6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "95d9d543-136a-434b-9202-0226f81a8aee",
                                "b3526908-afc7-4d9c-9b2a-57ae9eb6bc2d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e2c0dea4-bead-4f9a-8762-17b4cc1f2492",
                            "title": "holidays have been selected for deletion",
                            "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"holidays have been selected for deletion\"",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion \"before each\" hook in \"holidays have been selected for deletion\"",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nmockstore = (0, _store.mockStore)({\n  state\n});\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "b0157077-83b6-4034-8fe1-6ee5a2990400",
                                    "parentUUID": "e2c0dea4-bead-4f9a-8762-17b4cc1f2492",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "bbb30f30-c003-441c-a3e3-53c409db8c1b",
                                    "parentUUID": "e2c0dea4-bead-4f9a-8762-17b4cc1f2492",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "dispatches delete_holidays action when delete holidays button is clicked",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion dispatches delete_holidays action when delete holidays button is clicked",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "deleteButton.trigger('click');\nexpect(mockstore.actions.delete_holidays).to.have.been.called;",
                                    "err": {},
                                    "uuid": "adcdcd40-647e-4abf-954f-3df3d8dea042",
                                    "parentUUID": "e2c0dea4-bead-4f9a-8762-17b4cc1f2492",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bbb30f30-c003-441c-a3e3-53c409db8c1b",
                                "adcdcd40-647e-4abf-954f-3df3d8dea042"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f60b9013-7aeb-4bd3-bc56-c9e33543b009",
                    "title": "biztime actions",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"before each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = {};",
                            "err": {},
                            "uuid": "ca58a296-d590-4548-be56-6a2842708bdd",
                            "parentUUID": "f60b9013-7aeb-4bd3-bc56-c9e33543b009",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"after each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "3b754e07-12ed-4ad5-ac4b-bf1f8d2ef75b",
                            "parentUUID": "f60b9013-7aeb-4bd3-bc56-c9e33543b009",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getBiztimes",
                            "fullTitle": "biztime actions should getBiztimes",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getBiztimes({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]]]);",
                            "err": {},
                            "uuid": "90b4df06-831a-4ec2-8552-ba37fa5f5555",
                            "parentUUID": "f60b9013-7aeb-4bd3-bc56-c9e33543b009",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should saveBiztime",
                            "fullTitle": "biztime actions should saveBiztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.saveBiztime({\n  commit,\n  state\n}, { ..._list.default[0],\n  $commonLib: _commonLib.default\n});\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]], ['SET_SELECTED_FOR_EDIT', {}], ['SET_SHOW_DIALOG', false]]);",
                            "err": {},
                            "uuid": "2ad3cf01-6796-4117-8c25-ca40d0e527a7",
                            "parentUUID": "f60b9013-7aeb-4bd3-bc56-c9e33543b009",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "90b4df06-831a-4ec2-8552-ba37fa5f5555",
                        "2ad3cf01-6796-4117-8c25-ca40d0e527a7"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d5b9f8df-17d0-4ac8-93f4-784aa4c0e162",
                    "title": "biztime getters",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get biztimes",
                            "fullTitle": "biztime getters should get biztimes",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const state = {\n  biztimes: JSON.parse(JSON.stringify(_list.default))\n};\nconst biztimes = _getters.default.biztimes(state);\n(0, _chai.expect)(biztimes).not.to.deep.equal(_list.default);\nbiztimes.forEach(biztime => {\n  const startTime = {\n    hour: biztime.startHour,\n    minute: biztime.startMinute\n  };\n  const endTime = {\n    hour: biztime.endHour,\n    minute: biztime.endMinute\n  };\n  (0, _chai.expect)(biztime.startTime).to.deep.equal(startTime);\n  (0, _chai.expect)(biztime.endTime).to.deep.equal(endTime);\n});",
                            "err": {},
                            "uuid": "3800dd83-c885-4a47-9e49-359930c4f82f",
                            "parentUUID": "d5b9f8df-17d0-4ac8-93f4-784aa4c0e162",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3800dd83-c885-4a47-9e49-359930c4f82f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7aeb2003-b303-4ed4-a4ad-d0ff82f2797e",
                    "title": "biztime mutations",
                    "fullFile": "/home/will/code/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_BIZTIMES",
                            "fullTitle": "biztime mutations should SET_BIZTIMES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_BIZTIMES(state, [..._list.default]);\n(0, _chai.expect)(state.biztimes).to.deep.equal(_list.default);",
                            "err": {},
                            "uuid": "524c0b49-988b-4213-bbb7-d2dc6169dd77",
                            "parentUUID": "7aeb2003-b303-4ed4-a4ad-d0ff82f2797e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_FOR_EDIT",
                            "fullTitle": "biztime mutations should SET_SELECTED_FOR_EDIT",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SELECTED_FOR_EDIT(state, _list.default[0]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[0]);\nSET_SELECTED_FOR_EDIT(state, _list.default[3]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[3]);",
                            "err": {},
                            "uuid": "8240dbd0-3d11-4cae-b3f2-b56aa0faead2",
                            "parentUUID": "7aeb2003-b303-4ed4-a4ad-d0ff82f2797e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "biztime mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.equal(true);\nSET_SHOW_DIALOG(state, false);\n(0, _chai.expect)(state.showDialog).to.equal(false);",
                            "err": {},
                            "uuid": "c6b2927e-652b-47fc-86f6-15cb8503bfd6",
                            "parentUUID": "7aeb2003-b303-4ed4-a4ad-d0ff82f2797e",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "524c0b49-988b-4213-bbb7-d2dc6169dd77",
                        "8240dbd0-3d11-4cae-b3f2-b56aa0faead2",
                        "c6b2927e-652b-47fc-86f6-15cb8503bfd6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "90bda617-dcf9-4817-8939-24e8856d77d0",
                "73379ce3-fe56-4aa1-91b1-37ec4b544272"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        }
    ],
    "meta": {
        "mocha": {
            "version": "8.1.1"
        },
        "mochawesome": {
            "options": {
                "quiet": false,
                "reportFilename": "mochawesome",
                "saveHtml": true,
                "saveJson": true,
                "consoleReporter": "spec",
                "useInlineDiffs": false,
                "code": true
            },
            "version": "6.1.1"
        },
        "marge": {
            "options": null,
            "version": "5.1.0"
        }
    }
}