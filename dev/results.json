{
    "stats": {
        "suites": 18,
        "tests": 473,
        "passes": 468,
        "pending": 0,
        "failures": 2,
        "start": "2021-03-31T18:45:45.126Z",
        "end": "2021-03-31T18:45:45.126Z",
        "duration": 76397,
        "testsRegistered": 473,
        "passPercent": 98.94291754756871,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 3,
        "hasSkipped": true
    },
    "results": [
        {
            "uuid": "32b62682-e5ef-4b21-a087-09ba73e007ff",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [
                {
                    "title": "\"before all\" hook",
                    "fullTitle": "\"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "// insert known tokens into redis (normally these are created by emailPasswordReset)\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait redisClient.setexAsync(`pwReset:${accountGuid}`, 3600, securityToken);\nawait redisClient.setexAsync(`pwReset:${securityToken}`, 3600, accountGuid);",
                    "err": {},
                    "uuid": "8634eeee-cbeb-4537-b021-4a35b96c2ae0",
                    "parentUUID": "32b62682-e5ef-4b21-a087-09ba73e007ff",
                    "isHook": true,
                    "skipped": false
                }
            ],
            "afterHooks": [],
            "tests": [
                {
                    "title": "should create a new password",
                    "fullTitle": "should create a new password",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "const mockReq = mocks.createNewPassword(securityToken);\nconst mockRes = mocks.mockResponse();\nawait resetPassword.createNewPassword(mockReq, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\n// ensure createNewPassword cleans up redis\nexpect(await redisClient.getAsync(`pwReset:${accountGuid}`)).to.be.null;\nexpect(await redisClient.getAsync(`pwReset:${securityToken}`)).to.be.null;",
                    "err": {},
                    "uuid": "166ceaf4-4497-4dc6-9942-99a924902d08",
                    "parentUUID": "32b62682-e5ef-4b21-a087-09ba73e007ff",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "8658a900-2e8c-4c40-a40a-7b83c1edb8d5",
                    "title": "Auth API API Key Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/apiKey.test.js",
                    "file": "/test/integration/functions/apiKey.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"before all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "c15c3374-9313-4e3f-b778-b6165fc46c72",
                            "parentUUID": "8658a900-2e8c-4c40-a40a-7b83c1edb8d5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"after all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await apiKey.deleteTestKeys(testConfig.tenantOne.tenantId);",
                            "err": {},
                            "uuid": "b564ac3d-748e-4dc5-8ae6-30665b1ff6c0",
                            "parentUUID": "8658a900-2e8c-4c40-a40a-7b83c1edb8d5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                            "title": "api key crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/apiKey.test.js",
                            "file": "/test/integration/functions/apiKey.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should insert an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = {expires: new Date(new Date().getTime() + 60000), testOnly: true, description: \"this is a test\"}\nawait apiKey.createApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nkey = inserted.key;\nid = inserted._id;\nexpect(inserted).to.exist;",
                                    "err": {},
                                    "uuid": "112131f9-6165-427e-8ba4-d0dcaed4957d",
                                    "parentUUID": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list an apiKeys",
                                    "fullTitle": "Auth API API Key Tests api key crud  should list an apiKeys",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nawait apiKey.listApiKeys(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst keyList = mockRes.body;\nexpect(keyList).to.exist;\nexpect(keyList.length).to.be.gt(0);\nexpect(keyList[0].hashedKey).to.exist",
                                    "err": {},
                                    "uuid": "6b729665-cdbe-4c31-9c8a-74da80740ccd",
                                    "parentUUID": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should verify an apiKey",
                                    "fullTitle": "Auth API API Key Tests api key crud  should verify an apiKey",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait apiKey.verifyApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"api key valid\");",
                                    "err": {},
                                    "uuid": "52194f9f-3963-4ecb-8e44-12baa6008da0",
                                    "parentUUID": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid api key and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid api key and return a JWT",
                                    "timedOut": false,
                                    "duration": 188,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonate(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "a70a8095-cc35-4b34-af94-f354bf96afa4",
                                    "parentUUID": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userName and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userName and return a JWT",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);\ncontact = impersonated;",
                                    "err": {},
                                    "uuid": "2c889709-8fee-4390-9bf6-ff8559eb390c",
                                    "parentUUID": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userSid and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userSid and return a JWT",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userSid = contact.contactGuid;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "40baaef5-c4ea-4ac0-b342-834569999da5",
                                    "parentUUID": "4bfd8cf4-ed70-4c78-a6aa-ad81f10baacb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "112131f9-6165-427e-8ba4-d0dcaed4957d",
                                "6b729665-cdbe-4c31-9c8a-74da80740ccd",
                                "52194f9f-3963-4ecb-8e44-12baa6008da0",
                                "a70a8095-cc35-4b34-af94-f354bf96afa4",
                                "2c889709-8fee-4390-9bf6-ff8559eb390c",
                                "40baaef5-c4ea-4ac0-b342-834569999da5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 310,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d1cf1647-d4e3-4dc5-bd2e-90934bead14d",
                    "title": "Auth API Auth Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                    "file": "/test/integration/functions/auth.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Auth Tests\"",
                            "fullTitle": "Auth API Auth Tests \"before all\" hook in \"Auth API Auth Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "d93d4269-063a-474c-8fe6-f2176e1aaf07",
                            "parentUUID": "d1cf1647-d4e3-4dc5-bd2e-90934bead14d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cb7dd7e8-d1f1-43ff-b550-d6ca4bd597c7",
                            "title": "getGuestToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return guest auth token",
                                    "fullTitle": "Auth API Auth Tests getGuestToken should return guest auth token",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet getGuestTokenEvent = await mocks.getGuestTokenEvent()\n\t\t\tlet results = await dbauth.getGuestToken(getGuestTokenEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n      expect(mockRes.body.length).to.be.greaterThan(1000);",
                                    "err": {},
                                    "uuid": "944e9fee-2b61-46bd-9e8b-d4ba818a67e7",
                                    "parentUUID": "cb7dd7e8-d1f1-43ff-b550-d6ca4bd597c7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "944e9fee-2b61-46bd-9e8b-d4ba818a67e7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "720007d1-bbf0-4fde-938b-da04e68ebe70",
                            "title": "login",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a contact with a token",
                                    "fullTitle": "Auth API Auth Tests login should return a contact with a token",
                                    "timedOut": false,
                                    "duration": 114,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet loginEvent = await mocks.loginEvent()\n\t\t\tlet results = await dbauth.login(loginEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst contactInfo = mockRes.body;\n\t\t\texpect(contactInfo.userName).equal(loginEvent.body.username);\n\t\t\texpect(contactInfo.token).to.exist;",
                                    "err": {},
                                    "uuid": "5a1a71e5-1627-4b6a-9655-0d8afaa71ec0",
                                    "parentUUID": "720007d1-bbf0-4fde-938b-da04e68ebe70",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5a1a71e5-1627-4b6a-9655-0d8afaa71ec0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f14be408-464d-4ea6-a7f6-0242a0ce0ad3",
                            "title": "refreshJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests refreshJwt refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\nlet loginEvent = await mocks.loginEvent()\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.login(loginEvent, mockRes);\nconst contactInfo = mockRes.body;\nlogoutEvent.cookies = {\"integrifyRefreshToken\": contactInfo.refreshToken };\nlogoutEvent.body = {token: contactInfo.token, refreshToken: contactInfo.refreshToken }\nawait jwtFuncs.refreshJwt(logoutEvent, await mocks.mockResponse());\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "7f2f7443-a66f-44a2-9f7f-4f41f8293e6e",
                                    "parentUUID": "f14be408-464d-4ea6-a7f6-0242a0ce0ad3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7f2f7443-a66f-44a2-9f7f-4f41f8293e6e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 103,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "59975a79-d163-4769-80ad-0f2dce046cef",
                            "title": "isAuthenticated",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests isAuthenticated refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\n\nawait jwtFuncs.isAuthenticated({cookies: {integrifyToken: \"fake\"}}, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "f6f9da8c-479a-4140-bc8c-93fd81a91373",
                                    "parentUUID": "59975a79-d163-4769-80ad-0f2dce046cef",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f6f9da8c-479a-4140-bc8c-93fd81a91373"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "53188e63-839e-48ab-a0d2-e1f5a9c49992",
                            "title": "logout",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should log a user out",
                                    "fullTitle": "Auth API Auth Tests logout should log a user out",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.logout(logoutEvent, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body).to.deep.equal({message: 'OK'});",
                                    "err": {},
                                    "uuid": "dfeff60f-933b-435b-813d-6b8e11a5b8b1",
                                    "parentUUID": "53188e63-839e-48ab-a0d2-e1f5a9c49992",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dfeff60f-933b-435b-813d-6b8e11a5b8b1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8aad4952-050a-43e4-a4c4-6a174421a384",
                    "title": "Auth API Reset Password Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                    "file": "/test/integration/functions/resetPassword.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Reset Password Tests\"",
                            "fullTitle": "Auth API Reset Password Tests \"before all\" hook in \"Auth API Reset Password Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000);\nprocess.env.TESTING = true;\nresetRewired.__set__('nodemailer', nodemailerMock);",
                            "err": {},
                            "uuid": "f0e7c6a8-ff7f-4170-8181-0d76154b4f69",
                            "parentUUID": "8aad4952-050a-43e4-a4c4-6a174421a384",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1bcd3eaa-1fe9-43d1-91b4-964ef49a2784",
                            "title": "emailUsernames",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should send an email of accounts for existing email",
                                    "fullTitle": "Auth API Reset Password Tests emailUsernames should send an email of accounts for existing email",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\n      const accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\n      const mockRes = mocks.mockResponse();\n      const mockReq = await mocks.emailUsernames();\n      await resetRewired.emailUsernames(mockReq, mockRes);\n      expect(mockRes.statusCode).equal(200);\n      expect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "808f0937-dc19-4ef0-b300-6d0ebc6fa80d",
                                    "parentUUID": "1bcd3eaa-1fe9-43d1-91b4-964ef49a2784",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "808f0937-dc19-4ef0-b300-6d0ebc6fa80d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6ab136c2-d96d-409a-918b-08c103c9bce1",
                            "title": "passwordReset",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"passwordReset\"",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset \"before all\" hook in \"passwordReset\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "resetRewired.__set__('nodemailer', nodemailerMock);",
                                    "err": {},
                                    "uuid": "6e6fa468-7ccb-4b08-8936-432e6e24ce41",
                                    "parentUUID": "6ab136c2-d96d-409a-918b-08c103c9bce1",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "emailPassworReset",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset emailPassworReset",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\nconst accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait resetRewired.emailPasswordReset(mockReq, mockRes);\n// check if security token was added to redis\nconst securityToken = await redisClient.getAsync(`pwReset:${accountGuid}`);\nconst accountEntry = await redisClient.getAsync(`pwReset:${securityToken}`);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(securityToken).to.exist;\nexpect(accountEntry).to.exist;\n// clean up entries leftover from calling emailPasswordReset\nawait redisClient.del(`pwReset:${accountGuid}`);\nawait redisClient.del(`pwReset:${securityToken}`);",
                                    "err": {},
                                    "uuid": "63108076-9aaa-4431-b50e-c491549e7066",
                                    "parentUUID": "6ab136c2-d96d-409a-918b-08c103c9bce1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "63108076-9aaa-4431-b50e-c491549e7066"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a7d5ea88-ea8c-4ebe-aefe-cb967e29e782",
                    "title": "Auth API SAML Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/samlSettings.test.js",
                    "file": "/test/integration/functions/samlSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "e28e3bf0-4c78-4652-81d1-f0a917d08d02",
                            "parentUUID": "a7d5ea88-ea8c-4ebe-aefe-cb967e29e782",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await samlSettings.deleteSamlSettingsByName(testConfig.tenantOne.tenantId, 'unitTestIDP')",
                            "err": {},
                            "uuid": "5b143d0f-2f1d-4f37-8466-ada06a5daf82",
                            "parentUUID": "a7d5ea88-ea8c-4ebe-aefe-cb967e29e782",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                            "title": "SAML Settings crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/samlSettings.test.js",
                            "file": "/test/integration/functions/samlSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert saml settings and return a doc",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should insert saml settings and return a doc",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n           \nreq.body = data;\nawait samlSettings.createSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\n\nsamlId = inserted._id;\nexpect(inserted).to.exist;\nexpect(inserted.idpMetaData).to.equal(data.idpMetaData);\nexpect(inserted.idpName).to.equal(data.idpName);\nexpect(inserted.idpDescription).to.equal(data.idpDescription);\nexpect(inserted.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "e8185790-050e-4ee2-9ff3-3fae3f2ca750",
                                    "parentUUID": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings without an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings without an id",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "7524869a-8929-444a-8e71-783386d599a4",
                                    "parentUUID": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings with an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings with an id",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId.toString();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result._id.toString()).to.equal(samlId.toString());",
                                    "err": {},
                                    "uuid": "f453cdec-459b-4f83-b962-6112a224baca",
                                    "parentUUID": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should update saml settings",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\n\nreq.body = data;\n\nawait samlSettings.updateSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.exist;",
                                    "err": {},
                                    "uuid": "67fdaf7b-f4e2-4a89-9136-18a9453ca858",
                                    "parentUUID": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return sp metadata",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should return sp metadata",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait samlSettings.getMetaData(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst metadata = mockRes.body;\nexpect(metadata).to.exist;",
                                    "err": {},
                                    "uuid": "8fe0ea21-f1d6-4668-815f-5522cf6e2173",
                                    "parentUUID": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should delete saml settings",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.deleteSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "5a3f4b8d-18a6-4b00-91b1-f74114cea95f",
                                    "parentUUID": "a11dfe4b-383c-4afe-a97d-f055dc49fe93",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e8185790-050e-4ee2-9ff3-3fae3f2ca750",
                                "7524869a-8929-444a-8e71-783386d599a4",
                                "f453cdec-459b-4f83-b962-6112a224baca",
                                "67fdaf7b-f4e2-4a89-9136-18a9453ca858",
                                "8fe0ea21-f1d6-4668-815f-5522cf6e2173",
                                "5a3f4b8d-18a6-4b00-91b1-f74114cea95f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 65,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "166ceaf4-4497-4dc6-9942-99a924902d08"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        },
        {
            "uuid": "54ddaba3-f335-46a1-a8f1-3e9a900808b3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "082a1ea1-b677-46e1-ae22-02d5701b7c04",
                    "title": "Dashboard controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.controller.test.js",
                    "file": "/test/dashboard.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 13,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "00677508-602d-4b9a-881b-2d375c5850c8",
                            "parentUUID": "082a1ea1-b677-46e1-ae22-02d5701b7c04",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "94aa1344-ec15-4cd0-a280-f6d2ddb27b52",
                            "parentUUID": "082a1ea1-b677-46e1-ae22-02d5701b7c04",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                            "title": "dashboard crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.controller.test.js",
                            "file": "/test/dashboard.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.createDashboard(tenant, dashboardObj);\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "c338ccd0-a8e6-48d8-a754-1d7b032322d4",
                                    "parentUUID": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboards = await dashboardController.listDashboards(tenant);\n         expect(dashboards.length).to.be.gt(0);  \n         let createdDashord  = dashboards.find((d) => {\n             return d.sid === sid;\n         })\n         expect\n         (createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "9c15cd9c-7a9f-4bfc-8c57-546ed7832c6c",
                                    "parentUUID": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard = await dashboardController.getDashboard(tenant,sid);\n            expect(dashboard).to.exist         \n            expect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "673d8aa6-4b70-48bd-88dc-153a54a2c5a3",
                                    "parentUUID": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard.banner = 'test-updated';\n            const updatedDashboard = await dashboardController.updateDashboard(tenant,dashboard.toObject());\n            expect(updatedDashboard).to.exist         \n            expect(updatedDashboard.sid).to.equal(sid)\n            expect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "a735ff43-47a2-455b-80d2-38487d63ff92",
                                    "parentUUID": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const copiedDashboard = await dashboardController.copyDashboard(tenant, sid);\n            expect(copiedDashboard).to.exist         \n            expect(copiedDashboard.sid).to.not.equal(sid)\n            expect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "0d3ae066-ef5b-4c05-a239-997b80ba4e2e",
                                    "parentUUID": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  delete a a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await dashboardController.deleteDashboard(tenant,sid);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "510ad2e1-61fd-44b6-a089-2fe90b5d93ed",
                                    "parentUUID": "cb38419f-71fb-4485-8fc6-059185e8ce16",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c338ccd0-a8e6-48d8-a754-1d7b032322d4",
                                "9c15cd9c-7a9f-4bfc-8c57-546ed7832c6c",
                                "673d8aa6-4b70-48bd-88dc-153a54a2c5a3",
                                "a735ff43-47a2-455b-80d2-38487d63ff92",
                                "0d3ae066-ef5b-4c05-a239-997b80ba4e2e",
                                "510ad2e1-61fd-44b6-a089-2fe90b5d93ed"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 86,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "195ea94b-193f-42dd-ae9b-103dafc239ef",
                    "title": "Dashboard route handler tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.handlers.test.js",
                    "file": "/test/dashboard.handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nsession = (await mocks.req()).oauth;\nperms  = await permissions.currentUserPermissions(session)\nlet permissionsWithRun = perms.concat([\n    {\n        \"objectType\": \"tab\",\n        \"ownerSid\": \"bb6cb26b-d179-4763-b2cb-69d107dfd1d8\",\n        \"ownerType\": \"system\",\n        \"permissions\": enums.permissionTypes.run,\n        \"roleName\": \"system administrators\",\n        \"roleGuid\": \"a48ea7cf-f1ba-4ca9-bf17-2c97d49336cd\"\n      }\n])\nawait permissions.cachePerms(session, permissionsWithRun);\nconsole.log(permissionsWithRun)",
                            "err": {},
                            "uuid": "61086810-4ac2-429e-8f87-76738f2a337b",
                            "parentUUID": "195ea94b-193f-42dd-ae9b-103dafc239ef",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard route handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);\nawait permissions.cachePerms(session, perms);",
                            "err": {},
                            "uuid": "ef21ab49-9d35-4239-b1fd-9ac9b9dcf67b",
                            "parentUUID": "195ea94b-193f-42dd-ae9b-103dafc239ef",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                            "title": "dashboard crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.handlers.test.js",
                            "file": "/test/dashboard.handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = dashboardObj;\nawait handlers.createDashboard(req,mockRes);\nconst dashboard = req.body;\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "79a3a109-b916-4508-b621-1a101481451a",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "f1fb84a6-81c6-4729-9519-fb52d573415d",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for admins",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for admins",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.admin = true;\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "f08bbd77-e324-4208-b784-e73fd8672e9d",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.getDashboard(req,mockRes);\ndashboard = mockRes.body;\nexpect(dashboard).to.exist         \nexpect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "6b954c94-c8ee-4782-9d62-b6189107c035",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.updateDashboard(req,mockRes);\nconst updatedDashboard = mockRes.body;\nexpect(updatedDashboard).to.exist         \nexpect(updatedDashboard.sid).to.equal(sid)\nexpect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "d4988691-b3bd-4f3c-b9a1-3e56361ee86f",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.copyDashboard(req,mockRes);\nconst copiedDashboard = mockRes.body;\nexpect(copiedDashboard).to.exist         \nexpect(copiedDashboard.sid).to.not.equal(sid)\nexpect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "16a6b63e-29f7-448a-bb92-c07998c12ecb",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should delete a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.deleteDashboard(req,mockRes);\nlet deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "40dc0a2a-3207-4bde-8317-69c30f225d75",
                                    "parentUUID": "aab302c5-71dc-4b34-a8a3-4de2f41a801a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "79a3a109-b916-4508-b621-1a101481451a",
                                "f1fb84a6-81c6-4729-9519-fb52d573415d",
                                "f08bbd77-e324-4208-b784-e73fd8672e9d",
                                "6b954c94-c8ee-4782-9d62-b6189107c035",
                                "d4988691-b3bd-4f3c-b9a1-3e56361ee86f",
                                "16a6b63e-29f7-448a-bb92-c07998c12ecb",
                                "40dc0a2a-3207-4bde-8317-69c30f225d75"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 50,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "88b94a8d-5164-40bc-a766-24176b801ceb",
                    "title": "Legacy tab mongo tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/tab.test.js",
                    "file": "/test/tab.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()\ntenant = testConfig.tenantOne.tenantId;;\ntab = await dashboardController.createTestTab(tenant)\nexpect(tab.SID).to.exist",
                            "err": {},
                            "uuid": "886525b4-e1b0-46e0-9fa1-a371825c082f",
                            "parentUUID": "88b94a8d-5164-40bc-a766-24176b801ceb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteTabs(tenant, {Title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-migrated'});",
                            "err": {},
                            "uuid": "b16d7de4-46f8-455d-8363-b2c6ed19d426",
                            "parentUUID": "88b94a8d-5164-40bc-a766-24176b801ceb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "222b6837-a88f-42fb-970a-8200b10b3862",
                            "title": "tab crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/tab.test.js",
                            "file": "/test/tab.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should create a legacy tab",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tab = await dashboardController.createTestTab(tenant);\n\n tabSid = tab.SID;\n expect(tabSid).to.exist",
                                    "err": {},
                                    "uuid": "60bf6f57-6c7e-4e38-9087-82151fd4edb3",
                                    "parentUUID": "222b6837-a88f-42fb-970a-8200b10b3862",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list legacy tabs",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should list legacy tabs",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tabs = await dashboardController.listTabs(tenant);\n expect(tabs.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "5228006e-4618-4c46-85ac-94b793efc207",
                                    "parentUUID": "222b6837-a88f-42fb-970a-8200b10b3862",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should get a legacy tab",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "tab = await dashboardController.getTab(tenant,tabSid);\n            expect(tab).to.exist         \n            expect(tab.SID).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "5ca61b11-b213-4524-9a4b-0da7c3d143aa",
                                    "parentUUID": "222b6837-a88f-42fb-970a-8200b10b3862",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a tab using a dashboard object",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should update a tab using a dashboard object",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const dashboardObject = {\n    sid: tab.SID,\n    title: tab.Title,\n    ordinal: 5000,\n}\nconst dashboardMask = await dashboardController.updateTabFromDashboardObject(tenant,dashboardObject);\nexpect(dashboardObject.modifiedDate).to.exist\ntab = await dashboardController.getTab(tenant,tab.SID);\nexpect(tab).to.exist         \nexpect(tab.SID).to.equal(tabSid)\nexpect(tab.Ordinal).to.equal(dashboardObject.ordinal)",
                                    "err": {},
                                    "uuid": "94c0cdd9-4ed2-4383-8a51-61b40dcfb686",
                                    "parentUUID": "222b6837-a88f-42fb-970a-8200b10b3862",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should convert a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should convert a legacy tab",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.converTabToDashboard(tab);\n            expect(dashboard).to.exist         \n            expect(dashboard.layouts).to.exist;\n            expect(dashboard.legacySid).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "39d37f46-123f-4d08-856c-d30d786ca076",
                                    "parentUUID": "222b6837-a88f-42fb-970a-8200b10b3862",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should migrate legacy tab to dashboard",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should migrate legacy tab to dashboard",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  success = await dashboardController.migrateTabToDashboard(tenant, tabSid);\n            expect(success.sid).to.exist;",
                                    "err": {},
                                    "uuid": "850f4719-b702-484f-8c00-3e247ccacb64",
                                    "parentUUID": "222b6837-a88f-42fb-970a-8200b10b3862",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "60bf6f57-6c7e-4e38-9087-82151fd4edb3",
                                "5228006e-4618-4c46-85ac-94b793efc207",
                                "5ca61b11-b213-4524-9a4b-0da7c3d143aa",
                                "94c0cdd9-4ed2-4383-8a51-61b40dcfb686",
                                "39d37f46-123f-4d08-856c-d30d786ca076",
                                "850f4719-b702-484f-8c00-3e247ccacb64"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "1a163556-1d02-43b9-8668-e175ac1c51df",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "f8d2f457-96c2-4428-bf4c-5feec68c72f7",
                    "title": "Files db controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-files/test/db/file.controller.test.js",
                    "file": "/test/db/file.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"before all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await testLib.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "cc8fe64d-b2c5-4f8e-b1fb-1d6b0740edf5",
                            "parentUUID": "f8d2f457-96c2-4428-bf4c-5feec68c72f7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"after all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await fileController.removeFiles(tenant, {path: \"/created/by/mocha/test\"});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "b0149d1b-7edc-456c-8798-8124f32dc0d8",
                            "parentUUID": "f8d2f457-96c2-4428-bf4c-5feec68c72f7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6dc575ef-e0ce-4603-b8f0-9e44f66e45e5",
                            "title": "file crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-files/test/db/file.controller.test.js",
                            "file": "/test/db/file.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a file",
                                    "fullTitle": "Files db controller tests file crud  should create a file",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const file = await fileController.createFile(tenant, fileObj);\nsid = file.sid;\nexpect(sid).to.exist;",
                                    "err": {},
                                    "uuid": "27ab6a13-77f0-4ddd-a474-a40ee53cfb94",
                                    "parentUUID": "6dc575ef-e0ce-4603-b8f0-9e44f66e45e5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a file",
                                    "fullTitle": "Files db controller tests file crud  should get a file",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.getFile(tenant, sid);\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "c3e26e21-14f6-4ecc-9ce1-541cb5bf00ce",
                                    "parentUUID": "6dc575ef-e0ce-4603-b8f0-9e44f66e45e5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should find a file",
                                    "fullTitle": "Files db controller tests file crud  should find a file",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.findFile(tenant, {filePath: \"/created/by/mocha/test\"});\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "37b82f91-e075-48a0-8f96-2e36a123609d",
                                    "parentUUID": "6dc575ef-e0ce-4603-b8f0-9e44f66e45e5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a file",
                                    "fullTitle": "Files db controller tests file crud  should update a file",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const updatedFile = await fileController.updateFile(\n  tenant,\n  file.toObject()\n);\nexpect(updatedFile).to.exist;\nexpect(updatedFile.sid).to.equal(sid);\nexpect(updatedFile.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "630b91cf-7c57-4f7f-a247-04cc1b0f5416",
                                    "parentUUID": "6dc575ef-e0ce-4603-b8f0-9e44f66e45e5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a file",
                                    "fullTitle": "Files db controller tests file crud  delete a a file",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await fileController.removeFile(tenant, fileObj);\nexpect(deleted).to.exist;\nexpect(deleted.deletedCount).to.equal(1);",
                                    "err": {},
                                    "uuid": "0727bb6b-be94-4381-a3b4-ce9befa1711b",
                                    "parentUUID": "6dc575ef-e0ce-4603-b8f0-9e44f66e45e5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "27ab6a13-77f0-4ddd-a474-a40ee53cfb94",
                                "c3e26e21-14f6-4ecc-9ce1-541cb5bf00ce",
                                "37b82f91-e075-48a0-8f96-2e36a123609d",
                                "630b91cf-7c57-4f7f-a247-04cc1b0f5416",
                                "0727bb6b-be94-4381-a3b4-ce9befa1711b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 53,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "3bb52221-7e1a-4e61-9127-c32bc8580bd8",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "43e9200e-9b5c-4d53-a132-5203e307ff3e",
                    "title": "Instance API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                    "file": "/test/db/instanceController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\n// session = {tenant: config.tenantOne.tenantId, user_sid: '1e660111-de6f-4318-8f51-6e59cb33d8d7'} //process level\n// session = {tenant: config.tenantOne.tenantId, user_sid:'521a92c8-e77c-4537-811b-dea6e533d800'} //category level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "240755c8-ba8f-49ed-a90c-e0dff57a3486",
                            "parentUUID": "43e9200e-9b5c-4d53-a132-5203e307ff3e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a4c556b8-3538-4e47-90f8-42bd03619854",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "get a full instance",
                                    "fullTitle": "Instance API Controller Tests list tests get a full instance",
                                    "timedOut": false,
                                    "duration": 231,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst fullInstance = await instanceController.getFullInstance(\n  sampleInstanceGuid\n);\nexpect(fullInstance).to.exist;\nexpect(fullInstance.instanceTasks.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "b5cd8d01-a541-48ca-a3bc-87bfc2dd506f",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid)\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "d49ea3d9-f276-4dda-9ba8-49322b916e2a",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with requester",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with requester",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {requester: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.exist;\nexpect(instance.requester.contactGuid).to.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "0ef6e83c-ad18-4fcb-bc8c-bf0a8583cbd7",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {client: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "64c57cc5-5b2b-4b79-9ed7-699fca56f940",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client manager",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client manager",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\n// get instances for Joe User, who reports to System System\nlet instances = await Instance.query().where(\"clientGuid\", '92a73dad-d953-4c59-9c5e-5d037791d411');\n\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {clientManager: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;\nexpect(instance.client.manager).to.exist;\nexpect(instance.client.manager.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "c78f73e0-9027-48b7-87c4-bf7d25541606",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance process",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance process",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instanceProcess = await instanceController.getInstanceProcess(sampleInstanceGuid)\nexpect(instanceProcess).to.exist;\nexpect(instanceProcess.instanceGuid).to.equal(sampleInstanceGuid)",
                                    "err": {},
                                    "uuid": "883a1a24-dc4b-4d3d-a47e-b4fd480bc0bf",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance recipient tasks data by instanceSid",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance recipient tasks data by instanceSid",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(config.tenantOne);\nconst instanceSid = '6D4785AE-57A2-46C5-9141-DE2B134ED8EF'\nconst instanceTasks = await instanceController.getInstanceRecipientTasksData(instanceSid);\n\nexpect(instanceTasks).to.exist;\nexpect(instanceTasks.length).to.be.gt(0);\nconst maintenanceReqFormTask = instanceTasks[2]\nexpect(maintenanceReqFormTask.taskName).to.equal('Maintenance Request Form')\nexpect(maintenanceReqFormTask.recipientTasks.length).to.be.gt(0)\nconst recipientTask = maintenanceReqFormTask.recipientTasks[0]\nexpect(recipientTask.recipientGuid).to.equal('4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF');\nexpect(recipientTask.taskData.length).to.be.gt(0)\nexpect(recipientTask.taskData.find(x => x.dataLabel == 'Location of Problem').dataValue).to.equal('Inside the building');",
                                    "err": {},
                                    "uuid": "55be6fa2-17db-4c55-a28c-593ad69616eb",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests columns",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests columns",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getMyRequests();\n        \nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "07591c23-b02b-4f97-8ee9-f5a2f1dbf21e",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - ID",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - ID",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processId\",\n          data: {\n            comparison: \"eq\",\n            value: sampleInstance.processId,\n          },\n        },\n      ],\n      count: 5,\n    });\n        \n    expect(result.results[0].processId).to.equal(sampleInstance.processId);\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"gt\",\n            value: 500,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"asc\",\n      count: 5,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.length.should.equal(5); \n        \n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.gt(500);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"lt\",\n            value: 505,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"desc\",\n      count: 2,\n    });\n        \n    expect(result.results.length).to.equal(2);\n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.lt(505);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "dfae791e-2f20-43f1-bd29-451aadc4aa01",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - date",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - date",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let d = moment().day(-90);\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"90\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n      expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().year(-30);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"30\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n        expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().day(-7);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"7\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-3);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"3\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-1);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"1\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    const startDate = moment(\"2018-10-11\");\n    const endDate = moment(\"2018-11-23\");\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"gt\", value: \"2018-10-11\" },\n        },\n        {\n          field: \"StartDate\",\n          data: { comparison: \"lt\", value: \"2018-11-23\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length) {\n        expect(result.results[0].startDate).to.be.gt(startDate.toDate());\n        expect(result.results[0].startDate).to.be.lt(endDate.toDate());\n    }\n  })\n);",
                                    "err": {},
                                    "uuid": "9cda481b-cea3-4291-92d0-ec994d8eb4c4",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - name",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - name",
                                    "timedOut": false,
                                    "duration": 165,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.instanceName.toLowerCase()).to.contain(\"test\");\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.forEach((instance) => {\n    //   instance.processName.should.contain(\"test\");\n    // });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requester\",\n          data: { comparison: \"contains\", value: \"system system\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid.toLowerCase());\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "d9e0177e-408e-4c24-bc9e-52a4691a65e9",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - guid",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - guid",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processGuid\",\n          data: { comparison: \"contains\", value: sampleInstance.processGuid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.processName.indexOf(sampleInstance.processName)).to.be.gt(-1);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requesterGuid\",\n          data: { comparison: \"contains\", value: session.user_sid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "e8acf4df-f0bd-4e28-bd45-dd53cf01272f",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - count",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - count",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, { count: 2 });\n        \n    expect(result.results).to.exist;\n    expect(result.results.length).to.equal(2);\n  })\n);",
                                    "err": {},
                                    "uuid": "7e60f484-a773-4d93-9f92-b2f4b94658f8",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests params - sort, dir",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests params - sort, dir",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      count: 2,\n      dir: \"asc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.lt(\n      result.results[1].createdDate\n    );\n        \n    result = await f.call(instanceController, {\n      count: 2,\n      dir: \"desc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.gt(\n      result.results[1].createdDate\n    );\n  })\n);",
                                    "err": {},
                                    "uuid": "4c1aa0a4-73fe-4b8c-b6fb-1df2ce8b2a33",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests param - start",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests param - start",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      start: 0,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startZeroId = result.results[0].instanceId;\n        \n    result = await f.call(instanceController, {\n      start: 1,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startOneId = result.results[0].instanceId;\n        \n    expect(startZeroId).to.be.lessThan(startOneId);\n  })\n);",
                                    "err": {},
                                    "uuid": "479987ef-e836-4847-a9ec-7e84835511cc",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "6421f8be-ba3f-4888-881a-08a4690266e5",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with search term against procssName, instanceName and requester",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with search term against procssName, instanceName and requester",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.processName, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "8769cbb7-074e-43d0-ab53-a62c4e27d736",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with a numeric term against instanceId",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with a numeric term against instanceId",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.instanceId, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "82f1e3f0-6412-4d88-89e8-48cd1cf69c09",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get manage requests",
                                    "fullTitle": "Instance API Controller Tests list tests get manage requests",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'manage'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "0f57defe-9b09-493b-bff9-fd13f7b86b4a",
                                    "parentUUID": "a4c556b8-3538-4e47-90f8-42bd03619854",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b5cd8d01-a541-48ca-a3bc-87bfc2dd506f",
                                "d49ea3d9-f276-4dda-9ba8-49322b916e2a",
                                "0ef6e83c-ad18-4fcb-bc8c-bf0a8583cbd7",
                                "64c57cc5-5b2b-4b79-9ed7-699fca56f940",
                                "c78f73e0-9027-48b7-87c4-bf7d25541606",
                                "883a1a24-dc4b-4d3d-a47e-b4fd480bc0bf",
                                "55be6fa2-17db-4c55-a28c-593ad69616eb",
                                "07591c23-b02b-4f97-8ee9-f5a2f1dbf21e",
                                "dfae791e-2f20-43f1-bd29-451aadc4aa01",
                                "9cda481b-cea3-4291-92d0-ec994d8eb4c4",
                                "d9e0177e-408e-4c24-bc9e-52a4691a65e9",
                                "e8acf4df-f0bd-4e28-bd45-dd53cf01272f",
                                "7e60f484-a773-4d93-9f92-b2f4b94658f8",
                                "4c1aa0a4-73fe-4b8c-b6fb-1df2ce8b2a33",
                                "479987ef-e836-4847-a9ec-7e84835511cc",
                                "6421f8be-ba3f-4888-881a-08a4690266e5",
                                "8769cbb7-074e-43d0-ab53-a62c4e27d736",
                                "82f1e3f0-6412-4d88-89e8-48cd1cf69c09",
                                "0f57defe-9b09-493b-bff9-fd13f7b86b4a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 954,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "6b1d2127-3c03-4136-96b2-24f3ed0193e7",
                            "title": "delete/undelete tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "deletes a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a request",
                                    "timedOut": false,
                                    "duration": 76,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nsampleInstances = result.results;\n    \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\nsampleInstanceGuid = firstInstance.instanceGuid;\n      \nlet deleted = await instanceController.deleteInstance(sampleInstanceGuid);\n\nexpect(sampleInstanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.deletedDate).not.be.null\nconst Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet excludeDeleted = await Instance.query().where({instanceGuid: sampleInstanceGuid})\nexpect(excludeDeleted.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "c88a4d1c-2371-480f-9ad1-8b0c217a8f40",
                                    "parentUUID": "6b1d2127-3c03-4136-96b2-24f3ed0193e7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retores a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests retores a request",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet undeleted = await instanceController.restoreInstance(sampleInstanceGuid);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(sampleInstanceGuid).to.equal(undeleted.instanceGuid)\nexpect(undeleted.deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "93facf8b-c589-4fe6-acea-777e4f303342",
                                    "parentUUID": "6b1d2127-3c03-4136-96b2-24f3ed0193e7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "deletes a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a batch of requests",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.deleteInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\n//expect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).not.to.be.null;",
                                    "err": {},
                                    "uuid": "aa13d2f5-bac3-4d21-b797-372c0fb65577",
                                    "parentUUID": "6b1d2127-3c03-4136-96b2-24f3ed0193e7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores a batch of requests",
                                    "timedOut": false,
                                    "duration": 85,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.restoreInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\nexpect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "a947945b-6b9e-467a-8067-0e38e03e629a",
                                    "parentUUID": "6b1d2127-3c03-4136-96b2-24f3ed0193e7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores all",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores all",
                                    "timedOut": false,
                                    "duration": 392,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet restored = await instanceController.restoreAllInstances();\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(restored.length).to.gt(0);",
                                    "err": {},
                                    "uuid": "d2125abf-2880-453f-9959-3e8841be0892",
                                    "parentUUID": "6b1d2127-3c03-4136-96b2-24f3ed0193e7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c88a4d1c-2371-480f-9ad1-8b0c217a8f40",
                                "93facf8b-c589-4fe6-acea-777e4f303342",
                                "aa13d2f5-bac3-4d21-b797-372c0fb65577",
                                "a947945b-6b9e-467a-8067-0e38e03e629a",
                                "d2125abf-2880-453f-9959-3e8841be0892"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 666,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "ab46ca91-6ea6-447a-bd12-4f3217c6a91c",
                            "title": "insert tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts an instance data",
                                    "fullTitle": "Instance API Controller Tests insert tests inserts an instance data",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceDataRow = {\n  itaskRecipientGuid: '8ad1a6f2-9f6f-4667-9750-d961044ed817',\n  itaskGuid: '5bde578f-615f-4494-86b2-ca61044ed883',\n  taskGuid: '6386f905-7fac-41c6-9b6b-86d53f14d61c',\n  objectGuid: null,\n  objectType: null,\n  objectId: null,\n  dataProperty: '1491430190541',\n  dataType: 'String',\n  dataSid: '14777392-ac81-44f0-b1f2-87d53f14d65d',\n  dataId: null,\n  dataClientId: '1491430190541',\n  dataLabel: 'Enter Details:',\n  dataValue: 'Need a background check',\n  META_1: 'TEST_INSERT_INSTANCE_DATA',\n  META_2: null,\n  dataHide: null,\n  instanceContactGuid: null,\n  roleGuid: null,\n  dataValueExt: null,\n  questionType: 'LongText',\n  deletedDate: new Date().toISOString() // so that it doesnt interfere with its instance\n}\nconst instanceController = new InstanceController(session)\nlet instanceDataGuid = await instanceController.insertInstanceData(instanceDataRow)\nexpect(instanceDataGuid).to.be.a.uuid()",
                                    "err": {},
                                    "uuid": "7f616fbc-3823-4653-be03-cc5875e4941b",
                                    "parentUUID": "ab46ca91-6ea6-447a-bd12-4f3217c6a91c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7f616fbc-3823-4653-be03-cc5875e4941b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "b23eaec7-5e24-46b1-9e00-1b015d1ffccd",
                            "title": "update tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates an instance task recipient task state",
                                    "fullTitle": "Instance API Controller Tests update tests updates an instance task recipient task state",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session)\nconst recipTaskSid = 'b3fef53a-7742-46d1-9faf-be573c14d6fa'\nlet taskState = 'Cancelled'\nlet updated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)\n// change it back to Completed\ntaskState = 'Completed'\nupdated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)",
                                    "err": {},
                                    "uuid": "5db72fed-b382-47c3-b830-225c6524d96d",
                                    "parentUUID": "b23eaec7-5e24-46b1-9e00-1b015d1ffccd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5db72fed-b382-47c3-b830-225c6524d96d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "5b04a893-7739-4233-af88-4387cabd0787",
                    "title": "Instance API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceModel.test.js",
                    "file": "/test/db/instanceModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "12eba174-9a42-4031-9ba6-6555c31e4db1",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceModel.test.js",
                            "file": "/test/db/instanceModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Instance API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "6f0a4899-033c-41b5-92d6-4b6e4cb15463",
                                    "parentUUID": "12eba174-9a42-4031-9ba6-6555c31e4db1",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Instance API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = await sqldb.models.bindModel(config.tenantOne.tenantId, instanceModels.Instance)\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "09adf3db-b0ef-4c18-988d-8b83ad47d6b0",
                                    "parentUUID": "12eba174-9a42-4031-9ba6-6555c31e4db1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Instance API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = (await models.getModels(config.tenantOne.tenantId)).Instance;\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "fafd605a-6802-4361-b86a-faa3dd720326",
                                    "parentUUID": "12eba174-9a42-4031-9ba6-6555c31e4db1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Instance API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\n          let results = await models._tenantModels[config.tenantOne.tenantId].Instance.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "9e80758f-9c12-4d8d-b549-f3aa04bd3c98",
                                    "parentUUID": "12eba174-9a42-4031-9ba6-6555c31e4db1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "09adf3db-b0ef-4c18-988d-8b83ad47d6b0",
                                "fafd605a-6802-4361-b86a-faa3dd720326",
                                "9e80758f-9c12-4d8d-b549-f3aa04bd3c98"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "1f6e8ba0-5d89-4257-b59f-f51d6c0cafad",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskController.test.js",
                    "file": "/test/db/myTaskController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "4dcfc79f-dc29-4013-811c-4e13f37cf000",
                            "parentUUID": "1f6e8ba0-5d89-4257-b59f-f51d6c0cafad",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskController.test.js",
                            "file": "/test/db/myTaskController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 163,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "390bd829-64ff-433e-9d70-5387df2aa6ec",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 131,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\nexpect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "712aeb44-498a-482e-b7b0-15fcd19209f7",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 117,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "edb75711-6b84-4bb2-a21e-5f8166a08540",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 117,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "c29a3790-6e16-432b-8a4e-584f1c7b3d3e",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 115,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "af95dad0-75e0-4054-bbe1-56bd7f75ce46",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 112,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "e7157705-002c-4e88-94aa-225ab3005eb7",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 115,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "6d01b3f0-5699-4667-a67b-0e1115ca6d2f",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 112,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "731c9957-d230-4f93-ac40-7ddee42cb347",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 118,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "b551a18b-5b7c-4b54-b5a2-fceb531c2ca5",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 469,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "a9af5ce0-6362-46ef-9020-c27a50672bbe",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 228,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "58c4ac9b-4997-4ac6-9084-456f77e9297a",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 233,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "49352547-d8e1-4218-a97d-fd0b7b57aec5",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 111,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "4168edd2-3448-4c16-a3cb-22bc4d1187fb",
                                    "parentUUID": "dc501da9-f617-4b2d-bd59-8f0ecdcbc9b6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "390bd829-64ff-433e-9d70-5387df2aa6ec",
                                "712aeb44-498a-482e-b7b0-15fcd19209f7",
                                "edb75711-6b84-4bb2-a21e-5f8166a08540",
                                "c29a3790-6e16-432b-8a4e-584f1c7b3d3e",
                                "af95dad0-75e0-4054-bbe1-56bd7f75ce46",
                                "e7157705-002c-4e88-94aa-225ab3005eb7",
                                "6d01b3f0-5699-4667-a67b-0e1115ca6d2f",
                                "731c9957-d230-4f93-ac40-7ddee42cb347",
                                "b551a18b-5b7c-4b54-b5a2-fceb531c2ca5",
                                "a9af5ce0-6362-46ef-9020-c27a50672bbe",
                                "58c4ac9b-4997-4ac6-9084-456f77e9297a",
                                "49352547-d8e1-4218-a97d-fd0b7b57aec5",
                                "4168edd2-3448-4c16-a3cb-22bc4d1187fb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2141,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "76abe7de-13a2-45dd-b8d2-147ec75d6bea",
                    "title": "My Task API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskModel.test.js",
                    "file": "/test/db/myTaskModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6795dd5f-4674-4df0-892f-dcc0b4a4f2dc",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskModel.test.js",
                            "file": "/test/db/myTaskModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "My Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "865679ac-db50-47b7-b8aa-35c77a70ff99",
                                    "parentUUID": "6795dd5f-4674-4df0-892f-dcc0b4a4f2dc",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "My Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "36e88ca5-dd44-4f06-b7bf-12fbdf17bf9a",
                                    "parentUUID": "6795dd5f-4674-4df0-892f-dcc0b4a4f2dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "My Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "6257fbac-6026-47e7-b61f-ae0d02d6bce0",
                                    "parentUUID": "6795dd5f-4674-4df0-892f-dcc0b4a4f2dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "My Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "4c7f80b1-beb9-42fa-a0dc-4b037430e223",
                                    "parentUUID": "6795dd5f-4674-4df0-892f-dcc0b4a4f2dc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "36e88ca5-dd44-4f06-b7bf-12fbdf17bf9a",
                                "6257fbac-6026-47e7-b61f-ae0d02d6bce0",
                                "4c7f80b1-beb9-42fa-a0dc-4b037430e223"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "c5b82e23-1e5e-451a-a595-d34bd7eb9c7f",
                    "title": "Instance API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                    "file": "/test/integration/instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 15,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken()\nthis.timeout(105000); \nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "51ebca13-1111-44b1-aafb-7f36048c5305",
                            "parentUUID": "c5b82e23-1e5e-451a-a595-d34bd7eb9c7f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7b36f9f4-6578-4ee3-8b0b-45be5a831910",
                            "title": "getInstancesByPermission",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of instances for a user with monitor permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with monitor permissions",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "0efc6a0f-eff3-4d19-b37d-2a9c09f35b50",
                                    "parentUUID": "7b36f9f4-6578-4ee3-8b0b-45be5a831910",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances for a user with manage permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with manage permissions",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "dad04a59-6c69-477b-ab6c-0a441c87082d",
                                    "parentUUID": "7b36f9f4-6578-4ee3-8b0b-45be5a831910",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances started by the user calling the endpoint",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances started by the user calling the endpoint",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "7631cf8f-9983-4cc7-b143-a9e605ab170b",
                                    "parentUUID": "7b36f9f4-6578-4ee3-8b0b-45be5a831910",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"monitor\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"monitor\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 96,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"gteq\",\"type\":\"date\",\"value\":'2010-01-01'}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"lteq\",\"type\":\"date\",\"value\":'2030-01-01'}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "312dbfcc-e778-4bb2-9ed7-ff73cf7571e0",
                                    "parentUUID": "7b36f9f4-6578-4ee3-8b0b-45be5a831910",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"mine\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"mine\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "ce601c43-fbbe-434c-ab13-f7634891b738",
                                    "parentUUID": "7b36f9f4-6578-4ee3-8b0b-45be5a831910",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0efc6a0f-eff3-4d19-b37d-2a9c09f35b50",
                                "dad04a59-6c69-477b-ab6c-0a441c87082d",
                                "7631cf8f-9983-4cc7-b143-a9e605ab170b",
                                "312dbfcc-e778-4bb2-9ed7-ff73cf7571e0",
                                "ce601c43-fbbe-434c-ab13-f7634891b738"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 249,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "26dedffa-327b-4b92-b3c2-850917461616",
                            "title": "deleteInstances",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a batch of instances",
                                    "fullTitle": "Instance API Tests deleteInstances should delete a batch of instances",
                                    "timedOut": false,
                                    "duration": 184,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n            let result = await instanceController.getMyRequests()\n            let instanceGuids= result.results.map((i) => {\n                return i.instanceGuid;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.body = JSON.stringify(instanceGuids);\n           \n\t\t\tawait handlers.deleteInstances(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n            expect(mockRes.body).to.exist;\n\t\t\tlet deleted = mockRes.body;\n            expect(deleted.instancesDeleted).to.exist;\n            expect(deleted.instancesDeleted).to.equal(instanceGuids.length);\n            \n            //retore them\n            \n            let restored = await instanceController.restoreInstances(instanceGuids);\n            //expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\n            expect(restored.length).to.equal(instanceGuids.length);",
                                    "err": {},
                                    "uuid": "77874c9b-7363-472c-a956-f02e66846498",
                                    "parentUUID": "26dedffa-327b-4b92-b3c2-850917461616",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "77874c9b-7363-472c-a956-f02e66846498"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 184,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "3d688d26-23d5-4842-95a6-cf853d971325",
                    "title": "MyTask API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/myTask.test.js",
                    "file": "/test/integration/myTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "MyTask API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "46d5a3be-69b6-40cf-9724-5368a4a0002d",
                            "parentUUID": "3d688d26-23d5-4842-95a6-cf853d971325",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "MyTask API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 108,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "730de9a4-5784-4988-80b2-1499f2359b1e",
                            "parentUUID": "3d688d26-23d5-4842-95a6-cf853d971325",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "730de9a4-5784-4988-80b2-1499f2359b1e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 108,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "5a6890f9-da44-45f4-b215-7eaab92c0334",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "3dd00c9f-6778-4a36-a400-3b681f3f5d5e",
                    "title": "Permission/User Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/user.test.js",
                    "file": "/test/integration/user.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Permission/User Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nconst user  = config.tenantOne.adminUser;\nconst session = {tenant: config.tenantOne.tenantId, user_sid: user.sid.toLowerCase()}\nthis.timeout(105000); \nlet deletes = await redis.delAsync([`{$session.tenant}.permissions.${session.user_sid}.`]);",
                            "err": {},
                            "uuid": "177bdf83-b336-47e8-89e7-7eb0bf9034a8",
                            "parentUUID": "3dd00c9f-6778-4a36-a400-3b681f3f5d5e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Permission/User Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "",
                            "err": {},
                            "uuid": "16686df9-09ea-4de2-b718-710ece2c6f27",
                            "parentUUID": "3dd00c9f-6778-4a36-a400-3b681f3f5d5e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fed52e25-39f1-46f8-8252-38170d335717",
                            "title": "isSysAdminHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/user.test.js",
                            "file": "/test/integration/user.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return {isSysAdmin: true} for an admin user",
                                    "fullTitle": "Permission/User Tests isSysAdminHandler should return {isSysAdmin: true} for an admin user",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n        let req = await mocks.req();\n        let isSysAdmin  = await userFunctions.isSysAdminHandler(req, mockRes);\n        expect(mockRes.statusCode).equal(200);\n        expect(mockRes.body).to.exist;\n        const info = mockRes.body;\n        expect(info.isSysAdmin).to.be.true",
                                    "err": {},
                                    "uuid": "7f64b6ed-2945-4efa-9803-09b9ac8e2990",
                                    "parentUUID": "fed52e25-39f1-46f8-8252-38170d335717",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7f64b6ed-2945-4efa-9803-09b9ac8e2990"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "711b6992-7d4e-4795-b1f3-a876b347c3bd",
                    "title": "Permission/Workflow Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/workflow.test.js",
                    "file": "/test/integration/workflow.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Permission/Workflow Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig()\nuser  = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: user.sid.toLowerCase()}\nthis.timeout(105000);\nlet deletes = await redis.delAsync([`{$session.tenant}.${session.user_name}.permissions`]);",
                            "err": {},
                            "uuid": "4ae18037-6ec9-40aa-a12d-f991322a2b2c",
                            "parentUUID": "711b6992-7d4e-4795-b1f3-a876b347c3bd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Permission/Workflow Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "",
                            "err": {},
                            "uuid": "5d12ca89-09e5-42bc-ad5b-c074e735b42e",
                            "parentUUID": "711b6992-7d4e-4795-b1f3-a876b347c3bd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "570a1505-d54e-4782-8d40-3619702b6de2",
                            "title": "currentUserPermissionssHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/workflow.test.js",
                            "file": "/test/integration/workflow.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return permissions",
                                    "fullTitle": "Permission/Workflow Tests currentUserPermissionssHandler should cache and return permissions",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n        let req = await mocks.req();\n        let isSysAdmin  = await workflow.currentUserPermissionsHandler(req, mockRes);\n        expect(mockRes.statusCode).equal(200);\n        expect(mockRes.body).to.exist;\n        const info = mockRes.body;\n        expect(info.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "2e69b625-db1f-4a84-881e-98a7a840aff7",
                                    "parentUUID": "570a1505-d54e-4782-8d40-3619702b6de2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2e69b625-db1f-4a84-881e-98a7a840aff7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "1ccb176c-af66-4151-8ac3-f8109237eb84",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "24d60c67-a09d-4488-a422-a757e7730ea9",
                    "title": "Settings API Holiday Controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/holidays.controller.test.js",
                    "file": "/test/integration/db/holidays.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Holiday Controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenantId: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}\ntenantId = config.tenantOne.tenantId;\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "61725ddb-86b5-4bcb-b997-f311fd66a41e",
                            "parentUUID": "24d60c67-a09d-4488-a422-a757e7730ea9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should insert, select, delete and list holidays",
                            "fullTitle": "Settings API Holiday Controller tests should insert, select, delete and list holidays",
                            "timedOut": false,
                            "duration": 290,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let holiday = {\n  holidayName: \"O Day\",\n  startDate: \"2019-10-10T00:00:00.000Z\",\n  endDate: \"2019-10-11T00:00:00.000Z\",\n  country: \"USA\"\n};\nlet holidayController = new HolidayController(oauth);\n// insert\nconst inserted = await holidayController.insertHoliday(holiday);\nvalidateHoliday(holiday, inserted);\n// select\nlet gotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n// update\nholiday.holidayGuid = inserted.holidayGuid;\nholiday.holidayName = \"Easter Monday\";\nholiday.country = \"Papa New Guinea\";\nawait holidayController.updateHoliday(holiday);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n//list\nconst holidays = await holidayController.listHolidays();\nexpect(holidays.length).to.be.gt(0);\nholiday = holidays[0];\nexpect(holiday.holidayGuid).to.exist;\nexpect(holiday.holidayName).to.exist;\nexpect(holiday.startDate).to.exist;\nexpect(holiday.endDate).to.exist;\nexpect(holiday.country).to.exist;\n// delete\nconst holidayGuids = [inserted.holidayGuid];\nawait holidayController.deleteHolidays(holidayGuids);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nexpect(gotOne).to.not.exist;",
                            "err": {},
                            "uuid": "740f95f6-255e-47d0-bb05-09423861bf65",
                            "parentUUID": "24d60c67-a09d-4488-a422-a757e7730ea9",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "740f95f6-255e-47d0-bb05-09423861bf65"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 290,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6798135b-9161-4f2f-a9dd-53ad2b09b0b9",
                    "title": "Settings API Language Controller test",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/languages.controller.test.js",
                    "file": "/test/integration/db/languages.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Language Controller test \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}",
                            "err": {},
                            "uuid": "35b1bf8c-df7b-4a7f-9b1b-fcaf2b35ac41",
                            "parentUUID": "6798135b-9161-4f2f-a9dd-53ad2b09b0b9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of languages",
                            "fullTitle": "Settings API Language Controller test should get a list of languages",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const languageCtrl = new LanguageController(oauth);\nconst languages = await languageCtrl.listLanguages();\nexpect(languages.length).to.be.gt(0);\nconst language = languages[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "29b2d12b-7b22-4fce-995e-e7e063350c41",
                            "parentUUID": "6798135b-9161-4f2f-a9dd-53ad2b09b0b9",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "29b2d12b-7b22-4fce-995e-e7e063350c41"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "499e44b0-5db7-4280-a2fd-de1bb644a867",
                    "title": "Settings API System Setting Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                    "file": "/test/integration/db/systemsetting.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API System Setting Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} \nthis.timeout(105000);",
                            "err": {},
                            "uuid": "636ebe83-6062-4d83-ac52-c4c92332486e",
                            "parentUUID": "499e44b0-5db7-4280-a2fd-de1bb644a867",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c73ef98d-7a11-49ca-aab7-daf47fb4c62d",
                            "title": "Model Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a system setting model",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should get a system setting model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nexpect(SystemSettingsModel).to.exist;",
                                    "err": {},
                                    "uuid": "9f4ebf3e-829d-4e34-bb3a-27e925458377",
                                    "parentUUID": "c73ef98d-7a11-49ca-aab7-daf47fb4c62d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should return system settings",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nlet results = await SystemSettingsModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "288af78f-5bea-49b1-bc82-36c9cfec24ce",
                                    "parentUUID": "c73ef98d-7a11-49ca-aab7-daf47fb4c62d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9f4ebf3e-829d-4e34-bb3a-27e925458377",
                                "288af78f-5bea-49b1-bc82-36c9cfec24ce"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d2223f3b-6441-4431-8730-d54328b5f981",
                            "title": "Controller Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list system settings",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listSystemSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\nexpect(systemSettings[0].masterSettings.settingsGuid).to.exist;",
                                    "err": {},
                                    "uuid": "2cac63d7-5311-4f31-b859-25d73b65d9ea",
                                    "parentUUID": "d2223f3b-6441-4431-8730-d54328b5f981",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list password settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list password settings",
                                    "timedOut": false,
                                    "duration": 38,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\n// only system settings listed should be the ones related to passwords   \nexpect(systemSettings.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(systemSettings.length);",
                                    "err": {},
                                    "uuid": "c96125b1-2080-4d00-8a7a-83aba4178bf7",
                                    "parentUUID": "d2223f3b-6441-4431-8730-d54328b5f981",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should update system settings",
                                    "timedOut": false,
                                    "duration": 239,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let pwdSettings = [{\n  \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION\",\n  \"settingsValue\":\"14\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n    \"settingsKey\":\"PWD_EXPIRATION\",\n    \"keyDefault\":\"7\",\n    \"keyOptions\":null,\n    \"description\":\"Length in days before a user is prompted to change his or her password.\"\n  }\n}, {\n  \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n  \"settingsValue\":\"1\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n    \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n    \"keyDefault\":\"0\",\n    \"keyOptions\":\"1|0\",\n    \"description\":\"Flag to turn enforcement of password expiration.  1 = On, 0 = Off\"\n  }\n}]\n// save the changes above, query to verify changes, set them back to the defaults\nlet systemSettingController = new SystemSettingController(session)\nawait systemSettingController.updateSystemSettings(pwdSettings)\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('14')\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1')\npwdSettings.forEach(setting => {\n  setting.settingsValue = setting.masterSettings.keyDefault\n})\nawait systemSettingController.updateSystemSettings(pwdSettings)\nsystemSettings = await systemSettingController.listPasswordSettings();\nlet pwdExpiration = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION')\nlet pwdExpirationActive = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE')\nexpect(pwdExpiration.settingsValue).to.equal(pwdExpiration.masterSettings.keyDefault)\nexpect(pwdExpirationActive.settingsValue).to.equal(pwdExpirationActive.masterSettings.keyDefault)",
                                    "err": {},
                                    "uuid": "793f66b8-83fa-43fc-b089-1e9a48d253cc",
                                    "parentUUID": "d2223f3b-6441-4431-8730-d54328b5f981",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2cac63d7-5311-4f31-b859-25d73b65d9ea",
                                "c96125b1-2080-4d00-8a7a-83aba4178bf7",
                                "793f66b8-83fa-43fc-b089-1e9a48d253cc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 338,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6ad7f4c4-b695-4af6-9c59-2a4f150a58e8",
                    "title": "Biztime API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/biztimes.test.js",
                    "file": "/test/integration/functions/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Biztime API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nmockRes = await mocks.mockResponse();\nreq = await mocks.req(jwt);",
                            "err": {},
                            "uuid": "71f9820a-6b5f-4540-bc00-41a59557e887",
                            "parentUUID": "6ad7f4c4-b695-4af6-9c59-2a4f150a58e8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of biztimes",
                            "fullTitle": "Biztime API Tests should return a list of biztimes",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.listBiztimes(req, mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body.length).to.be.gt(0);\nvalidateBiztime(mockRes.body[0]);",
                            "err": {},
                            "uuid": "46962f96-c4bd-45f5-a2b3-e2ae135140dd",
                            "parentUUID": "6ad7f4c4-b695-4af6-9c59-2a4f150a58e8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert a biztime",
                            "fullTitle": "Biztime API Tests should insert a biztime",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.insertBiztime(\n  {...req, body: {...biztimeToInsert}},\n  mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\ninsertedBiztime = mockRes.body;\nvalidateBiztime(biztimeToInsert, insertedBiztime);",
                            "err": {},
                            "uuid": "3f6f9672-64c5-41ba-8466-3bf5b6ce4e8c",
                            "parentUUID": "6ad7f4c4-b695-4af6-9c59-2a4f150a58e8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update a biztime",
                            "fullTitle": "Biztime API Tests should update a biztime",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.updateBiztime(\n  {\n    ...req,\n    params: {bizTimeGuid: insertedBiztime.bizTimeGuid},\n    body: {...biztimeToUpdate}},\n  mockRes\n  );\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nvalidateBiztime(biztimeToUpdate, mockRes.body);",
                            "err": {},
                            "uuid": "9408edd3-7365-40d5-a1ac-0ad9845d6d84",
                            "parentUUID": "6ad7f4c4-b695-4af6-9c59-2a4f150a58e8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "46962f96-c4bd-45f5-a2b3-e2ae135140dd",
                        "3f6f9672-64c5-41ba-8466-3bf5b6ce4e8c",
                        "9408edd3-7365-40d5-a1ac-0ad9845d6d84"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 33,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "eee58e94-c378-4a57-a8b9-73dbf3e73d41",
                    "title": "Settings API Holiday Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/holidays.test.js",
                    "file": "/test/integration/functions/holidays.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "insert, list, get, delete holiday",
                            "fullTitle": "Settings API Holiday Tests insert, list, get, delete holiday",
                            "timedOut": false,
                            "duration": 38,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nlet listHolidaysEvent = await mocks.listHolidaysEvent()\nlet insertHolidayEvent = await mocks.insertHolidayEvent();\nlet getHolidayEvent = await mocks.getHolidayEvent();\n\n// insert\nawait holidays.insert(insertHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nvalidateHoliday(insertHolidayEvent.body, inserted);\n//list\nawait holidays.list(listHolidaysEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nexpect(mockRes.body.length).to.be.greaterThan(0);\nexpectDefinedHoliday(mockRes.body[0]);\n// get\ngetHolidayEvent.params.holidayGuid = inserted.holidayGuid;\nawait holidays.get(getHolidayEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst got = mockRes.body;\nvalidateHoliday(inserted, got);\n// delete\nlet deleteEvent = Object.assign({}, listHolidaysEvent);\ndeleteEvent.body = [inserted.holidayGuid];\nawait holidays.remove(deleteEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\ngetHolidayEvent.params = {\n  holidayGuid: inserted.holidayGuid\n};\nawait holidays.get(getHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(404);",
                            "err": {},
                            "uuid": "a8746b41-2554-4dcc-99a9-b83fbe90c779",
                            "parentUUID": "eee58e94-c378-4a57-a8b9-73dbf3e73d41",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a8746b41-2554-4dcc-99a9-b83fbe90c779"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 38,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f95739b2-91b0-4481-9a28-d614dd156b16",
                    "title": "Settings API Languages Test",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/languages.test.js",
                    "file": "/test/integration/functions/languages.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of holidays",
                            "fullTitle": "Settings API Languages Test should get a list of holidays",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nconst listLanguagesEvent = await mocks.listLanguagesEvent();\nawait languages.list(listLanguagesEvent, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nexpect(mockRes.body.length).to.be.gt(0);\nconst language = mockRes.body[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "192b8c87-e778-42f5-b8e0-d37dd8e55e81",
                            "parentUUID": "f95739b2-91b0-4481-9a28-d614dd156b16",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "192b8c87-e778-42f5-b8e0-d37dd8e55e81"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "099c0093-249c-4ea4-bd2d-0ec268db2f00",
                    "title": "Settings API Password Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/passwordSettings.test.js",
                    "file": "/test/integration/functions/passwordSettings.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the password settings",
                            "fullTitle": "Settings API Password Settings Tests lists the password settings",
                            "timedOut": false,
                            "duration": 25,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait passwordSettings.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\n// only system settings listed should be the ones related to passwords\nexpect(result.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(result.length);",
                            "err": {},
                            "uuid": "687210d6-d0bb-4ff3-a8ea-4a816179438b",
                            "parentUUID": "099c0093-249c-4ea4-bd2d-0ec268db2f00",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "687210d6-d0bb-4ff3-a8ea-4a816179438b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 25,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b26abad0-c2b4-429a-b9f8-8a543908a2c3",
                    "title": "Settings API System Config Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/systemConfig.test.js",
                    "file": "/test/integration/functions/systemConfig.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the system config settings",
                            "fullTitle": "Settings API System Config Tests lists the system config settings",
                            "timedOut": false,
                            "duration": 23,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait systemConfig.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(40);\nexpect(result[0].settingsGuid).to.exist\nexpect(result[0].settingsKey).to.exist\nexpect(result[0].settingsValue).to.exist\nexpect(result[0].masterSettings.description).to.exist\nexpect(result[0].masterSettings.keyDefault).to.exist\nexpect(result[0].masterSettings.keyOptions).to.exist",
                            "err": {},
                            "uuid": "41a68a4f-9d7e-4fc7-ba46-54f635c24c36",
                            "parentUUID": "b26abad0-c2b4-429a-b9f8-8a543908a2c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates system config settings",
                            "fullTitle": "Settings API System Config Tests updates system config settings",
                            "timedOut": false,
                            "duration": 139,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"true\"\n}]\nawait systemConfig.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nlet result = mockRes.body\nexpect(result).to.equal('1');\n// verify that change was made\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nlet allowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('true')\n// revert the change\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"false\"\n}]\nawait systemConfig.update(mockReq, mockRes);\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nallowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('false')",
                            "err": {},
                            "uuid": "a8aab459-5915-4b69-bce6-0a024382b719",
                            "parentUUID": "b26abad0-c2b4-429a-b9f8-8a543908a2c3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "41a68a4f-9d7e-4fc7-ba46-54f635c24c36",
                        "a8aab459-5915-4b69-bce6-0a024382b719"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 162,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c4db8ff4-1828-4a64-a1a4-7dd9edda538a",
                    "title": "Settings API Utilities Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                    "file": "/test/integration/functions/utilities.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e9ea95c3-cf73-4a25-bece-5659fd80ebde",
                            "title": "locales",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "lists locales",
                                    "fullTitle": "Settings API Utilities Tests locales lists locales",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\nawait utils.listLocales(mocks.req(), mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "a98b2e77-9b65-4d67-a3a1-9041782a63c8",
                                    "parentUUID": "e9ea95c3-cf73-4a25-bece-5659fd80ebde",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a98b2e77-9b65-4d67-a3a1-9041782a63c8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "06cd5e18-aedf-4b16-b901-fc5c64240a50",
                            "title": "timezones",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list timezones",
                                    "fullTitle": "Settings API Utilities Tests timezones should list timezones",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listTimezones(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "bc06e6fb-701d-4f57-b7d4-3e13eca947c7",
                                    "parentUUID": "06cd5e18-aedf-4b16-b901-fc5c64240a50",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bc06e6fb-701d-4f57-b7d4-3e13eca947c7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "61dd0f7c-f887-45d2-8bd0-a01553830903",
                            "title": "running versions",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list running versions",
                                    "fullTitle": "Settings API Utilities Tests running versions should list running versions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listRunningVersions(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "9de914a0-37c6-4291-b6f9-a514577e8db2",
                                    "parentUUID": "61dd0f7c-f887-45d2-8bd0-a01553830903",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9de914a0-37c6-4291-b6f9-a514577e8db2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "df22129b-d425-40d5-8c69-9927bf1d987e",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "f6f9b571-55f7-417d-a2f9-20adcf399bab",
                    "title": "Task Dispatcher API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                    "file": "/test/integration/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "fullTitle": "Task Dispatcher API Controller Tests \"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "timedOut": false,
                            "duration": 16,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}",
                            "err": {},
                            "uuid": "47314c60-891a-4cd3-a7b0-5d2f9d7f6d3b",
                            "parentUUID": "f6f9b571-55f7-417d-a2f9-20adcf399bab",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c5c1e2e6-09fa-4d1a-9157-a69ca60667fd",
                            "title": "ProcessTaskController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get process tasks",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskController should get process tasks",
                                    "timedOut": false,
                                    "duration": 222,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskController = new controllers.ProcessTaskController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nlet processTasks = await processTaskController.getProcessTasks(updateMyProfileProcessSid)\nexpect(processTasks).to.exist;\nexpect(processTasks.length).to.be.gt(0);\nexpect(processTasks[0].processTaskGuid).to.exist;",
                                    "err": {},
                                    "uuid": "60fff043-62b8-4837-b253-a4a1bbbf743c",
                                    "parentUUID": "c5c1e2e6-09fa-4d1a-9157-a69ca60667fd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "60fff043-62b8-4837-b253-a4a1bbbf743c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 222,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "121f792b-55bb-4f88-913f-1ae322966521",
                            "title": "ProcessTaskAttributeController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task attributes",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should list process task attributes",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet includeExt = false\nlet processTaskAttributes = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributes[6].extendedAtt).to.not.exist;\nincludeExt = true\nlet processTaskAttributesIncExt = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributesIncExt).to.exist;\nexpect(processTaskAttributesIncExt.length).to.be.gt(0);\nexpect(processTaskAttributesIncExt[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributesIncExt[6].extendedAtt.extAttribute).to.exist;",
                                    "err": {},
                                    "uuid": "35e1375c-f755-4c4f-be06-92905d682b57",
                                    "parentUUID": "121f792b-55bb-4f88-913f-1ae322966521",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get and update a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get and update a process task attribute",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeGuid = '7cece0ab-bda6-4b13-a8fb-3f5c467371e6'  \nlet processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nlet processTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\n// console.log(processTaskAttribute)\nexpect(processTaskAttribute.attributeValue).to.equal('0')\nlet numberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: 'TEST'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('TEST')\n// must set it back to original value so that we don't break anything\nnumberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: '0'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('0')",
                                    "err": {},
                                    "uuid": "c625fada-1757-46bc-937e-0c9a62d1fd94",
                                    "parentUUID": "121f792b-55bb-4f88-913f-1ae322966521",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should insert a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should insert a process task attribute",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// pick any process task and insert a process task attribute\n// then delete it\nconst processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// give \"Update my profile - Start task\" a test process task att\nconst processTaskGuid = '27cb04ea-b19d-4327-8b3a-e82cc538d44d'\nconst attributeKey = 'TEST_KEY'\nconst attributeValue = 'TEST_VALUE'\nconst ordinal = 1\nconst processTaskAttribute = await processTaskAttributeController.insert({\n  processTaskGuid,\n  attributeKey,\n  attributeValue,\n  ordinal\n})\nexpect(processTaskAttribute.processTaskAttributeGuid).to.be.a.uuid()\nexpect(processTaskAttribute.processTaskGuid).to.equal(processTaskGuid)\nexpect(processTaskAttribute.attributeKey).to.equal(attributeKey)\nexpect(processTaskAttribute.attributeValue).to.equal(attributeValue)\nexpect(processTaskAttribute.ordinal).to.equal(ordinal)\n// cleanup\n// const numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nconst numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nexpect(numberOfAffectedRows).to.equal(1)",
                                    "err": {},
                                    "uuid": "770b01c4-7d57-48ec-b791-25626edcb3ba",
                                    "parentUUID": "121f792b-55bb-4f88-913f-1ae322966521",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get the process task attribute max ordinal value for a process task",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get the process task attribute max ordinal value for a process task",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// \"Update my profile - Start task\" a test process task att\nlet processTaskGuid = \"27cb04ea-b19d-4327-8b3a-e82cc538d44d\";\n// that process task has no atts so its max ordinal should be null\nlet maxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(null);\n// \"Update my profile - User Profile\" task does have atts.  seed db goes up to 12\nprocessTaskGuid = \"28d88aa5-fc4c-4e16-b32d-2964c738d49b\";\nmaxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(12);",
                                    "err": {},
                                    "uuid": "3ff85695-53fe-4766-95fd-aef706442693",
                                    "parentUUID": "121f792b-55bb-4f88-913f-1ae322966521",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "35e1375c-f755-4c4f-be06-92905d682b57",
                                "c625fada-1757-46bc-937e-0c9a62d1fd94",
                                "770b01c4-7d57-48ec-b791-25626edcb3ba",
                                "3ff85695-53fe-4766-95fd-aef706442693"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ed5cb508-da61-456f-ab27-12345a263939",
                            "title": "ProcessTaskMappingController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task mappings",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskMappingController should list process task mappings",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskMappingController = new controllers.ProcessTaskMappingController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet processTaskAttributes = await processTaskMappingController.list(profileFormProcessTaskSid)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[0].processTaskMappingGuid).to.exist;",
                                    "err": {},
                                    "uuid": "ee375121-111e-4a95-b5b5-5ee96796a052",
                                    "parentUUID": "ed5cb508-da61-456f-ab27-12345a263939",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ee375121-111e-4a95-b5b5-5ee96796a052"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "0ae2a1cb-fb70-4598-bf74-1d225b733772",
                            "title": "ProcessController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should update a process's modified by and date fields",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessController should update a process's modified by and date fields",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processController = new controllers.ProcessController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nconst systemUserGuid = 'D8C469C3-F781-4179-A09C-6D148885FB30'\nlet process = await processController.get(updateMyProfileProcessSid)\nexpect(process).to.exist;\nexpect(process.processGuid.toLowerCase()).to.equal(updateMyProfileProcessSid);\nconst oldModifiedDate = process.modifiedDate\nconst numberOfAffectedRows = await processController.updateModifiedByAndDate(updateMyProfileProcessSid)\nexpect(numberOfAffectedRows).to.equal(1)\nprocess = await processController.get(updateMyProfileProcessSid) \nexpect(process.modifiedDate).to.be.greaterThan(oldModifiedDate)\n// for some reason when executed in a test the db record's modifiedBy is set to \n// the systemUserGuid instead of the contact sid specified in the session (4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF)\nexpect(process.modifiedBy).to.equal(systemUserGuid)",
                                    "err": {},
                                    "uuid": "4e3ee46c-0e90-46c9-b87d-a4d9aed08159",
                                    "parentUUID": "0ae2a1cb-fb70-4598-bf74-1d225b733772",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4e3ee46c-0e90-46c9-b87d-a4d9aed08159"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "883e2dd8-d248-4c8a-bc6a-9b686bc5ff9a",
                    "title": "Task Dispatcher API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/model.test.js",
                    "file": "/test/integration/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "31755f7d-c6d7-4974-902b-1dab259dd030",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/model.test.js",
                            "file": "/test/integration/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Task Dispatcher API Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "a4755054-0a28-4c22-afd8-7a87d9e78800",
                                    "parentUUID": "31755f7d-c6d7-4974-902b-1dab259dd030",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 70,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = await sqldb.models.bindModel(\n  config.tenantOne.tenantId,\n  vwProcessTasksModels.vwProcessTasks\n);\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "cade287e-2858-46a5-bf26-9c5904b83a7a",
                                    "parentUUID": "31755f7d-c6d7-4974-902b-1dab259dd030",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = (await models.getModels(config.tenantOne.tenantId))\n  .vwProcessTasks;\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "d269d8a1-e9e4-45cc-8f4f-9b7b41e05fbb",
                                    "parentUUID": "31755f7d-c6d7-4974-902b-1dab259dd030",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tentantModels[config.tenantOne.tenantId]).to.exist;\nlet results = await models._tentantModels[\n  config.tenantOne.tenantId\n].vwProcessTasks.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "c5bfd818-3ba8-4a41-80d5-0a35905cd668",
                                    "parentUUID": "31755f7d-c6d7-4974-902b-1dab259dd030",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cade287e-2858-46a5-bf26-9c5904b83a7a",
                                "d269d8a1-e9e4-45cc-8f4f-9b7b41e05fbb",
                                "c5bfd818-3ba8-4a41-80d5-0a35905cd668"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 132,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6219b2f2-c8ed-4b1c-801c-45f381b6cde8",
                    "title": "Task Dispatcher API FPT Push Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/functions/ftpPush.test.js",
                    "file": "/test/integration/functions/ftpPush.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task file settings",
                            "fullTitle": "Task Dispatcher API FPT Push Tests gets task file settings",
                            "timedOut": false,
                            "duration": 7,
                            "state": "failed",
                            "speed": null,
                            "pass": false,
                            "fail": true,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfilesettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst data = mockRes.body.Data;\nexpect(data).to.include({PickDirectory: \"No\"});\nexpect(data).to.include({FileToFTP: \"da062754-a9c3-4f22-ac6a-1da38bf3d8ed;cf50007e-11b6-4c3c-bb1f-0dfdcc435a45\"});\nexpect(data).to.include({FTPPassword: \"ftp\"});\nexpect(data).to.include({FTPSite: \"ftp\"});\nexpect(data).to.include({FTPUsername: \"ftp\"});",
                            "err": {
                                "message": "AssertionError: expected {} to have property 'PickDirectory'",
                                "estack": "AssertionError: expected {} to have property 'PickDirectory'\n    at Context.<anonymous> (test/integration/functions/ftpPush.test.js:20:21)",
                                "diff": null
                            },
                            "uuid": "34817767-c9f8-4e39-bdac-ae9e7aafe41f",
                            "parentUUID": "6219b2f2-c8ed-4b1c-801c-45f381b6cde8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets task file options",
                            "fullTitle": "Task Dispatcher API FPT Push Tests gets task file options",
                            "timedOut": false,
                            "duration": 14,
                            "state": "failed",
                            "speed": null,
                            "pass": false,
                            "fail": true,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfileoptions\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nconst data = mockRes.body.Data[0];\nconsole.log(data);\nexpect(data).to.include('da062754-a9c3-4f22-ac6a-1da38bf3d8ed;cf50007e-11b6-4c3c-bb1f-0dfdcc435a45');\nexpect(data).to.include('Form : File Attachment:  (Task Output)');\nexpect(data).to.include('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {
                                "message": "AssertionError: expected 500 to equal 200",
                                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/integration/functions/ftpPush.test.js:35:35)",
                                "diff": "- 500\n+ 200\n"
                            },
                            "uuid": "8879cb32-e929-48b2-823d-1e74de3d7ad9",
                            "parentUUID": "6219b2f2-c8ed-4b1c-801c-45f381b6cde8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [],
                    "failures": [
                        "34817767-c9f8-4e39-bdac-ae9e7aafe41f",
                        "8879cb32-e929-48b2-823d-1e74de3d7ad9"
                    ],
                    "pending": [],
                    "skipped": [],
                    "duration": 21,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "22940403-78bd-48cf-84dc-3032ee7661f1",
                    "title": "Task Dispatcher API PDF Merge Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/functions/pdfMerge.test.js",
                    "file": "/test/integration/functions/pdfMerge.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task settings",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets task settings",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_gettasksettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\n// vue output\n// expect(result.length).to.be.greaterThan(1);\n// expect(result[0].attributeKey).to.exist;\n// expect(result[0].attributeValue).to.exist;\n// expect(result.find(x => x.attributeKey == 'GeneratedFileName')).to.exist\n// expect(result.find(x => x.attributeKey == 'FirstPDF')).to.exist\n// angular output\nexpect(result.Data.GeneratedFileName).to.exist;\nexpect(result.Data.FirstPDF).to.exist;\nexpect(result.Data.SecondPDF).to.exist;",
                            "err": {},
                            "uuid": "66be509f-4dac-4c12-9ac2-4a95bb01debb",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF options",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getpdfoptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.length).to.be.greaterThan(1);\n// vue output\n// expect(result[0].displayName).to.exist;\n// expect(result[0].processTaskGuid).to.exist;\n// expect(result[0].taskTypeGuid).to.exist;\n// angular output\nexpect(result[0].length).to.be.greaterThan(1);\nexpect(result[0][0]).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e;52407ad7-bd98-4023-8d88-91ef4464cd98');\nexpect(result[0][1]).to.equal('second PDF Merge Form : File Attachment (Task Output)');\nexpect(result[0][2]).to.equal('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "d7fa1c46-4d34-4d88-86ef-1229d459ec13",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists PDF rule options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests lists PDF rule options",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"listRuleOptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.eql([{ Value: \"GeneratedPDF\", Label: \"Generated PDF\", Type: \"FileAttachment\"}])",
                            "err": {},
                            "uuid": "0c9ff418-cc15-4350-9c27-2a71f099b8a6",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF fields",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF fields",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\n// vue output\n// expect(result.length).to.equal(1)\n// expect(result[0]).to.equal('FILE_NAME')\n// angular output\nexpect(result.Data.length).to.equal(1)\nexpect(result.Data[0][0]).to.equal('FILE_NAME')\nexpect(result.Data[0][1]).to.equal('FILE_NAME')",
                            "err": {},
                            "uuid": "25a81980-2b55-488c-b447-a076e769bb5d",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - data source - form mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - data source - form mapping",
                            "timedOut": false,
                            "duration": 12,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_Input')\nexpect(result[0].PrefillField).to.equal('1601919933647')\nexpect(result[0].Description).to.equal('Data - second PDF Merge Form - Merged PDF Filename:')\nexpect(result[0].TaskSID).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e')",
                            "err": {},
                            "uuid": "d9c857df-9be7-4ada-a4dc-6a8d8f6e6d76",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - fixed value mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - fixed value mapping",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_fixedValue = 'c2095ccf-896b-46a0-b5e9-8e5b7e288270' \nconst processTaskSid_fixedValue = '5f719bb1-11b8-43d9-a9fd-66e55306f4eb'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_fixedValue, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_fixedValue }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Fixed_Value')\nexpect(result[0].PrefillField).to.equal('fixValFileName')\nexpect(result[0].Description).to.equal('Fixed Value - fixValFileName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "ceff86ab-b1c7-48b9-b486-dc88b4dae396",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - request id mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - request id mapping",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_requestId = 'f9f94cfe-d4b3-4d89-9695-1b32c6cee55d' \nconst processTaskSid_requestId = '9b4f1444-7bd7-481a-8008-69a0490da139'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_requestId, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_requestId }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Request')\nexpect(result[0].PrefillField).to.equal('ID')\nexpect(result[0].Description).to.equal('Request - ID')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "baef1a9c-3b1c-4a5a-a159-9e9afa6b554d",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - client username mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - client username mapping",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_clientUsername = 'd1a7c44e-1e6e-4cdf-9d39-deac08a8b5cc' \nconst processTaskSid_clientUsername = 'a79cde56-9f3a-4be4-9824-dd634eddbff3'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_clientUsername, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_clientUsername }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Client')\nexpect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Client - UserName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "51c2690b-3014-471c-8fee-6e5771633b8e",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - status pdfmerge mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - status pdfmerge mapping",
                            "timedOut": false,
                            "duration": 12,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_statusPdfMerge = 'ab3a8404-c208-4ca7-8ae6-637b16c23368' \nconst processTaskSid_statusPdfMerge = '7f4f1f42-228c-46dc-90a3-77fe15fe7412'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_statusPdfMerge, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_statusPdfMerge }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_State')\n// expect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Status - PDF Merge - ')\nexpect(result[0].TaskSID).to.equal('7f4f1f42-228c-46dc-90a3-77fe15fe7412')",
                            "err": {},
                            "uuid": "a8caa09a-94d4-4a3c-a34d-9c05731cb7a9",
                            "parentUUID": "22940403-78bd-48cf-84dc-3032ee7661f1",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "66be509f-4dac-4c12-9ac2-4a95bb01debb",
                        "d7fa1c46-4d34-4d88-86ef-1229d459ec13",
                        "0c9ff418-cc15-4350-9c27-2a71f099b8a6",
                        "25a81980-2b55-488c-b447-a076e769bb5d",
                        "d9c857df-9be7-4ada-a4dc-6a8d8f6e6d76",
                        "ceff86ab-b1c7-48b9-b486-dc88b4dae396",
                        "baef1a9c-3b1c-4a5a-a159-9e9afa6b554d",
                        "51c2690b-3014-471c-8fee-6e5771633b8e",
                        "a8caa09a-94d4-4a3c-a34d-9c05731cb7a9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 74,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "ed229abe-bc4e-4e2b-96af-1054998703b3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "7ef4c5a2-f5bb-4852-af3c-490e2d7f2040",
                    "title": "Tenant API Sessions Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                    "file": "/test/integration/activeSessions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \ntestConfig = await testLib.getTestConfig();\n    \ntenant = testConfig.tenantOne.tenantId;\ngroup = \"sessionServiceGroup\"\ntestEventType = 'extendSession'\nfullStreamName = tenant + '.stream.' + testStreamName\neventProcessedName = fullStreamName + \".\" + group + \".processed\";\neventHistoryName = fullStreamName + \".history\"",
                            "err": {},
                            "uuid": "ca4a50a3-9a54-4b5e-b62a-a63b83457711",
                            "parentUUID": "7ef4c5a2-f5bb-4852-af3c-490e2d7f2040",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "5c81cf93-85dd-47bd-9527-fea6c0c7d042",
                            "parentUUID": "7ef4c5a2-f5bb-4852-af3c-490e2d7f2040",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "86d4c580-4c99-45b8-83cc-7a5eff39119f",
                            "title": "Active Sessions",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                            "file": "/test/integration/activeSessions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "86dddc11-8ee6-4130-a053-4c0b3c135bd2",
                                    "title": "count active sessions",
                                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                                    "file": "/test/integration/activeSessions.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return activeSessions",
                                            "fullTitle": "Tenant API Sessions Tests Active Sessions count active sessions should return activeSessions",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions  = await getActiveSessions(tenant);\n//console.log(sessions)\nexpect(sessions).to.exist;\nexpect(sessions).to.have.property(\"activeSessions\")\nexpect(sessions).to.have.property(\"activeUsers\")",
                                            "err": {},
                                            "uuid": "db25433d-1209-4b14-8cdd-518af256fc7d",
                                            "parentUUID": "86dddc11-8ee6-4130-a053-4c0b3c135bd2",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "db25433d-1209-4b14-8cdd-518af256fc7d"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b74d8058-4f93-4d63-80f1-91fefb5c644b",
                    "title": "Tenant API licsense stats",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/licenseStats.test.js",
                    "file": "/test/integration/licenseStats.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API licsense stats \"before all\" hook",
                            "timedOut": false,
                            "duration": 3004,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \nconfig = await testLib.getTestConfig();\nlet sp = new stream.StreamPublisher('sessions',config.tenantOne.tenantId);\nawait sp.sendEvent(\"extendSession\", {\n    token: \"abcd234\",\n    user: {\n        sid:\"11111\", \n        user_name: \"iapprove\", \n        email: \"iapprove@integrify.com\", \n        name: \"System System\"\n    }\n})\n    \nawait delay(3000);",
                            "err": {},
                            "uuid": "ea49fced-155e-4305-9eb8-cb4485e9840d",
                            "parentUUID": "b74d8058-4f93-4d63-80f1-91fefb5c644b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API licsense stats \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "18933605-b420-41fc-94d2-8d33f1abb3cf",
                            "parentUUID": "b74d8058-4f93-4d63-80f1-91fefb5c644b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9ec8b0b7-5317-4cfd-9f80-4bc47da7b74a",
                            "title": "Post all stats",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/licenseStats.test.js",
                            "file": "/test/integration/licenseStats.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return ok",
                                    "fullTitle": "Tenant API licsense stats Post all stats should return ok",
                                    "timedOut": false,
                                    "duration": 660,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let result = await postAllStats();\nexpect(result).to.eq(\"ok\");",
                                    "err": {},
                                    "uuid": "e97d8439-965d-4463-9d10-41c93e579d19",
                                    "parentUUID": "9ec8b0b7-5317-4cfd-9f80-4bc47da7b74a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e97d8439-965d-4463-9d10-41c93e579d19"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 660,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f3be3348-bdb8-44b2-ae32-aeaee4e77b0e",
                    "title": "Tenant API Stream-Manager Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                    "file": "/test/integration/monitor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5ba03a4f-47dc-4e39-824a-ed19ad66a48b",
                            "title": "listTenantStreams",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of the streams for a tenant",
                                    "fullTitle": "Tenant API Stream-Manager Tests listTenantStreams should return a list of the streams for a tenant",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\tlet results = await streamMonitor.listTenantStreams(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\tstreamName = apps[0]\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "bf7178df-59ac-41e5-8ee4-3b4271597ce4",
                                    "parentUUID": "5ba03a4f-47dc-4e39-824a-ed19ad66a48b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bf7178df-59ac-41e5-8ee4-3b4271597ce4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ef61742c-a5fa-4175-9ed0-98082fddb567",
                            "title": "streamInfoReqHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests streamInfoReqHandler should return info for the stream",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.streamInfoReqHandler(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.exist",
                                    "err": {},
                                    "uuid": "cfbb2cdf-dc56-4a70-a74e-9131a4b1adc7",
                                    "parentUUID": "ef61742c-a5fa-4175-9ed0-98082fddb567",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cfbb2cdf-dc56-4a70-a74e-9131a4b1adc7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "77963b51-572d-41ce-9ea4-a5ef05e3d2da",
                            "title": "getGroupInfo",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return group info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests getGroupInfo should return group info for the stream",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.getGroupInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "5e4c3ad6-c7f5-4f19-b3a6-79b9e717518d",
                                    "parentUUID": "77963b51-572d-41ce-9ea4-a5ef05e3d2da",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5e4c3ad6-c7f5-4f19-b3a6-79b9e717518d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ae2be66b-0e16-4a3d-807f-e81445a66b0e",
                            "title": "getConsumerInfo",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return consumer info for the group",
                                    "fullTitle": "Tenant API Stream-Manager Tests getConsumerInfo should return consumer info for the group",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\treq.params.groupName = \"sessionServiceGroup\" \n\t\t\tlet results = await streamMonitor.getConsumerInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "db6248b7-a8f2-498f-8b45-4b6d85275fba",
                                    "parentUUID": "ae2be66b-0e16-4a3d-807f-e81445a66b0e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "db6248b7-a8f2-498f-8b45-4b6d85275fba"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c058e696-0c4d-4d6d-aad4-07912f31e7ec",
                    "title": "Tenant API License, Apps and Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                    "file": "/test/integration/tenant.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "206a7023-a312-4bf0-9047-b85ca056fe94",
                            "title": "getTenantLicense",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a license for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicense should return a license for a tenant",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req()\n\t\t\tlet results = await getTenantLicense(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseInfo = mockRes.body;\n\t\t\texpect(licenseInfo.instanceId).equal(req.oauth.tenant);",
                                    "err": {},
                                    "uuid": "9ad6dc46-1627-49cf-a9e5-9f8f9997caad",
                                    "parentUUID": "206a7023-a312-4bf0-9047-b85ca056fe94",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ad6dc46-1627-49cf-a9e5-9f8f9997caad"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1af52c83-1941-45c5-b34a-2598334ee5c9",
                            "title": "getTenantApps",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return apps for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantApps should return apps for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantApps(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "bc6ecc63-2d6f-4d63-b43e-7204f9afc1a6",
                                    "parentUUID": "1af52c83-1941-45c5-b34a-2598334ee5c9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bc6ecc63-2d6f-4d63-b43e-7204f9afc1a6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1115b9a9-056d-4f5d-9f13-38e81b5edc6e",
                            "title": "getTenantLicenseLocation",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return license location for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicenseLocation should return license location for a tenant",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantLicenseLocation(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseLocation = mockRes.body;\n      expect(licenseLocation).to.satisfy(function(val) { return val === 'onpremise' || val.toLowerCase().includes('cloud'); });",
                                    "err": {},
                                    "uuid": "773d6ba4-277b-4c0f-9297-94038b30c945",
                                    "parentUUID": "1115b9a9-056d-4f5d-9f13-38e81b5edc6e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "773d6ba4-277b-4c0f-9297-94038b30c945"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b6eb95aa-7a4a-49e2-993e-10c4afad6d1a",
                            "title": "getTenantLoginSettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should login settings for a tenant based on a tenant id",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a tenant id",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {tenant: req.config.tenantOne.tenantId}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "b7faa9de-4e5f-48b9-81d2-67ee5a77b3bc",
                                    "parentUUID": "b6eb95aa-7a4a-49e2-993e-10c4afad6d1a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should login settings for a tenant based on a host header",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a host header",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {hostHeader: req.config.tenantOne.hostHeader}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "f943d5a5-1316-457a-9d8e-2861e6a9cf4f",
                                    "parentUUID": "b6eb95aa-7a4a-49e2-993e-10c4afad6d1a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b7faa9de-4e5f-48b9-81d2-67ee5a77b3bc",
                                "f943d5a5-1316-457a-9d8e-2861e6a9cf4f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a55e0153-8c4f-4d5c-b083-fac343dc6e72",
                    "title": "Tenant API Translation controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                    "file": "/test/integration/translation.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "2b244cb2-a52b-4072-b367-23b3471a0a1c",
                            "parentUUID": "a55e0153-8c4f-4d5c-b083-fac343dc6e72",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "d494b9b3-256d-4c35-a8ab-f0e5ac0f82bb",
                            "parentUUID": "a55e0153-8c4f-4d5c-b083-fac343dc6e72",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7c8d15e3-22a7-4db3-aeb0-579c5b854367",
                            "title": "language crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  language = await translationController.createLanguage(tenant, languageObj);\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "c53d7390-80a4-4ab8-b2c1-c82d5c67e29f",
                                    "parentUUID": "7c8d15e3-22a7-4db3-aeb0-579c5b854367",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  languages = await translationController.listLanguages(tenant);\n         console.log(JSON.stringify(languages));\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "455de16e-061b-4315-9ce0-b73114c289fd",
                                    "parentUUID": "7c8d15e3-22a7-4db3-aeb0-579c5b854367",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language = await translationController.getLanguage(tenant,_id);\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "6e5b0b08-13f1-4fb2-b699-2923383d23a7",
                                    "parentUUID": "7c8d15e3-22a7-4db3-aeb0-579c5b854367",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language.translationCode = 'test-updated';\n            language.modifiedBy = IntegrifySystemContactSid;\n            const updatedLanguage = await translationController.updateLanguage(tenant,language.toObject());\n            expect(updatedLanguage).to.exist         \n            expect(updatedLanguage._id.toString()).to.equal(_id)\n            expect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "2de54f45-d41b-40cf-8acc-67553c5e7f40",
                                    "parentUUID": "7c8d15e3-22a7-4db3-aeb0-579c5b854367",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  delete a a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLanguage(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "8a1cf3fb-ba98-4139-a63b-fcc02be6eb44",
                                    "parentUUID": "7c8d15e3-22a7-4db3-aeb0-579c5b854367",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c53d7390-80a4-4ab8-b2c1-c82d5c67e29f",
                                "455de16e-061b-4315-9ce0-b73114c289fd",
                                "6e5b0b08-13f1-4fb2-b699-2923383d23a7",
                                "2de54f45-d41b-40cf-8acc-67553c5e7f40",
                                "8a1cf3fb-ba98-4139-a63b-fcc02be6eb44"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 60,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                            "title": "label crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  label = await translationController.createLabel(tenant, labelObj);\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "adeccdd7-1080-4914-8b52-9f162c05dbca",
                                    "parentUUID": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  labels = await translationController.listLabels(tenant);\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "2e167c99-7663-4cf0-9b41-5883b2ccd706",
                                    "parentUUID": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label = await translationController.getLabel(tenant,_id);\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "cc8dceab-40de-4bd5-a248-6981418ca3f8",
                                    "parentUUID": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\n            label.modifiedBy = IntegrifySystemContactSid;\n            const updatedLabel = await translationController.updateLabel(tenant,label.toObject());\n            expect(updatedLabel).to.exist         \n            expect(updatedLabel._id.toString()).to.equal(_id)\n            expect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "3d8d9082-1068-423a-9427-2beabb204b1a",
                                    "parentUUID": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  delete a a label",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLabel(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "0b3bd32e-e440-42ff-9414-1c9a43ab42e2",
                                    "parentUUID": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation controller tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst savedCount = await translationController.saveNewDefaultLabels(tenant, unsaved);\nexpect(savedCount).to.exist         \nexpect(savedCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "55883b51-1102-44b0-9a0f-cb2a5230c7c6",
                                    "parentUUID": "7db9f95c-f5bf-4f89-b77d-faddfb7882a4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "adeccdd7-1080-4914-8b52-9f162c05dbca",
                                "2e167c99-7663-4cf0-9b41-5883b2ccd706",
                                "cc8dceab-40de-4bd5-a248-6981418ca3f8",
                                "3d8d9082-1068-423a-9427-2beabb204b1a",
                                "0b3bd32e-e440-42ff-9414-1c9a43ab42e2",
                                "55883b51-1102-44b0-9a0f-cb2a5230c7c6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f37b20a1-6d8e-43f1-a868-b8d035fdb936",
                            "title": "seed functions ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should seed languages",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed languages",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLanguages(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "9df8d54f-560f-4c9b-968f-0c639f1f3d9b",
                                    "parentUUID": "f37b20a1-6d8e-43f1-a868-b8d035fdb936",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should seed labels",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed labels",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLabels(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "518c0b42-9be5-4894-8a2d-d878dc2775ba",
                                    "parentUUID": "f37b20a1-6d8e-43f1-a868-b8d035fdb936",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9df8d54f-560f-4c9b-968f-0c639f1f3d9b",
                                "518c0b42-9be5-4894-8a2d-d878dc2775ba"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 43,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c240e303-c728-4140-94bb-d1aebbc2d2ea",
                    "title": "Tenant API Translation handler tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.handler.test.js",
                    "file": "/test/integration/translation.handler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "c2ba55b1-f423-4c4c-aedb-aacd1fb75b85",
                            "parentUUID": "c240e303-c728-4140-94bb-d1aebbc2d2ea",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "a1058d32-7777-4bbc-917d-73d5ddbd6e18",
                            "parentUUID": "c240e303-c728-4140-94bb-d1aebbc2d2ea",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                            "title": "language crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = languageObj;\nawait translationHandler.createLanguage(req, mockRes);\nlanguage = mockRes.body;\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "826b1819-e022-482b-b45d-2e1b4befe903",
                                    "parentUUID": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         await translationHandler.listLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "2d57dd5b-b962-46e6-9bf3-7e930a4e2160",
                                    "parentUUID": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list tenant languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list tenant languages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.params.tenant = tenant\n         await translationHandler.listTenantLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "40523dd5-2696-43eb-ada4-c5aec8b9c7d8",
                                    "parentUUID": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLanguage(req,mockRes);\n            language = mockRes.body;\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "6acbb535-d703-4af4-b7a1-fab3c63ce364",
                                    "parentUUID": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = language;\nawait translationHandler.updateLanguage(req, mockRes);\nconst updatedLanguage = mockRes.body;\nexpect(updatedLanguage).to.exist         \nexpect(updatedLanguage._id.toString()).to.equal(_id)\nexpect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "3886fa9e-52e1-407a-9ca9-df5da7fe6dd9",
                                    "parentUUID": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  delete a language",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLanguage(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "fee4a94b-e829-449f-9e84-8c8a109d174f",
                                    "parentUUID": "19f6b3ed-c079-4309-9fe1-8d20d0ed0f34",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "826b1819-e022-482b-b45d-2e1b4befe903",
                                "2d57dd5b-b962-46e6-9bf3-7e930a4e2160",
                                "40523dd5-2696-43eb-ada4-c5aec8b9c7d8",
                                "6acbb535-d703-4af4-b7a1-fab3c63ce364",
                                "3886fa9e-52e1-407a-9ca9-df5da7fe6dd9",
                                "fee4a94b-e829-449f-9e84-8c8a109d174f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 31,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                            "title": "label crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = labelObj;\nawait translationHandler.createLabel(req, mockRes);\nlabel = mockRes.body;\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "8943f196-684d-49f0-8b05-357dffaf6dcc",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.query.tenant = tenant\n         await translationHandler.listLabels(req,mockRes);\n         const  labels = mockRes.body;\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "4d652bfe-4c2b-4435-9ce3-3280d2b8cc88",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLabel(req,mockRes);\n            label = mockRes.body;\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "696e1320-12e5-4c7f-b559-0d098cf488e5",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\nlabel.modifiedBy = IntegrifySystemContactSid;\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = label;\nawait translationHandler.updateLabel(req, mockRes);\nconst updatedLabel = mockRes.body;   \nexpect(updatedLabel).to.exist         \nexpect(updatedLabel._id.toString()).to.equal(_id)\nexpect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "e8a7c4af-8067-46e0-a996-18c761a5307a",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete aa label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete aa label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLabel(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "dc8340fa-f966-4704-a319-b9fe39b48595",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete labels",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let results = await translationController.listLabels(tenant,{_id})\n            let labelIds= results.map((i) => {\n                return i._id;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req()\n            req.body = labelIds;\n            await translationHandler.deleteLabels(req,mockRes);\n\t\t\tconst  deleted = mockRes.body;\n            expect(deleted).to.exist         \n            expect(deleted.deletedCount).to.exist",
                                    "err": {},
                                    "uuid": "9434b661-ef87-4529-9610-919888e883df",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation handler tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst mockRes = await mocks.mockResponse();\nlet req = await mocks.req()\nreq.body = unsaved;\nawait translationHandler.saveNewDefaultLabels(req,mockRes);\nconst result = mockRes.body;\nexpect(result).to.exist         \nexpect(result.saved).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "1eb61da9-1083-448a-88e4-4d1537457904",
                                    "parentUUID": "b36d5317-8e20-4a3b-9b8d-6a7fb5992a36",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8943f196-684d-49f0-8b05-357dffaf6dcc",
                                "4d652bfe-4c2b-4435-9ce3-3280d2b8cc88",
                                "696e1320-12e5-4c7f-b559-0d098cf488e5",
                                "e8a7c4af-8067-46e0-a996-18c761a5307a",
                                "dc8340fa-f966-4704-a319-b9fe39b48595",
                                "9434b661-ef87-4529-9610-919888e883df",
                                "1eb61da9-1083-448a-88e4-4d1537457904"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "51d4b047-a903-4943-a882-1451e8f542e0",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "c33a081b-96ea-44e5-83ef-9751a523e9a5",
                    "title": "api-user Group Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                    "file": "/test/db/groupController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 410,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = { tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase() }; // system level\ntenantId = config.tenantOne.tenantId;\nfor (i = 1; i <= 10; i++) {\n  const groupController = new GroupController(session);\n  const result = await groupController.addGroup({ groupName: `Test Automation Group ${i}` });\n  testGroups.push(result);\n}",
                            "err": {},
                            "uuid": "09037cf2-ad11-4271-a167-683d2d5e6993",
                            "parentUUID": "c33a081b-96ea-44e5-83ef-9751a523e9a5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 57,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// clean up our test data\nconst Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst ContactGroup = await models.getModel(config.tenantOne.tenantId, 'ContactGroup');\nawait Promise.all(testGroups.map(async (group) => {\n  await Group.query().hardDelete(group);\n  await ContactGroup.query()\n    .where('groupGuid', group.groupGuid)\n    .delete();\n}));",
                            "err": {},
                            "uuid": "17b016bc-0363-418e-9f02-e213ec80ef9d",
                            "parentUUID": "c33a081b-96ea-44e5-83ef-9751a523e9a5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5ddaea4d-3999-4f30-baa3-e11eba19ba3f",
                            "title": "get tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "retrieves a group",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves a group",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groups = await Group.query().where('group_name', '=', 'Administrators');\nexpect(groups.length).to.equal(1);\nadminGroupGuid = groups[0].groupGuid;\nconst groupController = new GroupController(config.tenantOne);\nconst adminGroup = await groupController.getGroup(adminGroupGuid);\nexpect(adminGroup).to.exist;\nexpect(adminGroup.groupName).to.equal('Administrators');\nexpect(adminGroup.groupDesc).to.equal('System administrators');\nexpect(adminGroup.groupSql).to.be.null;",
                                    "err": {},
                                    "uuid": "2c5eaa45-3d90-4caf-b437-c22c62167a29",
                                    "parentUUID": "5ddaea4d-3999-4f30-baa3-e11eba19ba3f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all groups by default",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all groups by default",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups();\nconst groups = response.results;\nexpect(groups.length).to.be.above(10);",
                                    "err": {},
                                    "uuid": "f7b7e733-b3eb-434e-a584-a216ba3e4515",
                                    "parentUUID": "5ddaea4d-3999-4f30-baa3-e11eba19ba3f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves filtered list of groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves filtered list of groups",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups({ search: 'Test Automation Group', count: 4 });\nconst groups = response.results;\nexpect(groups.length).to.equal(4);",
                                    "err": {},
                                    "uuid": "f233231c-0293-4449-8906-a7f689106180",
                                    "parentUUID": "5ddaea4d-3999-4f30-baa3-e11eba19ba3f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all possible members for adding to groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all possible members for adding to groups",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst group = testGroups[9];\nconst response = await groupController.getNonMembers(group.groupGuid);\nconst results = response.results;\nexpect(results.length).to.be.equal(response.total);\n// empty group, so test a sampling of accounts that should be non-members\nexpect(results).to.include.deep({ memberGuid: \"A03BDD24-A0BA-4071-9A5B-2833C865EC3D\",\n                                  memberId: 1,\n                                  memberName: \"Administrators\",\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: testGroups[8].groupGuid.toUpperCase(),\n                                  memberId: testGroups[8].groupId,\n                                  memberName: testGroups[8].groupName,\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n                                  memberId: 1,\n                                  memberName: 'System System',\n                                  memberType: 'User'\n                                })\n// two system accounts that should not be returned, plus the group itself\nexpect(results).to.not.include.deep({ memberGuid: 'D8C469C3-F781-4179-A09C-6D148885FB30',\n                                               memberId: 92,\n                                               memberName: \"Integrify System\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: '64EC8FC9-B426-4376-A1A4-3AD16F0F9906',\n                                               memberId: 96,\n                                               memberName: \"Guest Account\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: testGroups[9].groupGuid.toUpperCase(),\n                                           memberId: testGroups[9].groupId,\n                                           memberName: testGroups[9].groupName,\n                                           memberType: \"Group\"\n                                         })",
                                    "err": {},
                                    "uuid": "d0176ab2-825e-4de1-aeb1-f6f7f2527796",
                                    "parentUUID": "5ddaea4d-3999-4f30-baa3-e11eba19ba3f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2c5eaa45-3d90-4caf-b437-c22c62167a29",
                                "f7b7e733-b3eb-434e-a584-a216ba3e4515",
                                "f233231c-0293-4449-8906-a7f689106180",
                                "d0176ab2-825e-4de1-aeb1-f6f7f2527796"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 141,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "1709ed18-a126-4234-932c-2a032cb9cb7d",
                            "title": "insert tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts a non-dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a non-dynamic group",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.dynamic).to.equal('No'); // ensure defaulting to \"No\" rather than null\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "b5c35c19-e72d-48ea-b822-500c734a1a93",
                                    "parentUUID": "1709ed18-a126-4234-932c-2a032cb9cb7d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "inserts a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a dynamic group",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "83628520-821c-4d2c-8c81-01dc6015d1e4",
                                    "parentUUID": "1709ed18-a126-4234-932c-2a032cb9cb7d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with bad SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with bad SQL",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"bad_column_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "2d2aae64-2470-4353-a3b2-81f0c66a20bd",
                                    "parentUUID": "1709ed18-a126-4234-932c-2a032cb9cb7d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a group with no name",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a group with no name",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nawait expect(groupController.addGroup({ groupDesc: 'Test Group' })).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "32d67c25-01ad-44c6-91f2-ac297e8ae247",
                                    "parentUUID": "1709ed18-a126-4234-932c-2a032cb9cb7d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with no SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with no SQL",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupData = {\n  groupName: 'Dynamic Test Group',\n  dynamic: 'Yes',\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "c188dffc-3ace-4fb5-8813-eac52d973c38",
                                    "parentUUID": "1709ed18-a126-4234-932c-2a032cb9cb7d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b5c35c19-e72d-48ea-b822-500c734a1a93",
                                "83628520-821c-4d2c-8c81-01dc6015d1e4",
                                "2d2aae64-2470-4353-a3b2-81f0c66a20bd",
                                "32d67c25-01ad-44c6-91f2-ac297e8ae247",
                                "c188dffc-3ace-4fb5-8813-eac52d973c38"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 82,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "892c67b5-38fd-4933-a965-1c49582e2287",
                            "title": "update tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates a group",
                                    "fullTitle": "api-user Group Controller Tests update tests updates a group",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nconst result = await groupController.updateGroup({\n  groupGuid: group.groupGuid,\n  groupName: 'Updated Test Automation Group',\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n});\nexpect(result.groupName).to.equal('Updated Test Automation Group');\nexpect(result.dynamic).to.equal('Yes');\nexpect(result.groupSql).to.equal(\"first_name = 'Admin'\");",
                                    "err": {},
                                    "uuid": "abd34445-157b-4471-8686-5d8433de05e5",
                                    "parentUUID": "892c67b5-38fd-4933-a965-1c49582e2287",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update with no group name",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update with no group name",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "012971c6-0dbb-4a19-bf63-adb6730c294f",
                                    "parentUUID": "892c67b5-38fd-4933-a965-1c49582e2287",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic without sql",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic without sql",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'Yes',\n    groupSql: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "0bbf6f98-13fc-4c8e-8405-22eac22578ac",
                                    "parentUUID": "892c67b5-38fd-4933-a965-1c49582e2287",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic other than Yes/No",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic other than Yes/No",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: true,\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'yes',\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "f6d94543-a3fe-4001-ad85-89c6c386550c",
                                    "parentUUID": "892c67b5-38fd-4933-a965-1c49582e2287",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "abd34445-157b-4471-8686-5d8433de05e5",
                                "012971c6-0dbb-4a19-bf63-adb6730c294f",
                                "0bbf6f98-13fc-4c8e-8405-22eac22578ac",
                                "f6d94543-a3fe-4001-ad85-89c6c386550c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "195779f3-0911-40b6-b0aa-205889e112bd",
                            "title": "delete tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "soft deletes a list of groups",
                                    "fullTitle": "api-user Group Controller Tests delete tests soft deletes a list of groups",
                                    "timedOut": false,
                                    "duration": 55,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst timeBeforeDelete = Date.now();\nconst firstGroup = testGroups[0];\nconst response = await groupController.deleteGroups(testGroups.slice(0, 5).map((group) => group.groupGuid));\nexpect(response).to.eql([1, 1, 1, 1, 1]);\nconst deletedGroup = groupController.getGroup(firstGroup.groupGuid);\nexpect(deletedGroup).to.be.empty;",
                                    "err": {},
                                    "uuid": "cde57b38-2c96-490a-87c0-77c7c68da09a",
                                    "parentUUID": "195779f3-0911-40b6-b0aa-205889e112bd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cde57b38-2c96-490a-87c0-77c7c68da09a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 55,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                            "title": "membership test",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "adds a user to a group",
                                    "fullTitle": "api-user Group Controller Tests membership test adds a user to a group",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9]; // 0-4 get deleted in a previous test\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(0); // make sure group starts empty\nlet result = await groupController.addMembersToGroup({\n  groupGuid: group.groupGuid,\n  members: [{\n    memberGuid: session.user_sid,\n    memberType: 'User',\n  },\n  ],\n});\nexpect(result).to.not.be.undefined;\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(1);\nexpect(result[0].memberGuid.toLowerCase()).to.equal(session.user_sid);\nexpect(result[0].groupGuid.toLowerCase()).to.equal(group.groupGuid);\nexpect(result[0].memberType).to.equal('User');",
                                    "err": {},
                                    "uuid": "509ce90c-0f78-4184-8646-8f99a5b65356",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "removes members from a group",
                                    "fullTitle": "api-user Group Controller Tests membership test removes members from a group",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9];\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(1); // should have 1 member from preceding addUser test\nlet result = await groupController.removeMembersFromGroup({\n  groupGuid: group.groupGuid,\n  members: [session.user_sid],\n});\nexpect(result).to.equal(1);\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "3cb0d9d2-806a-4809-b4ee-b40ab8da3710",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a group",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid);\nexpect(res.results.length).to.be.at.least(2);",
                                    "err": {},
                                    "uuid": "ba20e485-36b7-46ad-90df-825bdb800561",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "filters members of a group based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test filters members of a group based on search string",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid, { search: 'no-reply@integrify.com' });\nexpect(res.results.length).to.equal(2);",
                                    "err": {},
                                    "uuid": "468eaae3-3bd5-4fea-b0cc-0916af500f98",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits result members of a group based start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits result members of a group based start/count",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nlet res = await groupController.getMembers(usersGroupGuid);\nconst groupSize = res.results.length;\nexpect(groupSize).to.equal(res.total);\nres = await groupController.getMembers(usersGroupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(groupSize);\nres = await groupController.getMembers(usersGroupGuid, { start: 1 });\nexpect(res.results.length).to.equal(groupSize - 1);\nexpect(res.total).to.equal(groupSize);",
                                    "err": {},
                                    "uuid": "2da0d5b2-e2b7-44aa-9908-d3bac6b99bba",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to users only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to users only",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'true', groups: 'false' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('User'));",
                                    "err": {},
                                    "uuid": "cf8a1bc6-f299-4d7a-ade0-3392a847a98f",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to groups only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to groups only",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'false', groups: 'true' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('Group'));",
                                    "err": {},
                                    "uuid": "7556bcc0-4afc-4e01-a97b-9a32d33cfbee",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves groups a user belongs to",
                                    "fullTitle": "api-user Group Controller Tests membership test retrieves groups a user belongs to",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst userGuid = '4e99e0dd-b3b3-4d5d-826d-3d5ae62a16cf';\nconst res = await groupController.getUserGroups(userGuid);\nexpect(res.results.find((result) => result.groupName == 'Administrators')).to.not.be.undefined;\nexpect(res.results.find((result) => result.groupDesc == 'All users')).to.not.be.undefined;",
                                    "err": {},
                                    "uuid": "10b7933d-ae9f-43d8-8c22-5067b8f786a1",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on start/count",
                                    "timedOut": false,
                                    "duration": 68,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 0, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 1, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);",
                                    "err": {},
                                    "uuid": "d1d5a0e2-ef68-4c96-be8b-49407c494522",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on search string",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { search: 'System' });\nconst { results } = res;\nexpect(results).to.eql([{\n  memberGuid: 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D',\n  memberName: 'Administrators',\n  memberType: 'Group',\n  memberId: 1,\n},\n{\n  memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n  memberId: 1,\n  memberName: 'System System',\n  memberType: 'User',\n},\n]);",
                                    "err": {},
                                    "uuid": "fdc9d7a3-a22b-477f-a7c3-a8de6bd20f3d",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a dynamic group",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst allUsersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst result = await groupController.getMembers(allUsersGroupGuid);",
                                    "err": {},
                                    "uuid": "cb75c87b-0002-4883-b776-3e46bbf60fa4",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists all members of a group containing groups",
                                    "fullTitle": "api-user Group Controller Tests membership test lists all members of a group containing groups",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "",
                                    "err": {},
                                    "uuid": "2cda47af-d54a-4bef-8c1f-9dc0cd4f11b8",
                                    "parentUUID": "51314ab0-9c67-4221-94b9-5fa81b2b9a88",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "509ce90c-0f78-4184-8646-8f99a5b65356",
                                "3cb0d9d2-806a-4809-b4ee-b40ab8da3710",
                                "ba20e485-36b7-46ad-90df-825bdb800561",
                                "468eaae3-3bd5-4fea-b0cc-0916af500f98",
                                "2da0d5b2-e2b7-44aa-9908-d3bac6b99bba",
                                "cf8a1bc6-f299-4d7a-ade0-3392a847a98f",
                                "7556bcc0-4afc-4e01-a97b-9a32d33cfbee",
                                "10b7933d-ae9f-43d8-8c22-5067b8f786a1",
                                "d1d5a0e2-ef68-4c96-be8b-49407c494522",
                                "fdc9d7a3-a22b-477f-a7c3-a8de6bd20f3d",
                                "cb75c87b-0002-4883-b776-3e46bbf60fa4",
                                "2cda47af-d54a-4bef-8c1f-9dc0cd4f11b8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 372,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "f454e2fb-7d36-45ca-bd99-330c85b8ad89",
                            "title": "association tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(47);\n// should not include categoryLevel by default\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName');",
                                    "err": {},
                                    "uuid": "ffcd5baf-cf1d-486d-b93e-fa3fbe85781f",
                                    "parentUUID": "f454e2fb-7d36-45ca-bd99-330c85b8ad89",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 67,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D', { include: ['category'] });\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName', 'categoryLevel');",
                                    "err": {},
                                    "uuid": "16ff61ec-3aa5-47da-90d0-3ca96f2f87ea",
                                    "parentUUID": "f454e2fb-7d36-45ca-bd99-330c85b8ad89",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list roles associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list roles associated to a group",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getRoleAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(1);",
                                    "err": {},
                                    "uuid": "7d69f27f-538c-45c7-8c52-366fbbeca27f",
                                    "parentUUID": "f454e2fb-7d36-45ca-bd99-330c85b8ad89",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ffcd5baf-cf1d-486d-b93e-fa3fbe85781f",
                                "16ff61ec-3aa5-47da-90d0-3ca96f2f87ea",
                                "7d69f27f-538c-45c7-8c52-366fbbeca27f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 93,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                    "title": "api-user User Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/userController.test.js",
                    "file": "/test/db/userController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1142,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenantId = config.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nMetadataValue = await models.getModel(tenantId, 'MetadataValue');\nUserAuth = await models.getModel(tenantId, 'UserAuth');\n// add user\nuserCtrl = new UserController(session);\nfor (let i=1; i<=limit; i++) {\n  const user = {\n    firstName: 'test first name' + i,\n    lastName: 'last' + i,\n    userName: 'test_username' + i,\n    email: `test${i}@test.test${i}`,\n    locale: 'en-US',\n    languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460', // US English\n    password: testPwd,\n    confirmPassword: testPwd,\n    title: 'title' + i\n  };\n  const dbUser = await userCtrl.insertUser(user)\n  testUsers.push(dbUser);\n}",
                            "err": {},
                            "uuid": "10488cf2-e314-4980-b502-7fee2d8a342d",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 67,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await Promise.all( testUsers.map( async (user) => {\n  return UserAuth.query().deleteById(user.contactGuid);\n}));\nawait User.query().delete().where('firstName', 'like', 'test first%');",
                            "err": {},
                            "uuid": "0d636681-bd40-441c-b04c-bb468c96d9bb",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should retrieves users",
                            "fullTitle": "api-user User Controller Tests should retrieves users",
                            "timedOut": false,
                            "duration": 35,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenantId, 'User');\nconst UserAuth = await models.getModel(tenantId, 'UserAuth');\nconst users = await User.query()\n  .orderBy('createdDate', 'desc')\n  .limit(limit);\nawait Promise.all(users.map(async user => {\n  const result = await userCtrl.getUser(user.contactGuid);\n  const {userName, managerGuid, ...userToCompare1} = result;\n  user.languageGuid = user.languageGuid.toLowerCase() // 'user' from Database query has \"upper case\" language guid - but userToCompare1 from API should be in lower case\n  user.contactGuid = user.contactGuid.toLowerCase()\n  user.createdBy = user.createdBy.toLowerCase()\n  expect(userToCompare1).to.deep.eq(user);\n  // compare testUser to user\n  const testUser = testUsers.find(u => u.contactGuid === user.contactGuid);\n  ['firstName', 'lastName', 'email', 'locale', 'languageGuid', 'contactId', 'title'].forEach(p => {\n    expect(testUser[p]).to.eq(user[p]);\n  });\n  // check userNames\n  const userAuth = await UserAuth.query()\n    .findById(user.contactGuid);\n  expect(userAuth).to.exist;\n  expect(userAuth.userName).to.eq(testUser.userName);\n}));",
                            "err": {},
                            "uuid": "0fcedbf7-90c2-4efa-a6a1-b0fb47a377f2",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should search in users",
                            "fullTitle": "api-user User Controller Tests should search in users",
                            "timedOut": false,
                            "duration": 68,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\n// search by id\nlet result = await userCtrl.getUsers({search: testUser.contactId});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(1);\n// search by username\nresult = await userCtrl.getUsers({search: testUser.userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = testUser.userName);\nexpect(found).to.exist;\n// search by first & last names\nresult = await userCtrl.getUsers({search: testUser.firstName.slice(0, -2)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.first === testUser.first);\nexpect(found).to.exist;\nresult = await userCtrl.getUsers({search: testUser.lastName.slice(0, -1)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.lastName === testUser.lastName);\nexpect(found).to.exist;\n// search by email\nresult = await userCtrl.getUsers({search: testUser.email.slice(-10)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.email === testUser.email);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "0c8b81af-ad21-438e-8358-1a2d0848f1ab",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should limit results",
                            "fullTitle": "api-user User Controller Tests should limit results",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const result = await userCtrl.getUsers({count: 4});\nexpect(result.results.length).to.eq(4);",
                            "err": {},
                            "uuid": "e605b062-4334-4389-98ec-09a4665ee197",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should retrieve filtered users ",
                            "fullTitle": "api-user User Controller Tests should retrieve filtered users ",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nconst filters = [\n  {\n    field: 'lastName',\n    data: {comparison: 'eq', type: 'string', value: user.lastName,}\n  },\n  {\n    field: 'firstName',\n    data: {comparison: 'contains', value: user.firstName}\n  },\n  {\n    field: 'userName',\n    data: {comparison: 'eq', value: user.userName}\n  },\n  {\n    field: 'email',\n    data: {comparison: 'contains', value: user.email}\n  },\n  {\n    field: 'title',\n    data: {comparison: 'contains', value: user.title}\n  },\n  {\n    field: 'constCenter',\n    data: {comparison: 'contains', value: user.constCenter}\n  },\n  {\n    field: 'country',\n    data: {comparison: 'contains', value: user.country}\n  },\n  {\n    field: 'department',\n    data: {comparison: 'contains', value: user.department}\n  },\n  {\n    field: 'managerName',\n    data: {comparison: 'contains', value: user.managerName}\n  },\n  {\n    field: 'managerGuid',\n    data: {comparison: 'contains', value: user.managerGuid}\n  },\n];\nconst result = await userCtrl.getUsers({filters});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst found = result.results.find(u => u.contactGuid === testUser.contactGuid);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "dbdf6823-53d9-4803-983e-ae9733edfa64",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a list of managers",
                            "fullTitle": "api-user User Controller Tests should get a list of managers",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const exceptGuid = testUsers[0].contactGuid;\nconst managers = await userCtrl.getManagers({exceptGuid});\nmanagers.forEach(manager => {\n  expect(manager.contactGuid).to.not.eq(exceptGuid);\n});\ntestUsers.filter(u => u.contactGuid !== exceptGuid).forEach(u => {\n  const manager = managers.find(m => m.contactGuid === u.contactGuid);\n  const {contactGuid, firstName, lastName, email, title} = u;\n  const testUser = {contactGuid, firstName, lastName, email, title};\n  expect(manager).to.deep.eq(testUser);\n});",
                            "err": {},
                            "uuid": "6ed3d1a5-16a5-4b41-9ef0-cf7c3ccb69a0",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a single user",
                            "fullTitle": "api-user User Controller Tests should get a single user",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[3];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nexpect(user).to.exist;\n['contactGuid', 'contactId', 'firstName', 'lastName', 'userName', 'email', 'locale', 'languageGuid', 'title'].forEach(p => {\n  expect(user[p]).to.eq(testUser[p]);\n});\n['middleName', 'phone', 'address1', 'address2', 'city', 'state', 'zip', 'country',\n  'department', 'costCenter', 'division', 'managerGuid', 'cField1', 'cField2'].forEach(p => {\n  expect(!!user[p] || user[p] === null || user[p] === '').to.eq(true);\n});",
                            "err": {},
                            "uuid": "c64bf851-8afa-4eba-b590-e8fba9175532",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update and get delegate",
                            "fullTitle": "api-user User Controller Tests should update and get delegate",
                            "timedOut": false,
                            "duration": 64,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// insert delegate\nconst testDelegate = {\n  contactGuid: testUsers[3].contactGuid,\n  processes: [{id: 'a6714779-4bde-4000-8361-ad37c838d440'}, {id: '3545404d-6fff-4ed5-ba9a-1100ce38d421'}, {id: 'cfc36de0-a71b-451f-817a-2092c3c247ca'}],\n  startDate: '2021-01-14',\n  startTime: '06:00',\n  endDate: '2021-01-15',\n  endTime: '17:35',\n};\nawait userCtrl.updateDelegate(testUsers[3].contactGuid, testDelegate);\n// get delegate\nlet delegate = await userCtrl.getDelegate(testDelegate.contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.exist;\n  expect(delegate[p]).to.eq(testDelegate[p]);\n})\nexpect(delegate.processes).to.exist;\nexpect(delegate.processes.length).to.eq(testDelegate.processes.length);\ntestDelegate.processes.forEach(p => {\n  const process = delegate.processes.find(dp => dp.id === p.id);\n  expect(process).to.exist;\n});\n// for user without delegate\ndelegate = await userCtrl.getDelegate(testUsers[1].contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.be.null;\n});\nexpect(delegate.processes.length).to.eq(0);\n// delete delegate\nawait MetadataValue.query()\n  .where('ownerSid', testDelegate.contactGuid)\n  .delete();",
                            "err": {},
                            "uuid": "1d70cb80-1c00-4012-a0e9-f6138d687e49",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "password should be hashed",
                            "fullTitle": "api-user User Controller Tests password should be hashed",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await UserAuth.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.password).to.not.eq(testPwd);",
                            "err": {},
                            "uuid": "017c1cbe-902b-4c8b-a380-7947ad8a96bc",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "user should be active (not deleted)",
                            "fullTitle": "api-user User Controller Tests user should be active (not deleted)",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await User.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.deletedDate).to.be.null;\nexpect(user.deletedBy).to.be.null;",
                            "err": {},
                            "uuid": "0b763536-cef5-4888-830c-b2c0d97c9f19",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should convert user Guids",
                            "fullTitle": "api-user User Controller Tests should convert user Guids",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = {\n  contactGuid: 'SomeRandomString',\n  managerGuid: 'SomeRandomString',\n  signatureGuid: 'SomeRandomString',\n  languageGuid: 'SomeRandomString',\n  createdBy: 'SomeRandomString',\n};\nconst convertedUser1 = userCtrl.convertUserGuids(testUser);\nconst convertedUser2 = userCtrl.convertUserGuids({contactGuid: testUser.contactGuid});\n[convertedUser1, convertedUser2].forEach(u => {\n  Object.keys(u).forEach(key => {\n    expect(u[key]).to.eq(u[key].toLowerCase());\n  });\n});",
                            "err": {},
                            "uuid": "df06aa16-f73d-417d-9c3a-9e0ea560d836",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if username is taken",
                            "fullTitle": "api-user User Controller Tests should check if username is taken",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[0].contactGuid;\nconst username = testUsers[0].userName;\nlet isTaken = await userCtrl.isUserNameTaken(username);\nexpect(isTaken).to.be.true;\nisTaken = await userCtrl.isUserNameTaken(username.toUpperCase());\nexpect(isTaken).to.be.true;\n// with un-taken username\nisTaken = await userCtrl.isUserNameTaken('someUnusedUsernameTest');\nexpect(isTaken).to.be.false;\n// with Guid provided\nisTaken = await userCtrl.isUserNameTaken(username, userGuid);\nexpect(isTaken).to.be.false;",
                            "err": {},
                            "uuid": "0914555b-204c-4dd5-ba0a-f51ba142f0df",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Controller Tests should update user",
                            "timedOut": false,
                            "duration": 140,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[3].contactGuid;\nconst data = {\n  firstName: 'test first updated',\n  middleName: 'up mid name',\n  lastName: 'up last name',\n  email: 'updated@email.com',\n  title: 'updatedTitle',\n  division: 'up division',\n  department: 'upd department',\n  costCenter: 'upd cost center',\n  location: 'upd loc',\n  phone: '094-242-5654 ext 4',\n  managerGuid: testUsers[0].contactGuid,\n  address1: '654 Some ave',\n  address2: 'apt 589',\n  city: 'New London',\n  state: 'OR',\n  zip: '98353',\n  country: 'USM',\n  languageGuid: testUsers[0].languageGuid,\n  timezone: 'PFT-09',\n  locale: 'en-US',\n  cField1: 'upd cust field 1',\n  cField2: 'upd cust field 2',\n  active: false,\n  userName: 'updatedUserName',\n  password: 'updatedPwd',\n  signatureGuid: '36b65bca-140d-41b9-ac8b-89b50c86e7ba'\n};\n// get current password\nlet user = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst previousPwd = user.password;\n// update\nuser = await userCtrl.updateUser(userGuid, data);\nconst {contactGuid, contactId, createdBy, createdDate, deletedBy, deletedDate, modifiedBy, modifiedDate, ntId, reportsToGuid, lastUpdate, ...updatedUser} = user;\nconst {password, active, ...testData} = data;\nexpect(updatedUser).to.deep.eq(testData);\n// should be inactive/deleted\nexpect(!!deletedBy).to.be.true;\nexpect(!!deletedDate).to.be.true;\n// should change the password\nuser = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst updatedPwd = user.password;\nexpect(previousPwd).to.not.eq(updatedPwd);",
                            "err": {},
                            "uuid": "33d81173-eeff-47d0-a1af-f74d987768f9",
                            "parentUUID": "77e29565-7f71-4d1d-98e4-2eb35fbe8bdd",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "0fcedbf7-90c2-4efa-a6a1-b0fb47a377f2",
                        "0c8b81af-ad21-438e-8358-1a2d0848f1ab",
                        "e605b062-4334-4389-98ec-09a4665ee197",
                        "dbdf6823-53d9-4803-983e-ae9733edfa64",
                        "6ed3d1a5-16a5-4b41-9ef0-cf7c3ccb69a0",
                        "c64bf851-8afa-4eba-b590-e8fba9175532",
                        "1d70cb80-1c00-4012-a0e9-f6138d687e49",
                        "017c1cbe-902b-4c8b-a380-7947ad8a96bc",
                        "0b763536-cef5-4888-830c-b2c0d97c9f19",
                        "df06aa16-f73d-417d-9c3a-9e0ea560d836",
                        "0914555b-204c-4dd5-ba0a-f51ba142f0df",
                        "33d81173-eeff-47d0-a1af-f74d987768f9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 382,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "50068de6-4dbe-4b52-8086-cb7bb8a1cfc1",
                    "title": "api-user Group Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/groupHandler.test.js",
                    "file": "/test/groupHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 131,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nconst userCtl = new UserController({tenantId: tenant})\nrestrictedUser = await userCtl.insertUser({firstName: 'groups test',\n                                           lastName: 'groups test',\n                                           userName: 'restricted user for groups permission test',\n                                           password: 'password'})",
                            "err": {},
                            "uuid": "e2c3c6ca-790c-4f23-a2fd-d7049f98d4ba",
                            "parentUUID": "50068de6-4dbe-4b52-8086-cb7bb8a1cfc1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 41,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenant, 'User');\nawait User.query().hardDelete(restrictedUser)",
                            "err": {},
                            "uuid": "a4ee19fe-88db-4fc5-9e71-08d914702496",
                            "parentUUID": "50068de6-4dbe-4b52-8086-cb7bb8a1cfc1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "68c0980f-000a-441f-9c84-2ce15b07ee8c",
                            "title": "crud tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a group",
                                    "fullTitle": "api-user Group Handler Tests crud tests should create a group",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nconst group = response.body\nexpect(response.statusCode).to.equal(200)\nexpect(group.groupGuid).to.match(/([-\\w]+)/)\nexpect(group.groupName).to.equal(groupName);\n// cleanup\nreq.body = [group.groupGuid]\nconst foo = await handlers.deleteGroups(req, mockRes)",
                                    "err": {},
                                    "uuid": "fa45bb48-17a5-40fd-aae0-8d8544c122ab",
                                    "parentUUID": "68c0980f-000a-441f-9c84-2ce15b07ee8c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fa45bb48-17a5-40fd-aae0-8d8544c122ab"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "2cbf3731-044c-4df7-9c71-3636692424bf",
                            "title": "permission tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "admin should have manage/edit permissions per group",
                                    "fullTitle": "api-user Group Handler Tests permission tests admin should have manage/edit permissions per group",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = testConfig.tenantOne.adminUser.sid;\nconst response = await handlers.getGroups(req,mockRes);\nconst groups = response.body.results;\ngroups.forEach( group => {\n  expect(group.canManage).to.equal(true);\n  expect(group.canEdit).to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "05077321-b4d6-4a22-94b8-c4b214da8f88",
                                    "parentUUID": "2cbf3731-044c-4df7-9c71-3636692424bf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to create a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to create a group",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid;\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "56bae4ea-21ec-4fcf-95ce-ea47696bc0c3",
                                    "parentUUID": "2cbf3731-044c-4df7-9c71-3636692424bf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to list groups members",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to list groups members",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.groupGuid = group.groupGuid\nconst response = await handlers.getGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "c423ad54-cc97-477a-8c72-4fd39352f29c",
                                    "parentUUID": "2cbf3731-044c-4df7-9c71-3636692424bf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to delete a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to delete a group",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.body = [ group.groupGuid ]\nconst response = await handlers.deleteGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "21c0d386-ccc7-41a7-a9b4-236f774f061c",
                                    "parentUUID": "2cbf3731-044c-4df7-9c71-3636692424bf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "05077321-b4d6-4a22-94b8-c4b214da8f88",
                                "56bae4ea-21ec-4fcf-95ce-ea47696bc0c3",
                                "c423ad54-cc97-477a-8c72-4fd39352f29c",
                                "21c0d386-ccc7-41a7-a9b4-236f774f061c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 42,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                    "title": "api-user User Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/userHandler.test.js",
                    "file": "/test/userHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenantId = testConfig.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: testConfig.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nUserAuth = await models.getModel(tenantId, 'UserAuth');",
                            "err": {},
                            "uuid": "ad2ebfcd-fbdd-4d19-90aa-41609fe71b73",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": true,
                            "skipped": false
                        },
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "api-user User Handler Tests \"before each\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req = await mocks.req();\nmockRes = await mocks.mockResponse();\ntestUser = (await User.query().limit(1))[0];\ntestUser.userName  = (await UserAuth.query().select('userName').where('contactGuid', testUser.contactGuid))[0].userName;",
                            "err": {},
                            "uuid": "47761012-ea80-4d47-8694-bd5633d20160",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 38,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await UserAuth.query().delete().where('userName', 'like', 'user_to_delete%');\nawait User.query().delete().where('firstName', 'like', 'user_to_delete%');",
                            "err": {},
                            "uuid": "a02c9409-403a-4829-a616-88ebe21fdd45",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should get a list of users",
                            "fullTitle": "api-user User Handler Tests should get a list of users",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getUsers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.results).to.exist;\nexpect(response.body.results.length).to.be.gt(0);\nexpect(response.body.total).to.exist;\nexpect(response.body.total).to.be.gt(0);",
                            "err": {},
                            "uuid": "a8a4debd-b1f6-44f4-a961-14f135746755",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return a list of managers",
                            "fullTitle": "api-user User Handler Tests should return a list of managers",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getManagers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.length).to.be.gt(0);",
                            "err": {},
                            "uuid": "0bf59a3b-5fd4-40ff-be1c-2a038ec6b76e",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get single user",
                            "fullTitle": "api-user User Handler Tests should get single user",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.params.userGuid = testUser.contactGuid;\nconst response = await handlers.getUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.delegate).to.exist;",
                            "err": {},
                            "uuid": "43bf977f-6173-4bdb-8c10-981d7b1aabe1",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if userName is taken",
                            "fullTitle": "api-user User Handler Tests should check if userName is taken",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.query.userName = testUser.userName;\nreq.query.userGuid = testUser.contactGuid;\nconst response = await handlers.checkIfUserNameIsTaken(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.isTaken).to.exist;\nexpect(response.body.isTaken).to.be.false;",
                            "err": {},
                            "uuid": "64a1f416-2e35-41bc-ba4d-b1f0ab463f8d",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not insert user without data",
                            "fullTitle": "api-user User Handler Tests should not insert user without data",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;\nexpect(response.body.password).to.exist;",
                            "err": {},
                            "uuid": "8c954553-ff00-4b37-aca7-460017060591",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert user",
                            "fullTitle": "api-user User Handler Tests should insert user",
                            "timedOut": false,
                            "duration": 109,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = {\n  firstName: 'user_to_delete',\n  lastName: 'lastName',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n  email: 'random@test.com',\n  locale: 'en-US',\n  timezone: 'Pacific',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n}\nconst response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;",
                            "err": {},
                            "uuid": "7c85fd35-f3ab-4b89-9996-4ebf8e22f4d5",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should register a user",
                            "fullTitle": "api-user User Handler Tests should register a user",
                            "timedOut": false,
                            "duration": 2849,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userName = 'register_user' + Math.random().toString(36).substring(7) // random string\nreq.body = {\n  firstName: 'register_user',\n  lastName: 'lastName',\n  userName,\n  email: 'random@test.com',\n  // locale: 'en-US',\n  timezone: 'US/Central',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n  tenant: tenantId\n}\nreq.bypassRecaptcha = true\nconst response = await handlers.registerUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\n// search by username to verify user record was created\nconst userCtrl = new UserController(session);\nconst result = await userCtrl.getUsers({search: userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = userName);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "83be9f49-2e44-4ea6-a732-c0d188a5db31",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not update user with empty data",
                            "fullTitle": "api-user User Handler Tests should not update user with empty data",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = '{}';\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;",
                            "err": {},
                            "uuid": "f7fdb143-d9d9-4f2f-922f-8ac4fef10f7d",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Handler Tests should update user",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let userToDelete = (await UserAuth.query().where('userName', 'like', 'user_to_delete%').limit(1))[0];\nif (!userToDelete) {\n  req.body = {\n    firstName: 'user_to_delete',\n    lastName: 'lastName',\n    userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n    email: 'random@test.com',\n    locale: 'en-US',\n    timezone: 'Pacific',\n    languageGuid: testUser.languageGuid,\n    password: 'randomPwd',\n  }\n  userToDelete  = (await handlers.insertUser(req, mockRes)).body;\n}\nconst data = {\n  firstName: 'user_to_delete',\n  lastName: 'updated last',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7),\n  email: 'random@test.updated',\n  locale: 'en-US',\n  timezone: 'Atlantic/New York',\n  languageGuid: testUser.languageGuid,\n};\nreq.params.userGuid = userToDelete.contactGuid;\nreq.body = JSON.stringify(data);\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.eq(data.firstName);\nexpect(response.body.timezone).to.exist;\nexpect(response.body.timezone).to.eq(data.timezone);",
                            "err": {},
                            "uuid": "b798716e-be5a-4bdc-baa9-1e41b6c64e1d",
                            "parentUUID": "3c3c4cf9-3538-47b6-a33f-09d77173dea1",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a8a4debd-b1f6-44f4-a961-14f135746755",
                        "0bf59a3b-5fd4-40ff-be1c-2a038ec6b76e",
                        "43bf977f-6173-4bdb-8c10-981d7b1aabe1",
                        "64a1f416-2e35-41bc-ba4d-b1f0ab463f8d",
                        "8c954553-ff00-4b37-aca7-460017060591",
                        "7c85fd35-f3ab-4b89-9996-4ebf8e22f4d5",
                        "83be9f49-2e44-4ea6-a732-c0d188a5db31",
                        "f7fdb143-d9d9-4f2f-922f-8ac4fef10f7d",
                        "b798716e-be5a-4bdc-baa9-1e41b6c64e1d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 3014,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "d71eb2c2-9f42-43f6-89fb-919eb971b251",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "9bd26970-8d5b-4087-a0df-51ce42909b4d",
                    "title": "Config Processor ENV.CONFIG tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                    "file": "/test/integration/config.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor ENV.CONFIG tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 37,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nprocess.env.TESTING = true;\n\nconfigHelper = require(\"../../src/helpers/config\")\nredis = require(\"integrify-libs\").redisClient\npubSubClient = redis.makeCopy();\npubSubClient.subscribe('updateEnvConfig')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n//let deletes = await redis.delAsync(['ENV.CONFIG']);\n//console.log(deletes)",
                            "err": {},
                            "uuid": "a1694192-e804-455f-a2e8-df79abdb62d9",
                            "parentUUID": "9bd26970-8d5b-4087-a0df-51ce42909b4d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8175c979-0580-4833-8e55-108d0a8337a2",
                            "title": "config helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                            "file": "/test/integration/config.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "4bd28a3e-b07c-4051-a8b7-59cba8f4bb45",
                                    "title": "setConfig",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                                    "file": "/test/integration/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a local config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a local config file",
                                            "timedOut": false,
                                            "duration": 332,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nconsole.log(\"wow\",storedConfig)\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\n//expect(storedConfig.cacheTime).to.exist;\nawait delay(300)",
                                            "err": {},
                                            "uuid": "20729283-1447-4c29-92cd-177eea96677e",
                                            "parentUUID": "4bd28a3e-b07c-4051-a8b7-59cba8f4bb45",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateEnvConfig pub/sub channel",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should get a message on the updateEnvConfig pub/sub channel",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(pubSubMessage.channel).to.equal('updateEnvConfig');",
                                            "err": {},
                                            "uuid": "1e89e95b-4242-4fa2-a5a9-075279abe493",
                                            "parentUUID": "4bd28a3e-b07c-4051-a8b7-59cba8f4bb45",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a S3 config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a S3 config file",
                                            "timedOut": false,
                                            "duration": 21,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.USE_S3_FILES=\"true\"\nawait configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\nexpect(storedConfig.cacheTime).to.exist;",
                                            "err": {},
                                            "uuid": "19cbcded-6e7c-4054-b05f-b0f9b70d97ec",
                                            "parentUUID": "4bd28a3e-b07c-4051-a8b7-59cba8f4bb45",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "20729283-1447-4c29-92cd-177eea96677e",
                                        "1e89e95b-4242-4fa2-a5a9-075279abe493",
                                        "19cbcded-6e7c-4054-b05f-b0f9b70d97ec"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 353,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b996b98e-92d7-482f-b779-d04d5088a517",
                    "title": "Config Processor Event Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                    "file": "/test/integration/configEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5091,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName]);\n\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"updateEnvConfig\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateDataInstances\", {\n  update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n  update: new Date().toISOString(),\n  tenantId: 'integrifydev'\n      });\n\n\nforkedProcessor = await configStreamConsumer.monitorStream(tenant);\nawait delay(5000);",
                            "err": {},
                            "uuid": "0ce8481c-0c25-4e5d-80bc-9f3525dfa826",
                            "parentUUID": "b996b98e-92d7-482f-b779-d04d5088a517",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "9b9fbc0b-fe5c-4b50-8876-e60cbbe0d9a6",
                            "parentUUID": "b996b98e-92d7-482f-b779-d04d5088a517",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cba13513-933e-4e4e-89c8-3967d46013c7",
                            "title": "config stream processor",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                            "file": "/test/integration/configEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "373167aa-c675-4a8f-bbe3-bef39d7dcf5e",
                                    "title": "reads from config stream",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                                    "file": "/test/integration/configEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Config Processor Event Handler Tests config stream processor reads from config stream should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "9298411f-1ba1-49b1-85be-15c759e88f6f",
                                            "parentUUID": "373167aa-c675-4a8f-bbe3-bef39d7dcf5e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "9298411f-1ba1-49b1-85be-15c759e88f6f"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a3d759ea-4492-4659-96e9-56d5e6f047ab",
                    "title": "Config data instance tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                    "file": "/test/integration/dataInstance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config data instance tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateDataInstances')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n  \nlet deletes = await redis.delAsync(['data_instances']);",
                            "err": {},
                            "uuid": "04a3b8d3-f47e-4586-9f87-793808361c3d",
                            "parentUUID": "a3d759ea-4492-4659-96e9-56d5e6f047ab",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a98db5f3-889a-4210-b623-73875230c31f",
                            "title": "dataInstasnce helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                            "file": "/test/integration/dataInstance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "748e3c7f-5cc8-44f4-ad4e-c8391cb2b006",
                                    "title": "updateDataInstances",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                                    "file": "/test/integration/dataInstance.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set data_instances in redis",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should set data_instances in redis",
                                            "timedOut": false,
                                            "duration": 816,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await dataInstanceHelper.updateDataInstances();\nlet storedDataInstances = await redis.getAsync('data_instances')\nexpect(storedDataInstances).to.exist;\nstoredDataInstances = JSON.parse(storedDataInstances);\nexpect(Object.keys(storedDataInstances).length).to.be.gt(0);",
                                            "err": {},
                                            "uuid": "3bfa2f74-5cfe-4cf0-843d-e9bd57be7606",
                                            "parentUUID": "748e3c7f-5cc8-44f4-ad4e-c8391cb2b006",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateDataInstances pub/sub channel",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should get a message on the updateDataInstances pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateDataInstances');",
                                            "err": {},
                                            "uuid": "c55dd747-1c20-4084-8f58-9f75b2d3ce24",
                                            "parentUUID": "748e3c7f-5cc8-44f4-ad4e-c8391cb2b006",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "3bfa2f74-5cfe-4cf0-843d-e9bd57be7606",
                                        "c55dd747-1c20-4084-8f58-9f75b2d3ce24"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1117,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0a3c9d7b-2ad3-4bbc-92dd-9cec9e9a891e",
                    "title": "Config license tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                    "file": "/test/integration/license.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config license tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateLicenses')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});",
                            "err": {},
                            "uuid": "685df9a1-58c7-4e33-9d2c-c125e2673da7",
                            "parentUUID": "0a3c9d7b-2ad3-4bbc-92dd-9cec9e9a891e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d98d2ef3-62f3-4c5b-8a83-976dafc39b65",
                            "title": "license helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                            "file": "/test/integration/license.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "dc724896-7a37-4a9a-b801-1b818056487f",
                                    "title": "updateLicenses",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                                    "file": "/test/integration/license.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set licenses and x.license in redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set licenses and x.license in redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 395,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses()\nlet storedLicences = await redis.hgetallAsync('licenses')\nlicenseId = Object.keys(storedLicences)[0]\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "6ea8eca5-7430-4268-9f16-2c69e6a4acfe",
                                            "parentUUID": "dc724896-7a37-4a9a-b801-1b818056487f",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateLicenses pub/sub channel",
                                            "fullTitle": "Config license tests license helper updateLicenses should get a message on the updateLicenses pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateLicenses');",
                                            "err": {},
                                            "uuid": "8336f8c5-abe9-4611-8335-928d3af7e668",
                                            "parentUUID": "dc724896-7a37-4a9a-b801-1b818056487f",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set license redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set license redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 146,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses(licenseId)\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "e00b3930-24d0-4140-bb31-2948b28b5ba3",
                                            "parentUUID": "dc724896-7a37-4a9a-b801-1b818056487f",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "6ea8eca5-7430-4268-9f16-2c69e6a4acfe",
                                        "8336f8c5-abe9-4611-8335-928d3af7e668",
                                        "e00b3930-24d0-4140-bb31-2948b28b5ba3"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 842,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "fabe803e-788b-4119-ac8a-d2f37c9a1a81",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "06d484d0-bee9-4c8f-882d-e75df3092443",
                    "title": "Core Service biztimes",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                    "file": "/test/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service biztimes \"before all\" hook",
                            "timedOut": false,
                            "duration": 21,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nbiz = { \"Active\": false, \"EndHour\": 17, \"EndMinute\": 0, \"SID\": test_data.biz_sid, \"StartHour\": 9, \"StartMinute\": 15, \"Weekday\": 0 }",
                            "err": {},
                            "uuid": "51565fff-1ca9-4f75-a290-f85c3c0dff78",
                            "parentUUID": "06d484d0-bee9-4c8f-882d-e75df3092443",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "90d0b476-6439-4a2b-8608-5e2bfebd3f78",
                            "title": "GET /biztimes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets biztimes",
                                    "fullTitle": "Core Service biztimes GET /biztimes gets biztimes",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/biztimes')\n    .set('Authorization', 'Bearer ' + token)\n// biz = res.body.Items[0];\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a680ef7c-2bc2-4003-80ac-c9b18ca48fc9",
                                    "parentUUID": "90d0b476-6439-4a2b-8608-5e2bfebd3f78",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a680ef7c-2bc2-4003-80ac-c9b18ca48fc9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d599d75d-7df4-49ab-8890-0b1beafe22e0",
                            "title": "POST /biztimes/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "if (biz.EndHour < 24)\n    biz.EndHour = biz.EndHour + 1\nelse\n    biz.EndHour = biz.EndHour - 23",
                                    "err": {},
                                    "uuid": "3d019a9f-97be-4466-ab50-41f2bb94fdcc",
                                    "parentUUID": "d599d75d-7df4-49ab-8890-0b1beafe22e0",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves biztimes",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save saves biztimes",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/biztimes/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(biz)\n//console.log(res.body)\nexpect(res.status).to.equal(200);\nexpect(res.body.EndHour).to.exist;",
                                    "err": {},
                                    "uuid": "a726ecf7-6c9c-4855-87ac-52a3e42ebe13",
                                    "parentUUID": "d599d75d-7df4-49ab-8890-0b1beafe22e0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a726ecf7-6c9c-4855-87ac-52a3e42ebe13"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "7bce5d17-81d7-469c-915e-0d92aa67dff7",
                    "title": "Core Service category",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                    "file": "/test/category.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service category \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "d95f7aea-e41f-40d0-a704-349dfdc0a797",
                            "parentUUID": "7bce5d17-81d7-469c-915e-0d92aa67dff7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fbd07a3e-16e5-4276-ae5e-b716b11f5397",
                            "title": "GET tree/{object_type}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET tree/{object_type} core-service",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = res.body[0]\n            coreResult = res.body;\n            //console.log(res.body)\n            expect(res.status).to.equal(200);\n            // expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "5c990c62-5c20-4ed8-b2bf-9b5d8e39906d",
                                    "parentUUID": "fbd07a3e-16e5-4276-ae5e-b716b11f5397",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c990c62-5c20-4ed8-b2bf-9b5d8e39906d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 51,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "987ec997-bf87-475d-b952-f2546926e15d",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/category/' + category.id)\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "adca40c3-b21c-49e9-b9a0-446f38c943e6",
                                    "parentUUID": "987ec997-bf87-475d-b952-f2546926e15d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "adca40c3-b21c-49e9-b9a0-446f38c943e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8e163282-a7d9-4170-a995-e78dac4a93da",
                            "title": "POST save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category POST save core-service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/category/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(category_save)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.CreatedDate).to.exist;\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "a492b2e3-282f-4124-ada3-15528f72b170",
                                    "parentUUID": "8e163282-a7d9-4170-a995-e78dac4a93da",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a492b2e3-282f-4124-ada3-15528f72b170"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "64344014-5aa6-483f-a581-52e8dce9acfa",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service category GET {sid}/delete \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//Fetch category sid to delete\n            let resp = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = resp.body;\n            category.forEach(element => {\n                //console.log(element.Name);\n                if (element.Name == 'Qa Auto')\n                    cate_delete = element;\n            });",
                                    "err": {},
                                    "uuid": "fb2b2052-2d72-4443-b031-39ba943501a1",
                                    "parentUUID": "64344014-5aa6-483f-a581-52e8dce9acfa",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid}/delete core-service",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/category/' + cate_delete.id + '/delete')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(0);\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "89c506c3-8458-4d2d-a5ac-2599cb285d8b",
                                    "parentUUID": "64344014-5aa6-483f-a581-52e8dce9acfa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "89c506c3-8458-4d2d-a5ac-2599cb285d8b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "6d9fd4d5-1383-46b0-9c28-f5a38b821aff",
                    "title": "Core Service contacts",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                    "file": "/test/contact.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service contacts \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "2125a954-2879-482a-9285-01d912ad7faa",
                            "parentUUID": "6d9fd4d5-1383-46b0-9c28-f5a38b821aff",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2bc3a05f-a144-4619-a8ed-4af4281e2e5c",
                            "title": "GET /contacts/current",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/current core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/current/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;\n                  currentUser_sid = res.body.SID",
                                    "err": {},
                                    "uuid": "14584210-cd6b-4796-8699-f014c378c6fe",
                                    "parentUUID": "2bc3a05f-a144-4619-a8ed-4af4281e2e5c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "14584210-cd6b-4796-8699-f014c378c6fe"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b7ffe6e4-f009-497e-8d2e-5b72cc7c2d1f",
                            "title": "GET detail/{contact_sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET detail/{contact_sid} core-service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/detail/' + currentUser_sid)\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;",
                                    "err": {},
                                    "uuid": "c5c83d7a-3d5c-44fe-b483-62cbd9897274",
                                    "parentUUID": "b7ffe6e4-f009-497e-8d2e-5b72cc7c2d1f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c5c83d7a-3d5c-44fe-b483-62cbd9897274"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "67547720-5223-4745-8ac8-800df34e27fa",
                            "title": "GET {contact_sid}/attributes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/attributes core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/attributes')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \nexpect(res.body[0]).to.exist;\nexpect(res.body[1]).to.exist;\nexpect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "3764eddd-f85d-4b52-86b5-028f42b0062e",
                                    "parentUUID": "67547720-5223-4745-8ac8-800df34e27fa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3764eddd-f85d-4b52-86b5-028f42b0062e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "bd56a41b-b3fa-4d9c-8879-42639ad1a89e",
                            "title": "GET {contact_sid}/delegations",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/delegations core-service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/delegations')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\n// //console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "3226224e-27f0-4a17-9ad9-57b2434204cd",
                                    "parentUUID": "bd56a41b-b3fa-4d9c-8879-42639ad1a89e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3226224e-27f0-4a17-9ad9-57b2434204cd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1464e95e-3e1d-4d1c-a5bc-07d46c09e0af",
                            "title": "GET byuserid/{user_id}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET byuserid/{user_id} core-service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/byuserid/iApprove')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\n//console.log(res.body)\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \n// expect(res.body[0]).to.exist;\n// expect(res.body[1]).to.exist;\n// expect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "708dc973-7911-4dbf-ba9a-cec1cc230e9d",
                                    "parentUUID": "1464e95e-3e1d-4d1c-a5bc-07d46c09e0af",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "708dc973-7911-4dbf-ba9a-cec1cc230e9d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "75dc6b8d-664c-4cbb-b5f8-9c36222469dd",
                            "title": "GET /contacts/search",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET /contacts/search core-service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search?search=System')\n      .set('Authorization', 'Bearer ' + token);\n// //console.log(res.body)\ncoreResult = res.body;\n//console.log(res.body);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "e0552368-9411-457d-9328-3b2c5cf415cc",
                                    "parentUUID": "75dc6b8d-664c-4cbb-b5f8-9c36222469dd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e0552368-9411-457d-9328-3b2c5cf415cc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ecca76ac-723f-4342-928d-4f812fb5ba64",
                            "title": "GET /contact/search/quick/name",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contact/search/quick/name core service",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search/quick/name/script/?start=0&count=20&sort=Name&dir=ASC&filter=System')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "f5751344-7853-47fb-9d23-7484bd31bd2c",
                                    "parentUUID": "ecca76ac-723f-4342-928d-4f812fb5ba64",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f5751344-7853-47fb-9d23-7484bd31bd2c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a1e002f4-5a04-4209-aceb-e07fd861f0cf",
                            "title": "GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/contactdetailsearch/0/10/LAST_NAME/ASC/script/')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\nexpect(res.status).to.equal(200);\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "a48a3087-b63c-4c46-b321-9b14dd9c1cba",
                                    "parentUUID": "a1e002f4-5a04-4209-aceb-e07fd861f0cf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a48a3087-b63c-4c46-b321-9b14dd9c1cba"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d90c9648-08b3-4205-a0d5-75c944c5a263",
                            "title": "POST /contacts/save | update",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service",
                                    "timedOut": false,
                                    "duration": 347,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/contacts/save')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\ninsertedSid = res.text\n//console.log(res.text)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "08e3332c-9e07-470b-b493-9fac4e5520f0",
                                    "parentUUID": "d90c9648-08b3-4205-a0d5-75c944c5a263",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service update",
                                    "timedOut": false,
                                    "duration": 348,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/update')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "3ae7c4eb-cf64-4df9-9e01-241a4387c948",
                                    "parentUUID": "d90c9648-08b3-4205-a0d5-75c944c5a263",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "08e3332c-9e07-470b-b493-9fac4e5520f0",
                                "3ae7c4eb-cf64-4df9-9e01-241a4387c948"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 695,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b32ed1b3-ef48-40ad-8adc-57647bbc6b7d",
                            "title": "POST /contacts/replace POST",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "replace_user = [[\"OldContactSid\", insertedSid], [\"ReplacementContactSid\", insertedSid2], [\"RecipientReplace\", \"No\"], [\"OpenTaskReplace\", \"No\"], [\"GroupReplace\", \"No\"], [\"RoleReplace\", \"No\"], [\"DelegationReplace\", \"No\"]]",
                                    "err": {},
                                    "uuid": "398450c6-ad44-40f1-b58a-6d0d379f611f",
                                    "parentUUID": "b32ed1b3-ef48-40ad-8adc-57647bbc6b7d",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST core service update",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/replace ')\n      .set('Authorization', 'Bearer ' + token)\n      .send(replace_user);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "9f051ccf-292c-44d3-88d2-ceb03052763b",
                                    "parentUUID": "b32ed1b3-ef48-40ad-8adc-57647bbc6b7d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9f051ccf-292c-44d3-88d2-ceb03052763b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "4a572626-6378-4cca-ba30-cf2e67290f4f",
                    "title": "Core service dbconns",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/dbconn.test.js",
                    "file": "/test/dbconn.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core service dbconns \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "28eef700-b085-4e94-a835-75046883ce4a",
                            "parentUUID": "4a572626-6378-4cca-ba30-cf2e67290f4f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "it should GET all dbconns",
                            "fullTitle": "Core service dbconns it should GET all dbconns",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                            "err": {},
                            "uuid": "6e6773e0-3e5d-4215-98ac-8ee719c4e3f3",
                            "parentUUID": "4a572626-6378-4cca-ba30-cf2e67290f4f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should add a test dbconn",
                            "fullTitle": "Core service dbconns it should add a test dbconn",
                            "timedOut": false,
                            "duration": 24,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/save/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\n  .send(testDbConn)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.be.a.guid()\ntestDbConnSid = res.text\n// verify testDbConn comes back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.be.greaterThan(-1);",
                            "err": {},
                            "uuid": "b52680cb-e0f4-4fda-8890-80a5024274d0",
                            "parentUUID": "4a572626-6378-4cca-ba30-cf2e67290f4f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should delete the test dbconn",
                            "fullTitle": "Core service dbconns it should delete the test dbconn",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/delete/script/')\n  .set('Authorization', 'Bearer ' + token)\n  .send([testDbConnSid])\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n// verify testDbConn does not come back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.equal(-1);",
                            "err": {},
                            "uuid": "259c6267-fc14-4726-9a5c-bba6b35456fa",
                            "parentUUID": "4a572626-6378-4cca-ba30-cf2e67290f4f",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "6e6773e0-3e5d-4215-98ac-8ee719c4e3f3",
                        "b52680cb-e0f4-4fda-8890-80a5024274d0",
                        "259c6267-fc14-4726-9a5c-bba6b35456fa"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 57,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "6f731590-d627-4913-a31d-cda45e5755c6",
                    "title": "Core Service groups",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                    "file": "/test/group.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service groups \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "1a6e2f6e-8585-4fc3-9194-be8fe6ffc650",
                            "parentUUID": "6f731590-d627-4913-a31d-cda45e5755c6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "966caa65-02d2-40aa-a0c4-9cd2541128bb",
                            "title": "POST /group/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /group/save core service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .post('/groups/save/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                        .send({ \"Name\": \"Qa Auto\", \"Description\": \"This is an automation\", \"Dynamic\": 0 })\n                  new_groupSid = res.text;\n                  expect(res.status).to.equal(200);\n                  expect(res.text).to.exist;\n                  expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "d2a37680-15b5-493f-8a88-a6b07dfae0ef",
                                    "parentUUID": "966caa65-02d2-40aa-a0c4-9cd2541128bb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d2a37680-15b5-493f-8a88-a6b07dfae0ef"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ef7a339d-dd39-429d-b43b-72c6835f7a0b",
                            "title": "POST /groups/members/{groupSid}/add",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/add core service",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/add') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5739b106-2a56-41cf-a6ec-2c47eab28bb9",
                                    "parentUUID": "ef7a339d-dd39-429d-b43b-72c6835f7a0b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5739b106-2a56-41cf-a6ec-2c47eab28bb9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "882adb3b-05e9-4894-8832-6b7ed4bd68d8",
                            "title": "POST /groups/members/{groupSid}/remove",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/remove core service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/remove') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "912ff6ed-4119-4708-909d-cba647d4bcee",
                                    "parentUUID": "882adb3b-05e9-4894-8832-6b7ed4bd68d8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "912ff6ed-4119-4708-909d-cba647d4bcee"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e53e260c-66f9-44cc-839d-7154bfd0ff3e",
                            "title": "GET /groups​/{sid}​/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service groups GET /groups​/{sid}​/delete core-service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + new_groupSid + '/delete')\n      .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('true')",
                                    "err": {},
                                    "uuid": "c2b8cf76-ce8e-43a1-a2a6-df8259033fea",
                                    "parentUUID": "e53e260c-66f9-44cc-839d-7154bfd0ff3e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c2b8cf76-ce8e-43a1-a2a6-df8259033fea"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e7f1085c-3a07-4ae4-80d9-0534a9b7c967",
                            "title": "GET /groups/list/simple",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/list/simple core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/simple')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Administrators');",
                                    "err": {},
                                    "uuid": "f2668e80-d875-4aa1-8357-0baf4c3cf3f9",
                                    "parentUUID": "e7f1085c-3a07-4ae4-80d9-0534a9b7c967",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f2668e80-d875-4aa1-8357-0baf4c3cf3f9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5137fe1b-6860-41c6-a0e1-eded37e36509",
                            "title": "GET /groups/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/{sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.SID).to.exist\nexpect(res.body.SID).to.be.guid\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "09258cdf-bc3f-4cda-94ce-ab8be36aeced",
                                    "parentUUID": "5137fe1b-6860-41c6-a0e1-eded37e36509",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "09258cdf-bc3f-4cda-94ce-ab8be36aeced"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8b4b6075-39b9-4593-a41d-f9b81cc5fe20",
                            "title": "GET /groups/listroleassociation/{groupSid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listroleassociation/{groupSid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listroleassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('System Administrators');\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "f3d42272-298b-46de-99c7-f7c96a4b9f6b",
                                    "parentUUID": "8b4b6075-39b9-4593-a41d-f9b81cc5fe20",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f3d42272-298b-46de-99c7-f7c96a4b9f6b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8322ff0e-bfee-4445-9a5d-1a56e0e7da56",
                            "title": "GET /groups/select/{contact_sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/select/{contact_sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/select/' + system_user)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "eabf382b-9e75-4b02-a96b-5f82e7ba1a88",
                                    "parentUUID": "8322ff0e-bfee-4445-9a5d-1a56e0e7da56",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "eabf382b-9e75-4b02-a96b-5f82e7ba1a88"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0a7746b6-1738-4565-b3c0-6c4105d3ddd2",
                            "title": "GET /groups​/nondynamic​/list​/simple",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups​/nondynamic​/list​/simple core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/nondynamic/list/simple')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "16239363-c029-40c8-a28e-044cbc98473e",
                                    "parentUUID": "0a7746b6-1738-4565-b3c0-6c4105d3ddd2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "16239363-c029-40c8-a28e-044cbc98473e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2d6355bb-0711-4033-b253-dda91d81b353",
                            "title": "​GET /groups​/listmembers​/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/listmembers​/{sid} core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listmembers/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "ed95cc43-5d05-4897-95a8-24ca6230692a",
                                    "parentUUID": "2d6355bb-0711-4033-b253-dda91d81b353",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ed95cc43-5d05-4897-95a8-24ca6230692a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c8c88325-d3b7-4585-a79e-a160c3efa820",
                            "title": "​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir} core service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "a2f03a21-b77d-4101-92c3-1876476efea2",
                                    "parentUUID": "c8c88325-d3b7-4585-a79e-a160c3efa820",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a2f03a21-b77d-4101-92c3-1876476efea2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6abe6510-d98f-48e8-8731-d8a05e7d3042",
                            "title": "GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listbypage/' + groupSid + '/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "cde096d6-f510-4d3d-b616-33cb2d1bbd2b",
                                    "parentUUID": "6abe6510-d98f-48e8-8731-d8a05e7d3042",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cde096d6-f510-4d3d-b616-33cb2d1bbd2b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "81d53924-bf8d-4b38-a4f8-8e212cfd7238",
                            "title": "GET /groups/listprocessassociation/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listprocessassociation/{sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listprocessassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "025a15e7-7a02-463e-9031-71255ff627a7",
                                    "parentUUID": "81d53924-bf8d-4b38-a4f8-8e212cfd7238",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "025a15e7-7a02-463e-9031-71255ff627a7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "28b210c7-730d-40f3-968c-8a847716efe7",
                    "title": "Core Service Members",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/member.test.js",
                    "file": "/test/member.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Members \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "90867ea1-ec31-48bd-a121-c14de62a54b8",
                            "parentUUID": "28b210c7-730d-40f3-968c-8a847716efe7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a529f51c-d31b-4ab2-9def-096dd4d6bc9f",
                            "title": "{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/member.test.js",
                            "file": "/test/member.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Members {page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/member/0/10/Name/Asc/script/?filter=&include=3')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "351e270a-b567-4b04-9736-5fd2818f7c7e",
                                    "parentUUID": "a529f51c-d31b-4ab2-9def-096dd4d6bc9f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "351e270a-b567-4b04-9736-5fd2818f7c7e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "ca29b3d6-f427-4e00-92b5-3bae255f8c98",
                    "title": "Core Service myTasks",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/myTasks.test.js",
                    "file": "/test/myTasks.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service myTasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "ab5b4682-8c9c-4a25-a649-66aaeb8755fa",
                            "parentUUID": "ca29b3d6-f427-4e00-92b5-3bae255f8c98",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "df5f0dda-b007-458c-a8a8-6d902747f4bd",
                            "title": "GEt {status}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/myTasks.test.js",
                            "file": "/test/myTasks.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service myTasks GEt {status}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 216,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/myTasks/status/0/10/Name/Asc')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;",
                                    "err": {},
                                    "uuid": "3396a1d2-3b04-4c82-a76e-ac347e3c250c",
                                    "parentUUID": "df5f0dda-b007-458c-a8a8-6d902747f4bd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3396a1d2-3b04-4c82-a76e-ac347e3c250c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 216,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "41cc4271-9170-424b-803e-925a9df753b3",
                    "title": "Core Service powerForm",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                    "file": "/test/powerform.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service powerForm \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\n// //console.log(test_data);\nnew_role = '{ \"Name\": \"Qatest\", \"ExtendedDescription\": \"qa automated\", \"OwnerSID\":' + test_data.object_sid + ', \"OwnerType\": 2 }'\npowerform = {\n    CategorySID: test_data.category_sid,\n    Name: \"test\",\n    PowerFormType: \"0\",\n    Version: 1\n}\n// { \"ID\": 9999, \"Mode\": 2, \"ObjectType\": 1, \"RoleSID\": test_data.role_sid, \"SID\": \"90645d40-9de6-48b1-b689-0a610ef1d716\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 3, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"4711a8f4-68be-4772-b389-0a610ef1d7fe\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 4, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"b1e03457-e202-4a99-a389-0a610ef1d79d\", \"Permissions\": 0 }, { \"ID\": 0, \"Mode\": 5, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"f221751c-ba9f-4b19-9708-1f22372dffde\", \"Permissions\": 1023 }",
                            "err": {},
                            "uuid": "92b5fa7b-4691-4d7d-95ed-936634dbba7f",
                            "parentUUID": "41cc4271-9170-424b-803e-925a9df753b3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b48a1f75-80a7-4ee7-bcac-ca43f420358d",
                            "title": "POST /Powerform/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm POST /Powerform/save core service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/powerform/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(powerform)\nexpect(res.status).to.equal(200);\nsid = res.body.SID\n//console.log(sid)",
                                    "err": {},
                                    "uuid": "4c7d7080-2948-4eb0-84d3-a98ebdfd0043",
                                    "parentUUID": "b48a1f75-80a7-4ee7-bcac-ca43f420358d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4c7d7080-2948-4eb0-84d3-a98ebdfd0043"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fce5ff2a-f3cc-40bd-8ed7-95611c450580",
                            "title": "GET /Powerform/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid} core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid)\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a22ac168-b57d-46fc-9cd8-4c4830976c29",
                                    "parentUUID": "fce5ff2a-f3cc-40bd-8ed7-95611c450580",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a22ac168-b57d-46fc-9cd8-4c4830976c29"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7d0d064e-a2c7-4ab1-afc3-0db6836d989d",
                            "title": "GET /Powerform/{sid}/detail",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "df0482b5-fbc3-4d34-955b-6d24793ae8db",
                                    "parentUUID": "7d0d064e-a2c7-4ab1-afc3-0db6836d989d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "df0482b5-fbc3-4d34-955b-6d24793ae8db"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b2b14ffc-accc-4aa1-a417-2ce89fed2d19",
                            "title": "GET /Powerform/{sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/delete core service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "617f1ae5-27d3-4f96-9a38-84b93e573875",
                                    "parentUUID": "b2b14ffc-accc-4aa1-a417-2ce89fed2d19",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "617f1ae5-27d3-4f96-9a38-84b93e573875"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "a2c0b350-5262-4b3c-b7ae-c959a2becaa8",
                    "title": "Core Service Process",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                    "file": "/test/process.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken();\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nprc = { Name: new Date().toISOString(), Description: \"Qa Automation\", CategorySID: test_data.category_sid }",
                            "err": {},
                            "uuid": "a0e86600-fe9d-44ec-b14b-5580e1de29a2",
                            "parentUUID": "a2c0b350-5262-4b3c-b7ae-c959a2becaa8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4ec35945-1c8e-4767-a242-1297a7fd311e",
                            "title": "POST /process​/create|delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service",
                                    "timedOut": false,
                                    "duration": 124,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/process/create')\n    .set('Authorization', 'Bearer ' + token)\n    .send(prc)\np1 = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "881c2828-a8b1-43d4-9722-5181287a480f",
                                    "parentUUID": "4ec35945-1c8e-4767-a242-1297a7fd311e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | Delete",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service | Delete",
                                    "timedOut": false,
                                    "duration": 182,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/process/' + p1 + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nconsole.log(res);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "0528609e-e808-4758-a6b3-46cb96f3b85c",
                                    "parentUUID": "4ec35945-1c8e-4767-a242-1297a7fd311e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "881c2828-a8b1-43d4-9722-5181287a480f",
                                "0528609e-e808-4758-a6b3-46cb96f3b85c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 306,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "736d0c69-b104-44ef-bbec-0fe37d8324bf",
                            "title": "GET /process/{sid}/copy",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /process/{sid}/copy core service",
                                    "timedOut": false,
                                    "duration": 867,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/' + test_data.process_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            expect(res.status).to.equal(200);\n            //delete copied process\n            let del = await chai.request(newUrlBase)\n                .get('/process/' + res.text + '/delete')\n                .set('Authorization', 'Bearer ' + token)\n            expect(del.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "33b11bed-817b-4966-94c1-c84dd61d92ab",
                                    "parentUUID": "736d0c69-b104-44ef-bbec-0fe37d8324bf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "33b11bed-817b-4966-94c1-c84dd61d92ab"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 867,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3e0dc66b-5e6c-4eab-9bd0-7d796447d9ce",
                            "title": "GET /processes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes core service",
                                    "timedOut": false,
                                    "duration": 69,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "cba72180-c741-4e84-aa99-f4e417cb4364",
                                    "parentUUID": "3e0dc66b-5e6c-4eab-9bd0-7d796447d9ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cba72180-c741-4e84-aa99-f4e417cb4364"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 69,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "78660f2f-6b47-4d61-be7b-0b59a20f0013",
                            "title": "GET /processes/{SID}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{SID} core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "44c69266-1ec1-43e8-943b-89d08e8a1661",
                                    "parentUUID": "78660f2f-6b47-4d61-be7b-0b59a20f0013",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "44c69266-1ec1-43e8-943b-89d08e8a1661"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ada38b7a-4532-4f8b-b2fd-02f47132db30",
                            "title": "GET /processes/{sid}/detail",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2a92efae-7da2-4eac-9f4b-72bbf8ef5f8e",
                                    "parentUUID": "ada38b7a-4532-4f8b-b2fd-02f47132db30",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2a92efae-7da2-4eac-9f4b-72bbf8ef5f8e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2e6e4a69-d68b-4bed-82b9-435d0bda1c53",
                            "title": "GET /processes/{sid}/name",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/name core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/name')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "c71af227-55de-48c7-ad9b-5fb20f13cb42",
                                    "parentUUID": "2e6e4a69-d68b-4bed-82b9-435d0bda1c53",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c71af227-55de-48c7-ad9b-5fb20f13cb42"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "551bee6d-efd1-4bd8-a7d0-1b9b332b07a9",
                            "title": "GET ​/processes​/{sid}​/summary",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET ​/processes​/{sid}​/summary core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/summary')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "6ad156a5-08e1-4516-951b-1638dc2651df",
                                    "parentUUID": "551bee6d-efd1-4bd8-a7d0-1b9b332b07a9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6ad156a5-08e1-4516-951b-1638dc2651df"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "458d3fc2-cba9-42ef-8ca8-f39bef2afd74",
                            "title": "​GET /processes​/{process_sid}​/tasks",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process ​GET /processes​/{process_sid}​/tasks core service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ccee36ef-3b82-430f-ac33-77b7a2020085",
                                    "parentUUID": "458d3fc2-cba9-42ef-8ca8-f39bef2afd74",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ccee36ef-3b82-430f-ac33-77b7a2020085"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6821d413-a35a-4ad3-94a1-a4ff1f189f88",
                            "title": "GET /processes/{process_sid}/tasks/{task_sid}/rules",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{process_sid}/tasks/{task_sid}/rules core service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "75c8e578-8607-4657-b968-7ba27c245735",
                                    "parentUUID": "6821d413-a35a-4ad3-94a1-a4ff1f189f88",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "75c8e578-8607-4657-b968-7ba27c245735"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "71f0ccb6-0331-450b-a8db-836c41f18280",
                            "title": "POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete ",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/update/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(rule)\nsids.one = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "3120c67d-a94a-4fbe-9e02-3e0574df3444",
                                    "parentUUID": "71f0ccb6-0331-450b-a8db-836c41f18280",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | reorder",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service | reorder",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let reorder = { \"SID\": sids.two, \"Ordinal\": 2, \"ConditionType\": 1, \"MatchGuid\": \"\", \"RecipientSID\": null, \"DestinationAction\": \"0\" }\nlet res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/reorder/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(reorder)\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2c58702c-7541-4721-8587-ab5378643002",
                                    "parentUUID": "71f0ccb6-0331-450b-a8db-836c41f18280",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3120c67d-a94a-4fbe-9e02-3e0574df3444",
                                "2c58702c-7541-4721-8587-ab5378643002"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 44,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "2ba09d8b-a71e-4689-8738-10063ec99e63",
                    "title": "Core Service processes/tasks",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                    "file": "/test/processTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service processes/tasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nrecipient = [{ \"BaseObjectSID\": \"\", \"ContactType\": 2, \"ReferenceObjectSID\": \"\", \"SID\": test_data.contact_sid }]",
                            "err": {},
                            "uuid": "7337f506-73ed-4a5e-8451-9ca981048279",
                            "parentUUID": "2ba09d8b-a71e-4689-8738-10063ec99e63",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7a9adf02-477a-4aab-8873-407f5b4d8027",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.task_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "70aa6b2a-f6de-4a32-a5b2-bfb716847124",
                                    "parentUUID": "7a9adf02-477a-4aab-8873-407f5b4d8027",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "70aa6b2a-f6de-4a32-a5b2-bfb716847124"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "369f6031-4726-4d2a-9d71-8b418098526a",
                            "title": "GET {task_sid}/copy",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/copy core-service",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/tasks/' + test_data.task_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            //console.log(res.body);\n            expect(res.status).to.equal(200);\n            expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "a60de57d-0ab9-4b60-bf02-e26a60b8dc37",
                                    "parentUUID": "369f6031-4726-4d2a-9d71-8b418098526a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a60de57d-0ab9-4b60-bf02-e26a60b8dc37"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 43,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ff53c67c-3349-49c6-bfec-e34d9d33b088",
                            "title": "GET {task_sid}/notification",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification core-service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "53b4ea72-60b7-405b-b717-32945477d10a",
                                    "parentUUID": "ff53c67c-3349-49c6-bfec-e34d9d33b088",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "53b4ea72-60b7-405b-b717-32945477d10a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ec090687-3d2e-40ac-987c-41ec11a1a2bc",
                            "title": "GET {task_sid}/notification/restore",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/restore core-service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/restore')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "ae1e1180-c313-47e2-b9a3-8135177b3145",
                                    "parentUUID": "ec090687-3d2e-40ac-987c-41ec11a1a2bc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ae1e1180-c313-47e2-b9a3-8135177b3145"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fbadf3a9-05e1-4649-94a2-3ad191aab96e",
                            "title": "GET {task_sid}/notification/{enabledisable}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/{enabledisable} core-service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/enabled')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "06b49fed-5f82-4d01-82f3-6f8931fefb61",
                                    "parentUUID": "fbadf3a9-05e1-4649-94a2-3ad191aab96e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "06b49fed-5f82-4d01-82f3-6f8931fefb61"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f738b04f-44de-4a38-ab91-28cae8fc1488",
                            "title": "POST notification/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST notification/save core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/notification/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(notification)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "c04c4a6d-98a8-457b-b48a-9afde1a56b9b",
                                    "parentUUID": "f738b04f-44de-4a38-ab91-28cae8fc1488",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c04c4a6d-98a8-457b-b48a-9afde1a56b9b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "dd57bffb-c38e-4158-a5aa-0d78e46c88db",
                            "title": "GET {task_sid}/notification/advancedsettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/advancedsettings core-service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/advancesettings')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "2d1b0c40-43c8-4545-9531-bbe811199e65",
                                    "parentUUID": "dd57bffb-c38e-4158-a5aa-0d78e46c88db",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2d1b0c40-43c8-4545-9531-bbe811199e65"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "20dede15-402e-4303-bdb1-f4c09f62df7b",
                            "title": "GET {task_sid}/recipients",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipients core-service",
                                    "timedOut": false,
                                    "duration": 37,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "5b54959d-0664-491f-8bcf-e269339f5d60",
                                    "parentUUID": "20dede15-402e-4303-bdb1-f4c09f62df7b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5b54959d-0664-491f-8bcf-e269339f5d60"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 37,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e22e9cdf-244f-4479-8b0c-baf0ccbf41e5",
                            "title": "POST {task_sid}/recipients/add",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/add core-service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/add')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "30db0378-7469-4fb2-b21d-8ba2e2e1b0fe",
                                    "parentUUID": "e22e9cdf-244f-4479-8b0c-baf0ccbf41e5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "30db0378-7469-4fb2-b21d-8ba2e2e1b0fe"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "46895dab-c2f6-4935-a85f-97a9f9d87597",
                            "title": "POST {task_sid}/recipients/remove",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/remove core-service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/remove')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "e9abacf3-7695-44ca-adaf-802391bb46f0",
                                    "parentUUID": "46895dab-c2f6-4935-a85f-97a9f9d87597",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e9abacf3-7695-44ca-adaf-802391bb46f0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7baa0c09-1d1b-4e9e-a90e-bf7cae1eb53d",
                            "title": "GET {task_sid}/recipsettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipsettings core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipsettings/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n// expect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "a13bdbc1-e515-481c-b8b9-1fc8f24ca93c",
                                    "parentUUID": "7baa0c09-1d1b-4e9e-a90e-bf7cae1eb53d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a13bdbc1-e515-481c-b8b9-1fc8f24ca93c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "67f2fd66-ac85-4998-88a4-de862d754850",
                            "title": "GET task_sid}/recipients/dynamic",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET task_sid}/recipients/dynamic core-service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/dynamic/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body.TotalItemCnt).to.exist;",
                                    "err": {},
                                    "uuid": "48f097f6-acc1-4555-8169-fd796281e208",
                                    "parentUUID": "67f2fd66-ac85-4998-88a4-de862d754850",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "48f097f6-acc1-4555-8169-fd796281e208"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "24f885a0-1f72-41df-b8ad-84c3fe6f802d",
                    "title": "Core Service systemmessages",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                    "file": "/test/systemmessage.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service systemmessages \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "d9b47a52-ee0f-41ae-baa7-841f7014beda",
                            "parentUUID": "24f885a0-1f72-41df-b8ad-84c3fe6f802d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "386f89b3-9afc-4536-bb63-287a774514ce",
                            "title": "POST /systemmessages/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service systemmessages POST /systemmessages/save it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/systemmessages/save/script/')\n      .set('Authorization', 'Bearer ' + token)\n      .send(testMsg)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\n\n// verify systemMessage is in the list\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.MessageBody == testMsg.MessageBody);\nexpect(idx).to.be.greaterThan(-1);",
                                    "err": {},
                                    "uuid": "558fe526-7f83-4efe-80c4-6a6a9e77c1d3",
                                    "parentUUID": "386f89b3-9afc-4536-bb63-287a774514ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "558fe526-7f83-4efe-80c4-6a6a9e77c1d3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6de768ae-3ae9-4550-943b-853d7c774102",
                            "title": "GET /systemmessages/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET all systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/list it should GET all systemmessages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "48195341-e2c4-4a39-9282-861a8f105755",
                                    "parentUUID": "6de768ae-3ae9-4550-943b-853d7c774102",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "48195341-e2c4-4a39-9282-861a8f105755"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "bf682c9b-51ac-4e79-994d-53ba3ae9b036",
                            "title": "GET /systemmessages/active/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET active systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/active/list it should GET active systemmessages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/active/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "4091c2c9-d8ff-432d-9bd6-66cf61026967",
                                    "parentUUID": "bf682c9b-51ac-4e79-994d-53ba3ae9b036",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4091c2c9-d8ff-432d-9bd6-66cf61026967"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "dbca6d4e-aa6b-4994-8675-00ba97d01ee1",
                            "title": "/systemmessages/{sid}}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET system message by SID",
                                    "fullTitle": "Core Service systemmessages /systemmessages/{sid}} it should GET system message by SID",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n             .get('/systemmessages/list/script/')\n             .set('Authorization', 'Bearer ' + token);\n       \n             expect(res.status).to.equal(200);\n             expect(res.body.Items).to.exist;\n             const testSystemMsgSID = res.body.Items[0].SID;\n             res = await chai.request(newUrlBase)\n             .get(`/systemmessages/${testSystemMsgSID}/script/`)\n             .set('Authorization', 'Bearer ' + token);\n             expect(res.status).to.equal(200);\n             expect(res.body.SID).to.equal(testSystemMsgSID);",
                                    "err": {},
                                    "uuid": "bf7fcc31-1ba3-4aaf-a51a-73d05636e3b7",
                                    "parentUUID": "dbca6d4e-aa6b-4994-8675-00ba97d01ee1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bf7fcc31-1ba3-4aaf-a51a-73d05636e3b7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f648b607-20be-4f65-9bca-1593729bed98",
                            "title": "GET /systemmessages/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should DELETE system message",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/delete it should DELETE system message",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n      \nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst testSystemMsgSID = res.body.Items[0].SID;\nres = await chai.request(newUrlBase)\n  .post('/systemmessages/delete/script/') \n  .set('Authorization', 'Bearer ' + token)\n  .send([testSystemMsgSID])\n        \nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n        \n// verify that system message is not in the list anymore\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testSystemMsgSID);\nexpect(idx).to.equal(-1);",
                                    "err": {},
                                    "uuid": "c4dad7b9-9e81-42fd-b31f-e4064258421c",
                                    "parentUUID": "f648b607-20be-4f65-9bca-1593729bed98",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c4dad7b9-9e81-42fd-b31f-e4064258421c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "908c9c36-ae82-4c7c-b83b-cfba289ce99c",
                    "title": "Core Service System Process",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemProcess.test.js",
                    "file": "/test/systemProcess.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service System Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "92120503-19cd-4d04-9084-4981d2ba5f42",
                            "parentUUID": "908c9c36-ae82-4c7c-b83b-cfba289ce99c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "844a10bd-46fb-4eb4-a711-84ec3e249836",
                            "title": "GET S/SystemProcess/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemProcess.test.js",
                            "file": "/test/systemProcess.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service System Process GET S/SystemProcess/list it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/SystemProcess/list')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "ec3f3f2c-d099-4306-948f-e0f047b6efb9",
                                    "parentUUID": "844a10bd-46fb-4eb4-a711-84ec3e249836",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ec3f3f2c-d099-4306-948f-e0f047b6efb9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "2dcdc5c5-43be-4b84-8f71-cc1794f75b03",
                    "title": "Core Service system Settings",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemSettings.test.js",
                    "file": "/test/systemSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service system Settings \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "5097bf7b-8810-49bd-801f-a5d163878e2c",
                            "parentUUID": "2dcdc5c5-43be-4b84-8f71-cc1794f75b03",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5b1477c6-fa7c-4af5-babd-323f00f06c2d",
                            "title": "GET /systemsettings/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemSettings.test.js",
                            "file": "/test/systemSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service system Settings GET /systemsettings/list core-service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/systemsettings/list/script/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n// expect(res.body.InstanceSID).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "de20ddbb-2ca8-4634-858d-8aba7b44aa4e",
                                    "parentUUID": "5b1477c6-fa7c-4af5-babd-323f00f06c2d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "de20ddbb-2ca8-4634-858d-8aba7b44aa4e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "16fc117e-051a-44eb-be9e-34d4095eeca9",
                    "title": "Core Service Tabs",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                    "file": "/test/tabs.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Tabs \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "f79d9b76-1acc-4ba5-800e-9ead9a4ec073",
                            "parentUUID": "16fc117e-051a-44eb-be9e-34d4095eeca9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "98055646-eaa4-4dcb-b3b4-df60e64be431",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service Tabs GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "b5388f19-b183-4e3f-b63b-bee2e09316d1",
                                    "parentUUID": "98055646-eaa4-4dcb-b3b4-df60e64be431",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b5388f19-b183-4e3f-b63b-bee2e09316d1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "60087e16-c3a8-449f-bd5f-334491cb3cf2",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service ",
                                    "fullTitle": "Core Service Tabs GET {sid}/delete core-service ",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "c1dea538-e9d0-4bb2-9d98-606abf2c8f28",
                                    "parentUUID": "60087e16-c3a8-449f-bd5f-334491cb3cf2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c1dea538-e9d0-4bb2-9d98-606abf2c8f28"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "2204c1ff-ea39-4c86-9748-7af77c755a2e",
                    "title": "Core Service Utilities",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                    "file": "/test/utilities.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Utilities \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "71b5c1d9-a65d-4635-8698-b6f3a5edac59",
                            "parentUUID": "2204c1ff-ea39-4c86-9748-7af77c755a2e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "090659af-9084-42cf-bc0a-558cb36fd75e",
                            "title": "locale",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities locale core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/Utilities/locales/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            // expect(res.text).to.exist;\n            // expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "0f560a2c-4b20-48c0-b765-aa801cf8053f",
                                    "parentUUID": "090659af-9084-42cf-bc0a-558cb36fd75e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0f560a2c-4b20-48c0-b765-aa801cf8053f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a8d666de-139e-4027-9ecb-0d0f80b0f4cf",
                            "title": "GET /Utilities/timezone",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/timezone core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/timezone')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Etc/GMT+12');",
                                    "err": {},
                                    "uuid": "27f67658-e01b-4109-ba8f-d8d96068ed01",
                                    "parentUUID": "a8d666de-139e-4027-9ecb-0d0f80b0f4cf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "27f67658-e01b-4109-ba8f-d8d96068ed01"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 100000
        },
        {
            "uuid": "f2640012-b3c7-4e34-a770-bb453994a2d3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "ef4bfdde-c64d-4e1b-bfdf-8ecf121a055a",
                    "title": "Integrify Libs JWT Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                    "file": "/test/integration/auth/jwt.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "22b3da7c-aba1-48b0-b8b5-6811a3363af1",
                            "parentUUID": "ef4bfdde-c64d-4e1b-bfdf-8ecf121a055a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0f7e549c-ca2c-499d-aefe-71cd0d459945",
                            "title": "getSystemToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a system token",
                                    "fullTitle": "Integrify Libs JWT Tests getSystemToken should return a system token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet token = await jwt.getSystemToken(process.env.INTEGRIFY_ENV_TOKEN, tenant)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "a4d2c108-bba4-4338-a16a-8547320fb497",
                                    "parentUUID": "0f7e549c-ca2c-499d-aefe-71cd0d459945",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a4d2c108-bba4-4338-a16a-8547320fb497"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f5abc9ab-07fd-4647-9eae-0f726d733908",
                            "title": "createRefreshToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests createRefreshToken should return a refresh token",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(refreshToken).to.exist;\nexpect(exists !== null).to.be.true",
                                    "err": {},
                                    "uuid": "3105d647-d6a1-48c0-a0fd-0676ad566d10",
                                    "parentUUID": "f5abc9ab-07fd-4647-9eae-0f726d733908",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3105d647-d6a1-48c0-a0fd-0676ad566d10"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2aa4e164-c155-4896-87a9-74d7f9a844cb",
                            "title": "verifyRefreshToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for the non-expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return true for the non-expired token",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.exist",
                                    "err": {},
                                    "uuid": "9757048f-2b8a-473c-b1d9-7486249918c9",
                                    "parentUUID": "2aa4e164-c155-4896-87a9-74d7f9a844cb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for the expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return false for the expired token",
                                    "timedOut": false,
                                    "duration": 5005,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, options)\nawait delay(5000);\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.be.false\nexists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(exists === null).to.be.true",
                                    "err": {},
                                    "uuid": "33d3a1c7-709b-40f5-829f-94b6b597ae05",
                                    "parentUUID": "2aa4e164-c155-4896-87a9-74d7f9a844cb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9757048f-2b8a-473c-b1d9-7486249918c9",
                                "33d3a1c7-709b-40f5-829f-94b6b597ae05"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5007,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "860264ac-5819-488e-854d-86d3d804b517",
                            "title": "issueJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests issueJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 15\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\n//let exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\noptions.expiresInAmount = 5\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "c03ce0eb-81f1-4d0c-be51-aa6afd21811d",
                                    "parentUUID": "860264ac-5819-488e-854d-86d3d804b517",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c03ce0eb-81f1-4d0c-be51-aa6afd21811d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "39d70be8-07f8-4784-bc03-b09c9685bf26",
                            "title": "verifyJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nlet verified = jwt.verifyJwt(token, options);\nexpect(verified).to.exist",
                                    "err": {},
                                    "uuid": "95d7e7a9-55ac-4508-8a2a-dd7138715345",
                                    "parentUUID": "39d70be8-07f8-4784-bc03-b09c9685bf26",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail for an expired JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should fail for an expired JWT",
                                    "timedOut": false,
                                    "duration": 5008,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000);\nlet verified, error;\ntry {\n   verified = await jwt.verifyJwt(token, options)\n} catch(e) {\n    error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\nexpect(verified).to.not.exist",
                                    "err": {},
                                    "uuid": "cd961ad3-22e3-4b6c-8b96-60409a97d7c2",
                                    "parentUUID": "39d70be8-07f8-4784-bc03-b09c9685bf26",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "95d7e7a9-55ac-4508-8a2a-dd7138715345",
                                "cd961ad3-22e3-4b6c-8b96-60409a97d7c2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5013,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a47ce3ae-7fff-4ffa-a85b-f4748ab2b31c",
                            "title": "renewJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an expired token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should return a new JWT using a valid refresh token and an expired token",
                                    "timedOut": false,
                                    "duration": 3011,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(3000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntoken = await jwt.renewJwt(token,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "60909c22-992f-4eef-9721-b44d596c40e2",
                                    "parentUUID": "a47ce3ae-7fff-4ffa-a85b-f4748ab2b31c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail to return a new JWT using a invalid refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should fail to return a new JWT using a invalid refresh token",
                                    "timedOut": false,
                                    "duration": 5008,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 2;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntry {\n    token = await jwt.renewJwt(token,refreshToken, options)\n} catch(e) {\n    error = e\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")",
                                    "err": {},
                                    "uuid": "eec89eb1-5fea-46d4-bcaa-05a531901b86",
                                    "parentUUID": "a47ce3ae-7fff-4ffa-a85b-f4748ab2b31c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "60909c22-992f-4eef-9721-b44d596c40e2",
                                "eec89eb1-5fea-46d4-bcaa-05a531901b86"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8019,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bf5bd27f-66ff-48ed-90a4-64e5b2efdd90",
                            "title": "reIssueJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an Contact",
                                    "fullTitle": "Integrify Libs JWT Tests reIssueJwt should return a new JWT using a valid refresh token and an Contact",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\ntoken = await jwt.reIssueJwt(Contact,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "bc1d9fdf-249a-41d3-983e-fd8ba7dbc85d",
                                    "parentUUID": "bf5bd27f-66ff-48ed-90a4-64e5b2efdd90",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bc1d9fdf-249a-41d3-983e-fd8ba7dbc85d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "37641bb4-f446-408e-a8d3-eb220143e5c0",
                    "title": "Integrify Libs Config Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                    "file": "/test/integration/config/config.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4f0c2283-60b2-4e0e-909e-069c55582525",
                            "title": "Config",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                            "file": "/test/integration/config/config.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Config Tests Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "472673c1-f290-4765-aefa-ab5502727328",
                                    "parentUUID": "4f0c2283-60b2-4e0e-909e-069c55582525",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "47678716-9fab-404f-8c2f-2afde5e678fb",
                                    "title": "get a config from redis",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Config Tests Config get a config from redis should have config.mongo",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(config.mongo).to.exist;\n                //expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "79fb20f9-2b45-4f73-92d4-dc06b76254b4",
                                            "parentUUID": "47678716-9fab-404f-8c2f-2afde5e678fb",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "79fb20f9-2b45-4f73-92d4-dc06b76254b4"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 0,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "55639ad0-39a2-48ce-afb5-774f22f352c2",
                                    "title": "log the latest git commit",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return the lates git commit",
                                            "fullTitle": "Integrify Libs Config Tests Config log the latest git commit should return the lates git commit",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let commit = Config.logRunningGitCommit('integrify-libs', true);\nexpect(commit).to.exist;\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "b5a630e6-dc83-4018-af2a-dbc6151dadaf",
                                            "parentUUID": "55639ad0-39a2-48ce-afb5-774f22f352c2",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "b5a630e6-dc83-4018-af2a-dbc6151dadaf"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d8b31000-af7f-4dc9-ab0e-313f05fa27ce",
                    "title": "Integrify Libs Logger Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                    "file": "/test/integration/logger/logger.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2622044c-f748-4de2-8212-99398253848e",
                            "title": "Logger",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                            "file": "/test/integration/logger/logger.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Logger Tests Logger \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "39bc942b-ba5f-46cb-b713-1d2b3071d005",
                                    "parentUUID": "2622044c-f748-4de2-8212-99398253848e",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "f15e5ead-7da7-445d-a56d-6626337f71a8",
                                    "title": "info",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                                    "file": "/test/integration/logger/logger.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect log a message",
                                            "fullTitle": "Integrify Libs Logger Tests Logger info should connect log a message",
                                            "timedOut": false,
                                            "duration": 6,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "logger.info(config.tenantOne.tenantId);\n  \nexpect(logger).to.exist;\n              \n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "97a0470b-0517-4730-9264-abf7d5116bf6",
                                            "parentUUID": "f15e5ead-7da7-445d-a56d-6626337f71a8",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "97a0470b-0517-4730-9264-abf7d5116bf6"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 6,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d86279ef-8b41-44e1-8b8f-33f047df9faa",
                    "title": "Integrify Libs Parse JWT Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                    "file": "/test/integration/middleware/parseJWT.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Parse JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);        config = await Config.getConfig()\nContact = {\n    contactSid: \"1234\",\n    userName: \"testuser\",\n    tenant: config.test.tenantOne.tenantId,\n    email: \"test@test.com\",\n    name: \"Test User\"\n}\nrefreshTokenPayload = {userName: Contact.userName, contactSid: Contact.contactSid}",
                            "err": {},
                            "uuid": "4889ae18-2d22-4a6d-bf47-126519ec4ff9",
                            "parentUUID": "d86279ef-8b41-44e1-8b8f-33f047df9faa",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e24be453-ffad-4f23-a495-6102c9c8c0bc",
                            "title": "parse token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": config.test.tenantOne.tenantId});\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "d5d69147-b2ad-44bf-8bc7-6d85e8b45305",
                                    "parentUUID": "e24be453-ffad-4f23-a495-6102c9c8c0bc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d5d69147-b2ad-44bf-8bc7-6d85e8b45305"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "2da57552-05ea-46d3-8009-86418894138e",
                            "title": "auto refresh and parse token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests auto refresh and parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 20026,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(Contact.tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": Contact.tenant, expiresIn:1});\n           \nawait delay(20000)\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\n          \nlet mockRes = await mocks.mockResponse();\n\nawait parseJWT(req, mockRes, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "f7b965a5-da97-49ad-a9b7-80f239d1e521",
                                    "parentUUID": "2da57552-05ea-46d3-8009-86418894138e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f7b965a5-da97-49ad-a9b7-80f239d1e521"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20026,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "6545f503-2ace-4322-9111-95e8d8c59964",
                            "title": "use system token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests use system token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let req = {headers: {\"integrify-system-token\": config.test.tenantOne.tenantId + \" \" +  process.env.INTEGRIFY_ENV_TOKEN}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"d8c469c3-f781-4179-a09c-6d148885fb30\");\nexpect(req.oauth.profile.user_name).to.equal(\"Integrify\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "7d7b5d94-0258-4d29-a239-928800cab870",
                                    "parentUUID": "6545f503-2ace-4322-9111-95e8d8c59964",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7d7b5d94-0258-4d29-a239-928800cab870"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "10b2e72a-fdb8-449c-8840-96e04b107c89",
                    "title": "Integrify Libs Mongeese Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                    "file": "/test/integration/mongeese/db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "de1aaf05-2f69-4d7f-bf10-69350ccdac22",
                            "title": "Mongeese",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                            "file": "/test/integration/mongeese/db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Mongeese Tests Mongeese \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconsole.log(config)\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "be699ce9-ab2e-4195-b2a0-f02a54b0807e",
                                    "parentUUID": "de1aaf05-2f69-4d7f-bf10-69350ccdac22",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "22d50db6-0120-41a5-837e-5a7d314b1e42",
                                    "title": "mongoConn",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                                    "file": "/test/integration/mongeese/db.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect to mongo based on a tenant id",
                                            "fullTitle": "Integrify Libs Mongeese Tests Mongeese mongoConn should connect to mongo based on a tenant id",
                                            "timedOut": false,
                                            "duration": 11,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const tenantId = await config.tenantOne.tenantId;\nvar db = await mongeese.getConn(tenantId);\n    \nexpect(db).to.exist;\nexpect(db.name).to.equal(tenantId);\nexpect(db.readyState).to.equal(2);\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "0914875a-b559-4676-97b4-c14013ae3872",
                                            "parentUUID": "22d50db6-0120-41a5-837e-5a7d314b1e42",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "0914875a-b559-4676-97b4-c14013ae3872"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 11,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "bace3fa1-5bd7-46fe-8455-15c08e3f7515",
                    "title": "Integrify Libs Permissions Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                    "file": "/test/integration/permissions/permissions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet config = await Config.getConfig();\nconfig = config.test;\nsession = {user_sid: config.tenantOne.adminUser.sid.toLowerCase(), user_name: config.tenantOne.adminUser.userName, tenant: config.tenantOne.tenantId }\nlet deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\nconsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                            "err": {},
                            "uuid": "1293915e-8877-4fe8-b3f1-a44f68bf566b",
                            "parentUUID": "bace3fa1-5bd7-46fe-8455-15c08e3f7515",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);",
                            "err": {},
                            "uuid": "e86e6128-a560-474b-88b0-13be3b9aa218",
                            "parentUUID": "bace3fa1-5bd7-46fe-8455-15c08e3f7515",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e5993ecb-63e2-43d3-9c6b-b6c0c976f89e",
                            "title": "currentUserPermssions",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests currentUserPermssions should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 357,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.currentUserPermissions(session);\nlet cached =  await redis.getAsync([`${session.tenant}.permissions.${session.user_sid}`]);\ncached = JSON.parse(cached)\nexpect(perms).length.to.be.gt(0);\nexpect(cached.length).to.equal(perms.length)",
                                    "err": {},
                                    "uuid": "86c78f01-3551-4ce9-a899-05f23dbf2a89",
                                    "parentUUID": "e5993ecb-63e2-43d3-9c6b-b6c0c976f89e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "86c78f01-3551-4ce9-a899-05f23dbf2a89"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 357,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "26eba4a3-6cd9-48a9-bf0f-6b6d1bc10314",
                            "title": "isSysAdmin",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests isSysAdmin should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.exist",
                                    "err": {},
                                    "uuid": "c9674aca-272c-4d9c-b2fa-b9c56a761040",
                                    "parentUUID": "26eba4a3-6cd9-48a9-bf0f-6b6d1bc10314",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c9674aca-272c-4d9c-b2fa-b9c56a761040"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                            "title": "hasPermissions",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for sysAdmin permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for sysAdmin permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.sysAdmin);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\", \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "fda1e1ed-17a1-4827-91f8-f79a87438351",
                                    "parentUUID": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for System scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for System scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.systemScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\",\n    \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.be.undefined",
                                    "err": {},
                                    "uuid": "2d84f278-79e8-4acf-b4c6-9661ef217840",
                                    "parentUUID": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for category scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for category scoped permissions",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.categoryScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    mocks.categoryScoped[0].ownerSid,\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "98d16000-becc-48ea-af19-2e67cc320afd",
                                    "parentUUID": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for Object scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for Object scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "03c20117-49d4-48ef-b8b6-348cfc28af68",
                                    "parentUUID": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for Object scoped permissions with wrong publish status",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for Object scoped permissions with wrong publish status",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    \"production\");\nexpect(hasPerms).to.be.false;",
                                    "err": {},
                                    "uuid": "ba5b1463-4237-481c-bcaf-359b9d59a1b0",
                                    "parentUUID": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for bogus permission type",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for bogus permission type",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edizt',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.false;\nhasPerms = await permissions.hasPermissions(session,\n    'holiday',\n    'viewconfig');\nexpect(hasPerms).to.be.false",
                                    "err": {},
                                    "uuid": "fe124af1-ef88-473e-a96e-48bb086d7a4d",
                                    "parentUUID": "29b6e93d-c928-4d6f-8cb3-cf1176bd9387",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fda1e1ed-17a1-4827-91f8-f79a87438351",
                                "2d84f278-79e8-4acf-b4c6-9661ef217840",
                                "98d16000-becc-48ea-af19-2e67cc320afd",
                                "03c20117-49d4-48ef-b8b6-348cfc28af68",
                                "ba5b1463-4237-481c-bcaf-359b9d59a1b0",
                                "fe124af1-ef88-473e-a96e-48bb086d7a4d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e2866ed7-6023-4dcc-8032-93e2137cf17c",
                    "title": "Integrify Libs Contact Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/contacts.test.js",
                    "file": "/test/integration/sqldb/contacts.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/contacts.test.js",
                            "file": "/test/integration/sqldb/contacts.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "4910f146-40ff-400d-a77f-4eddf27d261f",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContact",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ContactModel = await model.getModel(config.test.tenantOne.tenantId, 'Contact')\n//console.dir(ContactModel)\nlet results = await ContactModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleContactGuid = results[0].contactGuid\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContact(sampleContactGuid);\nexpect(Contact).to.exist;\nexpect(Contact.contactGuid).equal(sampleContactGuid)",
                                    "err": {},
                                    "uuid": "78cf4a78-0299-4f37-8712-7e75d367c8b3",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getContactByUserName",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContactByUserName",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nlet sampleUserName = user.userName\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContactByUserName(sampleUserName);\nexpect(Contact).to.exist;\nexpect(Contact.userName).equal(sampleUserName)",
                                    "err": {},
                                    "uuid": "37d3cd7b-b9a3-415d-aca6-b17c6b58e7ad",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should searchContacts",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should searchContacts",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne)\n            let Contacts = await contactController.searchContacts({'auth.userName': 'iApprov', firstName: 'Sys', lastName: 'S'});\n            expect(Contacts[0]).to.exist;\n            expect(Contacts[0].userName).equal('iApprove')\n            Contacts = await contactController.searchContacts({'auth.userName': 'iApprove'});\n            let Contact = Contacts[0]\n            expect(Contact).to.exist;\n            expect(Contact.userName).equal('iApprove')",
                                    "err": {},
                                    "uuid": "5f5fdc01-dc32-4da6-b870-ca4e73c7dffa",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should dbAuthContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should dbAuthContact",
                                    "timedOut": false,
                                    "duration": 112,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            expect(Contact.token).to.exist;\n            expect(Contact.refreshToken).to.exist;\n            expect(Contact).to.have.property('passwordResetDate');\n            expect(Contact.userName).equal(user.userName);",
                                    "err": {},
                                    "uuid": "6c79cead-b357-4263-a59e-4dd2d49f4e7a",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getGroupSids",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getGroupSids",
                                    "timedOut": false,
                                    "duration": 101,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            let groupSids = await contactController.getGroupSids(Contact.contactSid)\n            expect(groupSids.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "e2687e62-0065-4f9b-aa27-5e202057b2f2",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getAccountsByEmail",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getAccountsByEmail",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contacts = await contactController.getAccountsByEmail(config.test.tenantOne.adminUser.email);\nexpect(Contacts.length).to.be.gt(0);\nContacts.forEach(contact => {\n  expect(contact).to.have.all.keys('contactGuid', 'ntId', 'email');\n  expect(contact.email).to.equal(config.test.tenantOne.adminUser.email);\n});",
                                    "err": {},
                                    "uuid": "88d0fbbe-c54a-478d-91e8-73738a5997a3",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should updatePassword",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should updatePassword",
                                    "timedOut": false,
                                    "duration": 122,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contact = await contactController.updatePassword(\n  config.test.tenantOne.adminUser.sid,\n  bcrypt.hashSync(config.test.tenantOne.adminUser.password)\n);\nexpect(Contact).to.exist\n  .and.to.equal(1)",
                                    "err": {},
                                    "uuid": "e572c996-f06e-4170-8b4e-e83622b6a3e6",
                                    "parentUUID": "cf60eda3-77e5-4822-89a5-0d6551c173e2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "78cf4a78-0299-4f37-8712-7e75d367c8b3",
                                "37d3cd7b-b9a3-415d-aca6-b17c6b58e7ad",
                                "5f5fdc01-dc32-4da6-b870-ca4e73c7dffa",
                                "6c79cead-b357-4263-a59e-4dd2d49f4e7a",
                                "e2687e62-0065-4f9b-aa27-5e202057b2f2",
                                "88d0fbbe-c54a-478d-91e8-73738a5997a3",
                                "e572c996-f06e-4170-8b4e-e83622b6a3e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 387,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7a2b3592-11d5-4658-ab2b-57fe9b2ef161",
                    "title": "Integrify Libs Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/controller.test.js",
                    "file": "/test/integration/sqldb/controller.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2f56a7a5-5953-4ebc-a278-93ff5d713e74",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/controller.test.js",
                            "file": "/test/integration/sqldb/controller.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "8cdc8ce6-02b6-47aa-8995-a6c2e351941a",
                                    "parentUUID": "2f56a7a5-5953-4ebc-a278-93ff5d713e74",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Controller Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(controllers.BaseController).to.exist;\nclass TestController extends controllers.BaseController {}            \nconst testController = new TestController(config.test.tenantOne)\nlet tenantDb =  await testController.getTenantDb()\n\nexpect(tenantDb).to.exist",
                                    "err": {},
                                    "uuid": "24d4ca3c-392e-4bff-8341-2e230e029733",
                                    "parentUUID": "2f56a7a5-5953-4ebc-a278-93ff5d713e74",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "24d4ca3c-392e-4bff-8341-2e230e029733"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f62ea6ac-b60c-4a8d-bed5-dc01efa43194",
                    "title": "Integrify Libs Data Instance Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                    "file": "/test/integration/sqldb/data-instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Data Instance Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await Config.getConfig();\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "f10cc855-7687-43ec-ad9c-0933b9255aec",
                            "parentUUID": "f62ea6ac-b60c-4a8d-bed5-dc01efa43194",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d52e1cbe-12e4-4aa8-97ea-3a9035511c40",
                            "title": "Model Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a consumer model",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should get a consumer model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;",
                                    "err": {},
                                    "uuid": "428b41a3-a64d-47f3-a524-82f5faad6b2d",
                                    "parentUUID": "d52e1cbe-12e4-4aa8-97ea-3a9035511c40",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query()\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "a387b3b2-27fc-4e5a-b4f8-e98740295ba2",
                                    "parentUUID": "d52e1cbe-12e4-4aa8-97ea-3a9035511c40",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances with settings",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances with settings",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query().eager('[dataInstanceSettings]')\nconsole.dir(results)\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "7e7f9e9c-e980-4058-a77b-265cd7ed6ff1",
                                    "parentUUID": "d52e1cbe-12e4-4aa8-97ea-3a9035511c40",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "428b41a3-a64d-47f3-a524-82f5faad6b2d",
                                "a387b3b2-27fc-4e5a-b4f8-e98740295ba2",
                                "7e7f9e9c-e980-4058-a77b-265cd7ed6ff1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 38,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1f4754f8-b6ba-410b-8d58-e7b430bf3dba",
                            "title": "Controller Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list datainstances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should list datainstances",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstances = await dataInstanceController.listDataInstances()\nexpect(dataInstances).to.exist;\nexpect(dataInstances.length).to.be.gt(0)\nexpect(dataInstances[0].dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "7871ab83-ccf4-4b9a-b0e9-15dc2065b80c",
                                    "parentUUID": "1f4754f8-b6ba-410b-8d58-e7b430bf3dba",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstance",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nexpect(dataInstance).to.exist;\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "a24487c2-2114-4a71-a12e-ed0940d9a16b",
                                    "parentUUID": "1f4754f8-b6ba-410b-8d58-e7b430bf3dba",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstances hash",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstances hash",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstanceHt = await dataInstanceController.GetDataInstancesHash()\nexpect(dataInstanceHt).to.exist;\nexpect(dataInstanceHt[config.test.tenantOne.tenantId]).to.exist;",
                                    "err": {},
                                    "uuid": "ec4c491b-ecb4-4b6a-be85-a883bb61989c",
                                    "parentUUID": "1f4754f8-b6ba-410b-8d58-e7b430bf3dba",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should update a datainstance",
                                    "timedOut": false,
                                    "duration": 81,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let settingVal = new Date().toISOString()\nlet dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nlet settingIdx  = dataInstance.dataInstanceSettings.findIndex((s => s.settingsKey === 'HelpURL'));\ndataInstance.dataInstanceSettings[settingIdx].settingsValue = settingVal\ndataInstance  = await dataInstanceController.updateDataInstance(dataInstance)\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)\nlet setting  = dataInstance.dataInstanceSettings.find((s => s.settingsKey === 'HelpURL'));\nexpect(setting).to.exist\nexpect(setting.settingsValue).to.equal(settingVal)",
                                    "err": {},
                                    "uuid": "5252764f-b6d0-4ede-be1e-c55bc3140731",
                                    "parentUUID": "1f4754f8-b6ba-410b-8d58-e7b430bf3dba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7871ab83-ccf4-4b9a-b0e9-15dc2065b80c",
                                "a24487c2-2114-4a71-a12e-ed0940d9a16b",
                                "ec4c491b-ecb4-4b6a-be85-a883bb61989c",
                                "5252764f-b6d0-4ede-be1e-c55bc3140731"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 165,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b071647b-c068-4e6b-9a3b-8717aba0a7dd",
                    "title": "Integrify Libs Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/model.test.js",
                    "file": "/test/integration/sqldb/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "37fbe506-7deb-4598-b848-efb674f10918",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/model.test.js",
                            "file": "/test/integration/sqldb/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "98c80100-a529-4c36-9d36-324026f4bcee",
                                    "parentUUID": "37fbe506-7deb-4598-b848-efb674f10918",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nthis.timeout(105000);\nconst ContactModel = await model.bindModel(config.test.tenantOne.tenantId, models.Contact)\n//console.dir(ContactModel)\n//ContactModel.setOptions({excludeDeleted:false})\n//let results = await ContactModel.query().where('contactId', '>', 0)\n//console.log(results)\nlet results;\nresults = await ContactModel.query().setOptions({excludeDeleted:false}).where('contactId', '>', 0)\nresults = await ContactModel.query().where('contactId', '>', 0)\nlet c = await ContactModel.query().findOne({userName: 'iApprove'}).joinRelated('auth').select('contact.*', 'contact.contactGuid as contactSid','auth.userName as userName')\nconsole.log(c)\nlet patched = await c.$query().patch({middleName: \"bob\"})\nconsole.log(patched)\n\n\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "b3bfb2b2-e83a-47fe-8f5e-e43a880591c0",
                                    "parentUUID": "37fbe506-7deb-4598-b848-efb674f10918",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b3bfb2b2-e83a-47fe-8f5e-e43a880591c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "2ed03b67-de07-458a-b975-acbde6fd75df",
                    "title": "Integrify Libs Permissions Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/permissions.test.js",
                    "file": "/test/integration/sqldb/permissions.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "01ea9757-d876-4eab-8ad8-03f80747aeee",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/permissions.test.js",
                            "file": "/test/integration/sqldb/permissions.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "d141d64c-fc77-4da9-bd91-ae4d9fc2459a",
                                    "parentUUID": "01ea9757-d876-4eab-8ad8-03f80747aeee",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getUserPermissionsFromDb",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests should getUserPermissionsFromDb",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst session = {tenantId: config.test.tenantOne.tenantId, user_sid: user.sid}\nlet permissionsController = new PermissionsController(session)\nlet permissions = await permissionsController.getWorkflowPermissionsFromDb(session);\nconsole.log(permissions)\nexpect(permissions[0]).to.exist;",
                                    "err": {},
                                    "uuid": "13bfee78-8e2e-4a1e-beba-fc5ebf61a696",
                                    "parentUUID": "01ea9757-d876-4eab-8ad8-03f80747aeee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "13bfee78-8e2e-4a1e-beba-fc5ebf61a696"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "18ecf67f-6a8d-428f-85d2-27df15a1ebbd",
                    "title": "Integrify Libs Process Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/process.test.js",
                    "file": "/test/integration/sqldb/process.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "527263a5-032e-4a5c-9d21-ad59811035bd",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/process.test.js",
                            "file": "/test/integration/sqldb/process.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Process Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "464e5000-4659-4de7-b4fb-3709cd92ef49",
                                    "parentUUID": "527263a5-032e-4a5c-9d21-ad59811035bd",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a process from sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should get a process from sql",
                                    "timedOut": false,
                                    "duration": 78,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n\n\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nconst Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nconsole.log([Process])\nexpect(Process.processGuid).equal(sampleProcesstGuid)",
                                    "err": {},
                                    "uuid": "28532403-1c2e-4e48-9983-fb051676a8e8",
                                    "parentUUID": "527263a5-032e-4a5c-9d21-ad59811035bd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should upsert a process in sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should upsert a process in sql",
                                    "timedOut": false,
                                    "duration": 333,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n//console.dir(ContactModel)\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nlet Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nexpect(Process.processGuid).equal(sampleProcesstGuid)\nlet newName = 'Updated ' + new Date().toISOString()\nclonedProcess = JSON.parse(JSON.stringify(Process));\n           \nProcess.objective = newName;\nProcess.tasks[0].internalNotes = newName;\nProcess.processCategory.ordinal = 1;\nawait processController.upsertFullProcess(Process);\nProcess = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process.objective).to.equal(newName);\nexpect(Process.tasks[0].internalNotes).to.equal(newName);\nexpect(Process.processCategory.ordinal).equal(1)",
                                    "err": {},
                                    "uuid": "5aa5a078-9a7a-48ce-b6c4-9b7335e9b518",
                                    "parentUUID": "527263a5-032e-4a5c-9d21-ad59811035bd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "28532403-1c2e-4e48-9983-fb051676a8e8",
                                "5aa5a078-9a7a-48ce-b6c4-9b7335e9b518"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 411,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "07d4f447-fb64-41a5-944f-d6fb403e4350",
                    "title": "Integrify Libs Tenant tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                    "file": "/test/integration/sqldb/sqldb-db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2f46f311-e910-4b43-b4a3-93824ee36030",
                            "title": "tentantSql tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                            "file": "/test/integration/sqldb/sqldb-db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// let configClass = await require('../../../config')\n            // await configClass.setConfigs();\n            // config = await configClass.getConfig();\n            config = await Config.getConfig();\n            this.timeout(100000);",
                                    "err": {},
                                    "uuid": "a4cc3919-5960-4171-9594-e2b70d566e2a",
                                    "parentUUID": "2f46f311-e910-4b43-b4a3-93824ee36030",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get the consumer Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests should get the consumer Db",
                                    "timedOut": false,
                                    "duration": 67,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getConsumersDb(config.consumersConn)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`SELECT * FROM sys.tables WHERE name = 'data_instance'`)\nexpect(queyResults.length).equal(1)\n//console.log(queyResults)",
                                    "err": {},
                                    "uuid": "4519035e-9e95-4f98-8c4e-50600be0d04e",
                                    "parentUUID": "2f46f311-e910-4b43-b4a3-93824ee36030",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "shoulld get the tenant Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests shoulld get the tenant Db",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getTenantDb(config.test.tenantOne.tenantId)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`select * from contact`)\nexpect(queyResults.length).to.be.gt(0)\nqueyResults = await db.raw(\"select * from contact_auth where user_name = :uname\", {uname: 'iApprove'})\nexpect(queyResults.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "a632a4c7-9449-475a-a4a8-ff192531df7f",
                                    "parentUUID": "2f46f311-e910-4b43-b4a3-93824ee36030",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4519035e-9e95-4f98-8c4e-50600be0d04e",
                                "a632a4c7-9449-475a-a4a8-ff192531df7f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 74,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "64d01b87-a89c-4466-9bb1-272a996eb03c",
                    "title": "Integrify Libs StreamConsumer Load Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3730,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\n/*\nRedis stream stuff:\nYou can scale up by running additional processors in the group. This creates a new Node process and runs a new consumer\nin the existing stream group. The consumer name for each processor will have an incremental suffix so it will be unique\nensuring that each consumer processes a unique set of events.\nWith 3 processors, it handeld a loadSize of a million events as they came in with no backlog build up in the group.\n */\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nforkedProcessor2 = await streamConsumer.forkStreamProcessor()\nforkedProcessor3 = await streamConsumer.forkStreamProcessor()\nfor (let index = 0; index < loadSize; index++) {\n\n    await sp.sendEvent(\"extendSession\",{\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\", \n            user_name: \"iapprove\", \n            email: \"iapprove@integrify.com\", \n            name: \"System System\"\n        }\n    })\n\n}\n       \nawait delay(1000);",
                            "err": {},
                            "uuid": "1130848d-92ac-4828-a467-18b163f1ac3f",
                            "parentUUID": "64d01b87-a89c-4466-9bb1-272a996eb03c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill()\nforkedProcessor2.kill()\nforkedProcessor3.kill()",
                            "err": {},
                            "uuid": "a15b4cea-092d-4f24-a371-dbd91ae1c704",
                            "parentUUID": "64d01b87-a89c-4466-9bb1-272a996eb03c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a981a416-bd47-4f3c-a426-1aa89bd09f69",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                            "file": "/test/integration/stream/streamConsumer.load.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "cc8dc30b-491c-498a-bef9-e7a57d843a4a",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Load Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "a027e0d6-a036-4e94-a520-71d4ad7ca3b7",
                                            "parentUUID": "cc8dc30b-491c-498a-bef9-e7a57d843a4a",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a027e0d6-a036-4e94-a520-71d4ad7ca3b7"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f55219fc-88c5-48ce-82de-25a9b20f0a11",
                    "title": "Integrify Libs StreamConsumer Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                    "file": "/test/integration/stream/streamConsumer.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5024,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\",\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nawait delay(5000);",
                            "err": {},
                            "uuid": "b539cda7-055e-40b3-9af8-2f590bbabe0a",
                            "parentUUID": "f55219fc-88c5-48ce-82de-25a9b20f0a11",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "fb7af2a6-df15-48e5-aba1-521d5c225223",
                            "parentUUID": "f55219fc-88c5-48ce-82de-25a9b20f0a11",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7d0891f5-1b46-415f-b48a-00d4a3058629",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                            "file": "/test/integration/stream/streamConsumer.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "594e1251-a41a-492d-a6f5-70ed11211b5e",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                                    "file": "/test/integration/stream/streamConsumer.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "5e3c0c92-dd17-449b-83f4-944babb07b57",
                                            "parentUUID": "594e1251-a41a-492d-a6f5-70ed11211b5e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "5e3c0c92-dd17-449b-83f4-944babb07b57"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9742d219-ebaa-4c60-9005-461d66e9f94b",
                    "title": "Integrify Libs Stream Publisher Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamPublisher.test.js",
                    "file": "/test/integration/stream/streamPublisher.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7d610884-1861-42db-a391-92a0738cb168",
                            "title": "stream publisher",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamPublisher.test.js",
                            "file": "/test/integration/stream/streamPublisher.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(100000)\nprocess.env.jest = \"true\";\nawait redis.delAsync([fullStreamName, eventHistoryName])",
                                    "err": {},
                                    "uuid": "7a1e644b-5267-426a-bc01-88b59e247503",
                                    "parentUUID": "7d610884-1861-42db-a391-92a0738cb168",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should handle the constructor",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should handle the constructor",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant);\nexpect(sp.streamName).equal(fullStreamName)\nexpect(sp.baseStreamName).equal(testStreamName)",
                                    "err": {},
                                    "uuid": "e12ef8bf-922a-4806-a020-d1dd04ee40b7",
                                    "parentUUID": "7d610884-1861-42db-a391-92a0738cb168",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should an sendEvent",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should an sendEvent",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant,1000);\nexpect(sp.streamName).equal(fullStreamName)\n//sendEvent(eventType, data) data will get stringified\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}})   \nexpect(id).to.exist;\nexpect (id.indexOf(\"-\")).to.be.gt(-1)  \nawait delay(100);\nlet id2 = await sp.sendEvent(testEventType, {foo:\"bar2\", biz:\"buzz2\", beep:{bop:\"bam2\"}})   \nexpect (Number(id2.split(\"-\")[0])).to.be.gt(Number(id.split(\"-\")[0]))",
                                    "err": {},
                                    "uuid": "e1a9dc33-5a53-456b-b32d-d95d2c3aee5a",
                                    "parentUUID": "7d610884-1861-42db-a391-92a0738cb168",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should append to eventhistory",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should append to eventhistory",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant, 1000); \n\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}}) \n           \n//console.log(historySet)\nlet historyCount = await redis.zcardAsync(eventHistoryName)\nexpect(historyCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "5e86fa08-3bf7-4899-9954-92da8ead8ceb",
                                    "parentUUID": "7d610884-1861-42db-a391-92a0738cb168",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e12ef8bf-922a-4806-a020-d1dd04ee40b7",
                                "e1a9dc33-5a53-456b-b32d-d95d2c3aee5a",
                                "5e86fa08-3bf7-4899-9954-92da8ead8ceb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 106,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2e220d97-7b0d-465b-97a3-570fe44dbbbc",
                    "title": "Integrify Libs Tes-lib Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                    "file": "/test/integration/test-lib/test-lib.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1127e878-d08b-4364-bf89-260544d8d540",
                            "title": "Test Config",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                            "file": "/test/integration/test-lib/test-lib.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tes-lib Tests Test Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "783ac202-e739-4ad9-9ed8-7668e8cd2792",
                                    "parentUUID": "1127e878-d08b-4364-bf89-260544d8d540",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "2142072e-256d-4321-aa1d-8cec8c60120d",
                                    "title": "get a test config",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get a test config should have config.mongo",
                                            "timedOut": false,
                                            "duration": 20,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const testConfig = await testLib.getTestConfig();\nconsole.log(testConfig)\nexpect(testConfig).to.exist;",
                                            "err": {},
                                            "uuid": "407ac887-b49a-4805-becd-e3800bf8a4b7",
                                            "parentUUID": "2142072e-256d-4321-aa1d-8cec8c60120d",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "407ac887-b49a-4805-becd-e3800bf8a4b7"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 20,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "8f192c88-e19c-47e4-b464-84f82fa8d79d",
                                    "title": "get an auth Token ",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have a auth token",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get an auth Token  should have a auth token",
                                            "timedOut": false,
                                            "duration": 6,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const authToken = await testLib.getAuthToken();\nconsole.log(authToken)\nexpect(authToken).to.exist;",
                                            "err": {},
                                            "uuid": "c1e5f23a-d837-46b6-a11c-3efe10954b5d",
                                            "parentUUID": "8f192c88-e19c-47e4-b464-84f82fa8d79d",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "c1e5f23a-d837-46b6-a11c-3efe10954b5d"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 6,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "555eeb25-e1c1-463e-9da3-931ec0dbf104",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "62278bdf-8442-449b-a8f1-23fa00fb9463",
                    "title": "Scheduler CRUD tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                    "file": "/test/crud.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler CRUD tests\"",
                            "fullTitle": "Scheduler CRUD tests \"before all\" hook in \"Scheduler CRUD tests\"",
                            "timedOut": false,
                            "duration": 166,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntry {\n    testConfig = await serverConfig.setProcessServerConfig()\n    jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl.js\");\n} catch(e){}",
                            "err": {},
                            "uuid": "1cca829b-3834-4cbe-a529-db539dd352e8",
                            "parentUUID": "62278bdf-8442-449b-a8f1-23fa00fb9463",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "518986a3-d022-41fb-aace-2556b4433b3b",
                            "title": ".save",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves the job",
                                    "fullTitle": "Scheduler CRUD tests .save saves the job",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let sDate = new Date();\nlet startThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() - 5)\n);\nlet endThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() + 5)\n);\nlet job = {\n    dbName: config.dbName,\n    status: \"Scheduled\",\n    name: config.name,\n    initData: config.initData,\n    runAs: config.runAs,\n    frequency: \"Recurring\",\n    rminutes: 1,\n    state: \"ended\",\n    startDate: startThis,\n    startHour: startThis.getHours(),\n    startMinute: startThis.getMinutes(),\n    startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n    endDate: endThis,\n    endHour: endThis.getHours(),\n    endMinute: endThis.getMinutes(),\n    endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\",\n    jobType: config.jobType\n};\nreturn jobCtrl.save(job).then(saved => {\n    expect(saved).to.exist;\n    dbJob = saved;\n});",
                                    "err": {},
                                    "uuid": "2713071f-55c4-4ffd-8f1f-d5e5a84ce757",
                                    "parentUUID": "518986a3-d022-41fb-aace-2556b4433b3b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2713071f-55c4-4ffd-8f1f-d5e5a84ce757"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b8e6d052-81d4-4dca-8f10-14844bdfcf9d",
                            "title": ".upate",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates the job",
                                    "fullTitle": "Scheduler CRUD tests .upate updates the job",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.update(dbJob).then(updated => {\n    expect(updated).to.exist;\n    expect(updated.modifiedDate.getTime()).to.be.greaterThan(\n        updated.createdDate.getTime()\n    );\n});",
                                    "err": {},
                                    "uuid": "230c7ab2-13c9-4945-bb05-4be53fa82bf9",
                                    "parentUUID": "b8e6d052-81d4-4dca-8f10-14844bdfcf9d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "230c7ab2-13c9-4945-bb05-4be53fa82bf9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "21632030-4cb7-4888-b2c2-199a6e9f9e36",
                            "title": ".getOne",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler CRUD tests .getOne should get a job by id",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.getOne(config.dbName, dbJob._id).then(job => {\n    expect(job).to.exist;\n    expect(job._id.toString()).to.equal(dbJob._id.toString());\n});",
                                    "err": {},
                                    "uuid": "4ef01d07-54c9-4188-aa15-1c3b4a0873a0",
                                    "parentUUID": "21632030-4cb7-4888-b2c2-199a6e9f9e36",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4ef01d07-54c9-4188-aa15-1c3b4a0873a0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "58800611-321a-4665-af24-d0cbf9889d4d",
                            "title": ".getAll",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs",
                                    "fullTitle": "Scheduler CRUD tests .getAll should get all jobs",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName).then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "4b026bb2-b2c2-4313-bb75-cb610e71ae22",
                                    "parentUUID": "58800611-321a-4665-af24-d0cbf9889d4d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b026bb2-b2c2-4313-bb75-cb610e71ae22"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "03b0da98-1f79-493d-90a1-98be4e6850c1",
                            "title": ".getAll(filter)",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs of type testToConsole",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter) should get all jobs of type testToConsole",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"testToConsole\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "9dd0ae25-a86f-445f-9d5f-ef4d1c16f239",
                                    "parentUUID": "03b0da98-1f79-493d-90a1-98be4e6850c1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9dd0ae25-a86f-445f-9d5f-ef4d1c16f239"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8cfb89c7-a32b-43fe-84a2-a49ae954bbcf",
                            "title": ".getAll(filter-bad)",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should not have any jobs of type fakeJob",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter-bad) should not have any jobs of type fakeJob",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"fakeJob\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.empty;\n});",
                                    "err": {},
                                    "uuid": "3c20f7f5-bd25-44e1-9689-1a23f31bb928",
                                    "parentUUID": "8cfb89c7-a32b-43fe-84a2-a49ae954bbcf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3c20f7f5-bd25-44e1-9689-1a23f31bb928"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "13f34f0b-151e-4d2a-9231-a421135d7039",
                            "title": ".delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a job",
                                    "fullTitle": "Scheduler CRUD tests .delete should delete a job",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.delete(config.dbName, dbJob._id).then(deleted => {\n    expect(deleted).to.be.true;\n});",
                                    "err": {},
                                    "uuid": "99f7373a-e700-472a-8d6b-558f29305be5",
                                    "parentUUID": "13f34f0b-151e-4d2a-9231-a421135d7039",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "99f7373a-e700-472a-8d6b-558f29305be5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a97c8fee-1aeb-4a09-85d4-362e0bc59cd2",
                    "title": "Scheduler OneTimeJob",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                    "file": "/test/onetime.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler OneTimeJob\"",
                            "fullTitle": "Scheduler OneTimeJob \"before all\" hook in \"Scheduler OneTimeJob\"",
                            "timedOut": false,
                            "duration": 73,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "9cebeaa7-5f4b-4e73-943b-53c555244cb3",
                            "parentUUID": "a97c8fee-1aeb-4a09-85d4-362e0bc59cd2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "69a5d192-257d-43fd-8431-d4a03460ee4a",
                            "title": "#addOneTimeJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler OneTimeJob #addOneTimeJob should add a job",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "fa387bca-e212-4f07-bb27-21475578953a",
                                    "parentUUID": "69a5d192-257d-43fd-8431-d4a03460ee4a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fa387bca-e212-4f07-bb27-21475578953a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6f6e383b-430c-4431-85f6-dd8fdd811e31",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "f5988f20-ac7b-44f1-b87a-83ad59475681",
                                    "parentUUID": "6f6e383b-430c-4431-85f6-dd8fdd811e31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "594c907b-8d04-4546-aa3a-a968c00a34d3",
                                    "parentUUID": "6f6e383b-430c-4431-85f6-dd8fdd811e31",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f5988f20-ac7b-44f1-b87a-83ad59475681",
                                "594c907b-8d04-4546-aa3a-a968c00a34d3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bea7d0ab-460d-4a0a-8d12-7bf1d46246fd",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler OneTimeJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "46dd9ab1-41b8-4f76-b898-3e5a7b47a0df",
                                    "parentUUID": "bea7d0ab-460d-4a0a-8d12-7bf1d46246fd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "46dd9ab1-41b8-4f76-b898-3e5a7b47a0df"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ab0460ac-4365-43bd-8147-8aa9be967349",
                            "title": "#runJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should run the job",
                                    "fullTitle": "Scheduler OneTimeJob #runJob should run the job",
                                    "timedOut": false,
                                    "duration": 15000,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\nlet c = await delay(15000);\nexpect(j.triggeredJobs()).to.equal(1);",
                                    "err": {},
                                    "uuid": "d113d25c-2cb0-4557-9d92-de5a0ba8fd1c",
                                    "parentUUID": "ab0460ac-4365-43bd-8147-8aa9be967349",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d113d25c-2cb0-4557-9d92-de5a0ba8fd1c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15000,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 20000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0679b771-18fc-4362-a348-404110c0eb09",
                    "title": "Scheduler PubSubHandler",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                    "file": "/test/pubsub.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"before all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 30,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\njobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");\ndbJobWithId = await jobCtrl.save(dbJob);\nservice = require(\"../scheduler.js\");\nintegrify_redis = require(\"../lib/redis/integrify-redis.js\");\npubSubClient = integrify_redis.getRedisPubSubClient();",
                            "err": {},
                            "uuid": "369cadb1-4ec9-4743-b792-d7997a7b5d04",
                            "parentUUID": "0679b771-18fc-4362-a348-404110c0eb09",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"after all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "return await jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString());",
                            "err": {},
                            "uuid": "6d29dfaf-a10f-4005-b1fe-bb740d45b37f",
                            "parentUUID": "0679b771-18fc-4362-a348-404110c0eb09",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8db44eaf-859d-44cf-8417-1de5061e97ca",
                            "title": "#addJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add a new job based on a message",
                                    "fullTitle": "Scheduler PubSubHandler #addJob add a new job based on a message",
                                    "timedOut": false,
                                    "duration": 3004,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:add`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    function(err, ok) {\n        setTimeout(\n            function() {\n                let j = scheduler.getJobById(dbJobWithId._id);\n                expect(j).to.exist;\n                done();\n            },\n            3000\n        );\n    }\n);",
                                    "err": {},
                                    "uuid": "e90ce7c8-d33c-465b-92d3-cd0f4e209d24",
                                    "parentUUID": "8db44eaf-859d-44cf-8417-1de5061e97ca",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e90ce7c8-d33c-465b-92d3-cd0f4e209d24"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3004,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "9ba906c1-1758-4d58-a28d-b6dcd31538ed",
                            "title": "#cancel",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler PubSubHandler #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:delete`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    async function(err, ok) {\n        delay(500);\n        let jobs = scheduler.listJobs();\n        expect(jobs[dbJobWithId._id]).to.not.exist;\n                        }\n);",
                                    "err": {},
                                    "uuid": "afbfa75e-bb98-474b-bfef-aaa628b82e6f",
                                    "parentUUID": "9ba906c1-1758-4d58-a28d-b6dcd31538ed",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "afbfa75e-bb98-474b-bfef-aaa628b82e6f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "351ccb6e-afbf-4768-b62f-8ecf751a3ffc",
                    "title": "Scheduler RecurringJob",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                    "file": "/test/recur.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler RecurringJob\"",
                            "fullTitle": "Scheduler RecurringJob \"before all\" hook in \"Scheduler RecurringJob\"",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "042e7622-a857-46b9-b366-e544efa97cd1",
                            "parentUUID": "351ccb6e-afbf-4768-b62f-8ecf751a3ffc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ae117dd6-f28d-4c80-a4fb-70244d4a4eaf",
                            "title": "#addRecurringJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler RecurringJob #addRecurringJob should add a job",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);5\nexpect(job.recur).to.exist;",
                                    "err": {},
                                    "uuid": "807d29c3-89f7-47c4-ad40-93970ee8c1ae",
                                    "parentUUID": "ae117dd6-f28d-4c80-a4fb-70244d4a4eaf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "807d29c3-89f7-47c4-ad40-93970ee8c1ae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a3a31431-2997-47ed-90b5-eace6b65da92",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "8b9fb088-a433-4d74-8cdf-2499c3b67e47",
                                    "parentUUID": "a3a31431-2997-47ed-90b5-eace6b65da92",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "b4f34c1a-6622-4ead-b6a7-e6be408ab168",
                                    "parentUUID": "a3a31431-2997-47ed-90b5-eace6b65da92",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8b9fb088-a433-4d74-8cdf-2499c3b67e47",
                                "b4f34c1a-6622-4ead-b6a7-e6be408ab168"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ea05e173-dcbe-4038-a636-9635869507d8",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler RecurringJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "b124defc-9275-42f7-a909-9f267b106233",
                                    "parentUUID": "ea05e173-dcbe-4038-a636-9635869507d8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b124defc-9275-42f7-a909-9f267b106233"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "295af482-2ace-4e5f-8105-df7efd2a64c3",
                    "title": "Scheduler Scheduled Jobs",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                    "file": "/test/schedule.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "fullTitle": "Scheduler Scheduled Jobs \"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": ";\n        testConfig = await serverConfig.setProcessServerConfig()\n        scheduler = require(\"../lib/scheduler/index.js\");\n        jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "f72a3ad1-c8c2-468a-b543-c6b795a42c17",
                            "parentUUID": "295af482-2ace-4e5f-8105-df7efd2a64c3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c0726715-e384-44a3-83f6-5169e17faeac",
                            "title": "#addJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler Scheduled Jobs #addJob should add a job",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "947ea9b9-af57-4ec7-8b79-382bcf90341e",
                                    "parentUUID": "c0726715-e384-44a3-83f6-5169e17faeac",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "947ea9b9-af57-4ec7-8b79-382bcf90341e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "2dbb0374-da6d-4837-9ec1-677caef357ac",
                            "title": "#loadAllJobsFromMongo",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// runs before all tests in this block\nreturn jobCtrl.save(dbJob).then(j => {\n    dbJobWithId = j;\n});",
                                    "err": {},
                                    "uuid": "3f522425-b10e-4ad0-8a34-7a07adac3578",
                                    "parentUUID": "2dbb0374-da6d-4837-9ec1-677caef357ac",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [
                                {
                                    "title": "\"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//return jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString())",
                                    "err": {},
                                    "uuid": "17593d41-e9d4-40c6-9e3c-6b47e04f79af",
                                    "parentUUID": "2dbb0374-da6d-4837-9ec1-677caef357ac",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "tests": [
                                {
                                    "title": "should load the jobs from mongo",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo should load the jobs from mongo",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return scheduler.loadJobsFromMongo().then(loadedJobs => {\n    expect(loadedJobs.length).to.be.greaterThan(0);\n    expect(scheduler.listJobs()[dbJobWithId.id]).to.exist;\n});",
                                    "err": {},
                                    "uuid": "9dd5cbd3-4d50-4ba6-ae43-4b58ea80c2d0",
                                    "parentUUID": "2dbb0374-da6d-4837-9ec1-677caef357ac",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9dd5cbd3-4d50-4ba6-ae43-4b58ea80c2d0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "4f1bde97-8ae2-4568-a091-46803b869725",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "e1f6fe5a-36c7-4b6d-bf97-d858f7faf308",
                                    "parentUUID": "4f1bde97-8ae2-4568-a091-46803b869725",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "867199d4-a21a-45f9-bfa2-0b8ed9f1c297",
                                    "parentUUID": "4f1bde97-8ae2-4568-a091-46803b869725",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e1f6fe5a-36c7-4b6d-bf97-d858f7faf308",
                                "867199d4-a21a-45f9-bfa2-0b8ed9f1c297"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "22095f98-faa9-4d8d-887a-313959589590",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler Scheduled Jobs #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "120de48f-d241-4a69-8eca-4205339761b9",
                                    "parentUUID": "22095f98-faa9-4d8d-887a-313959589590",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "120de48f-d241-4a69-8eca-4205339761b9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "de48d20d-8efa-45ee-ab40-71a3c24e6f14",
                            "title": "#reschedule",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should reschedule the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #reschedule should reschedule the job",
                                    "timedOut": false,
                                    "duration": 303,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let oldStart = job.start;\n            job.start =  new Date(job.start.getTime() + 100);\n            job.end =   new Date(job.end.getTime() + 10000);\n            let rj = scheduler.rescheduleJob(job);\n            await delay(300);\n            let j = scheduler.getJobById(job._id);\n            expect(new Date(j.nextInvocation()).getTime()).to.be.greaterThan(oldStart.getTime());",
                                    "err": {},
                                    "uuid": "46d28990-cf38-4077-beda-3ad24a05182a",
                                    "parentUUID": "de48d20d-8efa-45ee-ab40-71a3c24e6f14",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "46d28990-cf38-4077-beda-3ad24a05182a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 303,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "32352d65-9972-40a2-bf97-cbab3fa1480d",
                            "title": "#cancel",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let cj = scheduler.cancelJob(job._id);\nlet jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.not.exist;",
                                    "err": {},
                                    "uuid": "c431ad23-7378-4ded-9e8d-e11a5934a955",
                                    "parentUUID": "32352d65-9972-40a2-bf97-cbab3fa1480d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c431ad23-7378-4ded-9e8d-e11a5934a955"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "0fdb720e-bfc5-4bbe-aec6-7276793b2fc3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "22505aee-1f08-424c-b135-f0cf53bf0a75",
                    "title": "Session Processor Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                    "file": "/test/integration/sessionEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Session Processor Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5070,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let testConfig = await testLib.getTestConfig();\n       \nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"login\", {\n  token: \"abcd234\",\n  user:  {jwt_token: 'xxxxx', tenantId: testConfig.tenantOne.tenantId, sid: testConfig.tenantOne.adminUser.sid}\n})\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {\n        token: \"abcd234\",\n        user: {\n            sid: testConfig.tenantOne.adminUser.sid,\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\n\nforkedProcessor = await sessionStreamConsumer.forkStreamProcessor(tenant)\nawait delay(5000);",
                            "err": {},
                            "uuid": "fc772c82-88ec-42ac-80f4-762d1e066441",
                            "parentUUID": "22505aee-1f08-424c-b135-f0cf53bf0a75",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Session Processor Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "54ccac82-897a-4c1a-b5b7-d58158ffd222",
                            "parentUUID": "22505aee-1f08-424c-b135-f0cf53bf0a75",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6c4889a8-03ce-4e6a-a047-4addccade56a",
                            "title": "stream processor",
                            "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                            "file": "/test/integration/sessionEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "abb0ede7-181a-44a4-aff0-58d1a50c9241",
                                    "title": "reads from session stream",
                                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Session Processor Tests stream processor reads from session stream should process events",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "38f448e0-f371-4dae-9ff3-abd4986dedd1",
                                            "parentUUID": "abb0ede7-181a-44a4-aff0-58d1a50c9241",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "38f448e0-f371-4dae-9ff3-abd4986dedd1"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "f39c6791-a9ee-4f0c-9201-83629d7cc999",
                                    "title": "handles events",
                                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should push events into REDIS activeSession set",
                                            "fullTitle": "Session Processor Tests stream processor handles events should push events into REDIS activeSession set",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions = await redis.zrangebyscoreAsync(`${tenant}.activeSessions`, \"-inf\", \"+inf\");\nconsole.log(sessions)\nexpect(sessions).to.exist;",
                                            "err": {},
                                            "uuid": "c18aad99-8fe5-47ab-99b9-e55836d9be45",
                                            "parentUUID": "f39c6791-a9ee-4f0c-9201-83629d7cc999",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "c18aad99-8fe5-47ab-99b9-e55836d9be45"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "809f0c00-2ce0-469c-8595-153a8c667824",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "0d436bfd-1b83-4484-8b53-ebfbc90fbf3d",
                    "title": "adminCategoryConfig.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminCategoryConfig.vue should render correctly",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=btn_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_editCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_deleteCategory]').exists()).to.equal(true);",
                            "err": {},
                            "uuid": "f7bf93e0-7515-44d9-96ce-53e507b3939c",
                            "parentUUID": "0d436bfd-1b83-4484-8b53-ebfbc90fbf3d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f7bf93e0-7515-44d9-96ce-53e507b3939c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0d876a32-f497-4508-a70e-b78ff368bd25",
                    "title": "adminTreeAddObjectButton.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeAddObjectButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_addObject.exists()).to.be.true;",
                            "err": {},
                            "uuid": "51feb6d8-7020-4864-bb6c-7e4be02837a3",
                            "parentUUID": "0d876a32-f497-4508-a70e-b78ff368bd25",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "51feb6d8-7020-4864-bb6c-7e4be02837a3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "dc07ee82-167a-44de-ba01-5f977d9b6f5d",
                    "title": "adminTreePermsButton.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreePermsButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_permsButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "60d95b27-3a00-46d1-9393-8590115a75c3",
                            "parentUUID": "dc07ee82-167a-44de-ba01-5f977d9b6f5d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "60d95b27-3a00-46d1-9393-8590115a75c3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ba4c170f-38ed-4fd5-bc57-55c2e78b6262",
                    "title": "adminTreeViewButton.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeViewButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_viewButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "897d1a97-adf7-45c7-83a4-033dd0279d25",
                            "parentUUID": "ba4c170f-38ed-4fd5-bc57-55c2e78b6262",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "897d1a97-adf7-45c7-83a4-033dd0279d25"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "bafefb22-a800-4452-b5aa-6b42af30675c",
                    "title": "AddGroupDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "AddGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 63,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_AddGroupDialog.default);",
                            "err": {},
                            "uuid": "f6064685-faac-4197-9c68-7d18ce8f5473",
                            "parentUUID": "bafefb22-a800-4452-b5aa-6b42af30675c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "41feddf4-a139-4a5f-a8fc-ff55e25cd376",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "AddGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]')).to.exist;\nexpect(wrapper.find('[data-test=descField]')).to.exist;\nexpect(wrapper.find('[data-test=dynamicField]')).to.exist;\nexpect(wrapper.find('[data-test=sqlField]')).to.exist;",
                                    "err": {},
                                    "uuid": "419e2c7e-6150-45a3-b546-f9fcb599216f",
                                    "parentUUID": "41feddf4-a139-4a5f-a8fc-ff55e25cd376",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save button disabled",
                                    "fullTitle": "AddGroupDialog.vue inital state save button disabled",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=saveButton]').element.disabled).to.equal(true);",
                                    "err": {},
                                    "uuid": "d648a95d-f9cc-468e-90fb-56865962044d",
                                    "parentUUID": "41feddf4-a139-4a5f-a8fc-ff55e25cd376",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "419e2c7e-6150-45a3-b546-f9fcb599216f",
                                "d648a95d-f9cc-468e-90fb-56865962044d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "39df0d95-d1fc-40a6-aa62-315f9607aed8",
                    "title": "EditGroupDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "EditGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 44,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\"\n};\nwrapper = (0, _mocks.initWrapper)(_EditGroupDialog.default, {\n  propsData: {\n    group\n  },\n  data() {\n    return {\n      activeTab: 0\n    };\n  },\n  store\n});",
                            "err": {},
                            "uuid": "277a1b2c-a4db-4ee6-bc86-755530d2beec",
                            "parentUUID": "39df0d95-d1fc-40a6-aa62-315f9607aed8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1ac8a0a9-23a7-4e31-9f5a-79b900eca839",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=descField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dynamicField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=sqlField]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "fcfcd467-dbcd-4f74-bf69-f3d47b7435e7",
                                    "parentUUID": "1ac8a0a9-23a7-4e31-9f5a-79b900eca839",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "populates group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state populates group fields",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').element.value).to.equal(group.groupName);\nexpect(wrapper.find('[data-test=descField]').element.value).to.equal(group.groupDesc);\nexpect(wrapper.find('[data-test=sqlField]').element.value).to.equal(group.groupSql);",
                                    "err": {},
                                    "uuid": "d599c8f7-c86e-4065-8876-a71182945f3c",
                                    "parentUUID": "1ac8a0a9-23a7-4e31-9f5a-79b900eca839",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fcfcd467-dbcd-4f74-bf69-f3d47b7435e7",
                                "d599c8f7-c86e-4065-8876-a71182945f3c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e1541d23-4c07-4cc8-936c-94cf617bc9c3",
                    "title": "GroupList.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 48,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_GroupList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "1672ae3c-f5c5-40af-bff3-7f68d7732c22",
                            "parentUUID": "e1541d23-4c07-4cc8-936c-94cf617bc9c3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c198b4ae-fab0-417d-bb65-09fff236d2f3",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "GroupList.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const toolbar = wrapper.find('[data-test=buttonBar]');\nexpect(toolbar.exists()).to.equal(true);\nconst buttons = toolbar.findAll('button');\nexpect(buttons.at(0).text()).to.equal('Add Group');\nexpect(buttons.at(1).text()).to.equal('Delete Group');\nexpect(buttons.at(1).props().disabled).to.equal(true);\nexpect(buttons.at(2).text()).to.equal('Set Roles & Permissions');",
                                    "err": {},
                                    "uuid": "5b3d0d58-708d-4ce8-94b8-70a093616a30",
                                    "parentUUID": "c198b4ae-fab0-417d-bb65-09fff236d2f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays list of groups",
                                    "fullTitle": "GroupList.vue inital state displays list of groups",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const table = wrapper.find('div.v-data-table');\nexpect(table.exists()).to.equal(true);\nconst rows = table.findAll('table > tbody > tr');\nconst adminRow = rows.at(0).findAll('td');\nconst userRow = rows.at(1).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(adminRow.at(3).text()).to.equal('Administrators'); // group name column\nexpect(userRow.at(3).text()).to.equal('Users');\nexpect(adminRow.at(5).text()).to.equal('No'); // dynamic column\nexpect(userRow.at(5).text()).to.equal('Yes');",
                                    "err": {},
                                    "uuid": "9de400b8-0eaf-4696-a1cc-e0727d4e0d23",
                                    "parentUUID": "c198b4ae-fab0-417d-bb65-09fff236d2f3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5b3d0d58-708d-4ce8-94b8-70a093616a30",
                                "9de400b8-0eaf-4696-a1cc-e0727d4e0d23"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b1d5df9f-f40a-4de6-a4e1-6ce4b38ee364",
                    "title": "GroupMembershipDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupMembershipDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 92,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\",\n  canManage: true,\n  canEdit: true\n};\nwrapper = (0, _mocks.initWrapper)(_GroupMembershipDialog.default, {\n  propsData: {\n    group\n  },\n  store\n});",
                            "err": {},
                            "uuid": "3f97723d-99a9-4ffe-b893-5100f20d60a0",
                            "parentUUID": "b1d5df9f-f40a-4de6-a4e1-6ce4b38ee364",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1ac989de-a2fd-4f1a-adb9-2fb1b65aa6a6",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "membership tables",
                                    "fullTitle": "GroupMembershipDialog.vue inital state membership tables",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const nonMembersTable = wrapper.find('[data-test=nonMembersTable]');\nconst membersTable = wrapper.find('[data-test=membersTable]');\nexpect(nonMembersTable.exists()).to.equal(true);\nexpect(membersTable.exists()).to.equal(true); // Non members table\nlet rows = nonMembersTable.findAll('table > tbody > tr');\nlet firstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(3);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-plus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('97'); // member id\nexpect(firstRow.at(4).text()).to.equal('Joe User'); // member name\nexpect(rows.at(2).find('i.mdi-account-multiple').exists()).to.equal(true); // check a group member row renders with the group icon\n// Members table\nrows = membersTable.findAll('table > tbody > tr');\nexpect(rows.length).to.equal(2);\nfirstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-minus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('98'); // member id\nexpect(firstRow.at(4).text()).to.equal('Integrify Services'); // member name",
                                    "err": {},
                                    "uuid": "fc7d3247-cd65-4e30-b68b-1842155b390b",
                                    "parentUUID": "1ac989de-a2fd-4f1a-adb9-2fb1b65aa6a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fc7d3247-cd65-4e30-b68b-1842155b390b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c39daa7d-75a3-408b-aeae-7c5f853150fd",
                    "title": "UserCreate.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserCreate.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 64,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserCreate.default, {\n  store\n});",
                            "err": {},
                            "uuid": "e12b3b76-196d-48c4-af36-75611983701d",
                            "parentUUID": "c39daa7d-75a3-408b-aeae-7c5f853150fd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all necessary fields",
                            "fullTitle": "UserCreate.vue should display all necessary fields",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['firstName', 'middleName', 'lastName', 'username', 'email', 'locale', 'timezone', 'language', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.text()).to.be.empty;\n});",
                            "err": {},
                            "uuid": "cd4f2307-ca2a-473b-80f4-2ba5a54d6cbc",
                            "parentUUID": "c39daa7d-75a3-408b-aeae-7c5f853150fd",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display cancel and save btns",
                            "fullTitle": "UserCreate.vue should display cancel and save btns",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "077db2cb-e6d8-4603-b6b9-b0db63727f32",
                            "parentUUID": "c39daa7d-75a3-408b-aeae-7c5f853150fd",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "cd4f2307-ca2a-473b-80f4-2ba5a54d6cbc",
                        "077db2cb-e6d8-4603-b6b9-b0db63727f32"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 13,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "06df2f06-3f78-4da1-8a4a-19ce0668dced",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 17,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// store = new Vuex.Store({modules: mockStore().modules})\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    },\n    actions: {\n      getUser: function () {\n        console.log('--- getUser()');\n        return { ..._mockedData.mockedUser\n        };\n      }\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEdit.default, {\n  store,\n  propsData: {\n    id: _mockedData.mockedUser.contactGuid\n  }\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "0750dbec-8015-4d3c-9536-f3da0a0f7752",
                            "parentUUID": "06df2f06-3f78-4da1-8a4a-19ce0668dced",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should always display page title",
                            "fullTitle": "UserEdit.vue should always display page title",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.text()).to.eq('Edit User');",
                            "err": {},
                            "uuid": "88b83375-ee0e-4291-817a-7309717782a0",
                            "parentUUID": "06df2f06-3f78-4da1-8a4a-19ce0668dced",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not display form if loading",
                            "fullTitle": "UserEdit.vue should not display form if loading",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.false;",
                            "err": {},
                            "uuid": "99ffc67c-aa4e-4ea6-8e34-fc26386eb515",
                            "parentUUID": "06df2f06-3f78-4da1-8a4a-19ce0668dced",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display form and btns if user information present",
                            "fullTitle": "UserEdit.vue should display form and btns if user information present",
                            "timedOut": false,
                            "duration": 234,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.userLoading = false;\nawait wrapper.vm.$nextTick();\nconst form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.true;\n[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "1058c927-09a6-45a0-bc85-f618b71d0ef2",
                            "parentUUID": "06df2f06-3f78-4da1-8a4a-19ce0668dced",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "88b83375-ee0e-4291-817a-7309717782a0",
                        "99ffc67c-aa4e-4ea6-8e34-fc26386eb515",
                        "1058c927-09a6-45a0-bc85-f618b71d0ef2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 235,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9e9f825a-1093-4763-82f9-3287bb1f7500",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 45,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditDelegation.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "b6990545-dcfe-41a2-b278-17978059b531",
                            "parentUUID": "9e9f825a-1093-4763-82f9-3287bb1f7500",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEdit.vue should display all fields",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['delegate', 'processes'] // 'startDate', 'startTime', 'endDate', 'endTime'\n.forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n});",
                            "err": {},
                            "uuid": "6dbd4ecc-2c7d-496d-9f4a-75a16e3dfc46",
                            "parentUUID": "9e9f825a-1093-4763-82f9-3287bb1f7500",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "6dbd4ecc-2c7d-496d-9f4a-75a16e3dfc46"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8d1280fe-8c29-4859-8cda-ab8d1aeb60b2",
                    "title": "UserEditOrganizationalDetails.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditOrganizationalDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 53,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditOrganizationalDetails.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "4249e095-dc5c-45d9-ae4f-e0b97bc5827b",
                            "parentUUID": "8d1280fe-8c29-4859-8cda-ab8d1aeb60b2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditOrganizationalDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['title', 'division', 'department', 'costCenter', 'location', 'phone', 'manager'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value || !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value).to.eq(_mockedData.mockedUser[fieldName]);\n  }\n});",
                            "err": {},
                            "uuid": "3d491e97-37f0-480f-bc82-89dbb0a15c07",
                            "parentUUID": "8d1280fe-8c29-4859-8cda-ab8d1aeb60b2",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3d491e97-37f0-480f-bc82-89dbb0a15c07"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d5f984db-72c0-4a02-8b0c-fec5e383fbb2",
                    "title": "UserEditUserDetails.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditUserDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 73,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditUserDetails.default, {\n  store\n});",
                            "err": {},
                            "uuid": "a6a0a987-5f16-4014-b6a9-e939e6393d2e",
                            "parentUUID": "d5f984db-72c0-4a02-8b0c-fec5e383fbb2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display card title",
                            "fullTitle": "UserEditUserDetails.vue should display card title",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title');\nexpect(title.exists()).to.be.true;\nexpect(title.text()).contains('User Details');",
                            "err": {},
                            "uuid": "605b12bd-bf5d-4157-bbb0-10b4d91d5cca",
                            "parentUUID": "d5f984db-72c0-4a02-8b0c-fec5e383fbb2",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditUserDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['firstName', 'middleName', 'lastName', 'contactId', 'userName', 'email', 'address1', 'address2', 'city', 'state', 'zip', 'country', 'language', 'timezone', 'locale', 'cField1', 'cField2', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value && !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value.toString()).to.eq(_mockedData.mockedUser[fieldName].toString());\n  }\n});",
                            "err": {},
                            "uuid": "8bc74190-efbe-43f0-bf12-a898a33f4b9e",
                            "parentUUID": "d5f984db-72c0-4a02-8b0c-fec5e383fbb2",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "605b12bd-bf5d-4157-bbb0-10b4d91d5cca",
                        "8bc74190-efbe-43f0-bf12-a898a33f4b9e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 62,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8bc0a62a-0e24-4ba9-9e15-960386f7e7a8",
                    "title": "UserFilterDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserFilterDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 46,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserFilterDialog.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "49b1ec8f-cc8d-4e3c-ae4b-655a25d6ec07",
                            "parentUUID": "8bc0a62a-0e24-4ba9-9e15-960386f7e7a8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "UserFilterDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title .headline');\nexpect(title.text()).to.eq('User Filters');\n['lastName', 'firstName', 'username', 'email', 'title', 'managerName', 'costCenter', 'country', 'department'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.element.value).to.be.empty;\n});",
                            "err": {},
                            "uuid": "2c79bc73-042f-4a36-a0e1-54017a513065",
                            "parentUUID": "8bc0a62a-0e24-4ba9-9e15-960386f7e7a8",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog on clicking Close btn",
                            "fullTitle": "UserFilterDialog.vue should close dialog on clicking Close btn",
                            "timedOut": false,
                            "duration": 28,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.vm.showDialog).to.be.false;\nwrapper.vm.$store.state.users.showDialog = true;\nawait wrapper.vm.$nextTick();\nexpect(wrapper.vm.showDialog).to.be.true;\nconst closeBtn = wrapper.find('[data-test=closeBtn]');\nexpect(closeBtn.exists()).to.be.true;\nawait closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.actions.getUsers).to.have.been.called;",
                            "err": {},
                            "uuid": "210d6480-c75e-43e7-8797-0bd37647e4f0",
                            "parentUUID": "8bc0a62a-0e24-4ba9-9e15-960386f7e7a8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "2c79bc73-042f-4a36-a0e1-54017a513065",
                        "210d6480-c75e-43e7-8797-0bd37647e4f0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 59,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "76322e66-c689-4550-9bf1-2c63f48be1ec",
                    "title": "UserList.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 41,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "8eddd029-d724-4a1a-b2d8-d3b2af5ceac1",
                            "parentUUID": "76322e66-c689-4550-9bf1-2c63f48be1ec",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should contain pageTitle and search input",
                            "fullTitle": "UserList.vue should contain pageTitle and search input",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nconst pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Users'); // searchInput\nconst searchInput = wrapper.get('input#searchText');\nexpect(searchInput.exists()).to.be.true;\nexpect(searchInput.text()).to.be.empty;",
                            "err": {},
                            "uuid": "7214ae9e-548a-4e52-bdc5-3ac717d11bfd",
                            "parentUUID": "76322e66-c689-4550-9bf1-2c63f48be1ec",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display toolbar buttons",
                            "fullTitle": "UserList.vue should display toolbar buttons",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'addUserBtn',\n  value: 'Add User'\n}, {\n  key: 'replaceUserBtn',\n  value: 'Replace User'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "3057b01a-40d8-426c-b9c4-f44d177228c5",
                            "parentUUID": "76322e66-c689-4550-9bf1-2c63f48be1ec",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display list of users",
                            "fullTitle": "UserList.vue should display list of users",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const table = wrapper.find('[data-test=usersTable]');\nexpect(table.exists()).to.be.true;\nconst header = table.find('table > thead');\n['Last Name', 'First Name', 'Username', 'Email', 'Created', 'Last Updated', 'Active'].forEach(colName => {\n  expect(header.text()).contains(colName);\n});",
                            "err": {},
                            "uuid": "65df917a-2c94-47a1-a1ef-81a68ddd0184",
                            "parentUUID": "76322e66-c689-4550-9bf1-2c63f48be1ec",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7214ae9e-548a-4e52-bdc5-3ac717d11bfd",
                        "3057b01a-40d8-426c-b9c4-f44d177228c5",
                        "65df917a-2c94-47a1-a1ef-81a68ddd0184"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                    "title": "users store actions",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "users store actions \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = { ..._users.default.state\n};",
                            "err": {},
                            "uuid": "f20dad6d-f79e-4c9f-9f50-4d47765c8e6e",
                            "parentUUID": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook",
                            "fullTitle": "users store actions \"after each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "493f40cf-f409-4c46-af69-0c2b0894d650",
                            "parentUUID": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getUsers",
                            "fullTitle": "users store actions should getUsers",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getUsers({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS', [..._mockedData.mockedUsers]]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS_TOTAL', _mockedData.mockedUsers.length]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', false]);",
                            "err": {},
                            "uuid": "82b94c73-6fc5-4865-a07b-436dcc36d994",
                            "parentUUID": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should getUser",
                            "fullTitle": "users store actions should getUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser\n};\nawait _actions.default.getUser({\n  commit,\n  state\n}, {\n  userGuid: user.contactGuid,\n  $commonLib: _commonLib.default\n});\nuser.active = !user.deletedDate;\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', user]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', false]);",
                            "err": {},
                            "uuid": "a9778d68-fd06-4a91-a15b-8c2cb5e3539f",
                            "parentUUID": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insertUser",
                            "fullTitle": "users store actions should insertUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.insertUser({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', _mockedData.mockedUser]);",
                            "err": {},
                            "uuid": "43f619c5-a8b0-4595-8aae-ad3d78fe8394",
                            "parentUUID": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should clearFiltersAndOptions",
                            "fullTitle": "users store actions should clearFiltersAndOptions",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_actions.default.clearFiltersAndOptions({\n  commit,\n  state\n});\n(0, _chai.expect)(commit.args).to.deep.eq([['CLEAR_FILTERS'], ['SET_LIST_OPTIONS']]);",
                            "err": {},
                            "uuid": "549d9d60-041d-4061-82ed-87acf886d6b5",
                            "parentUUID": "67bce14a-7cb7-468b-a3c3-e3eef7cc7017",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "82b94c73-6fc5-4865-a07b-436dcc36d994",
                        "a9778d68-fd06-4a91-a15b-8c2cb5e3539f",
                        "43f619c5-a8b0-4595-8aae-ad3d78fe8394",
                        "549d9d60-041d-4061-82ed-87acf886d6b5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "72ead2f7-1632-4bfc-8688-a45390a1656b",
                    "title": "users store getters",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get users",
                            "fullTitle": "users store getters should get users",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.users = [..._mockedData.mockedUsers];\nconst users = _getters.default.users(state);\n(0, _chai.expect)(users).to.deep.equal(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "b35dae6d-9077-4485-8b72-0cca66ef8779",
                            "parentUUID": "72ead2f7-1632-4bfc-8688-a45390a1656b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get filterCount",
                            "fullTitle": "users store getters should get filterCount",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(0);\nstate.filters.lastName = 'foo';\nstate.filters.firstName = 'bar';\nstate.filters.costCenter = 'costCenter';\nstate.filters.country = '';\nstate.filters.activeOnly = true;\n(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(4);",
                            "err": {},
                            "uuid": "0e2a88d2-a8fb-4db1-be87-bd49e3120043",
                            "parentUUID": "72ead2f7-1632-4bfc-8688-a45390a1656b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "b35dae6d-9077-4485-8b72-0cca66ef8779",
                        "0e2a88d2-a8fb-4db1-be87-bd49e3120043"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                    "title": "users store mutations",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_USERS",
                            "fullTitle": "users store mutations should SET_USERS",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS(state, [..._mockedData.mockedUsers]);\n(0, _chai.expect)(state.users).to.deep.eq(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "8561b348-db90-4a9c-bb9b-73c0df678776",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USERS_TOTAL",
                            "fullTitle": "users store mutations should SET_USERS_TOTAL",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS_TOTAL(state, _mockedData.mockedUsers.length);\n(0, _chai.expect)(state.total).to.eq(_mockedData.mockedUsers.length);",
                            "err": {},
                            "uuid": "ee507928-81a3-4699-b729-12d56ce939ca",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SEARCH",
                            "fullTitle": "users store mutations should SET_SEARCH",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const searchTxt = 'searching for something';\nSET_SEARCH(state, searchTxt);\n(0, _chai.expect)(state.search).to.eq(searchTxt);",
                            "err": {},
                            "uuid": "ce1cef2e-e87c-4497-b443-77466807ce60",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_LOADING",
                            "fullTitle": "users store mutations should SET_LIST_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LIST_LOADING(state, true);\n(0, _chai.expect)(state.listLoading).to.eq(true);",
                            "err": {},
                            "uuid": "6802e22e-a490-43f8-bcb7-a7c96dab237b",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should CLEAR_FILTERS",
                            "fullTitle": "users store mutations should CLEAR_FILTERS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.filters = {\n  lastName: 'test last name',\n  firstName: 'first name',\n  userName: 'fooBar',\n  email: 'foo@bar.com',\n  title: 'my title',\n  managerName: 'manager name',\n  managerGuid: 123,\n  costCenter: 'cost center',\n  country: 'USM',\n  department: 'manager of managers',\n  activeOnly: true\n};\nCLEAR_FILTERS(state);\n(0, _chai.expect)(state.filters).to.deep.eq({\n  lastName: null,\n  firstName: null,\n  userName: null,\n  email: null,\n  title: null,\n  managerName: null,\n  managerGuid: null,\n  costCenter: null,\n  country: null,\n  department: null,\n  activeOnly: false\n});",
                            "err": {},
                            "uuid": "2ae77364-b45b-486f-a8d9-4001302837ef",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_OPTIONS",
                            "fullTitle": "users store mutations should SET_LIST_OPTIONS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const listOptions = {\n  sortBy: ['firstName'],\n  sortDesc: [true],\n  page: 2\n};\nSET_LIST_OPTIONS(state, listOptions);\n(0, _chai.expect)(state.listOptions).to.deep.eq(listOptions); // clear listOptions\nSET_LIST_OPTIONS(state);\n(0, _chai.expect)(state.listOptions).to.deep.eq({\n  sortBy: [],\n  sortDesc: [],\n  page: 1\n});",
                            "err": {},
                            "uuid": "c4cbd031-70eb-445c-b2d9-0788d75fa847",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "users store mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.eq(true);",
                            "err": {},
                            "uuid": "2109037a-1462-4809-9c51-ca4742c3b8b9",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USER_LOADING",
                            "fullTitle": "users store mutations should SET_USER_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USER_LOADING(state, false);\n(0, _chai.expect)(state.userLoading).to.be.false;",
                            "err": {},
                            "uuid": "b77671de-1a38-401b-87f3-4f62e97b4fb0",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_IS_CHECKING_USERNAME",
                            "fullTitle": "users store mutations should SET_IS_CHECKING_USERNAME",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_IS_CHECKING_USERNAME(state, true);\n(0, _chai.expect)(state.isCheckingUsername).to.be.true;",
                            "err": {},
                            "uuid": "0deadb60-3563-473a-be5a-7d1bd4ac238f",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_USER",
                            "fullTitle": "users store mutations should SET_SELECTED_USER",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser,\n  password: 'testPwd',\n  confirmPassword: 'testPwd'\n};\nSET_SELECTED_USER(state, user);\n(0, _chai.expect)(state.selectedUser).to.deep.eq(user); // when no user specified\nSET_SELECTED_USER(state);\n(0, _chai.expect)(state.selectedUser).to.deep.eq({\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  userName: '',\n  email: '',\n  locale: 'en-US',\n  timezone: '',\n  languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460',\n  // US English\n  password: '',\n  confirmPassword: ''\n});",
                            "err": {},
                            "uuid": "8a71f020-89bf-4721-a06f-cc7e818ee0bc",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LOCALES",
                            "fullTitle": "users store mutations should SET_LOCALES",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LOCALES(state, [..._mockedData.mockedLocales]);\n(0, _chai.expect)(state.locales).to.deep.eq(_mockedData.mockedLocales);\nSET_LOCALES(state);\n(0, _chai.expect)(state.locales).to.deep.eq([]);\nSET_LOCALES(state, []);\n(0, _chai.expect)(state.locales).to.deep.eq([]);",
                            "err": {},
                            "uuid": "174a994b-463a-49e9-8ef2-b5b47c981852",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_DELEGATION_START_DATE",
                            "fullTitle": "users store mutations should SET_DELEGATION_START_DATE",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const date = '2020-01-12';\nSET_SELECTED_USER(state, { ..._mockedData.mockedUser\n});\nSET_DELEGATION_START_DATE(state, date);\n(0, _chai.expect)(state.selectedUser.delegate.startDate).to.eq(date);",
                            "err": {},
                            "uuid": "39585971-467c-481d-8079-d8a6c6028dfc",
                            "parentUUID": "6818f087-5c63-4f47-9c0b-74bc21f3910f",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "8561b348-db90-4a9c-bb9b-73c0df678776",
                        "ee507928-81a3-4699-b729-12d56ce939ca",
                        "ce1cef2e-e87c-4497-b443-77466807ce60",
                        "6802e22e-a490-43f8-bcb7-a7c96dab237b",
                        "2ae77364-b45b-486f-a8d9-4001302837ef",
                        "c4cbd031-70eb-445c-b2d9-0788d75fa847",
                        "2109037a-1462-4809-9c51-ca4742c3b8b9",
                        "b77671de-1a38-401b-87f3-4f62e97b4fb0",
                        "0deadb60-3563-473a-be5a-7d1bd4ac238f",
                        "8a71f020-89bf-4721-a06f-cc7e818ee0bc",
                        "174a994b-463a-49e9-8ef2-b5b47c981852",
                        "39585971-467c-481d-8079-d8a6c6028dfc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "20fd9cb4-edcb-4094-b8e0-dc9e23e2d38b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "f73bfbf4-2411-4c8b-b3dd-bfaaa58a6d08",
                    "title": "recentlyVisited",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/commonLib/tests/unit/bookmarks.spec.js",
                    "file": "/tests/unit/bookmarks.spec.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"recentlyVisited\"",
                            "fullTitle": "recentlyVisited \"before each\" hook in \"recentlyVisited\"",
                            "timedOut": false,
                            "duration": 14,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const dom = new JSDOM(\"<html>\\n       <body>\\n          <div class=\\\"v-toolbar__title hidden-sm-and-down\\\">Holidays</div>\\n       </body>\\n     </html>\");\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.location = {\n  hostname: hostname\n};",
                            "err": {},
                            "uuid": "0d92b6a0-f36e-44a8-9458-2a01ff6e165a",
                            "parentUUID": "f73bfbf4-2411-4c8b-b3dd-bfaaa58a6d08",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "adds to recently visted history",
                            "fullTitle": "recentlyVisited adds to recently visted history",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const bookmarks = require('./mocks/bookmarks');\nexpect(bookmarks.recentlyVisited).to.be.empty;\nawait bookmarks.addRecentlyVisited();\nexpect(bookmarks.recentlyVisited.length).to.equal(1);\nexpect(bookmarks.recentlyVisited[0].label).to.equal('Holidays');\nexpect(bookmarks.recentlyVisited[0].icon).to.equal('mdi-calendar-month');",
                            "err": {},
                            "uuid": "d02e9747-a978-4877-a40e-4b242808f26f",
                            "parentUUID": "f73bfbf4-2411-4c8b-b3dd-bfaaa58a6d08",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "d02e9747-a978-4877-a40e-4b242808f26f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 16,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "41bc1e40-837c-4cf9-9e02-9ee7fb5bc6d7",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "2770d515-a9d4-4a16-a1b7-808b93f53c61",
                    "title": "CategorySelect.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelect.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 97,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelect.CategorySelect, {\n  showDialog: false\n});",
                            "err": {},
                            "uuid": "306ed07c-ee3b-40d7-a3bb-e756276f46fd",
                            "parentUUID": "2770d515-a9d4-4a16-a1b7-808b93f53c61",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "25fc728e-771e-4282-8be7-b9a422e3e47b",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelect.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=input_categorySelect]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_categorySelect]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "08a2c7b1-f80e-47d3-af53-b4d7fbb4c799",
                                    "parentUUID": "25fc728e-771e-4282-8be7-b9a422e3e47b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "08a2c7b1-f80e-47d3-af53-b4d7fbb4c799"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b7c9cd3b-ccf7-4cce-bf71-1ce0a0b0e43e",
                    "title": "CategorySelectDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelectDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 44,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelectDialog.default, {\n  items: _mockedCategoryResponse.default\n});",
                            "err": {},
                            "uuid": "97cfa17d-7f5f-440e-bd79-e960a7a592bb",
                            "parentUUID": "b7c9cd3b-ccf7-4cce-bf71-1ce0a0b0e43e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a6ffb50e-09e8-4639-89f0-9bfb560ebb2e",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelectDialog.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "62e2880d-bf6a-4888-87ee-bad9d479ea90",
                                    "parentUUID": "a6ffb50e-09e8-4639-89f0-9bfb560ebb2e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "62e2880d-bf6a-4888-87ee-bad9d479ea90"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "94d26980-e49f-4c5c-9349-81fe7262c914",
                    "title": "CategoryTreeTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategoryTreeTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 31,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategoryTreeTable.CategoryTreeTable, {\n  objectType: 'forms',\n  objectData: _mockedData.mockedObjectData,\n  items: _mockedCategoryResponse.mockedCategoryResponse\n});",
                            "err": {},
                            "uuid": "1432407f-19b9-4ecc-9568-7418dd6620d7",
                            "parentUUID": "94d26980-e49f-4c5c-9349-81fe7262c914",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "eb6516c9-4a0d-476f-b0d0-5276413004e3",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategoryTreeTable.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=objectCatTree_permsButtonComponent]').exists()).to.equal(false);\nexpect(wrapper.find('[data-test=objectCatTree_datatable]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "e0a90155-ad78-4942-9118-e5d72fcc14ce",
                                    "parentUUID": "eb6516c9-4a0d-476f-b0d0-5276413004e3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e0a90155-ad78-4942-9118-e5d72fcc14ce"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "159a3b4f-15ea-4c2d-abe5-6611db7362f9",
                    "title": "Report.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "Report.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 52,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.Report);\ndocument.body.setAttribute('data-app', true);",
                            "err": {},
                            "uuid": "e469c867-6fa2-41bb-9b96-2a7f5e7916b5",
                            "parentUUID": "159a3b4f-15ea-4c2d-abe5-6611db7362f9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e206ada2-6d03-4fe2-8803-1fa5e88b943f",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "Report.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button i.mdi-refresh').exists()).to.equal(true);\nexpect(wrapper.find('button i.mdi-filter-plus-outline').exists()).to.equal(true);\nexpect(wrapper.find('button.mdi-export').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "93d439a0-be30-4d62-88c6-7bdbb9598d31",
                                    "parentUUID": "e206ada2-6d03-4fe2-8803-1fa5e88b943f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays report name",
                                    "fullTitle": "Report.vue inital state displays report name",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('.v-toolbar__title').text()).to.equal('Report - Update profile tasks');",
                                    "err": {},
                                    "uuid": "f1ac2fc6-8cc3-43a3-b119-f77c9e928f5b",
                                    "parentUUID": "e206ada2-6d03-4fe2-8803-1fa5e88b943f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "93d439a0-be30-4d62-88c6-7bdbb9598d31",
                                "f1ac2fc6-8cc3-43a3-b119-f77c9e928f5b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "48407e59-f4b4-407b-994e-57623690d8b6",
                    "title": "ReportTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "ReportTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 71,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.ReportTable, {\n  propsData: {\n    report: _mockedData.mockedFormattedReport\n  }\n});",
                            "err": {},
                            "uuid": "7baa9079-6eeb-4936-bfb9-97a75c5580ae",
                            "parentUUID": "48407e59-f4b4-407b-994e-57623690d8b6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "64e6f87e-1d7c-4e0e-a983-7cd7ab43b976",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders column headers",
                                    "fullTitle": "ReportTable.vue inital state renders column headers",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const headers = wrapper.findAll('th');\nconst expectedHeaders = [\"Request Link\", \"Username\", \"ID For Manage Task\", \"Status\", \"Time from Start to Complete\", \"Date Completed\", \"Manager ID\", \"System ID\", \"Name\"];\nexpectedHeaders.forEach((title, i) => expect(headers.at(i).text()).to.equal(title));",
                                    "err": {},
                                    "uuid": "cd4464c9-2fd6-4764-b18e-1a999e3c3de7",
                                    "parentUUID": "64e6f87e-1d7c-4e0e-a983-7cd7ab43b976",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "renders links with the correct icons",
                                    "fullTitle": "ReportTable.vue inital state renders links with the correct icons",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const firstRow = wrapper.find('tbody > tr').findAll('td');\nexpect(firstRow.length).to.equal(9);\nexpect(firstRow.at(0).find('button.mdi-magnify').exists()).to.equal(true); // Request link\nexpect(firstRow.at(1).text()).to.equal('juser'); // Username\nexpect(firstRow.at(2).find('.mdi-menu-open').exists()).to.equal(true); // Manage Task menu icon\nexpect(firstRow.at(2).find('.v-menu').exists()).to.equal(true); // manage task menu\nexpect(firstRow.at(3).text()).to.equal('Completed'); // status\nexpect(firstRow.at(5).text()).to.equal('2/24/2021'); // date completed\nexpect(firstRow.at(6).text()).to.equal('1'); // manager id\nexpect(firstRow.at(7).find('button.mdi-magnify').exists()).to.equal(true); // link to Task\nexpect(firstRow.at(8).text()).to.equal('System Task - Update Profile'); // task name",
                                    "err": {},
                                    "uuid": "705f9faf-4dde-4c1d-b683-44b5bbd21fde",
                                    "parentUUID": "64e6f87e-1d7c-4e0e-a983-7cd7ab43b976",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cd4464c9-2fd6-4764-b18e-1a999e3c3de7",
                                "705f9faf-4dde-4c1d-b683-44b5bbd21fde"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "17c89a78-ac8d-4fb6-82db-e15103086232",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
                {
                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                    "fullTitle": "commits SET_SELECTED_FOR_EDIT mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                    "err": {},
                    "uuid": "8ed084af-b9b9-4b0f-bef6-1834c3dd64ae",
                    "parentUUID": "17c89a78-ac8d-4fb6-82db-e15103086232",
                    "isHook": false,
                    "skipped": true
                },
                {
                    "title": "commits SET_SHOW_DIALOG mutation",
                    "fullTitle": "commits SET_SHOW_DIALOG mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                    "err": {},
                    "uuid": "dde58e72-1b8c-4d90-b5f9-701873960308",
                    "parentUUID": "17c89a78-ac8d-4fb6-82db-e15103086232",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "00af3554-0d1d-4ad4-9cda-36bb372c80ec",
                    "title": "PasswordSettings.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "renders correctly",
                            "fullTitle": "PasswordSettings.vue renders correctly",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(pwdSettingsApi.listPasswordSettings).to.have.been.called;\nexpect(pwdExpirationActiveCheckBox).to.be.exist;\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(false);\nexpect(pwdExpirationTextBox).to.be.exist;\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal('disabled');\nexpect(pwdExpirationTextBox.element.value).to.equal('7');\nexpect(pwdStrengthActiveCheckBox).to.be.exist;\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(false);\nexpect(minPwdLengthTextBox).to.be.exist;\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(minPwdLengthTextBox.element.value).to.equal('3');\nexpect(maxPwdLengthTextBox).to.be.exist;\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(maxPwdLengthTextBox.element.value).to.equal('10');\nexpect(pwdStrengthExpressionTextBox).to.be.exist;\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal('disabled'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton).to.be.exist;\nexpect(restoreButton.attributes('disabled')).to.equal('disabled');\nexpect(wrapper.find('button#save')).to.be.exist;",
                            "err": {},
                            "uuid": "1ffd4dc6-46c7-4323-97cc-2f76875e1d5f",
                            "parentUUID": "00af3554-0d1d-4ad4-9cda-36bb372c80ec",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [
                        {
                            "uuid": "72c57e18-0234-40bd-8a1b-b429b918f65d",
                            "title": "checkboxes enabling textboxes",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdExpirationActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(true);\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "c209c382-7e6a-465f-987c-50d60d1fb0cb",
                                    "parentUUID": "72c57e18-0234-40bd-8a1b-b429b918f65d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(true);\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal(undefined);\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "dcad9172-ab36-4e3a-800f-ad7365aedd24",
                                    "parentUUID": "72c57e18-0234-40bd-8a1b-b429b918f65d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c209c382-7e6a-465f-987c-50d60d1fb0cb",
                                "dcad9172-ab36-4e3a-800f-ad7365aedd24"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e75c2fe2-c79d-402a-b64d-a09a23126af8",
                            "title": "password length change effects on strength regular expression",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "correctly adjusts strength expression when min pwd length changes",
                                    "fullTitle": "PasswordSettings.vue password length change effects on strength regular expression correctly adjusts strength expression when min pwd length changes",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nminPwdLengthTextBox.element.value = '4';\nminPwdLengthTextBox.trigger('input');\nmaxPwdLengthTextBox.element.value = '11';\nmaxPwdLengthTextBox.trigger('input');\nawait wrapper.vm.$nextTick(); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "a83353c5-333c-4e64-a632-003da0fbf7d0",
                                    "parentUUID": "e75c2fe2-c79d-402a-b64d-a09a23126af8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a83353c5-333c-4e64-a632-003da0fbf7d0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 23,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f04e76d7-c54b-4452-a7a7-3c1047c8f213",
                            "title": "restore default password strength",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "restores default password strength values when restore button is clicked",
                                    "fullTitle": "PasswordSettings.vue restore default password strength restores default password strength values when restore button is clicked",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nawait wrapper.find('button#restoreDefaultPwdStrengthExpression').trigger('click'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');",
                                    "err": {},
                                    "uuid": "8636ce4b-f468-4309-b869-f383649af7e4",
                                    "parentUUID": "f04e76d7-c54b-4452-a7a7-3c1047c8f213",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8636ce4b-f468-4309-b869-f383649af7e4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 31,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4e846400-86a6-4c15-ae64-2a07035eff2b",
                            "title": "save password settings",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "calls updatePasswordSettings with correct params when Save button is clicked",
                                    "fullTitle": "PasswordSettings.vue save password settings calls updatePasswordSettings with correct params when Save button is clicked",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(pwdExpirationActiveCheckBox.element.checked).to.equal(true); // change some settings in ui. make sure api call has correct params when saved\npwdExpirationTextBox.setValue('10');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nwrapper.find('button#save').trigger('click');\nexpect(pwdSettingsApi.updatePasswordSettings).to.have.been.called;\nconst requestBody = pwdSettingsApi.updatePasswordSettings.args[0][1].requestBody;\nexpect(requestBody).to.be.ok;\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('10');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH').settingsValue).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "b4d77d49-e160-4ed5-8072-1a7076ac37dc",
                                    "parentUUID": "4e846400-86a6-4c15-ae64-2a07035eff2b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b4d77d49-e160-4ed5-8072-1a7076ac37dc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [
                        "1ffd4dc6-46c7-4323-97cc-2f76875e1d5f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "71f00f31-4528-4e42-bdac-23df1e28389c",
                    "title": "BiztimeDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimeDialog.vue\"",
                            "fullTitle": "BiztimeDialog.vue \"before each\" hook in \"BiztimeDialog.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "33572ad9-bbe9-4884-9a80-a8b020e0ec4c",
                            "parentUUID": "71f00f31-4528-4e42-bdac-23df1e28389c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimeDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// console.log('-- dd:', wrapper.vm.$store.state.biztimes.selectedForEdit);\n// headline\nconst headline = wrapper.find('span.headline');\nexpect(headline.exists()).to.be.true;\nexpect(headline.text()).to.eq(`Edit Business Hours for ${biztime.dayOfWeek}`); // inputs\nexpect(startTimeRef.value).to.deep.equal(biztime.startTime);\nexpect(endTimeRef.value).to.deep.equal(biztime.endTime);\nexpect(activeRef.inputValue).to.equal(biztime.active); // btns\nexpect(saveBtn.exists()).to.be.true;\nexpect(closeBtn.exists()).to.be.true;",
                            "err": {},
                            "uuid": "2afd70af-b46c-40c6-9035-9c3e2d319cc8",
                            "parentUUID": "71f00f31-4528-4e42-bdac-23df1e28389c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save biztime",
                            "fullTitle": "BiztimeDialog.vue should save biztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await saveBtn.trigger('click');\nexpect(mockstore.actions.saveBiztime).to.have.been.called;",
                            "err": {},
                            "uuid": "236bcd34-adba-4ed4-aa6b-d2d1001df6d7",
                            "parentUUID": "71f00f31-4528-4e42-bdac-23df1e28389c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog",
                            "fullTitle": "BiztimeDialog.vue should close dialog",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.calledWith(store.state.biztimes, {});",
                            "err": {},
                            "uuid": "6f680590-1c07-4c7a-b6b4-28a5cc0820d8",
                            "parentUUID": "71f00f31-4528-4e42-bdac-23df1e28389c",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "2afd70af-b46c-40c6-9035-9c3e2d319cc8",
                        "236bcd34-adba-4ed4-aa6b-d2d1001df6d7",
                        "6f680590-1c07-4c7a-b6b4-28a5cc0820d8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "26206849-fc7f-4a0c-9c7a-b3d22de85f99",
                    "title": "BiztimesTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimesTable.vue\"",
                            "fullTitle": "BiztimesTable.vue \"before each\" hook in \"BiztimesTable.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "604430b3-7ea4-442c-8a52-5744624f58a3",
                            "parentUUID": "26206849-fc7f-4a0c-9c7a-b3d22de85f99",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimesTable.vue should render correctly",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Business Hours'); // link to set permissions\nexpect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true); // getBiztimes\nexpect(mockstore.actions.getBiztimes).to.have.been.called;",
                            "err": {},
                            "uuid": "e817a138-22d1-4337-a4d0-cfeaeb31f0b2",
                            "parentUUID": "26206849-fc7f-4a0c-9c7a-b3d22de85f99",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e817a138-22d1-4337-a4d0-cfeaeb31f0b2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4787cc20-f880-470f-9086-2634604da1e8",
                    "title": "HolidaysTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4cb03497-bcc6-45b4-888f-20a4dbd7b6a0",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook",
                                    "fullTitle": "HolidaysTable.vue initial state \"before each\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_HolidaysTable.default, {\n  store\n});",
                                    "err": {},
                                    "uuid": "37c8f21a-4ec9-4ce6-8d06-894697e00c72",
                                    "parentUUID": null,
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1e37cf90-5568-40d3-ab46-de8409835fcd",
                    "title": "Menu.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Menu.vue\"",
                            "fullTitle": "Menu.vue \"before each\" hook in \"Menu.vue\"",
                            "timedOut": false,
                            "duration": 17,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n}); // data-app prevents warning during test: [Vuetify] Unable to locate target [data-app]\n// https://forum.vuejs.org/t/vuetify-data-app-true-and-problems-rendering-v-dialog-in-unit-tests/27495\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");",
                            "err": {},
                            "uuid": "23dd9b73-bf9d-47df-b11f-8d9b0c3dc09c",
                            "parentUUID": "1e37cf90-5568-40d3-ab46-de8409835fcd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e709e917-af6b-43c7-86d2-02b72f28a8e7",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Menu.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 81,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "0249ffc8-100e-4a99-a5f7-ae66af191f5c",
                                    "parentUUID": "e709e917-af6b-43c7-86d2-02b72f28a8e7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Menu.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('[data-test=\"setPermissionsMobile\"').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "e34b46c9-ae0e-49a8-b568-99e198d941a7",
                                    "parentUUID": "e709e917-af6b-43c7-86d2-02b72f28a8e7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Menu.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.exists()).to.equal(true);\n  expect(deleteButton.attributes('disabled')).to.not.be.undefined;\n  done();\n});",
                                    "err": {},
                                    "uuid": "30cf061b-ca49-4515-9520-edefa3cd56a9",
                                    "parentUUID": "e709e917-af6b-43c7-86d2-02b72f28a8e7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0249ffc8-100e-4a99-a5f7-ae66af191f5c",
                                "e34b46c9-ae0e-49a8-b568-99e198d941a7",
                                "30cf061b-ca49-4515-9520-edefa3cd56a9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 169,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "50681bab-6dca-4fba-8148-45bc13ffe343",
                            "title": "Menu item clicks",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add holiday button click",
                                    "fullTitle": "Menu.vue Menu item clicks add holiday button click",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  wrapper.find('button#addHolidayMobile').trigger('click');\n  it('commits SET_SELECTED_FOR_EDIT mutation', () => {\n    expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;\n  });\n  it('commits SET_SHOW_DIALOG mutation', () => {\n    expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\n  });\n  done();\n});",
                                    "err": {},
                                    "uuid": "13b87357-4e21-421a-bd12-d3e5585ef727",
                                    "parentUUID": "50681bab-6dca-4fba-8148-45bc13ffe343",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Menu.vue Menu item clicks enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n});\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");\nmenuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.attributes('disabled')).to.equal(undefined);\n  done();\n});",
                                    "err": {},
                                    "uuid": "cd3f8141-2f22-402e-907e-5cabddadbc27",
                                    "parentUUID": "50681bab-6dca-4fba-8148-45bc13ffe343",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "13b87357-4e21-421a-bd12-d3e5585ef727",
                                "cd3f8141-2f22-402e-907e-5cabddadbc27"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 107,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0a3cd9c3-879e-4b9c-8219-f4eca6fe7b0a",
                    "title": "Toolbar.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "17d7ca96-e1ae-4cae-bcd8-675a2feb2e93",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"initial state\"",
                                    "fullTitle": "Toolbar.vue initial state \"before each\" hook in \"initial state\"",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "06fe419a-31b8-4864-aa34-29e16ef0deea",
                                    "parentUUID": "17d7ca96-e1ae-4cae-bcd8-675a2feb2e93",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Toolbar.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button#addHoliday').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "085bf14c-1703-4a59-8286-7070dbde2de8",
                                    "parentUUID": "17d7ca96-e1ae-4cae-bcd8-675a2feb2e93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Toolbar.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "f9b258cc-bfe4-4b2d-b414-4de5d9d64bcc",
                                    "parentUUID": "17d7ca96-e1ae-4cae-bcd8-675a2feb2e93",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Toolbar.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.exists()).to.equal(true);\nexpect(deleteButton.attributes('disabled')).to.equal('disabled');",
                                    "err": {},
                                    "uuid": "36497da8-970a-4a98-9f32-87c4f2c245f1",
                                    "parentUUID": "17d7ca96-e1ae-4cae-bcd8-675a2feb2e93",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "085bf14c-1703-4a59-8286-7070dbde2de8",
                                "f9b258cc-bfe4-4b2d-b414-4de5d9d64bcc",
                                "36497da8-970a-4a98-9f32-87c4f2c245f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "67d149ff-16ec-4255-b50a-e46bb29951ca",
                            "title": "add holiday button click",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"add holiday button click\"",
                                    "fullTitle": "Toolbar.vue add holiday button click \"before each\" hook in \"add holiday button click\"",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "mockstore = (0, _store.mockStore)();\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\nwrapper.find('button#addHoliday').trigger('click');",
                                    "err": {},
                                    "uuid": "e351da2c-d60c-4828-8606-92ca1ef20a89",
                                    "parentUUID": "67d149ff-16ec-4255-b50a-e46bb29951ca",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SELECTED_FOR_EDIT mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                                    "err": {},
                                    "uuid": "9c5b2e65-d0c0-49aa-8977-f483654eae39",
                                    "parentUUID": "67d149ff-16ec-4255-b50a-e46bb29951ca",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "commits SET_SHOW_DIALOG mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SHOW_DIALOG mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                                    "err": {},
                                    "uuid": "c4789b52-7c54-41c6-a977-177d31620116",
                                    "parentUUID": "67d149ff-16ec-4255-b50a-e46bb29951ca",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9c5b2e65-d0c0-49aa-8977-f483654eae39",
                                "c4789b52-7c54-41c6-a977-177d31620116"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "27ef13d4-5429-42d4-b063-04ef63f4a6dd",
                            "title": "holidays have been selected for deletion",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"holidays have been selected for deletion\"",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion \"before each\" hook in \"holidays have been selected for deletion\"",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nmockstore = (0, _store.mockStore)({\n  state\n});\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "a61b23c7-15dc-4667-ba14-ccd6a37e66b4",
                                    "parentUUID": "27ef13d4-5429-42d4-b063-04ef63f4a6dd",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "950ed630-1377-4c38-8232-24c0d371fddf",
                                    "parentUUID": "27ef13d4-5429-42d4-b063-04ef63f4a6dd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "dispatches delete_holidays action when delete holidays button is clicked",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion dispatches delete_holidays action when delete holidays button is clicked",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "deleteButton.trigger('click');\nexpect(mockstore.actions.delete_holidays).to.have.been.called;",
                                    "err": {},
                                    "uuid": "f0977f4c-adac-4bd4-b9b7-7a788a7698ad",
                                    "parentUUID": "27ef13d4-5429-42d4-b063-04ef63f4a6dd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "950ed630-1377-4c38-8232-24c0d371fddf",
                                "f0977f4c-adac-4bd4-b9b7-7a788a7698ad"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0e4d3632-9655-4bbe-9906-73f928400988",
                    "title": "biztime actions",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"before each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = {};",
                            "err": {},
                            "uuid": "8ce5b959-a04c-497b-9f8b-8a4bdb3e538b",
                            "parentUUID": "0e4d3632-9655-4bbe-9906-73f928400988",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"after each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "d8ed739c-6d79-4a14-b79f-3610622047cd",
                            "parentUUID": "0e4d3632-9655-4bbe-9906-73f928400988",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getBiztimes",
                            "fullTitle": "biztime actions should getBiztimes",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getBiztimes({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]]]);",
                            "err": {},
                            "uuid": "b58d719c-3dbe-4d0c-89ea-6f425938fdb7",
                            "parentUUID": "0e4d3632-9655-4bbe-9906-73f928400988",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should saveBiztime",
                            "fullTitle": "biztime actions should saveBiztime",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.saveBiztime({\n  commit,\n  state\n}, { ..._list.default[0],\n  $commonLib: _commonLib.default\n});\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]], ['SET_SELECTED_FOR_EDIT', {}], ['SET_SHOW_DIALOG', false]]);",
                            "err": {},
                            "uuid": "87440d1e-1e49-4be9-aceb-e5ff6bc6113d",
                            "parentUUID": "0e4d3632-9655-4bbe-9906-73f928400988",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "b58d719c-3dbe-4d0c-89ea-6f425938fdb7",
                        "87440d1e-1e49-4be9-aceb-e5ff6bc6113d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a9f913e8-6689-4517-8d6b-e120cde80cbd",
                    "title": "biztime getters",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get biztimes",
                            "fullTitle": "biztime getters should get biztimes",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const state = {\n  biztimes: JSON.parse(JSON.stringify(_list.default))\n};\nconst biztimes = _getters.default.biztimes(state);\n(0, _chai.expect)(biztimes).not.to.deep.equal(_list.default);\nbiztimes.forEach(biztime => {\n  const startTime = {\n    hour: biztime.startHour,\n    minute: biztime.startMinute\n  };\n  const endTime = {\n    hour: biztime.endHour,\n    minute: biztime.endMinute\n  };\n  (0, _chai.expect)(biztime.startTime).to.deep.equal(startTime);\n  (0, _chai.expect)(biztime.endTime).to.deep.equal(endTime);\n});",
                            "err": {},
                            "uuid": "8f8e7563-6d70-40dc-a790-3fb40994693e",
                            "parentUUID": "a9f913e8-6689-4517-8d6b-e120cde80cbd",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "8f8e7563-6d70-40dc-a790-3fb40994693e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a35ae817-aa5f-4c60-ad1b-0f660336b52b",
                    "title": "biztime mutations",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_BIZTIMES",
                            "fullTitle": "biztime mutations should SET_BIZTIMES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_BIZTIMES(state, [..._list.default]);\n(0, _chai.expect)(state.biztimes).to.deep.equal(_list.default);",
                            "err": {},
                            "uuid": "f67a3869-7342-4d65-85f4-aafdd3f1a2d8",
                            "parentUUID": "a35ae817-aa5f-4c60-ad1b-0f660336b52b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_FOR_EDIT",
                            "fullTitle": "biztime mutations should SET_SELECTED_FOR_EDIT",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SELECTED_FOR_EDIT(state, _list.default[0]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[0]);\nSET_SELECTED_FOR_EDIT(state, _list.default[3]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[3]);",
                            "err": {},
                            "uuid": "0e4616f7-24d3-4bd4-9694-d3c68aaa3a3c",
                            "parentUUID": "a35ae817-aa5f-4c60-ad1b-0f660336b52b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "biztime mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.equal(true);\nSET_SHOW_DIALOG(state, false);\n(0, _chai.expect)(state.showDialog).to.equal(false);",
                            "err": {},
                            "uuid": "9a33173f-3cc3-4fb4-98cd-d4f71b978b32",
                            "parentUUID": "a35ae817-aa5f-4c60-ad1b-0f660336b52b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f67a3869-7342-4d65-85f4-aafdd3f1a2d8",
                        "0e4616f7-24d3-4bd4-9694-d3c68aaa3a3c",
                        "9a33173f-3cc3-4fb4-98cd-d4f71b978b32"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "8ed084af-b9b9-4b0f-bef6-1834c3dd64ae",
                "dde58e72-1b8c-4d90-b5f9-701873960308"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        }
    ],
    "meta": {
        "mocha": {
            "version": "8.1.1"
        },
        "mochawesome": {
            "options": {
                "quiet": false,
                "reportFilename": "mochawesome",
                "saveHtml": true,
                "saveJson": true,
                "consoleReporter": "spec",
                "useInlineDiffs": false,
                "code": true
            },
            "version": "6.1.1"
        },
        "marge": {
            "options": null,
            "version": "5.1.0"
        }
    }
}