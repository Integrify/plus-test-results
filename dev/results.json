{
    "stats": {
        "suites": 20,
        "tests": 496,
        "passes": 493,
        "pending": 0,
        "failures": 0,
        "start": "2021-06-11T13:08:17.944Z",
        "end": "2021-06-11T13:08:17.944Z",
        "duration": 92215,
        "testsRegistered": 496,
        "passPercent": 99.39516129032258,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 3,
        "hasSkipped": true
    },
    "results": [
        {
            "uuid": "2780066f-0188-4545-bf79-7edfdf0aebae",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [
                {
                    "title": "\"before all\" hook",
                    "fullTitle": "\"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "// insert known tokens into redis (normally these are created by emailPasswordReset)\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait redisClient.setexAsync(`pwReset:${accountGuid}`, 3600, securityToken);\nawait redisClient.setexAsync(`pwReset:${securityToken}`, 3600, accountGuid);",
                    "err": {},
                    "uuid": "325ed242-f8ef-4a96-8b66-8f939fa79fb1",
                    "parentUUID": "2780066f-0188-4545-bf79-7edfdf0aebae",
                    "isHook": true,
                    "skipped": false
                }
            ],
            "afterHooks": [],
            "tests": [
                {
                    "title": "should create a new password",
                    "fullTitle": "should create a new password",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "const mockReq = mocks.createNewPassword(securityToken);\nconst mockRes = mocks.mockResponse();\nawait resetPassword.createNewPassword(mockReq, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\n// ensure createNewPassword cleans up redis\nexpect(await redisClient.getAsync(`pwReset:${accountGuid}`)).to.be.null;\nexpect(await redisClient.getAsync(`pwReset:${securityToken}`)).to.be.null;",
                    "err": {},
                    "uuid": "d30074ff-935b-4c34-8c29-a82aa2d03771",
                    "parentUUID": "2780066f-0188-4545-bf79-7edfdf0aebae",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "7c8c21f0-fe6f-41c5-9dac-2603a38b08ba",
                    "title": "Auth API API Key Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/apiKey.test.js",
                    "file": "/test/integration/functions/apiKey.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"before all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "f851165e-12ca-418e-8494-85fd8bf3788b",
                            "parentUUID": "7c8c21f0-fe6f-41c5-9dac-2603a38b08ba",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"after all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await apiKey.deleteTestKeys(testConfig.tenantOne.tenantId);",
                            "err": {},
                            "uuid": "e00e6ebf-7c33-435f-9531-88e768b84712",
                            "parentUUID": "7c8c21f0-fe6f-41c5-9dac-2603a38b08ba",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "be6da053-aab1-4fa7-94a4-c687feba7467",
                            "title": "api key crud ",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/apiKey.test.js",
                            "file": "/test/integration/functions/apiKey.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should insert an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 176,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = {expires: new Date(new Date().getTime() + 60000), testOnly: true, description: \"this is a test\"}\nawait apiKey.createApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nkey = inserted.key;\nid = inserted._id;\nexpect(inserted).to.exist;",
                                    "err": {},
                                    "uuid": "c5f74d96-0357-4475-827b-143fc92963a6",
                                    "parentUUID": "be6da053-aab1-4fa7-94a4-c687feba7467",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list an apiKeys",
                                    "fullTitle": "Auth API API Key Tests api key crud  should list an apiKeys",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nawait apiKey.listApiKeys(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst keyList = mockRes.body;\nexpect(keyList).to.exist;\nexpect(keyList.length).to.be.gt(0);\nexpect(keyList[0].hashedKey).to.exist",
                                    "err": {},
                                    "uuid": "776be45e-1c26-4940-b20d-5c40a0df55f6",
                                    "parentUUID": "be6da053-aab1-4fa7-94a4-c687feba7467",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should verify an apiKey",
                                    "fullTitle": "Auth API API Key Tests api key crud  should verify an apiKey",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait apiKey.verifyApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"api key valid\");",
                                    "err": {},
                                    "uuid": "918da72d-2905-4e83-880a-0f7886d89e50",
                                    "parentUUID": "be6da053-aab1-4fa7-94a4-c687feba7467",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid api key and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid api key and return a JWT",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonate(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "7bc9e455-e286-4b8b-baaf-3ced5cf864ac",
                                    "parentUUID": "be6da053-aab1-4fa7-94a4-c687feba7467",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userName and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userName and return a JWT",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);\ncontact = impersonated;",
                                    "err": {},
                                    "uuid": "365c74ef-35d0-4309-b508-cfd29fbab267",
                                    "parentUUID": "be6da053-aab1-4fa7-94a4-c687feba7467",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userSid and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userSid and return a JWT",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userSid = contact.contactGuid;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "e8f7e9f4-9606-4ef7-aa98-c1366c3cfcb0",
                                    "parentUUID": "be6da053-aab1-4fa7-94a4-c687feba7467",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c5f74d96-0357-4475-827b-143fc92963a6",
                                "776be45e-1c26-4940-b20d-5c40a0df55f6",
                                "918da72d-2905-4e83-880a-0f7886d89e50",
                                "7bc9e455-e286-4b8b-baaf-3ced5cf864ac",
                                "365c74ef-35d0-4309-b508-cfd29fbab267",
                                "e8f7e9f4-9606-4ef7-aa98-c1366c3cfcb0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 272,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e997c22f-0540-4b55-a1d2-25ca56a86315",
                    "title": "Auth API Auth Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                    "file": "/test/integration/functions/auth.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Auth Tests\"",
                            "fullTitle": "Auth API Auth Tests \"before all\" hook in \"Auth API Auth Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "c47ff9c0-4014-4aa8-ab34-991504973315",
                            "parentUUID": "e997c22f-0540-4b55-a1d2-25ca56a86315",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6b96e75d-7b23-4d45-8cd4-3c6b51b4abf5",
                            "title": "getGuestToken",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return guest auth token",
                                    "fullTitle": "Auth API Auth Tests getGuestToken should return guest auth token",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet getGuestTokenEvent = await mocks.getGuestTokenEvent()\n\t\t\tlet results = await dbauth.getGuestToken(getGuestTokenEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n      expect(mockRes.body.length).to.be.greaterThan(1000);",
                                    "err": {},
                                    "uuid": "4540a73d-693f-4b63-bd36-fc3232e266ba",
                                    "parentUUID": "6b96e75d-7b23-4d45-8cd4-3c6b51b4abf5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4540a73d-693f-4b63-bd36-fc3232e266ba"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 45,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8de50669-d4c6-4a64-887a-234e1e5e8e7a",
                            "title": "login",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a contact with a token",
                                    "fullTitle": "Auth API Auth Tests login should return a contact with a token",
                                    "timedOut": false,
                                    "duration": 149,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet loginEvent = await mocks.loginEvent()\n\t\t\tlet results = await dbauth.login(loginEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst contactInfo = mockRes.body;\n\t\t\texpect(contactInfo.userName).equal(loginEvent.body.username);\n\t\t\texpect(contactInfo.token).to.exist;",
                                    "err": {},
                                    "uuid": "37cc5887-945f-4e2e-a685-191de8d19f27",
                                    "parentUUID": "8de50669-d4c6-4a64-887a-234e1e5e8e7a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "37cc5887-945f-4e2e-a685-191de8d19f27"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 149,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "198da659-ac9e-43fc-b82f-1b28b7703a0d",
                            "title": "refreshJwt",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests refreshJwt refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 99,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\nlet loginEvent = await mocks.loginEvent()\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.login(loginEvent, mockRes);\nconst contactInfo = mockRes.body;\nlogoutEvent.cookies = {\"integrifyRefreshToken\": contactInfo.refreshToken };\nlogoutEvent.body = {token: contactInfo.token, refreshToken: contactInfo.refreshToken }\nawait jwtFuncs.refreshJwt(logoutEvent, await mocks.mockResponse());\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "f9e55126-8190-44ec-a013-79d7454c70ad",
                                    "parentUUID": "198da659-ac9e-43fc-b82f-1b28b7703a0d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f9e55126-8190-44ec-a013-79d7454c70ad"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 99,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9e4f2fa6-989d-4591-b708-15c21c18dea1",
                            "title": "isAuthenticated",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests isAuthenticated refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\n\nawait jwtFuncs.isAuthenticated({cookies: {integrifyToken: \"fake\"}}, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "cbd3fede-88de-4941-a122-3a640d93aff2",
                                    "parentUUID": "9e4f2fa6-989d-4591-b708-15c21c18dea1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cbd3fede-88de-4941-a122-3a640d93aff2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c8231a88-42c6-4d0e-8efd-bd7b1f42e07c",
                            "title": "logout",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should log a user out",
                                    "fullTitle": "Auth API Auth Tests logout should log a user out",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.logout(logoutEvent, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body).to.deep.equal({message: 'OK'});",
                                    "err": {},
                                    "uuid": "a436c46b-2587-4a1a-822a-4f4fd54f8f0b",
                                    "parentUUID": "c8231a88-42c6-4d0e-8efd-bd7b1f42e07c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a436c46b-2587-4a1a-822a-4f4fd54f8f0b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6a9f0ebb-0cc6-4965-a5cb-175adfc6ba03",
                    "title": "Auth API Reset Password Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                    "file": "/test/integration/functions/resetPassword.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Reset Password Tests\"",
                            "fullTitle": "Auth API Reset Password Tests \"before all\" hook in \"Auth API Reset Password Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000);\nprocess.env.TESTING = true;\nresetRewired.__set__('nodemailer', nodemailerMock);",
                            "err": {},
                            "uuid": "9a069a83-8eaf-46df-ba56-91d44fddf8f5",
                            "parentUUID": "6a9f0ebb-0cc6-4965-a5cb-175adfc6ba03",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6c9d7079-e2a2-4db9-9990-66edc0ce1b6e",
                            "title": "emailUsernames",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should send an email of accounts for existing email",
                                    "fullTitle": "Auth API Reset Password Tests emailUsernames should send an email of accounts for existing email",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\n      const accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\n      const mockRes = mocks.mockResponse();\n      const mockReq = await mocks.emailUsernames();\n      await resetRewired.emailUsernames(mockReq, mockRes);\n      expect(mockRes.statusCode).equal(200);\n      expect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "8e0451af-db60-4e6c-91da-f7047312ca9f",
                                    "parentUUID": "6c9d7079-e2a2-4db9-9990-66edc0ce1b6e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8e0451af-db60-4e6c-91da-f7047312ca9f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3aac8f08-e4ab-403e-8382-094ebb40a795",
                            "title": "passwordReset",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"passwordReset\"",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset \"before all\" hook in \"passwordReset\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "resetRewired.__set__('nodemailer', nodemailerMock);",
                                    "err": {},
                                    "uuid": "af6a6c7d-c28e-4330-944d-83f2f8b2760f",
                                    "parentUUID": "3aac8f08-e4ab-403e-8382-094ebb40a795",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "emailPassworReset",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset emailPassworReset",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\nconst accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait resetRewired.emailPasswordReset(mockReq, mockRes);\n// check if security token was added to redis\nconst securityToken = await redisClient.getAsync(`pwReset:${accountGuid}`);\nconst accountEntry = await redisClient.getAsync(`pwReset:${securityToken}`);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(securityToken).to.exist;\nexpect(accountEntry).to.exist;\n// clean up entries leftover from calling emailPasswordReset\nawait redisClient.del(`pwReset:${accountGuid}`);\nawait redisClient.del(`pwReset:${securityToken}`);",
                                    "err": {},
                                    "uuid": "87c2e5ca-ab12-4e32-a2f9-d9cc5e8a7d4b",
                                    "parentUUID": "3aac8f08-e4ab-403e-8382-094ebb40a795",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "87c2e5ca-ab12-4e32-a2f9-d9cc5e8a7d4b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d023df4d-23c5-48d7-8d0a-ee6b68c5129f",
                    "title": "Auth API SAML Settings Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/samlSettings.test.js",
                    "file": "/test/integration/functions/samlSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "2ac2e297-cf6a-4513-9288-4f92cb83803e",
                            "parentUUID": "d023df4d-23c5-48d7-8d0a-ee6b68c5129f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await samlSettings.deleteSamlSettingsByName(testConfig.tenantOne.tenantId, 'unitTestIDP')",
                            "err": {},
                            "uuid": "85c208e6-68ab-42a2-9058-af1a114cb0b2",
                            "parentUUID": "d023df4d-23c5-48d7-8d0a-ee6b68c5129f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fce76f0a-60a8-434a-a990-664b45ac3597",
                            "title": "SAML Settings crud ",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/samlSettings.test.js",
                            "file": "/test/integration/functions/samlSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert saml settings and return a doc",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should insert saml settings and return a doc",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n           \nreq.body = data;\nawait samlSettings.createSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\n\nsamlId = inserted._id;\nexpect(inserted).to.exist;\nexpect(inserted.idpMetaData).to.equal(data.idpMetaData);\nexpect(inserted.idpName).to.equal(data.idpName);\nexpect(inserted.idpDescription).to.equal(data.idpDescription);\nexpect(inserted.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "032b97f0-fdc1-4918-8681-847a6e87406d",
                                    "parentUUID": "fce76f0a-60a8-434a-a990-664b45ac3597",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings without an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings without an id",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "7aba04f8-6dcf-436c-86de-960a97577187",
                                    "parentUUID": "fce76f0a-60a8-434a-a990-664b45ac3597",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings with an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings with an id",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId.toString();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result._id.toString()).to.equal(samlId.toString());",
                                    "err": {},
                                    "uuid": "1022f038-ad36-4a86-a6d4-7d894d7caa3c",
                                    "parentUUID": "fce76f0a-60a8-434a-a990-664b45ac3597",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should update saml settings",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\n\nreq.body = data;\n\nawait samlSettings.updateSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.exist;",
                                    "err": {},
                                    "uuid": "ccba0d4a-7c46-44dd-a973-a3efee178a26",
                                    "parentUUID": "fce76f0a-60a8-434a-a990-664b45ac3597",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return sp metadata",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should return sp metadata",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait samlSettings.getMetaData(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst metadata = mockRes.body;\nexpect(metadata).to.exist;",
                                    "err": {},
                                    "uuid": "2ef613f6-ca61-4c59-8645-5d62737a6cee",
                                    "parentUUID": "fce76f0a-60a8-434a-a990-664b45ac3597",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should delete saml settings",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.deleteSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "47e86f78-c96e-4820-b03b-bfbb6b42b647",
                                    "parentUUID": "fce76f0a-60a8-434a-a990-664b45ac3597",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "032b97f0-fdc1-4918-8681-847a6e87406d",
                                "7aba04f8-6dcf-436c-86de-960a97577187",
                                "1022f038-ad36-4a86-a6d4-7d894d7caa3c",
                                "ccba0d4a-7c46-44dd-a973-a3efee178a26",
                                "2ef613f6-ca61-4c59-8645-5d62737a6cee",
                                "47e86f78-c96e-4820-b03b-bfbb6b42b647"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 64,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "d30074ff-935b-4c34-8c29-a82aa2d03771"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        },
        {
            "uuid": "3f89f2ba-2bac-4507-9039-cfae932f7d5c",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "30c696f0-21c1-4f74-9298-397a3d1d9e54",
                    "title": "Dashboard controller tests",
                    "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.controller.test.js",
                    "file": "/test/dashboard.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "58d6332f-8d5e-43c6-b6c3-9e61768884f5",
                            "parentUUID": "30c696f0-21c1-4f74-9298-397a3d1d9e54",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "68ad1c3c-c194-4be6-b980-b8b71e9775b1",
                            "parentUUID": "30c696f0-21c1-4f74-9298-397a3d1d9e54",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                            "title": "dashboard crud ",
                            "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.controller.test.js",
                            "file": "/test/dashboard.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.createDashboard(tenant, dashboardObj);\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "f4bbcbfd-9ac3-4a4d-9de4-3da3836c2ba5",
                                    "parentUUID": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboards = await dashboardController.listDashboards(tenant);\n         expect(dashboards.length).to.be.gt(0);  \n         let createdDashord  = dashboards.find((d) => {\n             return d.sid === sid;\n         })\n         expect\n         (createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "0ef3438e-af14-4338-9ecc-e2aeb1b9c1f7",
                                    "parentUUID": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard = await dashboardController.getDashboard(tenant,sid);\n            expect(dashboard).to.exist         \n            expect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "054f01cc-0ff8-40fe-964a-2972a8729ddb",
                                    "parentUUID": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard.banner = 'test-updated';\n            const updatedDashboard = await dashboardController.updateDashboard(tenant,dashboard.toObject());\n            expect(updatedDashboard).to.exist         \n            expect(updatedDashboard.sid).to.equal(sid)\n            expect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "70ccd594-0fd0-40fd-9250-4fc1911c4479",
                                    "parentUUID": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const copiedDashboard = await dashboardController.copyDashboard(tenant, sid);\n            expect(copiedDashboard).to.exist         \n            expect(copiedDashboard.sid).to.not.equal(sid)\n            expect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "301aca5c-73fb-46c4-b4d2-2edd116c35fd",
                                    "parentUUID": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  delete a a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await dashboardController.deleteDashboard(tenant,sid);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "db237f0e-b6c6-4776-9d2d-f7591385846b",
                                    "parentUUID": "646f67fd-1be3-4a54-90cf-8b2950d06feb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f4bbcbfd-9ac3-4a4d-9de4-3da3836c2ba5",
                                "0ef3438e-af14-4338-9ecc-e2aeb1b9c1f7",
                                "054f01cc-0ff8-40fe-964a-2972a8729ddb",
                                "70ccd594-0fd0-40fd-9250-4fc1911c4479",
                                "301aca5c-73fb-46c4-b4d2-2edd116c35fd",
                                "db237f0e-b6c6-4776-9d2d-f7591385846b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 79,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "411affb3-d45c-4f4e-a538-e731ae141cb2",
                    "title": "Dashboard route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.handlers.test.js",
                    "file": "/test/dashboard.handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nsession = (await mocks.req()).oauth;\nperms  = await permissions.currentUserPermissions(session)\nlet permissionsWithRun = perms.concat([\n    {\n        \"objectType\": \"tab\",\n        \"ownerSid\": \"bb6cb26b-d179-4763-b2cb-69d107dfd1d8\",\n        \"ownerType\": \"system\",\n        \"permissions\": enums.permissionTypes.run,\n        \"roleName\": \"system administrators\",\n        \"roleGuid\": \"a48ea7cf-f1ba-4ca9-bf17-2c97d49336cd\"\n      }\n])\nawait permissions.cachePerms(session, permissionsWithRun);\nconsole.log(permissionsWithRun)",
                            "err": {},
                            "uuid": "bc4355ef-0154-4c11-bdb4-be0a8bf64cd2",
                            "parentUUID": "411affb3-d45c-4f4e-a538-e731ae141cb2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard route handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);\nawait permissions.cachePerms(session, perms);",
                            "err": {},
                            "uuid": "ded57b3c-647a-419a-810c-bfa3e0854f89",
                            "parentUUID": "411affb3-d45c-4f4e-a538-e731ae141cb2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                            "title": "dashboard crud ",
                            "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.handlers.test.js",
                            "file": "/test/dashboard.handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = dashboardObj;\nawait handlers.createDashboard(req,mockRes);\nconst dashboard = req.body;\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "98c88193-cbe0-4b9d-af8d-52fcfb9065cb",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "a5b675b9-e173-42aa-a99b-e542f5164aa4",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for admins",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for admins",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.admin = true;\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "0b76dfc6-8bfc-47d3-bb53-3738a1f4d015",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.getDashboard(req,mockRes);\ndashboard = mockRes.body;\nexpect(dashboard).to.exist         \nexpect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "5bc97bb4-d717-4686-b95e-48f37fe3e16f",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.updateDashboard(req,mockRes);\nconst updatedDashboard = mockRes.body;\nexpect(updatedDashboard).to.exist         \nexpect(updatedDashboard.sid).to.equal(sid)\nexpect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "e3e26d31-d0e6-42e0-b755-1db3e986490f",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.copyDashboard(req,mockRes);\nconst copiedDashboard = mockRes.body;\nexpect(copiedDashboard).to.exist         \nexpect(copiedDashboard.sid).to.not.equal(sid)\nexpect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "8742d80e-87b7-4b16-85f0-475c7142ae64",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should delete a dashboard",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.deleteDashboard(req,mockRes);\nlet deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "1ef78d79-eb95-42c7-a740-cdbbe0148b09",
                                    "parentUUID": "79215b38-7842-4c84-9cbd-4ed95c1a1079",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "98c88193-cbe0-4b9d-af8d-52fcfb9065cb",
                                "a5b675b9-e173-42aa-a99b-e542f5164aa4",
                                "0b76dfc6-8bfc-47d3-bb53-3738a1f4d015",
                                "5bc97bb4-d717-4686-b95e-48f37fe3e16f",
                                "e3e26d31-d0e6-42e0-b755-1db3e986490f",
                                "8742d80e-87b7-4b16-85f0-475c7142ae64",
                                "1ef78d79-eb95-42c7-a740-cdbbe0148b09"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 57,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "28f11f68-de4d-4c7e-b911-9d73f49296d1",
                    "title": "Legacy tab mongo tests",
                    "fullFile": "/home/tim/src/integrify/api-dashboards/test/tab.test.js",
                    "file": "/test/tab.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()\ntenant = testConfig.tenantOne.tenantId;;\ntab = await dashboardController.createTestTab(tenant)\nexpect(tab.SID).to.exist",
                            "err": {},
                            "uuid": "16c4bc0d-3939-43ed-8d11-500285916ff2",
                            "parentUUID": "28f11f68-de4d-4c7e-b911-9d73f49296d1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteTabs(tenant, {Title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-migrated'});",
                            "err": {},
                            "uuid": "1d7c2170-8f81-48b7-90f1-788ed54e29d9",
                            "parentUUID": "28f11f68-de4d-4c7e-b911-9d73f49296d1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                            "title": "tab crud ",
                            "fullFile": "/home/tim/src/integrify/api-dashboards/test/tab.test.js",
                            "file": "/test/tab.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should create a legacy tab",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tab = await dashboardController.createTestTab(tenant);\n\n tabSid = tab.SID;\n expect(tabSid).to.exist",
                                    "err": {},
                                    "uuid": "086baa09-564a-494f-b0a9-fc25ca19c0af",
                                    "parentUUID": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list legacy tabs",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should list legacy tabs",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tabs = await dashboardController.listTabs(tenant);\n expect(tabs.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "551c7664-a2d3-4955-b019-29626f38efa4",
                                    "parentUUID": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should get a legacy tab",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "tab = await dashboardController.getTab(tenant,tabSid);\n            expect(tab).to.exist         \n            expect(tab.SID).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "825d91b1-9072-4c5f-bb56-9a494e8f4c9f",
                                    "parentUUID": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a tab using a dashboard object",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should update a tab using a dashboard object",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const dashboardObject = {\n    sid: tab.SID,\n    title: tab.Title,\n    ordinal: 5000,\n}\nconst dashboardMask = await dashboardController.updateTabFromDashboardObject(tenant,dashboardObject);\nexpect(dashboardObject.modifiedDate).to.exist\ntab = await dashboardController.getTab(tenant,tab.SID);\nexpect(tab).to.exist         \nexpect(tab.SID).to.equal(tabSid)\nexpect(tab.Ordinal).to.equal(dashboardObject.ordinal)",
                                    "err": {},
                                    "uuid": "2155fc8e-d37b-4dde-a6ae-ca5aafc6ec8e",
                                    "parentUUID": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should convert a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should convert a legacy tab",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.converTabToDashboard(tab);\n            expect(dashboard).to.exist         \n            expect(dashboard.layouts).to.exist;\n            expect(dashboard.legacySid).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "2f385fa0-829c-4101-a835-c6dfa8d416d4",
                                    "parentUUID": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should migrate legacy tab to dashboard",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should migrate legacy tab to dashboard",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  success = await dashboardController.migrateTabToDashboard(tenant, tabSid);\n            expect(success.sid).to.exist;",
                                    "err": {},
                                    "uuid": "fd79ad86-6247-4a8c-a291-620b3824a227",
                                    "parentUUID": "aee5a316-b73e-4b9b-8b37-e920209689b5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "086baa09-564a-494f-b0a9-fc25ca19c0af",
                                "551c7664-a2d3-4955-b019-29626f38efa4",
                                "825d91b1-9072-4c5f-bb56-9a494e8f4c9f",
                                "2155fc8e-d37b-4dde-a6ae-ca5aafc6ec8e",
                                "2f385fa0-829c-4101-a835-c6dfa8d416d4",
                                "fd79ad86-6247-4a8c-a291-620b3824a227"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "c7925fd9-1ef7-4212-977b-4b3a551fc38a",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "1b0730a1-ab5a-4604-a3fd-80a4e1af0b92",
                    "title": "Files db controller tests",
                    "fullFile": "/home/tim/src/integrify/api-files/test/db/file.controller.test.js",
                    "file": "/test/db/file.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"before all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await testLib.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "52f9504a-04bb-453c-b14a-b7a70c351d62",
                            "parentUUID": "1b0730a1-ab5a-4604-a3fd-80a4e1af0b92",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"after all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await fileController.removeFiles(tenant, {path: \"/created/by/mocha/test\"});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "fad78f75-1103-4624-94e9-b9dd3561309c",
                            "parentUUID": "1b0730a1-ab5a-4604-a3fd-80a4e1af0b92",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2e7d20ad-64ae-481b-b92b-0c559a826370",
                            "title": "file crud ",
                            "fullFile": "/home/tim/src/integrify/api-files/test/db/file.controller.test.js",
                            "file": "/test/db/file.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a file",
                                    "fullTitle": "Files db controller tests file crud  should create a file",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const file = await fileController.createFile(tenant, fileObj);\nsid = file.sid;\nexpect(sid).to.exist;",
                                    "err": {},
                                    "uuid": "361179b0-f5c6-4e23-931c-6f1b200737a8",
                                    "parentUUID": "2e7d20ad-64ae-481b-b92b-0c559a826370",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a file",
                                    "fullTitle": "Files db controller tests file crud  should get a file",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.getFile(tenant, sid);\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "42ed2300-000b-420b-a622-cf93257fdbfd",
                                    "parentUUID": "2e7d20ad-64ae-481b-b92b-0c559a826370",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should find a file",
                                    "fullTitle": "Files db controller tests file crud  should find a file",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.findFile(tenant, {filePath: \"/created/by/mocha/test\"});\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "68cc470b-5e48-42e0-98be-961350a19192",
                                    "parentUUID": "2e7d20ad-64ae-481b-b92b-0c559a826370",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a file",
                                    "fullTitle": "Files db controller tests file crud  should update a file",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const updatedFile = await fileController.updateFile(\n  tenant,\n  file.toObject()\n);\nexpect(updatedFile).to.exist;\nexpect(updatedFile.sid).to.equal(sid);\nexpect(updatedFile.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "0f65fff6-9640-4792-80df-1b759cff8d7d",
                                    "parentUUID": "2e7d20ad-64ae-481b-b92b-0c559a826370",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a file",
                                    "fullTitle": "Files db controller tests file crud  delete a a file",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await fileController.removeFile(tenant, fileObj);\nexpect(deleted).to.exist;\nexpect(deleted.deletedCount).to.equal(1);",
                                    "err": {},
                                    "uuid": "868b7f77-5c39-47c3-ad4f-fdd30ad1183b",
                                    "parentUUID": "2e7d20ad-64ae-481b-b92b-0c559a826370",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "361179b0-f5c6-4e23-931c-6f1b200737a8",
                                "42ed2300-000b-420b-a622-cf93257fdbfd",
                                "68cc470b-5e48-42e0-98be-961350a19192",
                                "0f65fff6-9640-4792-80df-1b759cff8d7d",
                                "868b7f77-5c39-47c3-ad4f-fdd30ad1183b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 54,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "b2198370-66d0-45c9-88b4-c2811d332523",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "9637d731-4014-4e79-b17c-42f6d8a5e462",
                    "title": "Form controller tests",
                    "fullFile": "/home/tim/src/integrify/api-forms/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Form controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenant = config.tenantOne.tenantId;\nsession = {jwt_token: 'xxxxx', tenant: config.tenantOne.tenantId, \nuser_sid: config.tenantOne.adminUser.sid,\nprofile: {\n  sid: config.tenantOne.adminUser.sid,\n  user_sid: config.tenantOne.adminUser.sid,\n  user_name: config.tenantOne.adminUser.userName,\n  email: \"test@nowhere.com\",\n  name: config.tenantOne.adminUser.userName + \" user\"\n}\n   }",
                            "err": {},
                            "uuid": "50d69545-0640-4f20-a748-f11e24b4b82b",
                            "parentUUID": "9637d731-4014-4e79-b17c-42f6d8a5e462",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "87ae90c4-cf8f-4d28-bfca-06a2e2f80460",
                            "title": "form retrieval",
                            "fullFile": "/home/tim/src/integrify/api-forms/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should retrieve a form by id with default",
                                    "fullTitle": "Form controller tests form retrieval should retrieve a form by id with default",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const form = await controller.getForm(tenant, profileFormSid);\nexpect(form['name']).to.equal('Contact Profile Update Form');",
                                    "err": {},
                                    "uuid": "afb3e380-81ff-498e-820a-a3602ebca748",
                                    "parentUUID": "87ae90c4-cf8f-4d28-bfca-06a2e2f80460",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should parse out questions",
                                    "fullTitle": "Form controller tests form retrieval should parse out questions",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const questions = await controller.getFormQuestions(tenant, profileFormSid);\nexpect(questions.length).to.equal(12);\nexpect(Object.keys(questions[0])).to.have.members(['id', 'displayName', 'label', 'show', 'type', 'validation'])",
                                    "err": {},
                                    "uuid": "4ae4509d-ca03-484d-b6d3-4d0795c6c44c",
                                    "parentUUID": "87ae90c4-cf8f-4d28-bfca-06a2e2f80460",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms without a name search",
                                    "fullTitle": "Form controller tests form retrieval should list forms without a name search",
                                    "timedOut": false,
                                    "duration": 176,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const forms = await controller.listForms(tenant);\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].name).to.exist;",
                                    "err": {},
                                    "uuid": "3fb04eef-d2f1-4772-a70b-c4c40d81f8f9",
                                    "parentUUID": "87ae90c4-cf8f-4d28-bfca-06a2e2f80460",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms with a name search",
                                    "fullTitle": "Form controller tests form retrieval should list forms with a name search",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const forms = await controller.listForms(tenant, {sid: profileFormSid});\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].sid).to.equal(profileFormSid);",
                                    "err": {},
                                    "uuid": "fc0258ad-712a-4574-a42c-19850369d9fa",
                                    "parentUUID": "87ae90c4-cf8f-4d28-bfca-06a2e2f80460",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "afb3e380-81ff-498e-820a-a3602ebca748",
                                "4ae4509d-ca03-484d-b6d3-4d0795c6c44c",
                                "3fb04eef-d2f1-4772-a70b-c4c40d81f8f9",
                                "fc0258ad-712a-4574-a42c-19850369d9fa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 231,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "357dd998-6a06-44da-aaa1-bcd797839467",
                    "title": "Form route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-forms/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Form route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenant = config.tenantOne.tenantId;\nintegrifyEnvToken = config.tenantOne.tenantId + \" \" + process.env.INTEGRIFY_ENV_TOKEN\noauth = {jwt_token: 'xxxxx', tenant: config.tenantOne.tenantId, \nuser_sid: config.tenantOne.adminUser.sid,\nprofile: {\n  sid: config.tenantOne.adminUser.sid,\n  user_sid: config.tenantOne.adminUser.sid,\n  user_name: config.tenantOne.adminUser.userName,\n  email: \"test@nowhere.com\",\n  name: config.tenantOne.adminUser.userName + \" user\"\n}\n       }",
                            "err": {},
                            "uuid": "49369d9e-161e-43dc-bca0-52fe3b8899b2",
                            "parentUUID": "357dd998-6a06-44da-aaa1-bcd797839467",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ff9f8538-19a1-4517-b2ab-d95b89e03f7e",
                            "title": "form retrieval",
                            "fullFile": "/home/tim/src/integrify/api-forms/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should retrieve a form by id with default",
                                    "fullTitle": "Form route handler tests form retrieval should retrieve a form by id with default",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.formSid = profileFormSid;\nawait handlers.getForm(req,mockRes);\nconst form = mockRes.body;\nexpect(form.name).to.equal('Contact Profile Update Form');",
                                    "err": {},
                                    "uuid": "b385441c-6cc4-4ec0-9363-bb9992d75a5c",
                                    "parentUUID": "ff9f8538-19a1-4517-b2ab-d95b89e03f7e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should parse out questions",
                                    "fullTitle": "Form route handler tests form retrieval should parse out questions",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.formSid = profileFormSid;\nawait handlers.getFormQuestions(req, mockRes);\nconst questions = mockRes.body;\nexpect(questions.length).to.equal(12);\nexpect(Object.keys(questions[0])).to.have.members(['id', 'displayName', 'label', 'show', 'type', 'validation'])",
                                    "err": {},
                                    "uuid": "ba155977-233e-4140-9bac-d19cab0244eb",
                                    "parentUUID": "ff9f8538-19a1-4517-b2ab-d95b89e03f7e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms without a query or userPerms",
                                    "fullTitle": "Form route handler tests form retrieval should list forms without a query or userPerms",
                                    "timedOut": false,
                                    "duration": 307,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n//req.params.formSid = profileFormSid;\nawait handlers.searchForms(req,mockRes);\nconst forms = mockRes.body;\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].name).to.exist;\nexpect(forms[0].categoryName).to.exist;",
                                    "err": {},
                                    "uuid": "582669b4-5f7d-4b6e-bb9e-6eccef28bf69",
                                    "parentUUID": "ff9f8538-19a1-4517-b2ab-d95b89e03f7e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms with a search term",
                                    "fullTitle": "Form route handler tests form retrieval should list forms with a search term",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.search = 'profile Update';\nawait handlers.searchForms(req,mockRes);\nconst forms = mockRes.body;\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].categoryName).to.exist;",
                                    "err": {},
                                    "uuid": "99bee3d5-2210-4ee5-b1d1-338f024f89e9",
                                    "parentUUID": "ff9f8538-19a1-4517-b2ab-d95b89e03f7e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b385441c-6cc4-4ec0-9363-bb9992d75a5c",
                                "ba155977-233e-4140-9bac-d19cab0244eb",
                                "582669b4-5f7d-4b6e-bb9e-6eccef28bf69",
                                "99bee3d5-2210-4ee5-b1d1-338f024f89e9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 331,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "b8ea83da-785e-434d-8721-eee627f90048",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "610d1e0e-4a94-4129-87ed-1d4638a415fb",
                    "title": "Instance API Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                    "file": "/test/db/instanceController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\n// session = {tenant: config.tenantOne.tenantId, user_sid: '1e660111-de6f-4318-8f51-6e59cb33d8d7'} //process level\n// session = {tenant: config.tenantOne.tenantId, user_sid:'521a92c8-e77c-4537-811b-dea6e533d800'} //category level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "c8fe8460-db47-4d7c-a20f-155f2bf8ff1d",
                            "parentUUID": "610d1e0e-4a94-4129-87ed-1d4638a415fb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                            "title": "list tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "get a full instance",
                                    "fullTitle": "Instance API Controller Tests list tests get a full instance",
                                    "timedOut": false,
                                    "duration": 257,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst fullInstance = await instanceController.getFullInstance(\n  sampleInstanceGuid\n);\nexpect(fullInstance).to.exist;\nexpect(fullInstance.instanceTasks.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "42f6e01a-2b76-42af-a2f5-023115f8ae5b",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid)\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "8635377c-418c-4f4d-aeba-54c37ef04978",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with requester",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with requester",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {requester: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.exist;\nexpect(instance.requester.contactGuid).to.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "eff42996-3fca-4c9f-9c13-a660b0356bc8",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {client: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "4a23bfae-b2ca-4710-a54c-be0fb392ba56",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client manager",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client manager",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\n// get instances for Joe User, who reports to System System\nlet instances = await Instance.query().where(\"clientGuid\", '92a73dad-d953-4c59-9c5e-5d037791d411');\n\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {clientManager: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;\nexpect(instance.client.manager).to.exist;\nexpect(instance.client.manager.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "894638d4-e062-4301-8f97-9950d653c16e",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance process",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance process",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instanceProcess = await instanceController.getInstanceProcess(sampleInstanceGuid)\nexpect(instanceProcess).to.exist;\nexpect(instanceProcess.instanceGuid).to.equal(sampleInstanceGuid)",
                                    "err": {},
                                    "uuid": "1a361ce4-3a3d-4aa4-9ffb-7dc20ef8b779",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance recipient tasks data by instanceSid",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance recipient tasks data by instanceSid",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(config.tenantOne);\nconst instanceSid = '6D4785AE-57A2-46C5-9141-DE2B134ED8EF'\nconst instanceTasks = await instanceController.getInstanceRecipientTasksData(instanceSid);\n\nexpect(instanceTasks).to.exist;\nexpect(instanceTasks.length).to.be.gt(0);\nconst maintenanceReqFormTask = instanceTasks[2]\nexpect(maintenanceReqFormTask.taskName).to.equal('Maintenance Request Form')\nexpect(maintenanceReqFormTask.recipientTasks.length).to.be.gt(0)\nconst recipientTask = maintenanceReqFormTask.recipientTasks[0]\nexpect(recipientTask.recipientGuid).to.equal('4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF');\nexpect(recipientTask.taskData.length).to.be.gt(0)\nexpect(recipientTask.taskData.find(x => x.dataLabel == 'Location of Problem').dataValue).to.equal('Inside the building');",
                                    "err": {},
                                    "uuid": "43f836e2-5780-4279-a429-713c60538ba0",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests columns",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests columns",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getMyRequests();\n        \nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0);\nsampleInstance = firstInstance;",
                                    "err": {},
                                    "uuid": "0eda9d97-59b4-4871-b56d-a3197aa6fea3",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - ID",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - ID",
                                    "timedOut": false,
                                    "duration": 95,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processId\",\n          data: {\n            comparison: \"eq\",\n            value: sampleInstance.processId,\n          },\n        },\n      ],\n      count: 5,\n    });\n        \n    expect(result.results[0].processId).to.equal(sampleInstance.processId);\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"gt\",\n            value: 500,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"asc\",\n      count: 5,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.length.should.equal(5); \n        \n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.gt(500);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"lt\",\n            value: 505,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"desc\",\n      count: 2,\n    });\n        \n    expect(result.results.length).to.equal(2);\n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.lt(505);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "d04e6c60-4b62-4792-b5d5-9c0f8f75ab84",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - date",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - date",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let d = moment().day(-90);\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"90\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n      expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().year(-30);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"30\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n        expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().day(-7);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"7\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-3);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"3\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-1);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"1\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    const startDate = moment(\"2018-10-11\");\n    const endDate = moment(\"2018-11-23\");\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"gt\", value: \"2018-10-11\" },\n        },\n        {\n          field: \"StartDate\",\n          data: { comparison: \"lt\", value: \"2018-11-23\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length) {\n        expect(result.results[0].startDate).to.be.gt(startDate.toDate());\n        expect(result.results[0].startDate).to.be.lt(endDate.toDate());\n    }\n  })\n);",
                                    "err": {},
                                    "uuid": "698069df-ca89-4939-9f3d-9322fe351852",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - name",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - name",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.instanceName.toLowerCase()).to.contain(\"test\");\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.forEach((instance) => {\n    //   instance.processName.should.contain(\"test\");\n    // });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requester\",\n          data: { comparison: \"contains\", value: \"system system\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid.toLowerCase());\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "e9fff813-dc99-4b42-87ec-95e517a04c2c",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - guid",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - guid",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processGuid\",\n          data: { comparison: \"contains\", value: sampleInstance.processGuid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.processName.indexOf(sampleInstance.processName)).to.be.gt(-1);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requesterGuid\",\n          data: { comparison: \"contains\", value: session.user_sid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "effdf1ef-f5d2-4d25-9fb3-82d85e161c04",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - count",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - count",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, { count: 2 });\n        \n    expect(result.results).to.exist;\n    expect(result.results.length).to.equal(2);\n  })\n);",
                                    "err": {},
                                    "uuid": "3b2594c1-c48e-419d-9b23-4d81669adf2c",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests params - sort, dir",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests params - sort, dir",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      count: 2,\n      dir: \"asc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.lt(\n      result.results[1].createdDate\n    );\n        \n    result = await f.call(instanceController, {\n      count: 2,\n      dir: \"desc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.gt(\n      result.results[1].createdDate\n    );\n  })\n);",
                                    "err": {},
                                    "uuid": "afea0155-17c3-46dc-9cfa-2b77662e5243",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests param - start",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests param - start",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      start: 0,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startZeroId = result.results[0].instanceId;\n        \n    result = await f.call(instanceController, {\n      start: 1,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startOneId = result.results[0].instanceId;\n        \n    expect(startZeroId).to.be.lessThan(startOneId);\n  })\n);",
                                    "err": {},
                                    "uuid": "3cce021d-8ab9-4ab4-94fb-661822380277",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "46c2086b-df7b-4922-8483-bc4d6472ed68",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with search term against procssName, instanceName and requester",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with search term against procssName, instanceName and requester",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.processName, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "5c6d7603-7169-4710-908b-81fe9976d049",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with a numeric term against instanceId",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with a numeric term against instanceId",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.instanceId, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "03eb1941-d3f8-4af2-bfd7-3fbe61e10c82",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get manage requests",
                                    "fullTitle": "Instance API Controller Tests list tests get manage requests",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'manage'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "9ff6d9e8-83aa-4a20-944d-55cda36b1ced",
                                    "parentUUID": "5cdd09fe-404b-4d18-b67a-cb5684fee2ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "42f6e01a-2b76-42af-a2f5-023115f8ae5b",
                                "8635377c-418c-4f4d-aeba-54c37ef04978",
                                "eff42996-3fca-4c9f-9c13-a660b0356bc8",
                                "4a23bfae-b2ca-4710-a54c-be0fb392ba56",
                                "894638d4-e062-4301-8f97-9950d653c16e",
                                "1a361ce4-3a3d-4aa4-9ffb-7dc20ef8b779",
                                "43f836e2-5780-4279-a429-713c60538ba0",
                                "0eda9d97-59b4-4871-b56d-a3197aa6fea3",
                                "d04e6c60-4b62-4792-b5d5-9c0f8f75ab84",
                                "698069df-ca89-4939-9f3d-9322fe351852",
                                "e9fff813-dc99-4b42-87ec-95e517a04c2c",
                                "effdf1ef-f5d2-4d25-9fb3-82d85e161c04",
                                "3b2594c1-c48e-419d-9b23-4d81669adf2c",
                                "afea0155-17c3-46dc-9cfa-2b77662e5243",
                                "3cce021d-8ab9-4ab4-94fb-661822380277",
                                "46c2086b-df7b-4922-8483-bc4d6472ed68",
                                "5c6d7603-7169-4710-908b-81fe9976d049",
                                "03eb1941-d3f8-4af2-bfd7-3fbe61e10c82",
                                "9ff6d9e8-83aa-4a20-944d-55cda36b1ced"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 756,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "7a8fa4a0-29d9-4394-9913-b0a410424836",
                            "title": "delete/undelete tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "deletes a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a request",
                                    "timedOut": false,
                                    "duration": 1603,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nsampleInstances = result.results;\n    \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\nsampleInstanceGuid = firstInstance.instanceGuid;\n      \nlet deleted = await instanceController.deleteInstance(sampleInstanceGuid);\n\nexpect(sampleInstanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.deletedDate).not.be.null\nconst Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet excludeDeleted = await Instance.query().where({instanceGuid: sampleInstanceGuid})\nexpect(excludeDeleted.length).to.equal(0);\n\t\t\t\tawait delay(1500);",
                                    "err": {},
                                    "uuid": "1699f9cf-3a3a-4869-ada8-9ec37f1d957c",
                                    "parentUUID": "7a8fa4a0-29d9-4394-9913-b0a410424836",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retores a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests retores a request",
                                    "timedOut": false,
                                    "duration": 1527,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet undeleted = await instanceController.restoreInstance(sampleInstanceGuid);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(sampleInstanceGuid).to.equal(undeleted.instanceGuid)\nexpect(undeleted.deletedDate).to.be.null;\n\t\t\t\tawait delay(1500);",
                                    "err": {},
                                    "uuid": "f57e8d17-c9a9-46bf-b19b-79ade82d379e",
                                    "parentUUID": "7a8fa4a0-29d9-4394-9913-b0a410424836",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "deletes a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a batch of requests",
                                    "timedOut": false,
                                    "duration": 1644,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.deleteInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\n//expect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).not.to.be.null;\n\t\t\t\tawait delay(1500);",
                                    "err": {},
                                    "uuid": "37bcb9a5-53a5-43c1-b43f-bb74ed7b8285",
                                    "parentUUID": "7a8fa4a0-29d9-4394-9913-b0a410424836",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores a batch of requests",
                                    "timedOut": false,
                                    "duration": 1629,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.restoreInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\nexpect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).to.be.null;\n\t\t\t\tawait delay(1500);",
                                    "err": {},
                                    "uuid": "35c86a66-ddef-4207-bc5a-62edc978e29f",
                                    "parentUUID": "7a8fa4a0-29d9-4394-9913-b0a410424836",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores all",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores all",
                                    "timedOut": false,
                                    "duration": 2034,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet restored = await instanceController.restoreAllInstances();\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(restored.length).to.gt(0);\n\t\t\t\tawait delay(1500);",
                                    "err": {},
                                    "uuid": "7d0acc3b-44fa-439c-943f-bb19ded57668",
                                    "parentUUID": "7a8fa4a0-29d9-4394-9913-b0a410424836",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1699f9cf-3a3a-4869-ada8-9ec37f1d957c",
                                "f57e8d17-c9a9-46bf-b19b-79ade82d379e",
                                "37bcb9a5-53a5-43c1-b43f-bb74ed7b8285",
                                "35c86a66-ddef-4207-bc5a-62edc978e29f",
                                "7d0acc3b-44fa-439c-943f-bb19ded57668"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8437,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "315cfa1d-b106-4ee6-971f-da74abe29cf5",
                            "title": "insert tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts an instance data",
                                    "fullTitle": "Instance API Controller Tests insert tests inserts an instance data",
                                    "timedOut": false,
                                    "duration": 1518,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceDataRow = {\n  itaskRecipientGuid: '8ad1a6f2-9f6f-4667-9750-d961044ed817',\n  itaskGuid: '5bde578f-615f-4494-86b2-ca61044ed883',\n  taskGuid: '6386f905-7fac-41c6-9b6b-86d53f14d61c',\n  objectGuid: null,\n  objectType: null,\n  objectId: null,\n  dataProperty: '1491430190541',\n  dataType: 'String',\n  dataSid: '14777392-ac81-44f0-b1f2-87d53f14d65d',\n  dataId: null,\n  dataClientId: '1491430190541',\n  dataLabel: 'Enter Details:',\n  dataValue: 'Need a background check',\n  META_1: 'TEST_INSERT_INSTANCE_DATA',\n  META_2: null,\n  dataHide: null,\n  instanceContactGuid: null,\n  roleGuid: null,\n  dataValueExt: null,\n  questionType: 'LongText',\n  deletedDate: new Date().toISOString() // so that it doesnt interfere with its instance\n}\nconst instanceController = new InstanceController(session)\nlet instanceDataGuid = await instanceController.insertInstanceData(instanceDataRow)\nexpect(instanceDataGuid).to.be.a.uuid()\n\t\t\t\tawait delay(1500);",
                                    "err": {},
                                    "uuid": "cb922b33-ddc9-47bd-9a3b-f9957e694210",
                                    "parentUUID": "315cfa1d-b106-4ee6-971f-da74abe29cf5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cb922b33-ddc9-47bd-9a3b-f9957e694210"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1518,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "33c7e429-2514-4aa0-9b06-0c8b33525304",
                            "title": "update tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates an instance task recipient task state",
                                    "fullTitle": "Instance API Controller Tests update tests updates an instance task recipient task state",
                                    "timedOut": false,
                                    "duration": 33,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session)\nconst recipTaskSid = 'b3fef53a-7742-46d1-9faf-be573c14d6fa'\nlet taskState = 'Cancelled'\nlet updated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)\n// change it back to Completed\ntaskState = 'Completed'\nupdated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)",
                                    "err": {},
                                    "uuid": "a7649fd4-1e0d-4058-a809-6229bfa9d187",
                                    "parentUUID": "33c7e429-2514-4aa0-9b06-0c8b33525304",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a7649fd4-1e0d-4058-a809-6229bfa9d187"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 33,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "9ae2e6ae-471c-4c40-bfa4-3433a176ad1e",
                    "title": "Instance API Model Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceModel.test.js",
                    "file": "/test/db/instanceModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2d4ff965-2864-4924-af66-bda08238918d",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceModel.test.js",
                            "file": "/test/db/instanceModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Instance API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "81a2fa4f-0287-4a41-9c5b-9bf07daed594",
                                    "parentUUID": "2d4ff965-2864-4924-af66-bda08238918d",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Instance API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = await sqldb.models.bindModel(config.tenantOne.tenantId, instanceModels.Instance)\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "44d599d4-f0bf-4299-9ddc-9f8b78edbc61",
                                    "parentUUID": "2d4ff965-2864-4924-af66-bda08238918d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Instance API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = (await models.getModels(config.tenantOne.tenantId)).Instance;\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "8b1eae30-1c85-4971-9d63-18c66b4fb76e",
                                    "parentUUID": "2d4ff965-2864-4924-af66-bda08238918d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Instance API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\n          let results = await models._tenantModels[config.tenantOne.tenantId].Instance.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "43348bbf-3baf-4098-b947-531d80d87a53",
                                    "parentUUID": "2d4ff965-2864-4924-af66-bda08238918d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "44d599d4-f0bf-4299-9ddc-9f8b78edbc61",
                                "8b1eae30-1c85-4971-9d63-18c66b4fb76e",
                                "43348bbf-3baf-4098-b947-531d80d87a53"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "6dd7b33e-a97a-4af9-a972-0108524f4933",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskController.test.js",
                    "file": "/test/db/myTaskController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "35c36009-4b68-47fb-a640-1cd47bf6283b",
                            "parentUUID": "6dd7b33e-a97a-4af9-a972-0108524f4933",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                            "title": "list tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskController.test.js",
                            "file": "/test/db/myTaskController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 189,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "64834ee9-302e-4bb7-b0de-fea6a6c7d7fa",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 232,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\n//expect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "06dc7162-afee-4e33-a2c0-503b8ee7f800",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 219,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "dc618d38-a01d-4403-9022-a374c2896535",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 220,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "75cbdc8e-8cfe-4c15-a968-cd4b158f45fe",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 222,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "d9d4abd5-a355-487e-a8f1-3e9c5f9af2d1",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 218,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "f06e3f0e-43d4-41cb-a5d9-231a79aff295",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 233,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "7cac69e9-d2e1-4061-8298-fc0dd6250929",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 129,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "ba87a055-f08f-472a-94df-2fa2d446f35f",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 228,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "2d7ed65a-42e0-468b-bbe3-64d5050f0129",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 894,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "3df93920-e6a7-4996-a6d6-45b4111f94ba",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 346,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "0475ce8a-4a60-44ec-b402-d1ba644540ee",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 300,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "d3f7df29-3414-4d0b-8928-5aa720f21f13",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 119,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "4a8b45ee-440b-4f15-9035-788327804434",
                                    "parentUUID": "8bd9022e-945c-485e-b047-3c20a6744e5a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "64834ee9-302e-4bb7-b0de-fea6a6c7d7fa",
                                "06dc7162-afee-4e33-a2c0-503b8ee7f800",
                                "dc618d38-a01d-4403-9022-a374c2896535",
                                "75cbdc8e-8cfe-4c15-a968-cd4b158f45fe",
                                "d9d4abd5-a355-487e-a8f1-3e9c5f9af2d1",
                                "f06e3f0e-43d4-41cb-a5d9-231a79aff295",
                                "7cac69e9-d2e1-4061-8298-fc0dd6250929",
                                "ba87a055-f08f-472a-94df-2fa2d446f35f",
                                "2d7ed65a-42e0-468b-bbe3-64d5050f0129",
                                "3df93920-e6a7-4996-a6d6-45b4111f94ba",
                                "0475ce8a-4a60-44ec-b402-d1ba644540ee",
                                "d3f7df29-3414-4d0b-8928-5aa720f21f13",
                                "4a8b45ee-440b-4f15-9035-788327804434"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3549,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "2228f465-e6f9-4e6c-a67f-e8ad25555209",
                    "title": "My Task API Model Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskModel.test.js",
                    "file": "/test/db/myTaskModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1eb5fee8-c98e-4c72-b956-0976d9dd7f01",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskModel.test.js",
                            "file": "/test/db/myTaskModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "My Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "d11e5a07-ad94-480d-8b7a-1da48383a754",
                                    "parentUUID": "1eb5fee8-c98e-4c72-b956-0976d9dd7f01",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "My Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "8fd7ca6f-4e6b-48e3-b93e-9c1188505ede",
                                    "parentUUID": "1eb5fee8-c98e-4c72-b956-0976d9dd7f01",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "My Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "cff385cd-9842-4b15-893e-fccc26d0cc40",
                                    "parentUUID": "1eb5fee8-c98e-4c72-b956-0976d9dd7f01",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "My Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "379a72fb-3e5f-41e9-9c77-2e0fe3a78045",
                                    "parentUUID": "1eb5fee8-c98e-4c72-b956-0976d9dd7f01",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8fd7ca6f-4e6b-48e3-b93e-9c1188505ede",
                                "cff385cd-9842-4b15-893e-fccc26d0cc40",
                                "379a72fb-3e5f-41e9-9c77-2e0fe3a78045"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 44,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "a32d0b69-4c41-4b4e-b40e-f427bd7910be",
                    "title": "Instance API Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/integration/instance.test.js",
                    "file": "/test/integration/instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 15,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken()\nthis.timeout(105000); \nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "184c88f5-45f1-46a0-82dc-6d0bd78ec460",
                            "parentUUID": "a32d0b69-4c41-4b4e-b40e-f427bd7910be",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ec00753c-b67f-46ee-959f-b23748f9310d",
                            "title": "getInstancesByPermission",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of instances for a user with monitor permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with monitor permissions",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "8a6d8689-d8f7-4456-9659-ba2238c1367a",
                                    "parentUUID": "ec00753c-b67f-46ee-959f-b23748f9310d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances for a user with manage permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with manage permissions",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "47dacaed-3b23-4a05-a873-b84d0914dc54",
                                    "parentUUID": "ec00753c-b67f-46ee-959f-b23748f9310d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances started by the user calling the endpoint",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances started by the user calling the endpoint",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "b22fd02a-b6da-4c00-96ee-3426b3ce5e18",
                                    "parentUUID": "ec00753c-b67f-46ee-959f-b23748f9310d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"monitor\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"monitor\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 102,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"gteq\",\"type\":\"date\",\"value\":'2010-01-01'}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"lteq\",\"type\":\"date\",\"value\":'2030-01-01'}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "3e958c57-f81e-4c07-b2a4-f1e4ec5547e9",
                                    "parentUUID": "ec00753c-b67f-46ee-959f-b23748f9310d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"mine\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"mine\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 111,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "a47e9238-1c1d-44e7-8360-f6b90fdaeba8",
                                    "parentUUID": "ec00753c-b67f-46ee-959f-b23748f9310d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8a6d8689-d8f7-4456-9659-ba2238c1367a",
                                "47dacaed-3b23-4a05-a873-b84d0914dc54",
                                "b22fd02a-b6da-4c00-96ee-3426b3ce5e18",
                                "3e958c57-f81e-4c07-b2a4-f1e4ec5547e9",
                                "a47e9238-1c1d-44e7-8360-f6b90fdaeba8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 261,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "7c19f02e-3579-4e98-959c-1372525b404d",
                            "title": "deleteInstances",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a batch of instances",
                                    "fullTitle": "Instance API Tests deleteInstances should delete a batch of instances",
                                    "timedOut": false,
                                    "duration": 248,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n            let result = await instanceController.getMyRequests()\n            let instanceGuids= result.results.map((i) => {\n                return i.instanceGuid;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.body = JSON.stringify(instanceGuids);\n           \n\t\t\tawait handlers.deleteInstances(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n            expect(mockRes.body).to.exist;\n\t\t\tlet deleted = mockRes.body;\n            expect(deleted.instancesDeleted).to.exist;\n            expect(deleted.instancesDeleted).to.equal(instanceGuids.length);\n            \n            //retore them\n            \n            let restored = await instanceController.restoreInstances(instanceGuids);\n            //expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\n            expect(restored.length).to.equal(instanceGuids.length);",
                                    "err": {},
                                    "uuid": "a9ca4cae-ff92-4cf4-a3e1-9582a30ac978",
                                    "parentUUID": "7c19f02e-3579-4e98-959c-1372525b404d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a9ca4cae-ff92-4cf4-a3e1-9582a30ac978"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 248,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "f0fdedeb-eb49-4ccc-96a0-51ca5b8df6a8",
                    "title": "MyTask API Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/integration/myTask.test.js",
                    "file": "/test/integration/myTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "MyTask API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "eb988903-6895-4390-b80c-a77facc4024e",
                            "parentUUID": "f0fdedeb-eb49-4ccc-96a0-51ca5b8df6a8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "MyTask API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 121,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "9f9c4c60-da24-4148-8a73-7737292c48bd",
                            "parentUUID": "f0fdedeb-eb49-4ccc-96a0-51ca5b8df6a8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "9f9c4c60-da24-4148-8a73-7737292c48bd"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 121,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "fc7a2630-4be5-4b39-ab91-70d941fc58a8",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "48b716b2-01d3-4f1e-8343-b84bd2fb8b66",
                    "title": "Process controller tests",
                    "fullFile": "/home/tim/src/integrify/api-processes/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Process controller tests\"",
                            "fullTitle": "Process controller tests \"before all\" hook in \"Process controller tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nconfig = await mocks.getTestConfig();\ntenant = config.tenantOne.tenantId;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "cc4de6e0-6a02-4296-a44e-356d8f532664",
                            "parentUUID": "48b716b2-01d3-4f1e-8343-b84bd2fb8b66",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e7cf7cf7-d055-4228-9d85-f6c9552fadeb",
                            "title": "process crud ",
                            "fullFile": "/home/tim/src/integrify/api-processes/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "searches for a process with run permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with run permissions",
                                    "timedOut": false,
                                    "duration": 157,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'run', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "f38c0c1a-be91-4838-a9f5-a8531b6f1b11",
                                    "parentUUID": "e7cf7cf7-d055-4228-9d85-f6c9552fadeb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "searches for a process with viewConfig permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with viewConfig permissions",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'viewconfig', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "4e032cfb-987a-4b30-a5dc-8c3bea36d4d2",
                                    "parentUUID": "e7cf7cf7-d055-4228-9d85-f6c9552fadeb",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "searches for a process with edit permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with edit permissions",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'edit', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "dbc8281f-2849-424f-9f0b-a4a565c1576b",
                                    "parentUUID": "e7cf7cf7-d055-4228-9d85-f6c9552fadeb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f38c0c1a-be91-4838-a9f5-a8531b6f1b11",
                                "4e032cfb-987a-4b30-a5dc-8c3bea36d4d2",
                                "dbc8281f-2849-424f-9f0b-a4a565c1576b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 168,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ba944d27-50be-4191-ab34-e34a891be897",
                    "title": "Process route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-processes/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Process route handler tests\"",
                            "fullTitle": "Process route handler tests \"before all\" hook in \"Process route handler tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "91eff92a-1f3d-4abc-8797-2869d534e9db",
                            "parentUUID": "ba944d27-50be-4191-ab34-e34a891be897",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e66699d6-700e-4d05-adcc-6c77576c5f99",
                            "title": "process crud ",
                            "fullFile": "/home/tim/src/integrify/api-processes/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should search processes with run perms",
                                    "fullTitle": "Process route handler tests process crud  should search processes with run perms",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query = {permissionType: 'run', search:'Update my profile'}\nawait handlers.searchProcesses(req,mockRes);\nconst processes = mockRes.body;\nconst process= processes[0];\nexpect(process).to.exist",
                                    "err": {},
                                    "uuid": "30507162-d42d-4ae4-a97f-c4010f5cf9b9",
                                    "parentUUID": "e66699d6-700e-4d05-adcc-6c77576c5f99",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should search processes with view config perms",
                                    "fullTitle": "Process route handler tests process crud  should search processes with view config perms",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query = {permissionType: 'viewconfig', search:'Update my profile'}\nawait handlers.searchProcesses(req,mockRes);\nconst processes = mockRes.body;\nconst process= processes[0];\nexpect(process).to.exist",
                                    "err": {},
                                    "uuid": "fc75f626-ed9a-47b7-8922-688c54b7f9fa",
                                    "parentUUID": "e66699d6-700e-4d05-adcc-6c77576c5f99",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "30507162-d42d-4ae4-a97f-c4010f5cf9b9",
                                "fc75f626-ed9a-47b7-8922-688c54b7f9fa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "4d124302-0de5-47ac-8c8a-514c84a63301",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "97983f29-5bdf-4c62-901b-1a26de6f746a",
                    "title": "Report controller tests",
                    "fullFile": "/home/tim/src/integrify/api-reports/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Report controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "afe102b9-d9c6-4e3e-8095-2fb589e48b99",
                            "parentUUID": "97983f29-5bdf-4c62-901b-1a26de6f746a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fc26677f-8835-4738-8824-ad92e76a48d5",
                            "title": "process crud ",
                            "fullFile": "/home/tim/src/integrify/api-reports/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a report",
                                    "fullTitle": "Report controller tests process crud  should create a report",
                                    "timedOut": false,
                                    "duration": 42,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const reportJson = { name: \"test report\",\n                     categorySid: 'test-category-sid' };\nconst report = await reportController.createReport(tenant, reportJson);\nexpect(report.sid).to.exist\nreportSid = report.sid",
                                    "err": {},
                                    "uuid": "0efd2c71-1ead-4a81-8dc7-f4980912f914",
                                    "parentUUID": "fc26677f-8835-4738-8824-ad92e76a48d5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should retrieve a report",
                                    "fullTitle": "Report controller tests process crud  should retrieve a report",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.sid).to.equal(reportSid)",
                                    "err": {},
                                    "uuid": "d0161bb4-8296-49e9-b5bf-74b1fdf33445",
                                    "parentUUID": "fc26677f-8835-4738-8824-ad92e76a48d5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should populate core-service expected default values",
                                    "fullTitle": "Report controller tests process crud  should populate core-service expected default values",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.limits.get('DateRange')).to.equal(30);\nexpect(report.limits.get('UserFilter')).to.equal('No');\nexpect(report.limits.get('PageSize')).to.equal(10);",
                                    "err": {},
                                    "uuid": "a4406eef-6dd6-4530-b801-c4a2d1cc9be6",
                                    "parentUUID": "fc26677f-8835-4738-8824-ad92e76a48d5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a report",
                                    "fullTitle": "Report controller tests process crud  should update a report",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const columnMap = { \"column\" : {\n  \"@alias\" : \"Address Line 1\",\n  \"@sortable\" : \"No\",\n  \"mapping_val\" : \"Client|AddressLine1\",\n  \"mapping_text\" : \"Client - Address Line 1\"\n}}\nconst newFields = { \"columns\" : [ columnMap ]}\nconst updatedReport = await reportController.updateReport(tenant,reportSid,newFields)\nexpect(updatedReport).to.exist\nexpect(updatedReport.sid).to.equal(reportSid)\nexpect(updatedReport.modifiedDate).to.be.above(updatedReport.createdDate);\nexpect(updatedReport.columns.length).to.equal(1)",
                                    "err": {},
                                    "uuid": "c217678d-c4ba-4988-874b-847d381cb9d4",
                                    "parentUUID": "fc26677f-8835-4738-8824-ad92e76a48d5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "soft deletes a report",
                                    "fullTitle": "Report controller tests process crud  soft deletes a report",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.deletedDate).to.not.exist\nconst deleted = await reportController.deleteReport(tenant,reportSid);\nexpect(deleted).to.exist\nexpect(deleted.deletedDate).to.exist",
                                    "err": {},
                                    "uuid": "518c9be9-9c10-45d6-b795-47be51c5e4d4",
                                    "parentUUID": "fc26677f-8835-4738-8824-ad92e76a48d5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0efd2c71-1ead-4a81-8dc7-f4980912f914",
                                "d0161bb4-8296-49e9-b5bf-74b1fdf33445",
                                "a4406eef-6dd6-4530-b801-c4a2d1cc9be6",
                                "c217678d-c4ba-4988-874b-847d381cb9d4",
                                "518c9be9-9c10-45d6-b795-47be51c5e4d4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 83,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "986e4ada-7f6b-4146-80a4-7ffc31a151b0",
                    "title": "Report route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-reports/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Report route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "d576cd62-9998-400c-80a6-396f1346ac57",
                            "parentUUID": "986e4ada-7f6b-4146-80a4-7ffc31a151b0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d0e35982-efb0-41fc-997d-f0caa61d4d92",
                            "title": "handler report crud ",
                            "fullFile": "/home/tim/src/integrify/api-reports/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a report",
                                    "fullTitle": "Report route handler tests handler report crud  should create a report",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { name: \"handler test report\",\n             categorySid: 'test-category-sid' }\nconst response = await handlers.createReport(req,mockRes);\nconst report = response.body;\nexpect(report.sid).to.exist;\nreportSid = report.sid;",
                                    "err": {},
                                    "uuid": "402f3b67-ccd7-4433-b244-84e0bd913f10",
                                    "parentUUID": "d0e35982-efb0-41fc-997d-f0caa61d4d92",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a report",
                                    "fullTitle": "Report route handler tests handler report crud  should get a report",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nconst response = await handlers.getReport(req,mockRes);\nconst report = response.body;\nexpect(report).to.exist\nexpect(report.sid).to.equal(reportSid)",
                                    "err": {},
                                    "uuid": "fd2b0462-bc24-4127-b7eb-1c79ccb8b15e",
                                    "parentUUID": "d0e35982-efb0-41fc-997d-f0caa61d4d92",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a report",
                                    "fullTitle": "Report route handler tests handler report crud  should update a report",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nreq.body = { Description: 'handler test description' }\nconst response = await handlers.updateReport(req,mockRes);\nconst updatedReport = response.body;\nexpect(updatedReport).to.exist\nexpect(updatedReport.sid).to.equal(reportSid)\nexpect(updatedReport.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "3f1979cf-52f5-4ae7-939c-cac03e5f66a4",
                                    "parentUUID": "d0e35982-efb0-41fc-997d-f0caa61d4d92",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a report",
                                    "fullTitle": "Report route handler tests handler report crud  should delete a report",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nconst response = await handlers.deleteReport(req,mockRes);\nlet deletedReport = response.body;\nexpect(deletedReport).to.exist;\nexpect(deletedReport.deletedDate).to.exist;",
                                    "err": {},
                                    "uuid": "92498e16-49a5-4afe-8be7-bc69aa94b621",
                                    "parentUUID": "d0e35982-efb0-41fc-997d-f0caa61d4d92",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "402f3b67-ccd7-4433-b244-84e0bd913f10",
                                "fd2b0462-bc24-4127-b7eb-1c79ccb8b15e",
                                "3f1979cf-52f5-4ae7-939c-cac03e5f66a4",
                                "92498e16-49a5-4afe-8be7-bc69aa94b621"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "b45ef39b-34a0-4419-b8bd-41a5edec8d9c",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "de4d05a0-4580-42e8-bf7f-62d318d65332",
                    "title": "Settings API Holiday Controller tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/holidays.controller.test.js",
                    "file": "/test/integration/db/holidays.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Holiday Controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenantId: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}\ntenantId = config.tenantOne.tenantId;\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "a8b3e2fd-da95-4280-a620-4552c26a5c21",
                            "parentUUID": "de4d05a0-4580-42e8-bf7f-62d318d65332",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should insert, select, delete and list holidays",
                            "fullTitle": "Settings API Holiday Controller tests should insert, select, delete and list holidays",
                            "timedOut": false,
                            "duration": 224,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let holiday = {\n  holidayName: \"O Day\",\n  startDate: \"2019-10-10T00:00:00.000Z\",\n  endDate: \"2019-10-11T00:00:00.000Z\",\n  country: \"USA\"\n};\nlet holidayController = new HolidayController(oauth);\n// insert\nconst inserted = await holidayController.insertHoliday(holiday);\nvalidateHoliday(holiday, inserted);\n// select\nlet gotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n// update\nholiday.holidayGuid = inserted.holidayGuid;\nholiday.holidayName = \"Easter Monday\";\nholiday.country = \"Papa New Guinea\";\nawait holidayController.updateHoliday(holiday);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n//list\nconst holidays = await holidayController.listHolidays();\nexpect(holidays.length).to.be.gt(0);\nholiday = holidays[0];\nexpect(holiday.holidayGuid).to.exist;\nexpect(holiday.holidayName).to.exist;\nexpect(holiday.startDate).to.exist;\nexpect(holiday.endDate).to.exist;\nexpect(holiday.country).to.exist;\n// delete\nconst holidayGuids = [inserted.holidayGuid];\nawait holidayController.deleteHolidays(holidayGuids);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nexpect(gotOne).to.not.exist;",
                            "err": {},
                            "uuid": "ba16aabe-db72-423f-b00c-5a9da9ad904a",
                            "parentUUID": "de4d05a0-4580-42e8-bf7f-62d318d65332",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ba16aabe-db72-423f-b00c-5a9da9ad904a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 224,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0a95daf7-96d1-4723-a030-5203a522ae42",
                    "title": "Settings API Language Controller test",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/languages.controller.test.js",
                    "file": "/test/integration/db/languages.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Language Controller test \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}",
                            "err": {},
                            "uuid": "837e2997-d1a0-46b6-a0cc-8a7157c7e3be",
                            "parentUUID": "0a95daf7-96d1-4723-a030-5203a522ae42",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of languages",
                            "fullTitle": "Settings API Language Controller test should get a list of languages",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const languageCtrl = new LanguageController(oauth);\nconst languages = await languageCtrl.listLanguages();\nexpect(languages.length).to.be.gt(0);\nconst language = languages[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "4e33f656-bfd9-484e-87e7-3d26e1fb5afd",
                            "parentUUID": "0a95daf7-96d1-4723-a030-5203a522ae42",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4e33f656-bfd9-484e-87e7-3d26e1fb5afd"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4ff90173-3b17-40d9-809a-7f634a375dd3",
                    "title": "Settings API System Setting Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                    "file": "/test/integration/db/systemsetting.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API System Setting Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} \nthis.timeout(105000);",
                            "err": {},
                            "uuid": "c655386a-2dee-40f8-bb87-cf068566c372",
                            "parentUUID": "4ff90173-3b17-40d9-809a-7f634a375dd3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f3e84db3-a251-4383-9f96-b2b63b8bf8ba",
                            "title": "Model Tests",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a system setting model",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should get a system setting model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nexpect(SystemSettingsModel).to.exist;",
                                    "err": {},
                                    "uuid": "92c5418e-4c04-4f28-ab49-1dcf6d0ee796",
                                    "parentUUID": "f3e84db3-a251-4383-9f96-b2b63b8bf8ba",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should return system settings",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nlet results = await SystemSettingsModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "e877cfcc-4e2f-4811-8b46-ec94fb19631e",
                                    "parentUUID": "f3e84db3-a251-4383-9f96-b2b63b8bf8ba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92c5418e-4c04-4f28-ab49-1dcf6d0ee796",
                                "e877cfcc-4e2f-4811-8b46-ec94fb19631e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "424bb6a4-867c-4bfa-8278-707566d8c460",
                            "title": "Controller Tests",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list system settings",
                                    "timedOut": false,
                                    "duration": 38,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listSystemSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\nexpect(systemSettings[0].masterSettings.settingsGuid).to.exist;",
                                    "err": {},
                                    "uuid": "2de982e0-b7a4-4be8-ad69-16a8f6f0d4ce",
                                    "parentUUID": "424bb6a4-867c-4bfa-8278-707566d8c460",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list password settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list password settings",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\n// only system settings listed should be the ones related to passwords   \nexpect(systemSettings.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(systemSettings.length);",
                                    "err": {},
                                    "uuid": "f0e2fba7-5c01-4168-a515-7a897994c3a5",
                                    "parentUUID": "424bb6a4-867c-4bfa-8278-707566d8c460",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should update system settings",
                                    "timedOut": false,
                                    "duration": 170,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let pwdSettings = [{\n  \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION\",\n  \"settingsValue\":\"14\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n    \"settingsKey\":\"PWD_EXPIRATION\",\n    \"keyDefault\":\"7\",\n    \"keyOptions\":null,\n    \"description\":\"Length in days before a user is prompted to change his or her password.\"\n  }\n}, {\n  \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n  \"settingsValue\":\"1\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n    \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n    \"keyDefault\":\"0\",\n    \"keyOptions\":\"1|0\",\n    \"description\":\"Flag to turn enforcement of password expiration.  1 = On, 0 = Off\"\n  }\n}]\n// save the changes above, query to verify changes, set them back to the defaults\nlet systemSettingController = new SystemSettingController(session)\nawait systemSettingController.updateSystemSettings(pwdSettings)\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('14')\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1')\npwdSettings.forEach(setting => {\n  setting.settingsValue = setting.masterSettings.keyDefault\n})\nawait systemSettingController.updateSystemSettings(pwdSettings)\nsystemSettings = await systemSettingController.listPasswordSettings();\nlet pwdExpiration = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION')\nlet pwdExpirationActive = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE')\nexpect(pwdExpiration.settingsValue).to.equal(pwdExpiration.masterSettings.keyDefault)\nexpect(pwdExpirationActive.settingsValue).to.equal(pwdExpirationActive.masterSettings.keyDefault)",
                                    "err": {},
                                    "uuid": "04ef4e53-dae7-47c3-b38a-a0b05980d85c",
                                    "parentUUID": "424bb6a4-867c-4bfa-8278-707566d8c460",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2de982e0-b7a4-4be8-ad69-16a8f6f0d4ce",
                                "f0e2fba7-5c01-4168-a515-7a897994c3a5",
                                "04ef4e53-dae7-47c3-b38a-a0b05980d85c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 233,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7978c38a-f486-481d-8453-b65f3e9ae0bc",
                    "title": "Biztime API Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/biztimes.test.js",
                    "file": "/test/integration/functions/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Biztime API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nmockRes = await mocks.mockResponse();\nreq = await mocks.req(jwt);",
                            "err": {},
                            "uuid": "34d76f19-23a1-4295-a709-634d5332ec17",
                            "parentUUID": "7978c38a-f486-481d-8453-b65f3e9ae0bc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of biztimes",
                            "fullTitle": "Biztime API Tests should return a list of biztimes",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.listBiztimes(req, mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body.length).to.be.gt(0);\nvalidateBiztime(mockRes.body[0]);",
                            "err": {},
                            "uuid": "cde96d67-519d-4fd8-beb6-2734f79edcf2",
                            "parentUUID": "7978c38a-f486-481d-8453-b65f3e9ae0bc",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert a biztime",
                            "fullTitle": "Biztime API Tests should insert a biztime",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.insertBiztime(\n  {...req, body: {...biztimeToInsert}},\n  mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\ninsertedBiztime = mockRes.body;\nvalidateBiztime(biztimeToInsert, insertedBiztime);",
                            "err": {},
                            "uuid": "38205f25-212e-4947-9027-e7d3de535192",
                            "parentUUID": "7978c38a-f486-481d-8453-b65f3e9ae0bc",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update a biztime",
                            "fullTitle": "Biztime API Tests should update a biztime",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.updateBiztime(\n  {\n    ...req,\n    params: {bizTimeGuid: insertedBiztime.bizTimeGuid},\n    body: {...biztimeToUpdate}},\n  mockRes\n  );\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nvalidateBiztime(biztimeToUpdate, mockRes.body);",
                            "err": {},
                            "uuid": "aec20857-3360-429a-93a2-e07bdbd7ea37",
                            "parentUUID": "7978c38a-f486-481d-8453-b65f3e9ae0bc",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "cde96d67-519d-4fd8-beb6-2734f79edcf2",
                        "38205f25-212e-4947-9027-e7d3de535192",
                        "aec20857-3360-429a-93a2-e07bdbd7ea37"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 44,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b88fdea3-4e54-45be-b856-9eb762588274",
                    "title": "Settings API Holiday Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/holidays.test.js",
                    "file": "/test/integration/functions/holidays.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "insert, list, get, delete holiday",
                            "fullTitle": "Settings API Holiday Tests insert, list, get, delete holiday",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nlet listHolidaysEvent = await mocks.listHolidaysEvent()\nlet insertHolidayEvent = await mocks.insertHolidayEvent();\nlet getHolidayEvent = await mocks.getHolidayEvent();\n\n// insert\nawait holidays.insert(insertHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nvalidateHoliday(insertHolidayEvent.body, inserted);\n//list\nawait holidays.list(listHolidaysEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nexpect(mockRes.body.length).to.be.greaterThan(0);\nexpectDefinedHoliday(mockRes.body[0]);\n// get\ngetHolidayEvent.params.holidayGuid = inserted.holidayGuid;\nawait holidays.get(getHolidayEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst got = mockRes.body;\nvalidateHoliday(inserted, got);\n// delete\nlet deleteEvent = Object.assign({}, listHolidaysEvent);\ndeleteEvent.body = [inserted.holidayGuid];\nawait holidays.remove(deleteEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\ngetHolidayEvent.params = {\n  holidayGuid: inserted.holidayGuid\n};\nawait holidays.get(getHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(404);",
                            "err": {},
                            "uuid": "a8d332fb-b697-40e3-b97b-26b3d6c93755",
                            "parentUUID": "b88fdea3-4e54-45be-b856-9eb762588274",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a8d332fb-b697-40e3-b97b-26b3d6c93755"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 27,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ea2c0e49-b331-4cba-85e1-088573172549",
                    "title": "Settings API Languages Test",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/languages.test.js",
                    "file": "/test/integration/functions/languages.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of holidays",
                            "fullTitle": "Settings API Languages Test should get a list of holidays",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nconst listLanguagesEvent = await mocks.listLanguagesEvent();\nawait languages.list(listLanguagesEvent, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nexpect(mockRes.body.length).to.be.gt(0);\nconst language = mockRes.body[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "05226de7-5f9d-447c-960c-b477e9486e2a",
                            "parentUUID": "ea2c0e49-b331-4cba-85e1-088573172549",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "05226de7-5f9d-447c-960c-b477e9486e2a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 3,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0abd321d-f3cf-4b0b-a339-17ccf2a749cc",
                    "title": "Settings API Password Settings Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/passwordSettings.test.js",
                    "file": "/test/integration/functions/passwordSettings.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the password settings",
                            "fullTitle": "Settings API Password Settings Tests lists the password settings",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait passwordSettings.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\n// only system settings listed should be the ones related to passwords\nexpect(result.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(result.length);",
                            "err": {},
                            "uuid": "2e850b03-d6d9-46b9-aef1-e0cb3bcbc4f7",
                            "parentUUID": "0abd321d-f3cf-4b0b-a339-17ccf2a749cc",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "2e850b03-d6d9-46b9-aef1-e0cb3bcbc4f7"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 17,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cb819cf0-fb3f-44e2-8faa-79e278c57985",
                    "title": "Settings API System Config Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/systemConfig.test.js",
                    "file": "/test/integration/functions/systemConfig.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the system config settings",
                            "fullTitle": "Settings API System Config Tests lists the system config settings",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait systemConfig.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(40);\nexpect(result[0].settingsGuid).to.exist\nexpect(result[0].settingsKey).to.exist\nexpect(result[0].settingsValue).to.exist\nexpect(result[0].masterSettings.description).to.exist\nexpect(result[0].masterSettings.keyDefault).to.exist\nexpect(result[0].masterSettings.keyOptions).to.exist",
                            "err": {},
                            "uuid": "3b964be5-45b6-4115-9067-1e112ab96e97",
                            "parentUUID": "cb819cf0-fb3f-44e2-8faa-79e278c57985",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates system config settings",
                            "fullTitle": "Settings API System Config Tests updates system config settings",
                            "timedOut": false,
                            "duration": 133,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"true\"\n}]\nawait systemConfig.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nlet result = mockRes.body\nexpect(result).to.equal('1');\n// verify that change was made\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nlet allowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('true')\n// revert the change\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"false\"\n}]\nawait systemConfig.update(mockReq, mockRes);\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nallowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('false')",
                            "err": {},
                            "uuid": "882454db-f01d-47e8-a463-9f687cc4517e",
                            "parentUUID": "cb819cf0-fb3f-44e2-8faa-79e278c57985",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3b964be5-45b6-4115-9067-1e112ab96e97",
                        "882454db-f01d-47e8-a463-9f687cc4517e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 155,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0bdb6305-f6f5-4c7d-886d-551a4b64ea2c",
                    "title": "Settings API Utilities Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                    "file": "/test/integration/functions/utilities.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "00925dda-4fad-436c-abb1-71137f1d6491",
                            "title": "locales",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "lists locales",
                                    "fullTitle": "Settings API Utilities Tests locales lists locales",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\nawait utils.listLocales(mocks.req(), mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "c2489338-71b5-4e3d-8b50-a1621ed794ec",
                                    "parentUUID": "00925dda-4fad-436c-abb1-71137f1d6491",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c2489338-71b5-4e3d-8b50-a1621ed794ec"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "687f113e-1cf7-4323-87c4-442192ca5506",
                            "title": "timezones",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list timezones",
                                    "fullTitle": "Settings API Utilities Tests timezones should list timezones",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listTimezones(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "7f42bcbf-64b4-46e7-ade9-5d1b8bdcacd0",
                                    "parentUUID": "687f113e-1cf7-4323-87c4-442192ca5506",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7f42bcbf-64b4-46e7-ade9-5d1b8bdcacd0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1354dd65-c379-4d57-aa10-513f654850b9",
                            "title": "running versions",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list running versions",
                                    "fullTitle": "Settings API Utilities Tests running versions should list running versions",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listRunningVersions(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "dc72cb35-7b4c-4abc-8997-e4ae11123f11",
                                    "parentUUID": "1354dd65-c379-4d57-aa10-513f654850b9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dc72cb35-7b4c-4abc-8997-e4ae11123f11"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "d3698995-64a0-45a1-8caf-1edf34ba8750",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "0efd3956-d6d6-40ca-96c6-7e9f64241570",
                    "title": "Task Dispatcher API Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                    "file": "/test/integration/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "fullTitle": "Task Dispatcher API Controller Tests \"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}",
                            "err": {},
                            "uuid": "6ab590da-82f7-4d4e-9a5b-fe813499e2a4",
                            "parentUUID": "0efd3956-d6d6-40ca-96c6-7e9f64241570",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c956b39e-ee18-4e68-b019-fbe38c84f434",
                            "title": "ProcessTaskController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get process tasks",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskController should get process tasks",
                                    "timedOut": false,
                                    "duration": 233,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskController = new controllers.ProcessTaskController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nlet processTasks = await processTaskController.getProcessTasks(updateMyProfileProcessSid)\nexpect(processTasks).to.exist;\nexpect(processTasks.length).to.be.gt(0);\nexpect(processTasks[0].processTaskGuid).to.exist;",
                                    "err": {},
                                    "uuid": "4da58cdd-0ca8-4f76-bc41-68ac3974b460",
                                    "parentUUID": "c956b39e-ee18-4e68-b019-fbe38c84f434",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4da58cdd-0ca8-4f76-bc41-68ac3974b460"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 233,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "72bfe062-2397-4271-830c-e20468488fcc",
                            "title": "ProcessTaskAttributeController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task attributes",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should list process task attributes",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet includeExt = false\nlet processTaskAttributes = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributes[6].extendedAtt).to.not.exist;\nincludeExt = true\nlet processTaskAttributesIncExt = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributesIncExt).to.exist;\nexpect(processTaskAttributesIncExt.length).to.be.gt(0);\nexpect(processTaskAttributesIncExt[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributesIncExt[6].extendedAtt.extAttribute).to.exist;",
                                    "err": {},
                                    "uuid": "5afd5209-dfb2-4d7a-8077-07657f031435",
                                    "parentUUID": "72bfe062-2397-4271-830c-e20468488fcc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get and update a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get and update a process task attribute",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeGuid = '7cece0ab-bda6-4b13-a8fb-3f5c467371e6'  \nlet processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nlet processTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\n// console.log(processTaskAttribute)\nexpect(processTaskAttribute.attributeValue).to.equal('0')\nlet numberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: 'TEST'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('TEST')\n// must set it back to original value so that we don't break anything\nnumberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: '0'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('0')",
                                    "err": {},
                                    "uuid": "89d099b0-ae47-4769-81d9-792400a66a3f",
                                    "parentUUID": "72bfe062-2397-4271-830c-e20468488fcc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should insert a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should insert a process task attribute",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// pick any process task and insert a process task attribute\n// then delete it\nconst processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// give \"Update my profile - Start task\" a test process task att\nconst processTaskGuid = '27cb04ea-b19d-4327-8b3a-e82cc538d44d'\nconst attributeKey = 'TEST_KEY'\nconst attributeValue = 'TEST_VALUE'\nconst ordinal = 1\nconst processTaskAttribute = await processTaskAttributeController.insert({\n  processTaskGuid,\n  attributeKey,\n  attributeValue,\n  ordinal\n})\nexpect(processTaskAttribute.processTaskAttributeGuid).to.be.a.uuid()\nexpect(processTaskAttribute.processTaskGuid).to.equal(processTaskGuid)\nexpect(processTaskAttribute.attributeKey).to.equal(attributeKey)\nexpect(processTaskAttribute.attributeValue).to.equal(attributeValue)\nexpect(processTaskAttribute.ordinal).to.equal(ordinal)\n// cleanup\n// const numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nconst numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nexpect(numberOfAffectedRows).to.equal(1)",
                                    "err": {},
                                    "uuid": "67995c67-7e49-4e72-a37d-d5b9f1c0f503",
                                    "parentUUID": "72bfe062-2397-4271-830c-e20468488fcc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get the process task attribute max ordinal value for a process task",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get the process task attribute max ordinal value for a process task",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// \"Update my profile - Start task\" a test process task att\nlet processTaskGuid = \"27cb04ea-b19d-4327-8b3a-e82cc538d44d\";\n// that process task has no atts so its max ordinal should be null\nlet maxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(null);\n// \"Update my profile - User Profile\" task does have atts.  seed db goes up to 12\nprocessTaskGuid = \"28d88aa5-fc4c-4e16-b32d-2964c738d49b\";\nmaxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(12);",
                                    "err": {},
                                    "uuid": "79678e97-0a72-4beb-9d38-99c7ff693ead",
                                    "parentUUID": "72bfe062-2397-4271-830c-e20468488fcc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5afd5209-dfb2-4d7a-8077-07657f031435",
                                "89d099b0-ae47-4769-81d9-792400a66a3f",
                                "67995c67-7e49-4e72-a37d-d5b9f1c0f503",
                                "79678e97-0a72-4beb-9d38-99c7ff693ead"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b9290710-7dec-4890-89d8-30f0f3a010f7",
                            "title": "ProcessTaskMappingController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task mappings",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskMappingController should list process task mappings",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskMappingController = new controllers.ProcessTaskMappingController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet processTaskAttributes = await processTaskMappingController.list(profileFormProcessTaskSid)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[0].processTaskMappingGuid).to.exist;",
                                    "err": {},
                                    "uuid": "befd2a44-7b38-4ad0-9d68-df5524ad0560",
                                    "parentUUID": "b9290710-7dec-4890-89d8-30f0f3a010f7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "befd2a44-7b38-4ad0-9d68-df5524ad0560"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a1e91116-827f-4f4c-b148-1aab958974dc",
                            "title": "ProcessController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should update a process's modified by and date fields",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessController should update a process's modified by and date fields",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processController = new controllers.ProcessController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nconst systemUserGuid = 'D8C469C3-F781-4179-A09C-6D148885FB30'\nlet process = await processController.get(updateMyProfileProcessSid)\nexpect(process).to.exist;\nexpect(process.processGuid.toLowerCase()).to.equal(updateMyProfileProcessSid);\nconst oldModifiedDate = process.modifiedDate\nconst numberOfAffectedRows = await processController.updateModifiedByAndDate(updateMyProfileProcessSid)\nexpect(numberOfAffectedRows).to.equal(1)\nprocess = await processController.get(updateMyProfileProcessSid) \nexpect(process.modifiedDate).to.be.greaterThan(oldModifiedDate)\n// for some reason when executed in a test the db record's modifiedBy is set to \n// the systemUserGuid instead of the contact sid specified in the session (4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF)\nexpect(process.modifiedBy).to.equal(systemUserGuid)",
                                    "err": {},
                                    "uuid": "ee324772-c579-476d-83bd-fde1967b07f1",
                                    "parentUUID": "a1e91116-827f-4f4c-b148-1aab958974dc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ee324772-c579-476d-83bd-fde1967b07f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c542ae2b-36ad-4ff8-8b70-bbb497602fd4",
                    "title": "Task Dispatcher API Model Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/model.test.js",
                    "file": "/test/integration/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "62978db3-1009-471d-876b-a568e0396ee9",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/model.test.js",
                            "file": "/test/integration/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Task Dispatcher API Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "06eecbed-8742-4b80-87d6-d19ed07d0d4d",
                                    "parentUUID": "62978db3-1009-471d-876b-a568e0396ee9",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 88,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = await sqldb.models.bindModel(\n  config.tenantOne.tenantId,\n  vwProcessTasksModels.vwProcessTasks\n);\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "4fc2d1d7-74ac-40ee-9967-c7ffcea2a424",
                                    "parentUUID": "62978db3-1009-471d-876b-a568e0396ee9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = (await models.getModels(config.tenantOne.tenantId))\n  .vwProcessTasks;\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "7be5e9f5-b66a-4e67-bec4-77d9246c2ebe",
                                    "parentUUID": "62978db3-1009-471d-876b-a568e0396ee9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tentantModels[config.tenantOne.tenantId]).to.exist;\nlet results = await models._tentantModels[\n  config.tenantOne.tenantId\n].vwProcessTasks.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "1dc31aaa-7e4f-4a53-9ac3-7f9f15a36b2b",
                                    "parentUUID": "62978db3-1009-471d-876b-a568e0396ee9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4fc2d1d7-74ac-40ee-9967-c7ffcea2a424",
                                "7be5e9f5-b66a-4e67-bec4-77d9246c2ebe",
                                "1dc31aaa-7e4f-4a53-9ac3-7f9f15a36b2b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 178,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c262fbd6-bf73-4771-a67e-d8f27a3cd154",
                    "title": "Task Dispatcher API FTP Push Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/functions/ftpPush.test.js",
                    "file": "/test/integration/functions/ftpPush.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task file settings",
                            "fullTitle": "Task Dispatcher API FTP Push Tests gets task file settings",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfilesettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst data = mockRes.body.Data;\nexpect(data).to.include({PickDirectory: \"No\"});\nexpect(data).to.include({FileToFTP: \"4a6c9613-bac9-4448-93c9-d9342bf5d897;96865aec-667c-4db5-8116-f1d1bae512ab\"});\nexpect(data).to.include({FTPSite: \"ftp\"});\nexpect(data).to.include({FTPUsername: \"ftp_user\"});\nexpect(data).to.include({FTPPassword: \"ftp_pass\"});",
                            "err": {},
                            "uuid": "1e0eae19-e6f5-4a97-8fad-b12d48fb8c54",
                            "parentUUID": "c262fbd6-bf73-4771-a67e-d8f27a3cd154",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets task file options",
                            "fullTitle": "Task Dispatcher API FTP Push Tests gets task file options",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfileoptions\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nconst data = mockRes.body.Data[0];\nexpect(data).to.include('4a6c9613-bac9-4448-93c9-d9342bf5d897;96865aec-667c-4db5-8116-f1d1bae512ab');\nexpect(data).to.include('Form : File Attachment:  (Task Output)'),\nexpect(data).to.include('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "c0498cc1-5c3a-452e-a7bd-e532e0e204d0",
                            "parentUUID": "c262fbd6-bf73-4771-a67e-d8f27a3cd154",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "1e0eae19-e6f5-4a97-8fad-b12d48fb8c54",
                        "c0498cc1-5c3a-452e-a7bd-e532e0e204d0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 37,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "94bab678-9115-41ba-b929-87f41d82f8eb",
                    "title": "Task Dispatcher API PDF Merge Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/functions/pdfMerge.test.js",
                    "file": "/test/integration/functions/pdfMerge.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task settings",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets task settings",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_gettasksettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\n// vue output\n// expect(result.length).to.be.greaterThan(1);\n// expect(result[0].attributeKey).to.exist;\n// expect(result[0].attributeValue).to.exist;\n// expect(result.find(x => x.attributeKey == 'GeneratedFileName')).to.exist\n// expect(result.find(x => x.attributeKey == 'FirstPDF')).to.exist\n// angular output\nexpect(result.Data.GeneratedFileName).to.exist;\nexpect(result.Data.FirstPDF).to.exist;\nexpect(result.Data.SecondPDF).to.exist;",
                            "err": {},
                            "uuid": "2910a03a-8ed4-40c0-8655-93a71092c690",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF options",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getpdfoptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.length).to.be.greaterThan(1);\n// vue output\n// expect(result[0].displayName).to.exist;\n// expect(result[0].processTaskGuid).to.exist;\n// expect(result[0].taskTypeGuid).to.exist;\n// angular output\nexpect(result[0].length).to.be.greaterThan(1);\nexpect(result[0][0]).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e;52407ad7-bd98-4023-8d88-91ef4464cd98');\nexpect(result[0][1]).to.equal('second PDF Merge Form : File Attachment (Task Output)');\nexpect(result[0][2]).to.equal('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "b894e41e-c99a-4ba7-b3bf-26ea11655951",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists PDF rule options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests lists PDF rule options",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"listRuleOptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.eql([{ Value: \"GeneratedPDF\", Label: \"Generated PDF\", Type: \"FileAttachment\"}])",
                            "err": {},
                            "uuid": "7f9e87b7-bd0f-4d8b-8dd0-4dc5c806f7a6",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF fields",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF fields",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\n// vue output\n// expect(result.length).to.equal(1)\n// expect(result[0]).to.equal('FILE_NAME')\n// angular output\nexpect(result.Data.length).to.equal(1)\nexpect(result.Data[0][0]).to.equal('FILE_NAME')\nexpect(result.Data[0][1]).to.equal('FILE_NAME')",
                            "err": {},
                            "uuid": "9b482e2f-9086-4386-a362-5305a85a8e05",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - data source - form mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - data source - form mapping",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_Input')\nexpect(result[0].PrefillField).to.equal('1601919933647')\nexpect(result[0].Description).to.equal('Data - second PDF Merge Form - Merged PDF Filename:')\nexpect(result[0].TaskSID).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e')",
                            "err": {},
                            "uuid": "0c416b47-9be1-4695-a9da-326bfcbb7f5a",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - fixed value mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - fixed value mapping",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_fixedValue = 'c2095ccf-896b-46a0-b5e9-8e5b7e288270' \nconst processTaskSid_fixedValue = '5f719bb1-11b8-43d9-a9fd-66e55306f4eb'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_fixedValue, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_fixedValue }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Fixed_Value')\nexpect(result[0].PrefillField).to.equal('fixValFileName')\nexpect(result[0].Description).to.equal('Fixed Value - fixValFileName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "2e0821f7-b3b0-4171-ad9b-cf297d78faaf",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - request id mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - request id mapping",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_requestId = 'f9f94cfe-d4b3-4d89-9695-1b32c6cee55d' \nconst processTaskSid_requestId = '9b4f1444-7bd7-481a-8008-69a0490da139'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_requestId, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_requestId }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Request')\nexpect(result[0].PrefillField).to.equal('ID')\nexpect(result[0].Description).to.equal('Request - ID')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "94bc8137-2880-4047-8d04-9e132b9c0fd4",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - client username mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - client username mapping",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_clientUsername = 'd1a7c44e-1e6e-4cdf-9d39-deac08a8b5cc' \nconst processTaskSid_clientUsername = 'a79cde56-9f3a-4be4-9824-dd634eddbff3'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_clientUsername, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_clientUsername }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Client')\nexpect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Client - UserName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "0c4dbd44-7c8d-4a4a-a0d1-a6442ef341b5",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - status pdfmerge mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - status pdfmerge mapping",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_statusPdfMerge = 'ab3a8404-c208-4ca7-8ae6-637b16c23368' \nconst processTaskSid_statusPdfMerge = '7f4f1f42-228c-46dc-90a3-77fe15fe7412'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_statusPdfMerge, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_statusPdfMerge }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_State')\n// expect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Status - PDF Merge - ')\nexpect(result[0].TaskSID).to.equal('7f4f1f42-228c-46dc-90a3-77fe15fe7412')",
                            "err": {},
                            "uuid": "0f58e00a-0d70-46e1-92be-117502430f2e",
                            "parentUUID": "94bab678-9115-41ba-b929-87f41d82f8eb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "2910a03a-8ed4-40c0-8655-93a71092c690",
                        "b894e41e-c99a-4ba7-b3bf-26ea11655951",
                        "7f9e87b7-bd0f-4d8b-8dd0-4dc5c806f7a6",
                        "9b482e2f-9086-4386-a362-5305a85a8e05",
                        "0c416b47-9be1-4695-a9da-326bfcbb7f5a",
                        "2e0821f7-b3b0-4171-ad9b-cf297d78faaf",
                        "94bc8137-2880-4047-8d04-9e132b9c0fd4",
                        "0c4dbd44-7c8d-4a4a-a0d1-a6442ef341b5",
                        "0f58e00a-0d70-46e1-92be-117502430f2e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 154,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "bf63293f-0add-470a-b9d9-93b8edad6e93",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "4e0431aa-6cbc-4cdb-a488-e4ca154c8d50",
                    "title": "Tenant API Sessions Tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/activeSessions.test.js",
                    "file": "/test/integration/activeSessions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \ntestConfig = await testLib.getTestConfig();\n    \ntenant = testConfig.tenantOne.tenantId;\ngroup = \"sessionServiceGroup\"\ntestEventType = 'extendSession'\nfullStreamName = tenant + '.stream.' + testStreamName\neventProcessedName = fullStreamName + \".\" + group + \".processed\";\neventHistoryName = fullStreamName + \".history\"",
                            "err": {},
                            "uuid": "55dcdb9f-a1dd-4995-95c8-59a4b4c6331f",
                            "parentUUID": "4e0431aa-6cbc-4cdb-a488-e4ca154c8d50",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "697d6cbc-af5c-406c-90de-8be1ea0fa2c7",
                            "parentUUID": "4e0431aa-6cbc-4cdb-a488-e4ca154c8d50",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a2ec9156-0a20-4516-a3a5-d9c5d580fa15",
                            "title": "Active Sessions",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/activeSessions.test.js",
                            "file": "/test/integration/activeSessions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "99535da2-98fe-42ae-bfdc-09fb8cfca6ce",
                                    "title": "count active sessions",
                                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/activeSessions.test.js",
                                    "file": "/test/integration/activeSessions.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return activeSessions",
                                            "fullTitle": "Tenant API Sessions Tests Active Sessions count active sessions should return activeSessions",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions  = await getActiveSessions(tenant);\n//console.log(sessions)\nexpect(sessions).to.exist;\nexpect(sessions).to.have.property(\"activeSessions\")\nexpect(sessions).to.have.property(\"activeUsers\")",
                                            "err": {},
                                            "uuid": "dc0226ef-7c92-49ad-97dd-22e9faff6984",
                                            "parentUUID": "99535da2-98fe-42ae-bfdc-09fb8cfca6ce",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "dc0226ef-7c92-49ad-97dd-22e9faff6984"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "bacae790-50b6-475d-9c9f-f1936ada161b",
                    "title": "Tenant API licsense stats",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/licenseStats.test.js",
                    "file": "/test/integration/licenseStats.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API licsense stats \"before all\" hook",
                            "timedOut": false,
                            "duration": 3003,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \nconfig = await testLib.getTestConfig();\nlet sp = new stream.StreamPublisher('sessions',config.tenantOne.tenantId);\nawait sp.sendEvent(\"extendSession\", {\n    token: \"abcd234\",\n    user: {\n        sid:\"11111\", \n        user_name: \"iapprove\", \n        email: \"iapprove@integrify.com\", \n        name: \"System System\"\n    }\n})\n    \nawait delay(3000);",
                            "err": {},
                            "uuid": "5a7838ca-a25d-4820-8b57-de53744ab918",
                            "parentUUID": "bacae790-50b6-475d-9c9f-f1936ada161b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API licsense stats \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "caf6dc60-359a-4a2e-9bd1-00a7dad34dc0",
                            "parentUUID": "bacae790-50b6-475d-9c9f-f1936ada161b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fe28473d-957f-496f-b6e5-3c19a657a524",
                            "title": "Post all stats",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/licenseStats.test.js",
                            "file": "/test/integration/licenseStats.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return ok",
                                    "fullTitle": "Tenant API licsense stats Post all stats should return ok",
                                    "timedOut": false,
                                    "duration": 487,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let result = await postAllStats();\nexpect(result).to.eq(\"ok\");",
                                    "err": {},
                                    "uuid": "ba2fab2c-3141-4a83-9556-5a8eb3c56af6",
                                    "parentUUID": "fe28473d-957f-496f-b6e5-3c19a657a524",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ba2fab2c-3141-4a83-9556-5a8eb3c56af6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 487,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fd5b477c-58ee-4e4d-a812-45297ada1620",
                    "title": "Tenant API Stream-Manager Tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                    "file": "/test/integration/monitor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "851208c9-f0ea-4034-9d60-85da569a41e0",
                            "title": "listTenantStreams",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of the streams for a tenant",
                                    "fullTitle": "Tenant API Stream-Manager Tests listTenantStreams should return a list of the streams for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\tlet results = await streamMonitor.listTenantStreams(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\tstreamName = apps[0]\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "9d5c2657-7635-4cf1-a461-de84d0ce274a",
                                    "parentUUID": "851208c9-f0ea-4034-9d60-85da569a41e0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9d5c2657-7635-4cf1-a461-de84d0ce274a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "05eb3248-6f9c-4162-8a8d-1633c1f83d39",
                            "title": "streamInfoReqHandler",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests streamInfoReqHandler should return info for the stream",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.streamInfoReqHandler(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.exist",
                                    "err": {},
                                    "uuid": "b8bcecac-20e7-4c66-a639-bfa36503828d",
                                    "parentUUID": "05eb3248-6f9c-4162-8a8d-1633c1f83d39",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b8bcecac-20e7-4c66-a639-bfa36503828d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bf32612d-f6e7-454c-b82d-5e2f1846c835",
                            "title": "getGroupInfo",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return group info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests getGroupInfo should return group info for the stream",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.getGroupInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "0c86e613-70a6-40b8-a4c5-e7a9f1078086",
                                    "parentUUID": "bf32612d-f6e7-454c-b82d-5e2f1846c835",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0c86e613-70a6-40b8-a4c5-e7a9f1078086"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "736608f8-6509-4fd5-9ef6-f2575f717fd1",
                            "title": "getConsumerInfo",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return consumer info for the group",
                                    "fullTitle": "Tenant API Stream-Manager Tests getConsumerInfo should return consumer info for the group",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\treq.params.groupName = \"sessionServiceGroup\" \n\t\t\tlet results = await streamMonitor.getConsumerInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "f6b5a87b-ba93-4036-b7c8-6625edd404b6",
                                    "parentUUID": "736608f8-6509-4fd5-9ef6-f2575f717fd1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f6b5a87b-ba93-4036-b7c8-6625edd404b6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "def04032-83d1-4af0-ab6a-5ef0a604c448",
                    "title": "Tenant API License, Apps and Settings Tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                    "file": "/test/integration/tenant.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1710d424-4699-4ea7-9fa1-a5d7d35eeffe",
                            "title": "getTenantLicense",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a license for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicense should return a license for a tenant",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req()\n\t\t\tlet results = await getTenantLicense(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseInfo = mockRes.body;\n\t\t\texpect(licenseInfo.instanceId).equal(req.oauth.tenant);",
                                    "err": {},
                                    "uuid": "a0314ef1-246b-4998-854a-5489dba8a93f",
                                    "parentUUID": "1710d424-4699-4ea7-9fa1-a5d7d35eeffe",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a0314ef1-246b-4998-854a-5489dba8a93f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "54edcfca-8392-44f6-aa49-f030c33630c9",
                            "title": "getTenantApps",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return apps for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantApps should return apps for a tenant",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantApps(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "a92e7e44-1f08-443b-ba10-7859e989a634",
                                    "parentUUID": "54edcfca-8392-44f6-aa49-f030c33630c9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a92e7e44-1f08-443b-ba10-7859e989a634"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cb5d1002-358a-4bc1-8a72-73e76217364d",
                            "title": "getTenantLicenseLocation",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return license location for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicenseLocation should return license location for a tenant",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantLicenseLocation(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseLocation = mockRes.body;\n      expect(licenseLocation).to.satisfy(function(val) { return val === 'onpremise' || val.toLowerCase().includes('cloud'); });",
                                    "err": {},
                                    "uuid": "586e06f0-5097-43e0-b711-d1f4c3c24648",
                                    "parentUUID": "cb5d1002-358a-4bc1-8a72-73e76217364d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "586e06f0-5097-43e0-b711-d1f4c3c24648"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "beef18f1-c1dd-4a5c-8cbb-41955688da7e",
                            "title": "getTenantLoginSettings",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should login settings for a tenant based on a tenant id",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a tenant id",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {tenant: req.config.tenantOne.tenantId}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "234c28db-ebd4-46f5-90cc-9eae723d0ee5",
                                    "parentUUID": "beef18f1-c1dd-4a5c-8cbb-41955688da7e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should login settings for a tenant based on a host header",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a host header",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {hostHeader: req.config.tenantOne.hostHeader}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "93341618-c4ea-428b-9bfd-034ea9756f99",
                                    "parentUUID": "beef18f1-c1dd-4a5c-8cbb-41955688da7e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "234c28db-ebd4-46f5-90cc-9eae723d0ee5",
                                "93341618-c4ea-428b-9bfd-034ea9756f99"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "93c2588d-98a8-4d80-be4e-c39f06056987",
                    "title": "Tenant API Translation controller tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                    "file": "/test/integration/translation.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "b407009e-2281-49a4-bad2-e59cbbfeaad9",
                            "parentUUID": "93c2588d-98a8-4d80-be4e-c39f06056987",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "7774354c-b3d1-41fd-8f5f-b591c8e0602a",
                            "parentUUID": "93c2588d-98a8-4d80-be4e-c39f06056987",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3ffc16ff-9814-4d31-b4df-5fcc179555cf",
                            "title": "language crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  language = await translationController.createLanguage(tenant, languageObj);\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "41a7ec8d-2634-4b13-9f37-e79ba7476010",
                                    "parentUUID": "3ffc16ff-9814-4d31-b4df-5fcc179555cf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  languages = await translationController.listLanguages(tenant);\n         console.log(JSON.stringify(languages));\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "8da4b778-1cff-4e7c-ae52-5fef6fd5561a",
                                    "parentUUID": "3ffc16ff-9814-4d31-b4df-5fcc179555cf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language = await translationController.getLanguage(tenant,_id);\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "7d11ebf0-e471-4a9f-b3d1-eada4c41afa8",
                                    "parentUUID": "3ffc16ff-9814-4d31-b4df-5fcc179555cf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language.translationCode = 'test-updated';\n            language.modifiedBy = IntegrifySystemContactSid;\n            const updatedLanguage = await translationController.updateLanguage(tenant,language.toObject());\n            expect(updatedLanguage).to.exist         \n            expect(updatedLanguage._id.toString()).to.equal(_id)\n            expect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "1c4f4995-7823-41df-87a8-454a2d6f481e",
                                    "parentUUID": "3ffc16ff-9814-4d31-b4df-5fcc179555cf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  delete a a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLanguage(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "851d3773-7433-4728-86c5-e37d21d1912b",
                                    "parentUUID": "3ffc16ff-9814-4d31-b4df-5fcc179555cf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "41a7ec8d-2634-4b13-9f37-e79ba7476010",
                                "8da4b778-1cff-4e7c-ae52-5fef6fd5561a",
                                "7d11ebf0-e471-4a9f-b3d1-eada4c41afa8",
                                "1c4f4995-7823-41df-87a8-454a2d6f481e",
                                "851d3773-7433-4728-86c5-e37d21d1912b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 61,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                            "title": "label crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  label = await translationController.createLabel(tenant, labelObj);\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "bb5d68b1-d74c-4109-b258-3c6b4044546c",
                                    "parentUUID": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  labels = await translationController.listLabels(tenant);\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "8fda4c4a-42b8-4041-99c2-84d5fa6fa7c6",
                                    "parentUUID": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label = await translationController.getLabel(tenant,_id);\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "d3b0e33e-2567-4d88-b651-550bae02b411",
                                    "parentUUID": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\n            label.modifiedBy = IntegrifySystemContactSid;\n            const updatedLabel = await translationController.updateLabel(tenant,label.toObject());\n            expect(updatedLabel).to.exist         \n            expect(updatedLabel._id.toString()).to.equal(_id)\n            expect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "cd31dabe-202b-453b-84e3-ac0e2fbbd178",
                                    "parentUUID": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  delete a a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLabel(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "e1bbcc2d-4ac2-4c02-868d-fdaf89021355",
                                    "parentUUID": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation controller tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst savedCount = await translationController.saveNewDefaultLabels(tenant, unsaved);\nexpect(savedCount).to.exist         \nexpect(savedCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "430020ae-0cda-44f6-9c26-9d348fb1110a",
                                    "parentUUID": "57c9e59d-71f8-4cbe-854c-a69b04f8cfca",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bb5d68b1-d74c-4109-b258-3c6b4044546c",
                                "8fda4c4a-42b8-4041-99c2-84d5fa6fa7c6",
                                "d3b0e33e-2567-4d88-b651-550bae02b411",
                                "cd31dabe-202b-453b-84e3-ac0e2fbbd178",
                                "e1bbcc2d-4ac2-4c02-868d-fdaf89021355",
                                "430020ae-0cda-44f6-9c26-9d348fb1110a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "eec0ecfc-12e3-45eb-ba7f-8ee9777f5b30",
                            "title": "seed functions ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should seed languages",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed languages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLanguages(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "89e6d7c2-d507-45c8-849e-ba7e6d55ab45",
                                    "parentUUID": "eec0ecfc-12e3-45eb-ba7f-8ee9777f5b30",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should seed labels",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed labels",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLabels(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "7674f1a8-4c58-48f7-a187-6ef658e8a8eb",
                                    "parentUUID": "eec0ecfc-12e3-45eb-ba7f-8ee9777f5b30",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "89e6d7c2-d507-45c8-849e-ba7e6d55ab45",
                                "7674f1a8-4c58-48f7-a187-6ef658e8a8eb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3accf4b5-ae37-4c95-8ad6-c32ab4181fc6",
                    "title": "Tenant API Translation handler tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.handler.test.js",
                    "file": "/test/integration/translation.handler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "3435d556-711b-47ae-9bbf-6e379be81a97",
                            "parentUUID": "3accf4b5-ae37-4c95-8ad6-c32ab4181fc6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "8990a163-505f-4f31-bb92-8f8e64509c07",
                            "parentUUID": "3accf4b5-ae37-4c95-8ad6-c32ab4181fc6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3eb00b89-167b-40c7-8297-40d664b5a356",
                            "title": "language crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = languageObj;\nawait translationHandler.createLanguage(req, mockRes);\nlanguage = mockRes.body;\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "3d2f8699-aef7-4eea-8862-13ffc8a09912",
                                    "parentUUID": "3eb00b89-167b-40c7-8297-40d664b5a356",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         await translationHandler.listLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "3081e481-0f4b-4f40-b84f-2767f7385c9a",
                                    "parentUUID": "3eb00b89-167b-40c7-8297-40d664b5a356",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list tenant languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list tenant languages",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.params.tenant = tenant\n         await translationHandler.listTenantLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "6ab988d3-989b-4ddb-8290-abfa6394310e",
                                    "parentUUID": "3eb00b89-167b-40c7-8297-40d664b5a356",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLanguage(req,mockRes);\n            language = mockRes.body;\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "d77a4106-e799-4c55-ac12-fa23fbfac330",
                                    "parentUUID": "3eb00b89-167b-40c7-8297-40d664b5a356",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = language;\nawait translationHandler.updateLanguage(req, mockRes);\nconst updatedLanguage = mockRes.body;\nexpect(updatedLanguage).to.exist         \nexpect(updatedLanguage._id.toString()).to.equal(_id)\nexpect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "74254207-8b5d-4866-80ce-09eb7bcb74a1",
                                    "parentUUID": "3eb00b89-167b-40c7-8297-40d664b5a356",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  delete a language",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLanguage(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "cfdfcbe0-f412-4cbe-9faf-a745027d4ede",
                                    "parentUUID": "3eb00b89-167b-40c7-8297-40d664b5a356",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3d2f8699-aef7-4eea-8862-13ffc8a09912",
                                "3081e481-0f4b-4f40-b84f-2767f7385c9a",
                                "6ab988d3-989b-4ddb-8290-abfa6394310e",
                                "d77a4106-e799-4c55-ac12-fa23fbfac330",
                                "74254207-8b5d-4866-80ce-09eb7bcb74a1",
                                "cfdfcbe0-f412-4cbe-9faf-a745027d4ede"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                            "title": "label crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = labelObj;\nawait translationHandler.createLabel(req, mockRes);\nlabel = mockRes.body;\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "539f4376-28d2-4152-bd53-6fcf6a50bfc9",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.query.tenant = tenant\n         await translationHandler.listLabels(req,mockRes);\n         const  labels = mockRes.body;\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "4012c992-4f3f-4fda-9555-9d541624f868",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLabel(req,mockRes);\n            label = mockRes.body;\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "9c9bebe5-a3a1-4a1a-9e4b-61cdeca5f3db",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\nlabel.modifiedBy = IntegrifySystemContactSid;\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = label;\nawait translationHandler.updateLabel(req, mockRes);\nconst updatedLabel = mockRes.body;   \nexpect(updatedLabel).to.exist         \nexpect(updatedLabel._id.toString()).to.equal(_id)\nexpect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "e4810ad9-8588-43a0-baee-763e1d80569c",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete aa label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete aa label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLabel(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "9d3028f2-4542-45a2-8600-7f5b744828c1",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete labels",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let results = await translationController.listLabels(tenant,{_id})\n            let labelIds= results.map((i) => {\n                return i._id;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req()\n            req.body = labelIds;\n            await translationHandler.deleteLabels(req,mockRes);\n\t\t\tconst  deleted = mockRes.body;\n            expect(deleted).to.exist         \n            expect(deleted.deletedCount).to.exist",
                                    "err": {},
                                    "uuid": "8e86b920-6f77-413c-94cd-ef6ba857bd10",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation handler tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst mockRes = await mocks.mockResponse();\nlet req = await mocks.req()\nreq.body = unsaved;\nawait translationHandler.saveNewDefaultLabels(req,mockRes);\nconst result = mockRes.body;\nexpect(result).to.exist         \nexpect(result.saved).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "bebaf1b9-e2ac-4e20-97ad-349d2c7e8020",
                                    "parentUUID": "a31458f3-c20d-4e9d-b97e-5a81884e802c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "539f4376-28d2-4152-bd53-6fcf6a50bfc9",
                                "4012c992-4f3f-4fda-9555-9d541624f868",
                                "9c9bebe5-a3a1-4a1a-9e4b-61cdeca5f3db",
                                "e4810ad9-8588-43a0-baee-763e1d80569c",
                                "9d3028f2-4542-45a2-8600-7f5b744828c1",
                                "8e86b920-6f77-413c-94cd-ef6ba857bd10",
                                "bebaf1b9-e2ac-4e20-97ad-349d2c7e8020"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "92d0cc94-7c51-4e93-a5ca-e7e0ea3952c9",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "eae22957-a8ef-4044-9779-8cd6f745af4c",
                    "title": "api-user Group Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                    "file": "/test/db/groupController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 351,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = { tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase() }; // system level\ntenantId = config.tenantOne.tenantId;\nfor (i = 1; i <= 10; i++) {\n  const groupController = new GroupController(session);\n  const result = await groupController.addGroup({ groupName: `Test Automation Group ${i}` });\n  testGroups.push(result);\n}",
                            "err": {},
                            "uuid": "a34b04d8-5cb8-40dd-809b-f0bbca0dc7cb",
                            "parentUUID": "eae22957-a8ef-4044-9779-8cd6f745af4c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 56,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// clean up our test data\nconst Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst ContactGroup = await models.getModel(config.tenantOne.tenantId, 'ContactGroup');\nawait Promise.all(testGroups.map(async (group) => {\n  await Group.query().hardDelete(group);\n  await ContactGroup.query()\n    .where('groupGuid', group.groupGuid)\n    .delete();\n}));",
                            "err": {},
                            "uuid": "385dd7d0-7c50-4dd8-b23b-619b69eed861",
                            "parentUUID": "eae22957-a8ef-4044-9779-8cd6f745af4c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "268fb44f-d079-4148-919a-b568a27d8fae",
                            "title": "get tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "retrieves a group",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves a group",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groups = await Group.query().where('group_name', '=', 'Administrators');\nexpect(groups.length).to.equal(1);\nadminGroupGuid = groups[0].groupGuid;\nconst groupController = new GroupController(config.tenantOne);\nconst adminGroup = await groupController.getGroup(adminGroupGuid);\nexpect(adminGroup).to.exist;\nexpect(adminGroup.groupName).to.equal('Administrators');\nexpect(adminGroup.groupDesc).to.equal('System administrators');\nexpect(adminGroup.groupSql).to.be.null;",
                                    "err": {},
                                    "uuid": "d8a2950c-c022-4f09-bd99-772060200ef0",
                                    "parentUUID": "268fb44f-d079-4148-919a-b568a27d8fae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all groups by default",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all groups by default",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups();\nconst groups = response.results;\nexpect(groups.length).to.be.above(10);",
                                    "err": {},
                                    "uuid": "32a33a96-01db-4992-8056-99417888741b",
                                    "parentUUID": "268fb44f-d079-4148-919a-b568a27d8fae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves filtered list of groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves filtered list of groups",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups({ search: 'Test Automation Group', count: 4 });\nconst groups = response.results;\nexpect(groups.length).to.equal(4);",
                                    "err": {},
                                    "uuid": "d2cca28b-863c-43b1-9efd-a5a630c0d8be",
                                    "parentUUID": "268fb44f-d079-4148-919a-b568a27d8fae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all possible members for adding to groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all possible members for adding to groups",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst group = testGroups[9];\nconst response = await groupController.getNonMembers(group.groupGuid);\nconst results = response.results;\nexpect(results.length).to.be.equal(response.total);\n// empty group, so test a sampling of accounts that should be non-members\nexpect(results).to.include.deep({ memberGuid: \"A03BDD24-A0BA-4071-9A5B-2833C865EC3D\",\n                                  memberId: 1,\n                                  memberName: \"Administrators\",\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: testGroups[8].groupGuid.toUpperCase(),\n                                  memberId: testGroups[8].groupId,\n                                  memberName: testGroups[8].groupName,\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n                                  memberId: 1,\n                                  memberName: 'System System',\n                                  memberType: 'User'\n                                })\n// two system accounts that should not be returned, plus the group itself\nexpect(results).to.not.include.deep({ memberGuid: 'D8C469C3-F781-4179-A09C-6D148885FB30',\n                                               memberId: 92,\n                                               memberName: \"Integrify System\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: '64EC8FC9-B426-4376-A1A4-3AD16F0F9906',\n                                               memberId: 96,\n                                               memberName: \"Guest Account\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: testGroups[9].groupGuid.toUpperCase(),\n                                           memberId: testGroups[9].groupId,\n                                           memberName: testGroups[9].groupName,\n                                           memberType: \"Group\"\n                                         })",
                                    "err": {},
                                    "uuid": "3e873d01-d872-4ed9-931b-68293cd97fa4",
                                    "parentUUID": "268fb44f-d079-4148-919a-b568a27d8fae",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d8a2950c-c022-4f09-bd99-772060200ef0",
                                "32a33a96-01db-4992-8056-99417888741b",
                                "d2cca28b-863c-43b1-9efd-a5a630c0d8be",
                                "3e873d01-d872-4ed9-931b-68293cd97fa4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 62,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "ba0b5678-3ac8-4e4f-ae37-24421070306a",
                            "title": "insert tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts a non-dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a non-dynamic group",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.dynamic).to.equal('No'); // ensure defaulting to \"No\" rather than null\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "f9b1f0c0-e041-4a2c-808f-11d678cca35c",
                                    "parentUUID": "ba0b5678-3ac8-4e4f-ae37-24421070306a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "inserts a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a dynamic group",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "ff4dd296-946a-44a2-9b68-18d1141a312c",
                                    "parentUUID": "ba0b5678-3ac8-4e4f-ae37-24421070306a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with bad SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with bad SQL",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"bad_column_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "c64756fc-8531-45ec-abe4-ae9c8c4d9e26",
                                    "parentUUID": "ba0b5678-3ac8-4e4f-ae37-24421070306a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a group with no name",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a group with no name",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nawait expect(groupController.addGroup({ groupDesc: 'Test Group' })).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "5aef5c15-6c7b-471c-984d-4ce8e771e59b",
                                    "parentUUID": "ba0b5678-3ac8-4e4f-ae37-24421070306a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with no SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with no SQL",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupData = {\n  groupName: 'Dynamic Test Group',\n  dynamic: 'Yes',\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "d1be02c8-1b15-4060-a7cc-5eb8c00a2bb3",
                                    "parentUUID": "ba0b5678-3ac8-4e4f-ae37-24421070306a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f9b1f0c0-e041-4a2c-808f-11d678cca35c",
                                "ff4dd296-946a-44a2-9b68-18d1141a312c",
                                "c64756fc-8531-45ec-abe4-ae9c8c4d9e26",
                                "5aef5c15-6c7b-471c-984d-4ce8e771e59b",
                                "d1be02c8-1b15-4060-a7cc-5eb8c00a2bb3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 54,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "9fabc9e3-8465-4c00-bf84-c58aa0ee26b1",
                            "title": "update tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates a group",
                                    "fullTitle": "api-user Group Controller Tests update tests updates a group",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nconst result = await groupController.updateGroup({\n  groupGuid: group.groupGuid,\n  groupName: 'Updated Test Automation Group',\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n});\nexpect(result.groupName).to.equal('Updated Test Automation Group');\nexpect(result.dynamic).to.equal('Yes');\nexpect(result.groupSql).to.equal(\"first_name = 'Admin'\");",
                                    "err": {},
                                    "uuid": "7068dfa4-cd62-4a7e-90cb-907252091feb",
                                    "parentUUID": "9fabc9e3-8465-4c00-bf84-c58aa0ee26b1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update with no group name",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update with no group name",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "89d74abf-5ce8-4156-961f-c9559d62733b",
                                    "parentUUID": "9fabc9e3-8465-4c00-bf84-c58aa0ee26b1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic without sql",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic without sql",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'Yes',\n    groupSql: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "d26b91a5-cc43-4cd6-b860-e8ec0c06f64c",
                                    "parentUUID": "9fabc9e3-8465-4c00-bf84-c58aa0ee26b1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic other than Yes/No",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic other than Yes/No",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: true,\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'yes',\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "9ee9a63b-e37e-4ca6-af6f-10547e206f93",
                                    "parentUUID": "9fabc9e3-8465-4c00-bf84-c58aa0ee26b1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7068dfa4-cd62-4a7e-90cb-907252091feb",
                                "89d74abf-5ce8-4156-961f-c9559d62733b",
                                "d26b91a5-cc43-4cd6-b860-e8ec0c06f64c",
                                "9ee9a63b-e37e-4ca6-af6f-10547e206f93"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "93e73a6b-7491-4bcc-a31b-2f3b81b969f2",
                            "title": "delete tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "soft deletes a list of groups",
                                    "fullTitle": "api-user Group Controller Tests delete tests soft deletes a list of groups",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst timeBeforeDelete = Date.now();\nconst firstGroup = testGroups[0];\nconst response = await groupController.deleteGroups(testGroups.slice(0, 5).map((group) => group.groupGuid));\nexpect(response).to.eql([1, 1, 1, 1, 1]);\nconst deletedGroup = groupController.getGroup(firstGroup.groupGuid);\nexpect(deletedGroup).to.be.empty;",
                                    "err": {},
                                    "uuid": "5f3b228d-94ef-40ec-a37f-e709662d14af",
                                    "parentUUID": "93e73a6b-7491-4bcc-a31b-2f3b81b969f2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5f3b228d-94ef-40ec-a37f-e709662d14af"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "e727d403-e816-43e9-9e23-3ceaff799535",
                            "title": "membership test",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "adds a user to a group",
                                    "fullTitle": "api-user Group Controller Tests membership test adds a user to a group",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9]; // 0-4 get deleted in a previous test\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(0); // make sure group starts empty\nlet result = await groupController.addMembersToGroup({\n  groupGuid: group.groupGuid,\n  members: [{\n    memberGuid: session.user_sid,\n    memberType: 'User',\n  },\n  ],\n});\nexpect(result).to.not.be.undefined;\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(1);\nexpect(result[0].memberGuid.toLowerCase()).to.equal(session.user_sid);\nexpect(result[0].groupGuid.toLowerCase()).to.equal(group.groupGuid);\nexpect(result[0].memberType).to.equal('User');",
                                    "err": {},
                                    "uuid": "96593709-7b35-428e-8c53-bf5dd91e8246",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "removes members from a group",
                                    "fullTitle": "api-user Group Controller Tests membership test removes members from a group",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9];\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(1); // should have 1 member from preceding addUser test\nlet result = await groupController.removeMembersFromGroup({\n  groupGuid: group.groupGuid,\n  members: [session.user_sid],\n});\nexpect(result).to.equal(1);\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "978e8321-4610-4607-a687-4397cca5b574",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a group",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid);\nexpect(res.results.length).to.be.at.least(2);",
                                    "err": {},
                                    "uuid": "c1a878fb-08d2-48ee-ba6c-1f978f0e4a1c",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "filters members of a group based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test filters members of a group based on search string",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid, { search: 'no-reply@integrify.com' });\nexpect(res.results.length).to.equal(2);",
                                    "err": {},
                                    "uuid": "bf5df70a-602a-4b95-917a-37adc54909a8",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits result members of a group based start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits result members of a group based start/count",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nlet res = await groupController.getMembers(usersGroupGuid);\nconst groupSize = res.results.length;\nexpect(groupSize).to.equal(res.total);\nres = await groupController.getMembers(usersGroupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(groupSize);\nres = await groupController.getMembers(usersGroupGuid, { start: 1 });\nexpect(res.results.length).to.equal(groupSize - 1);\nexpect(res.total).to.equal(groupSize);",
                                    "err": {},
                                    "uuid": "63bf8d84-d2b0-4a83-9264-351626940ba9",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to users only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to users only",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'true', groups: 'false' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('User'));",
                                    "err": {},
                                    "uuid": "d0092bb2-9a9a-4e5c-ac91-63fbb954f000",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to groups only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to groups only",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'false', groups: 'true' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('Group'));",
                                    "err": {},
                                    "uuid": "f87eb290-0062-4ba3-beb8-503e3e89fee0",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves groups a user belongs to",
                                    "fullTitle": "api-user Group Controller Tests membership test retrieves groups a user belongs to",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst userGuid = '4e99e0dd-b3b3-4d5d-826d-3d5ae62a16cf';\nconst res = await groupController.getUserGroups(userGuid);\nexpect(res.results.find((result) => result.groupName == 'Administrators')).to.not.be.undefined;\nexpect(res.results.find((result) => result.groupDesc == 'All users')).to.not.be.undefined;",
                                    "err": {},
                                    "uuid": "055a89d7-8902-4a55-8b42-b77e04eea2c6",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on start/count",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 0, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 1, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);",
                                    "err": {},
                                    "uuid": "125f1050-d70e-45a4-8df0-8cd4dc70acbd",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on search string",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { search: 'System' });\nconst { results } = res;\nexpect(results).to.eql([{\n  memberGuid: 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D',\n  memberName: 'Administrators',\n  memberType: 'Group',\n  memberId: 1,\n},\n{\n  memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n  memberId: 1,\n  memberName: 'System System',\n  memberType: 'User',\n},\n]);",
                                    "err": {},
                                    "uuid": "93080e52-f3df-4d82-a070-e8b6a33bdfc4",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a dynamic group",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst allUsersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst result = await groupController.getMembers(allUsersGroupGuid);",
                                    "err": {},
                                    "uuid": "25622418-0dea-47f1-9722-7fa0cfd455a2",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists all members of a group containing groups",
                                    "fullTitle": "api-user Group Controller Tests membership test lists all members of a group containing groups",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "",
                                    "err": {},
                                    "uuid": "076eda5d-a6bf-4fbd-ab1d-4a8c338318cd",
                                    "parentUUID": "e727d403-e816-43e9-9e23-3ceaff799535",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "96593709-7b35-428e-8c53-bf5dd91e8246",
                                "978e8321-4610-4607-a687-4397cca5b574",
                                "c1a878fb-08d2-48ee-ba6c-1f978f0e4a1c",
                                "bf5df70a-602a-4b95-917a-37adc54909a8",
                                "63bf8d84-d2b0-4a83-9264-351626940ba9",
                                "d0092bb2-9a9a-4e5c-ac91-63fbb954f000",
                                "f87eb290-0062-4ba3-beb8-503e3e89fee0",
                                "055a89d7-8902-4a55-8b42-b77e04eea2c6",
                                "125f1050-d70e-45a4-8df0-8cd4dc70acbd",
                                "93080e52-f3df-4d82-a070-e8b6a33bdfc4",
                                "25622418-0dea-47f1-9722-7fa0cfd455a2",
                                "076eda5d-a6bf-4fbd-ab1d-4a8c338318cd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 176,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "4d4f4175-603f-42e5-92d1-838c6fecfbc3",
                            "title": "association tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(47);\n// should not include categoryLevel by default\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName');",
                                    "err": {},
                                    "uuid": "2c99eeb5-407b-4d5d-bd2f-fdf7fdbe4349",
                                    "parentUUID": "4d4f4175-603f-42e5-92d1-838c6fecfbc3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D', { include: ['category'] });\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName', 'categoryLevel');",
                                    "err": {},
                                    "uuid": "6f3a38e4-384b-4074-97af-ef3064dfd460",
                                    "parentUUID": "4d4f4175-603f-42e5-92d1-838c6fecfbc3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list roles associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list roles associated to a group",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getRoleAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(1);",
                                    "err": {},
                                    "uuid": "4f6db063-c8b0-4cf0-add2-131a00df8783",
                                    "parentUUID": "4d4f4175-603f-42e5-92d1-838c6fecfbc3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2c99eeb5-407b-4d5d-bd2f-fdf7fdbe4349",
                                "6f3a38e4-384b-4074-97af-ef3064dfd460",
                                "4f6db063-c8b0-4cf0-add2-131a00df8783"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 72,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                    "title": "api-user User Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/db/userController.test.js",
                    "file": "/test/db/userController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1221,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenantId = config.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nMetadataValue = await models.getModel(tenantId, 'MetadataValue');\nUserAuth = await models.getModel(tenantId, 'UserAuth');\n// add user\nuserCtrl = new UserController(session);\nfor (let i=1; i<=limit; i++) {\n  const user = {\n    firstName: 'test first name' + i,\n    lastName: 'last' + i,\n    userName: 'test_username' + i,\n    email: `test${i}@test.test${i}`,\n    locale: 'en-US',\n    languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460', // US English\n    password: testPwd,\n    confirmPassword: testPwd,\n    title: 'title' + i\n  };\n  const dbUser = await userCtrl.insertUser(user)\n  testUsers.push(dbUser);\n}",
                            "err": {},
                            "uuid": "85249253-6bb7-4564-9fb8-8b9748f66a59",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 66,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await Promise.all( testUsers.map( async (user) => {\n  return UserAuth.query().deleteById(user.contactGuid);\n}));\nawait User.query().delete().where('firstName', 'like', 'test first%');",
                            "err": {},
                            "uuid": "1c878802-7c9d-4b9e-9006-96c1ef3f230a",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should retrieves users",
                            "fullTitle": "api-user User Controller Tests should retrieves users",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenantId, 'User');\nconst UserAuth = await models.getModel(tenantId, 'UserAuth');\nconst users = await User.query()\n  .orderBy('createdDate', 'desc')\n  .limit(limit);\nawait Promise.all(users.map(async user => {\n  const result = await userCtrl.getUser(user.contactGuid);\n  const {userName, managerGuid, ...userToCompare1} = result;\n  user.languageGuid = user.languageGuid.toLowerCase() // 'user' from Database query has \"upper case\" language guid - but userToCompare1 from API should be in lower case\n  user.contactGuid = user.contactGuid.toLowerCase()\n  user.createdBy = user.createdBy.toLowerCase()\n  expect(userToCompare1).to.deep.eq(user);\n  // compare testUser to user\n  const testUser = testUsers.find(u => u.contactGuid === user.contactGuid);\n  ['firstName', 'lastName', 'email', 'locale', 'languageGuid', 'contactId', 'title'].forEach(p => {\n    expect(testUser[p]).to.eq(user[p]);\n  });\n  // check userNames\n  const userAuth = await UserAuth.query()\n    .findById(user.contactGuid);\n  expect(userAuth).to.exist;\n  expect(userAuth.userName).to.eq(testUser.userName);\n}));",
                            "err": {},
                            "uuid": "f77888a3-efb3-44a8-bf39-be2d69b88edf",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should search in users",
                            "fullTitle": "api-user User Controller Tests should search in users",
                            "timedOut": false,
                            "duration": 67,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\n// search by id\nlet result = await userCtrl.getUsers({search: testUser.contactId});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(1);\n// search by username\nresult = await userCtrl.getUsers({search: testUser.userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = testUser.userName);\nexpect(found).to.exist;\n// search by first & last names\nresult = await userCtrl.getUsers({search: testUser.firstName.slice(0, -2)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.first === testUser.first);\nexpect(found).to.exist;\nresult = await userCtrl.getUsers({search: testUser.lastName.slice(0, -1)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.lastName === testUser.lastName);\nexpect(found).to.exist;\n// search by email\nresult = await userCtrl.getUsers({search: testUser.email.slice(-10)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.email === testUser.email);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "e5d16da0-f3c3-4e4e-876a-4c25c5d08790",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should limit results",
                            "fullTitle": "api-user User Controller Tests should limit results",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const result = await userCtrl.getUsers({count: 4});\nexpect(result.results.length).to.eq(4);",
                            "err": {},
                            "uuid": "8a0597d2-73fb-455d-bb98-0329ba1e5c14",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should retrieve filtered users ",
                            "fullTitle": "api-user User Controller Tests should retrieve filtered users ",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nconst filters = [\n  {\n    field: 'lastName',\n    data: {comparison: 'eq', type: 'string', value: user.lastName,}\n  },\n  {\n    field: 'firstName',\n    data: {comparison: 'contains', value: user.firstName}\n  },\n  {\n    field: 'userName',\n    data: {comparison: 'eq', value: user.userName}\n  },\n  {\n    field: 'email',\n    data: {comparison: 'contains', value: user.email}\n  },\n  {\n    field: 'title',\n    data: {comparison: 'contains', value: user.title}\n  },\n  {\n    field: 'constCenter',\n    data: {comparison: 'contains', value: user.constCenter}\n  },\n  {\n    field: 'country',\n    data: {comparison: 'contains', value: user.country}\n  },\n  {\n    field: 'department',\n    data: {comparison: 'contains', value: user.department}\n  },\n  {\n    field: 'managerName',\n    data: {comparison: 'contains', value: user.managerName}\n  },\n  {\n    field: 'managerGuid',\n    data: {comparison: 'contains', value: user.managerGuid}\n  },\n];\nconst result = await userCtrl.getUsers({filters});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst found = result.results.find(u => u.contactGuid === testUser.contactGuid);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "f6c64581-6f3d-4432-a57a-4fb50f81bcf5",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a list of managers",
                            "fullTitle": "api-user User Controller Tests should get a list of managers",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const exceptGuid = testUsers[0].contactGuid;\nconst managers = await userCtrl.getManagers({exceptGuid});\nmanagers.forEach(manager => {\n  expect(manager.contactGuid).to.not.eq(exceptGuid);\n});\ntestUsers.filter(u => u.contactGuid !== exceptGuid).forEach(u => {\n  const manager = managers.find(m => m.contactGuid === u.contactGuid);\n  const {contactGuid, firstName, lastName, email, title} = u;\n  const testUser = {contactGuid, firstName, lastName, email, title};\n  expect(manager).to.deep.eq(testUser);\n});",
                            "err": {},
                            "uuid": "f4a9ee1e-895d-4b94-b648-fe0697bf7e35",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a single user",
                            "fullTitle": "api-user User Controller Tests should get a single user",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[3];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nexpect(user).to.exist;\n['contactGuid', 'contactId', 'firstName', 'lastName', 'userName', 'email', 'locale', 'languageGuid', 'title'].forEach(p => {\n  expect(user[p]).to.eq(testUser[p]);\n});\n['middleName', 'phone', 'address1', 'address2', 'city', 'state', 'zip', 'country',\n  'department', 'costCenter', 'division', 'managerGuid', 'cField1', 'cField2'].forEach(p => {\n  expect(!!user[p] || user[p] === null || user[p] === '').to.eq(true);\n});",
                            "err": {},
                            "uuid": "99040c0d-fe94-472f-b3e3-9950e6dd32ef",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update and get delegate",
                            "fullTitle": "api-user User Controller Tests should update and get delegate",
                            "timedOut": false,
                            "duration": 51,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// insert delegate\nconst testDelegate = {\n  contactGuid: testUsers[3].contactGuid,\n  processes: [{id: 'a6714779-4bde-4000-8361-ad37c838d440'}, {id: '3545404d-6fff-4ed5-ba9a-1100ce38d421'}, {id: 'cfc36de0-a71b-451f-817a-2092c3c247ca'}],\n  startDate: '2021-01-14',\n  startTime: '06:00',\n  endDate: '2021-01-15',\n  endTime: '17:35',\n};\nawait userCtrl.updateDelegate(testUsers[3].contactGuid, testDelegate);\n// get delegate\nlet delegate = await userCtrl.getDelegate(testDelegate.contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.exist;\n  expect(delegate[p]).to.eq(testDelegate[p]);\n})\nexpect(delegate.processes).to.exist;\nexpect(delegate.processes.length).to.eq(testDelegate.processes.length);\ntestDelegate.processes.forEach(p => {\n  const process = delegate.processes.find(dp => dp.id === p.id);\n  expect(process).to.exist;\n});\n// for user without delegate\ndelegate = await userCtrl.getDelegate(testUsers[1].contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.be.null;\n});\nexpect(delegate.processes.length).to.eq(0);\n// delete delegate\nawait MetadataValue.query()\n  .where('ownerSid', testDelegate.contactGuid)\n  .delete();",
                            "err": {},
                            "uuid": "37583ab7-60f3-457d-9c24-e3f7c0a71bad",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "password should be hashed",
                            "fullTitle": "api-user User Controller Tests password should be hashed",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await UserAuth.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.password).to.not.eq(testPwd);",
                            "err": {},
                            "uuid": "d2cb67d6-ec77-46b2-8c6e-477984f6cb83",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "user should be active (not deleted)",
                            "fullTitle": "api-user User Controller Tests user should be active (not deleted)",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await User.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.deletedDate).to.be.null;\nexpect(user.deletedBy).to.be.null;",
                            "err": {},
                            "uuid": "3c600b45-92c2-4f96-834c-8a0fc1f9900d",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should convert user Guids",
                            "fullTitle": "api-user User Controller Tests should convert user Guids",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = {\n  contactGuid: 'SomeRandomString',\n  managerGuid: 'SomeRandomString',\n  signatureGuid: 'SomeRandomString',\n  languageGuid: 'SomeRandomString',\n  createdBy: 'SomeRandomString',\n};\nconst convertedUser1 = userCtrl.convertUserGuids(testUser);\nconst convertedUser2 = userCtrl.convertUserGuids({contactGuid: testUser.contactGuid});\n[convertedUser1, convertedUser2].forEach(u => {\n  Object.keys(u).forEach(key => {\n    expect(u[key]).to.eq(u[key].toLowerCase());\n  });\n});",
                            "err": {},
                            "uuid": "e1f65740-7477-4492-85b5-0e433c7b5d3f",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if username is taken",
                            "fullTitle": "api-user User Controller Tests should check if username is taken",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[0].contactGuid;\nconst username = testUsers[0].userName;\nlet isTaken = await userCtrl.isUserNameTaken(username);\nexpect(isTaken).to.be.true;\nisTaken = await userCtrl.isUserNameTaken(username.toUpperCase());\nexpect(isTaken).to.be.true;\n// with un-taken username\nisTaken = await userCtrl.isUserNameTaken('someUnusedUsernameTest');\nexpect(isTaken).to.be.false;\n// with Guid provided\nisTaken = await userCtrl.isUserNameTaken(username, userGuid);\nexpect(isTaken).to.be.false;",
                            "err": {},
                            "uuid": "879cbc61-a23e-43bc-9d6e-cf3a36301107",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Controller Tests should update user",
                            "timedOut": false,
                            "duration": 129,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[3].contactGuid;\nconst data = {\n  firstName: 'test first updated',\n  middleName: 'up mid name',\n  lastName: 'up last name',\n  email: 'updated@email.com',\n  title: 'updatedTitle',\n  division: 'up division',\n  department: 'upd department',\n  costCenter: 'upd cost center',\n  location: 'upd loc',\n  phone: '094-242-5654 ext 4',\n  managerGuid: testUsers[0].contactGuid,\n  address1: '654 Some ave',\n  address2: 'apt 589',\n  city: 'New London',\n  state: 'OR',\n  zip: '98353',\n  country: 'USM',\n  languageGuid: testUsers[0].languageGuid,\n  timezone: 'PFT-09',\n  locale: 'en-US',\n  cField1: 'upd cust field 1',\n  cField2: 'upd cust field 2',\n  active: false,\n  userName: 'updatedUserName',\n  password: 'updatedPwd',\n  signatureGuid: '36b65bca-140d-41b9-ac8b-89b50c86e7ba'\n};\n// get current password\nlet user = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst previousPwd = user.password;\n// update\nuser = await userCtrl.updateUser(userGuid, data);\nconst {contactGuid, contactId, createdBy, createdDate, deletedBy, deletedDate, modifiedBy, modifiedDate, ntId, reportsToGuid, lastUpdate, ...updatedUser} = user;\nconst {password, active, ...testData} = data;\nexpect(updatedUser).to.deep.eq(testData);\n// should be inactive/deleted\nexpect(!!deletedBy).to.be.true;\nexpect(!!deletedDate).to.be.true;\n// should change the password\nuser = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst updatedPwd = user.password;\nexpect(previousPwd).to.not.eq(updatedPwd);",
                            "err": {},
                            "uuid": "7eb79824-5b93-42f9-aaec-5c8561f8ede0",
                            "parentUUID": "2ff616ce-6f23-4e80-8278-73ab7c445a23",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f77888a3-efb3-44a8-bf39-be2d69b88edf",
                        "e5d16da0-f3c3-4e4e-876a-4c25c5d08790",
                        "8a0597d2-73fb-455d-bb98-0329ba1e5c14",
                        "f6c64581-6f3d-4432-a57a-4fb50f81bcf5",
                        "f4a9ee1e-895d-4b94-b648-fe0697bf7e35",
                        "99040c0d-fe94-472f-b3e3-9950e6dd32ef",
                        "37583ab7-60f3-457d-9c24-e3f7c0a71bad",
                        "d2cb67d6-ec77-46b2-8c6e-477984f6cb83",
                        "3c600b45-92c2-4f96-834c-8a0fc1f9900d",
                        "e1f65740-7477-4492-85b5-0e433c7b5d3f",
                        "879cbc61-a23e-43bc-9d6e-cf3a36301107",
                        "7eb79824-5b93-42f9-aaec-5c8561f8ede0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 356,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "aebafd8b-0d30-4bce-803a-d17328151495",
                    "title": "api-user Group Handler Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/groupHandler.test.js",
                    "file": "/test/groupHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 121,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nconst userCtl = new UserController({tenantId: tenant})\nrestrictedUser = await userCtl.insertUser({firstName: 'groups test',\n                                           lastName: 'groups test',\n                                           userName: 'restricted user for groups permission test',\n                                           password: 'password'})",
                            "err": {},
                            "uuid": "6e59bf5b-e466-413a-862d-3f99d4d7cf49",
                            "parentUUID": "aebafd8b-0d30-4bce-803a-d17328151495",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenant, 'User');\nawait User.query().hardDelete(restrictedUser)",
                            "err": {},
                            "uuid": "a36faedb-131b-4540-bef8-68f0f27a12f5",
                            "parentUUID": "aebafd8b-0d30-4bce-803a-d17328151495",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2db71d2e-329a-4a90-9487-1fbe23c64fc1",
                            "title": "crud tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a group",
                                    "fullTitle": "api-user Group Handler Tests crud tests should create a group",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nconst group = response.body\nexpect(response.statusCode).to.equal(200)\nexpect(group.groupGuid).to.match(/([-\\w]+)/)\nexpect(group.groupName).to.equal(groupName);\n// cleanup\nreq.body = [group.groupGuid]\nconst foo = await handlers.deleteGroups(req, mockRes)",
                                    "err": {},
                                    "uuid": "106453fd-1b7a-490f-9dea-6bb9ecf87807",
                                    "parentUUID": "2db71d2e-329a-4a90-9487-1fbe23c64fc1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "106453fd-1b7a-490f-9dea-6bb9ecf87807"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "2bab2396-4780-4e33-a385-23fe3a5cd27c",
                            "title": "permission tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "admin should have manage/edit permissions per group",
                                    "fullTitle": "api-user Group Handler Tests permission tests admin should have manage/edit permissions per group",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = testConfig.tenantOne.adminUser.sid;\nconst response = await handlers.getGroups(req,mockRes);\nconst groups = response.body.results;\ngroups.forEach( group => {\n  expect(group.canManage).to.equal(true);\n  expect(group.canEdit).to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "5a0e5942-9e09-45e6-a9b8-8c2dfc299809",
                                    "parentUUID": "2bab2396-4780-4e33-a385-23fe3a5cd27c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to create a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to create a group",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid;\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "cbb2cafb-0ada-4e5c-89ea-8cd825716843",
                                    "parentUUID": "2bab2396-4780-4e33-a385-23fe3a5cd27c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to list groups members",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to list groups members",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.groupGuid = group.groupGuid\nconst response = await handlers.getGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "7312e55f-1a49-411a-be87-2a820ced32de",
                                    "parentUUID": "2bab2396-4780-4e33-a385-23fe3a5cd27c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to delete a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to delete a group",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.body = [ group.groupGuid ]\nconst response = await handlers.deleteGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "356579cb-46f7-4608-9cbd-a264708ee9e9",
                                    "parentUUID": "2bab2396-4780-4e33-a385-23fe3a5cd27c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5a0e5942-9e09-45e6-a9b8-8c2dfc299809",
                                "cbb2cafb-0ada-4e5c-89ea-8cd825716843",
                                "7312e55f-1a49-411a-be87-2a820ced32de",
                                "356579cb-46f7-4608-9cbd-a264708ee9e9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 44,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "865b8033-8ef5-43f9-8462-68457cb290c3",
                    "title": "api-user User Handler Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/userHandler.test.js",
                    "file": "/test/userHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenantId = testConfig.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: testConfig.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nUserAuth = await models.getModel(tenantId, 'UserAuth');",
                            "err": {},
                            "uuid": "ac558e58-728d-4396-8b2f-b0c880ae0ba9",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": true,
                            "skipped": false
                        },
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "api-user User Handler Tests \"before each\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req = await mocks.req();\nmockRes = await mocks.mockResponse();\ntestUser = (await User.query().limit(1))[0];\ntestUser.userName  = (await UserAuth.query().select('userName').where('contactGuid', testUser.contactGuid))[0].userName;",
                            "err": {},
                            "uuid": "818fdfeb-80aa-4c1c-adb6-b53e2bc1da8c",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 20,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await UserAuth.query().delete().where('userName', 'like', 'user_to_delete%');\nawait User.query().delete().where('firstName', 'like', 'user_to_delete%');",
                            "err": {},
                            "uuid": "0b53b702-726f-48eb-acf4-df27631919d4",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should get a list of users",
                            "fullTitle": "api-user User Handler Tests should get a list of users",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getUsers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.results).to.exist;\nexpect(response.body.results.length).to.be.gt(0);\nexpect(response.body.total).to.exist;\nexpect(response.body.total).to.be.gt(0);",
                            "err": {},
                            "uuid": "19139bb5-2d03-4e6e-8b85-cab6eac551e4",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return a list of managers",
                            "fullTitle": "api-user User Handler Tests should return a list of managers",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getManagers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.length).to.be.gt(0);",
                            "err": {},
                            "uuid": "9d9a4915-880b-4f5e-9e0e-1198afe1e52b",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get single user",
                            "fullTitle": "api-user User Handler Tests should get single user",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.params.userGuid = testUser.contactGuid;\nconst response = await handlers.getUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.delegate).to.exist;",
                            "err": {},
                            "uuid": "41c677e1-f4d4-4705-b394-01400446d001",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if userName is taken",
                            "fullTitle": "api-user User Handler Tests should check if userName is taken",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.query.userName = testUser.userName;\nreq.query.userGuid = testUser.contactGuid;\nconst response = await handlers.checkIfUserNameIsTaken(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.isTaken).to.exist;\nexpect(response.body.isTaken).to.be.false;",
                            "err": {},
                            "uuid": "b817fa45-6039-4453-81e0-901f8d63b9df",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not insert user without data",
                            "fullTitle": "api-user User Handler Tests should not insert user without data",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;\nexpect(response.body.password).to.exist;",
                            "err": {},
                            "uuid": "081de206-28de-4be1-bec9-412450fe6e17",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert user",
                            "fullTitle": "api-user User Handler Tests should insert user",
                            "timedOut": false,
                            "duration": 112,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = {\n  firstName: 'user_to_delete',\n  lastName: 'lastName',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n  email: 'random@test.com',\n  locale: 'en-US',\n  timezone: 'Pacific',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n}\nconst response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;",
                            "err": {},
                            "uuid": "9faf74dc-6937-492b-ae47-c54694fa7052",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should register a user",
                            "fullTitle": "api-user User Handler Tests should register a user",
                            "timedOut": false,
                            "duration": 2790,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userName = 'register_user' + Math.random().toString(36).substring(7) // random string\nreq.body = {\n  firstName: 'register_user',\n  lastName: 'lastName',\n  userName,\n  email: 'random@test.com',\n  // locale: 'en-US',\n  timezone: 'US/Central',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n  tenant: tenantId\n}\nreq.bypassRecaptcha = true\nconst response = await handlers.registerUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\n// search by username to verify user record was created\nconst userCtrl = new UserController(session);\nconst result = await userCtrl.getUsers({search: userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = userName);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "d6f4693e-858e-40d0-ba32-3761887c7c30",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not update user with empty data",
                            "fullTitle": "api-user User Handler Tests should not update user with empty data",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = '{}';\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;",
                            "err": {},
                            "uuid": "cfaa60de-c13f-49b3-b279-bad249a2fd12",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Handler Tests should update user",
                            "timedOut": false,
                            "duration": 30,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let userToDelete = (await UserAuth.query().where('userName', 'like', 'user_to_delete%').limit(1))[0];\nif (!userToDelete) {\n  req.body = {\n    firstName: 'user_to_delete',\n    lastName: 'lastName',\n    userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n    email: 'random@test.com',\n    locale: 'en-US',\n    timezone: 'Pacific',\n    languageGuid: testUser.languageGuid,\n    password: 'randomPwd',\n  }\n  userToDelete  = (await handlers.insertUser(req, mockRes)).body;\n}\nconst data = {\n  firstName: 'user_to_delete',\n  lastName: 'updated last',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7),\n  email: 'random@test.updated',\n  locale: 'en-US',\n  timezone: 'Atlantic/New York',\n  languageGuid: testUser.languageGuid,\n};\nreq.params.userGuid = userToDelete.contactGuid;\nreq.body = JSON.stringify(data);\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.eq(data.firstName);\nexpect(response.body.timezone).to.exist;\nexpect(response.body.timezone).to.eq(data.timezone);",
                            "err": {},
                            "uuid": "3a317da3-a8ce-43bb-b91e-f6ef9f771869",
                            "parentUUID": "865b8033-8ef5-43f9-8462-68457cb290c3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "19139bb5-2d03-4e6e-8b85-cab6eac551e4",
                        "9d9a4915-880b-4f5e-9e0e-1198afe1e52b",
                        "41c677e1-f4d4-4705-b394-01400446d001",
                        "b817fa45-6039-4453-81e0-901f8d63b9df",
                        "081de206-28de-4be1-bec9-412450fe6e17",
                        "9faf74dc-6937-492b-ae47-c54694fa7052",
                        "d6f4693e-858e-40d0-ba32-3761887c7c30",
                        "cfaa60de-c13f-49b3-b279-bad249a2fd12",
                        "3a317da3-a8ce-43bb-b91e-f6ef9f771869"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2959,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "f253dcdf-e590-4a5f-b8ba-66fbfcb3efce",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "203a2682-df72-4752-95d9-61edc39b4bb5",
                    "title": "Config Processor ENV.CONFIG tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/config.test.js",
                    "file": "/test/integration/config.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor ENV.CONFIG tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 23,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nprocess.env.TESTING = true;\n\nconfigHelper = require(\"../../src/helpers/config\")\nredis = require(\"integrify-libs\").redisClient\npubSubClient = redis.makeCopy();\npubSubClient.subscribe('updateEnvConfig')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n//let deletes = await redis.delAsync(['ENV.CONFIG']);\n//console.log(deletes)",
                            "err": {},
                            "uuid": "121fd9c2-172d-4aea-ba1d-c22755d1991c",
                            "parentUUID": "203a2682-df72-4752-95d9-61edc39b4bb5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "05f76b6b-7b62-4eaf-9f73-4d12673b8f39",
                            "title": "config helper",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/config.test.js",
                            "file": "/test/integration/config.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "14ed6a6e-ce2a-475c-b9d9-6171026bdddd",
                                    "title": "setConfig",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/config.test.js",
                                    "file": "/test/integration/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a local config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a local config file",
                                            "timedOut": false,
                                            "duration": 331,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\n//console.log(\"wow\",storedConfig)\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\n//expect(storedConfig.cacheTime).to.exist;\nawait delay(300)",
                                            "err": {},
                                            "uuid": "142ca485-413c-4a58-9694-975c5914ceae",
                                            "parentUUID": "14ed6a6e-ce2a-475c-b9d9-6171026bdddd",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateEnvConfig pub/sub channel",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should get a message on the updateEnvConfig pub/sub channel",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(pubSubMessage.channel).to.equal('updateEnvConfig');",
                                            "err": {},
                                            "uuid": "ef137733-2252-4c03-a27d-eb5ec99f8ef5",
                                            "parentUUID": "14ed6a6e-ce2a-475c-b9d9-6171026bdddd",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a S3 config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a S3 config file",
                                            "timedOut": false,
                                            "duration": 15,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.USE_S3_FILES=\"true\"\nawait configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\nexpect(storedConfig.cacheTime).to.exist;",
                                            "err": {},
                                            "uuid": "584bc85b-c04f-4bb7-8696-c8143b9f8d51",
                                            "parentUUID": "14ed6a6e-ce2a-475c-b9d9-6171026bdddd",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "142ca485-413c-4a58-9694-975c5914ceae",
                                        "ef137733-2252-4c03-a27d-eb5ec99f8ef5",
                                        "584bc85b-c04f-4bb7-8696-c8143b9f8d51"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 346,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9be4c16c-a105-43aa-8596-032bc5208f0c",
                    "title": "Config Processor Event Handler Tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/configEventHandler.test.js",
                    "file": "/test/integration/configEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10035,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName]);\n\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"updateEnvConfig\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateDataInstances\", {\n  update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n  update: new Date().toISOString(),\n  tenantId: 'integrifydev'\n      });\n\n\nforkedProcessor = await configStreamConsumer.monitorStream(tenant);\nawait delay(10000);",
                            "err": {},
                            "uuid": "ef43e25b-7b7c-4ea6-878a-30b8eda61b12",
                            "parentUUID": "9be4c16c-a105-43aa-8596-032bc5208f0c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "ab64ed1f-e485-49f2-a13d-7057042b2b4b",
                            "parentUUID": "9be4c16c-a105-43aa-8596-032bc5208f0c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "84bc251a-a894-48c5-b18e-e94fb31042ec",
                            "title": "config stream processor",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/configEventHandler.test.js",
                            "file": "/test/integration/configEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "10cf594b-0ac8-48c9-8633-340c344814ad",
                                    "title": "reads from config stream",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/configEventHandler.test.js",
                                    "file": "/test/integration/configEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Config Processor Event Handler Tests config stream processor reads from config stream should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "cc4275f1-7589-48f6-a526-8d2a0c6e5682",
                                            "parentUUID": "10cf594b-0ac8-48c9-8633-340c344814ad",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "cc4275f1-7589-48f6-a526-8d2a0c6e5682"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "54a5619d-7c8f-4563-9c9e-760d3b0b101c",
                    "title": "Config data instance tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/dataInstance.test.js",
                    "file": "/test/integration/dataInstance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config data instance tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateDataInstances')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n  \nlet deletes = await redis.delAsync(['data_instances']);",
                            "err": {},
                            "uuid": "8c9f0f02-e4c3-4c27-9665-aa10442c1836",
                            "parentUUID": "54a5619d-7c8f-4563-9c9e-760d3b0b101c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f0c2e798-4611-47d2-bb75-4c3f843bae9e",
                            "title": "dataInstasnce helper",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/dataInstance.test.js",
                            "file": "/test/integration/dataInstance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "01af873f-a063-4f92-8d8a-0e47dd113b71",
                                    "title": "updateDataInstances",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/dataInstance.test.js",
                                    "file": "/test/integration/dataInstance.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set data_instances in redis",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should set data_instances in redis",
                                            "timedOut": false,
                                            "duration": 952,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await dataInstanceHelper.updateDataInstances();\nlet storedDataInstances = await redis.getAsync('data_instances')\nexpect(storedDataInstances).to.exist;\nstoredDataInstances = JSON.parse(storedDataInstances);\nexpect(Object.keys(storedDataInstances).length).to.be.gt(0);",
                                            "err": {},
                                            "uuid": "37ba8b15-9348-4d73-86b9-b1f5ee00b00f",
                                            "parentUUID": "01af873f-a063-4f92-8d8a-0e47dd113b71",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateDataInstances pub/sub channel",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should get a message on the updateDataInstances pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateDataInstances');",
                                            "err": {},
                                            "uuid": "84992267-0882-406b-bec0-62a72aa64445",
                                            "parentUUID": "01af873f-a063-4f92-8d8a-0e47dd113b71",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "37ba8b15-9348-4d73-86b9-b1f5ee00b00f",
                                        "84992267-0882-406b-bec0-62a72aa64445"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1253,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6af54957-8d89-467b-bffb-68d0f38d6fe1",
                    "title": "Config license tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/license.test.js",
                    "file": "/test/integration/license.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config license tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateLicenses')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});",
                            "err": {},
                            "uuid": "6f5205dd-b40d-4e5c-9a01-a7d5d4323fda",
                            "parentUUID": "6af54957-8d89-467b-bffb-68d0f38d6fe1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "09c4ff09-ff32-48d9-ae87-1a8bd8be8a91",
                            "title": "license helper",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/license.test.js",
                            "file": "/test/integration/license.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "4de31788-a464-4d90-ac1a-4aa8ef028283",
                                    "title": "updateLicenses",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/license.test.js",
                                    "file": "/test/integration/license.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set licenses and x.license in redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set licenses and x.license in redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 455,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses()\nlet storedLicences = await redis.hgetallAsync('licenses')\nlicenseId = Object.keys(storedLicences)[0]\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "1b0bb411-4b53-4083-a987-8aa6f93812f1",
                                            "parentUUID": "4de31788-a464-4d90-ac1a-4aa8ef028283",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateLicenses pub/sub channel",
                                            "fullTitle": "Config license tests license helper updateLicenses should get a message on the updateLicenses pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateLicenses');",
                                            "err": {},
                                            "uuid": "a4508473-7ded-4e71-9a40-d54a77817a87",
                                            "parentUUID": "4de31788-a464-4d90-ac1a-4aa8ef028283",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set license redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set license redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 218,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses(licenseId)\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "707fe0cb-dea5-4eeb-acbc-d91e38607fe1",
                                            "parentUUID": "4de31788-a464-4d90-ac1a-4aa8ef028283",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "1b0bb411-4b53-4083-a987-8aa6f93812f1",
                                        "a4508473-7ded-4e71-9a40-d54a77817a87",
                                        "707fe0cb-dea5-4eeb-acbc-d91e38607fe1"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 974,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "bfe908c4-fc67-469b-b9a5-d0a02f5aab22",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "738607ba-3f3a-4133-ad3e-704e563b9f5c",
                    "title": "Core Service biztimes",
                    "fullFile": "/home/tim/src/integrify/core-service/test/biztimes.test.js",
                    "file": "/test/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service biztimes \"before all\" hook",
                            "timedOut": false,
                            "duration": 12,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nbiz = { \"Active\": false, \"EndHour\": 17, \"EndMinute\": 0, \"SID\": test_data.biz_sid, \"StartHour\": 9, \"StartMinute\": 15, \"Weekday\": 0 }",
                            "err": {},
                            "uuid": "5fa7e3a4-ee1b-4894-8a81-78760fc304a9",
                            "parentUUID": "738607ba-3f3a-4133-ad3e-704e563b9f5c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c28b3c5e-827d-4478-a65b-9bb3534a70ea",
                            "title": "GET /biztimes",
                            "fullFile": "/home/tim/src/integrify/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets biztimes",
                                    "fullTitle": "Core Service biztimes GET /biztimes gets biztimes",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/biztimes')\n    .set('Authorization', 'Bearer ' + token)\n// biz = res.body.Items[0];\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "903dfa69-279d-4309-8948-ac82c408a5bd",
                                    "parentUUID": "c28b3c5e-827d-4478-a65b-9bb3534a70ea",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "903dfa69-279d-4309-8948-ac82c408a5bd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a85e3a2e-2f5f-46b3-b8b1-ba9f665e9747",
                            "title": "POST /biztimes/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "if (biz.EndHour < 24)\n    biz.EndHour = biz.EndHour + 1\nelse\n    biz.EndHour = biz.EndHour - 23",
                                    "err": {},
                                    "uuid": "4e004fae-e660-4619-a62e-18ee918076ed",
                                    "parentUUID": "a85e3a2e-2f5f-46b3-b8b1-ba9f665e9747",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves biztimes",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save saves biztimes",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/biztimes/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(biz)\n//console.log(res.body)\nexpect(res.status).to.equal(200);\nexpect(res.body.EndHour).to.exist;",
                                    "err": {},
                                    "uuid": "868277a0-5c5e-4979-80ec-15568d007d5c",
                                    "parentUUID": "a85e3a2e-2f5f-46b3-b8b1-ba9f665e9747",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "868277a0-5c5e-4979-80ec-15568d007d5c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "a67ff7a0-6333-40bb-aef3-b71567df4f00",
                    "title": "Core Service category",
                    "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                    "file": "/test/category.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service category \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "13da54ff-59e4-468c-9fb2-0a4f3d5bd49f",
                            "parentUUID": "a67ff7a0-6333-40bb-aef3-b71567df4f00",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "06b4e058-44c1-4039-a328-8d943dc7a7f3",
                            "title": "GET tree/{object_type}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET tree/{object_type} core-service",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = res.body[0]\n            coreResult = res.body;\n            //console.log(res.body)\n            expect(res.status).to.equal(200);\n            // expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "22c3f667-38b7-4b5e-bf38-b587017448b6",
                                    "parentUUID": "06b4e058-44c1-4039-a328-8d943dc7a7f3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "22c3f667-38b7-4b5e-bf38-b587017448b6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b48390f1-9ce4-4cdb-9c1d-a3a8e0e62e64",
                            "title": "GET {sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/category/' + category.id)\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "02cb2cbd-264d-4919-a964-f1c331971218",
                                    "parentUUID": "b48390f1-9ce4-4cdb-9c1d-a3a8e0e62e64",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "02cb2cbd-264d-4919-a964-f1c331971218"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "40809a3a-cbbc-4687-8569-a1863a7df2ba",
                            "title": "POST save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category POST save core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/category/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(category_save)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.CreatedDate).to.exist;\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "68399b2e-5f36-4c79-838a-1eb78391a072",
                                    "parentUUID": "40809a3a-cbbc-4687-8569-a1863a7df2ba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "68399b2e-5f36-4c79-838a-1eb78391a072"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4fcdee96-30fe-4f34-90cd-f2636a8f6916",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service category GET {sid}/delete \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//Fetch category sid to delete\n            let resp = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = resp.body;\n            category.forEach(element => {\n                //console.log(element.Name);\n                if (element.Name == 'Qa Auto')\n                    cate_delete = element;\n            });",
                                    "err": {},
                                    "uuid": "9a02f279-0f42-4e21-819b-9debd052cef7",
                                    "parentUUID": "4fcdee96-30fe-4f34-90cd-f2636a8f6916",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid}/delete core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/category/' + cate_delete.id + '/delete')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(0);\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "6b72b7a0-8a68-48b6-83d0-9a544746afbd",
                                    "parentUUID": "4fcdee96-30fe-4f34-90cd-f2636a8f6916",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6b72b7a0-8a68-48b6-83d0-9a544746afbd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "67525c4b-54a2-467e-abea-5821c9ca44cf",
                    "title": "Core Service contacts",
                    "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                    "file": "/test/contact.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service contacts \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "3ee0c38e-534f-4b0d-8f02-0052a7a59101",
                            "parentUUID": "67525c4b-54a2-467e-abea-5821c9ca44cf",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a5e9789b-65f5-4467-967d-c5794e6821f0",
                            "title": "GET /contacts/current",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/current core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/current/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;\n                  currentUser_sid = res.body.SID",
                                    "err": {},
                                    "uuid": "f36fe70d-cef3-4185-adac-7020a839ce38",
                                    "parentUUID": "a5e9789b-65f5-4467-967d-c5794e6821f0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f36fe70d-cef3-4185-adac-7020a839ce38"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fd94b2e1-9f8b-4f6f-bfe0-835380a2e7e9",
                            "title": "GET detail/{contact_sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET detail/{contact_sid} core-service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/detail/' + currentUser_sid)\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;",
                                    "err": {},
                                    "uuid": "a0e17c32-ff4f-44bd-9529-619f21952d2c",
                                    "parentUUID": "fd94b2e1-9f8b-4f6f-bfe0-835380a2e7e9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a0e17c32-ff4f-44bd-9529-619f21952d2c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "29b7ec55-aa06-477d-9e57-4a3411325283",
                            "title": "GET {contact_sid}/attributes",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/attributes core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/attributes')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \nexpect(res.body[0]).to.exist;\nexpect(res.body[1]).to.exist;\nexpect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "1cecad72-5e24-41bb-8ddc-4a6f3206438e",
                                    "parentUUID": "29b7ec55-aa06-477d-9e57-4a3411325283",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1cecad72-5e24-41bb-8ddc-4a6f3206438e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d7efbf2a-db9d-492d-9422-860a22c16471",
                            "title": "GET {contact_sid}/delegations",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/delegations core-service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/delegations')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\n// //console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "3b8e7ebf-edaa-4758-ba7d-0ed4aa00ac62",
                                    "parentUUID": "d7efbf2a-db9d-492d-9422-860a22c16471",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3b8e7ebf-edaa-4758-ba7d-0ed4aa00ac62"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d37e020d-72e4-4ecc-b071-f13e73d9eaf0",
                            "title": "GET byuserid/{user_id}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET byuserid/{user_id} core-service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/byuserid/iApprove')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\n//console.log(res.body)\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \n// expect(res.body[0]).to.exist;\n// expect(res.body[1]).to.exist;\n// expect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "9e04918e-0a03-4bc2-aa9d-8c44041bd913",
                                    "parentUUID": "d37e020d-72e4-4ecc-b071-f13e73d9eaf0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9e04918e-0a03-4bc2-aa9d-8c44041bd913"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "84d9e4e8-d5a3-46ef-92b0-72fdb8553973",
                            "title": "GET /contacts/search",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET /contacts/search core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search?search=System')\n      .set('Authorization', 'Bearer ' + token);\n// //console.log(res.body)\ncoreResult = res.body;\n//console.log(res.body);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "66ba8bd0-9e74-4074-a889-284b5b1379d6",
                                    "parentUUID": "84d9e4e8-d5a3-46ef-92b0-72fdb8553973",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "66ba8bd0-9e74-4074-a889-284b5b1379d6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "205d7694-d1bc-402d-aeca-f38eadb26f9f",
                            "title": "GET /contact/search/quick/name",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contact/search/quick/name core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search/quick/name/script/?start=0&count=20&sort=Name&dir=ASC&filter=System')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "67f3bcde-8e7a-4ee2-be23-0ea65baac4f1",
                                    "parentUUID": "205d7694-d1bc-402d-aeca-f38eadb26f9f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "67f3bcde-8e7a-4ee2-be23-0ea65baac4f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3eecadee-c97d-4894-a239-508bc4586d0e",
                            "title": "GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/contactdetailsearch/0/10/LAST_NAME/ASC/script/')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\nexpect(res.status).to.equal(200);\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "c5f68b37-4337-4feb-8e41-0f416de7495f",
                                    "parentUUID": "3eecadee-c97d-4894-a239-508bc4586d0e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c5f68b37-4337-4feb-8e41-0f416de7495f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4279a0a0-2789-4e8a-a58a-abc1269495e5",
                            "title": "POST /contacts/save | update",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service",
                                    "timedOut": false,
                                    "duration": 333,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/contacts/save')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\ninsertedSid = res.text\n//console.log(res.text)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "c3fdb5cf-d06a-4d2e-9d0d-e2c64cf572a5",
                                    "parentUUID": "4279a0a0-2789-4e8a-a58a-abc1269495e5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service update",
                                    "timedOut": false,
                                    "duration": 321,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/update')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5a27de30-4fcc-49fe-83b9-a7e03866f0cf",
                                    "parentUUID": "4279a0a0-2789-4e8a-a58a-abc1269495e5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c3fdb5cf-d06a-4d2e-9d0d-e2c64cf572a5",
                                "5a27de30-4fcc-49fe-83b9-a7e03866f0cf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 654,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7cbba9e0-4ea1-42b6-8b21-ce23734665f2",
                            "title": "POST /contacts/replace POST",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "replace_user = [[\"OldContactSid\", insertedSid], [\"ReplacementContactSid\", insertedSid2], [\"RecipientReplace\", \"No\"], [\"OpenTaskReplace\", \"No\"], [\"GroupReplace\", \"No\"], [\"RoleReplace\", \"No\"], [\"DelegationReplace\", \"No\"]]",
                                    "err": {},
                                    "uuid": "0d1dee01-a336-4ce9-af95-ebd98f6133ee",
                                    "parentUUID": "7cbba9e0-4ea1-42b6-8b21-ce23734665f2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST core service update",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/replace ')\n      .set('Authorization', 'Bearer ' + token)\n      .send(replace_user);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "427f7a52-7329-475e-a3bb-5d6b7441b322",
                                    "parentUUID": "7cbba9e0-4ea1-42b6-8b21-ce23734665f2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "427f7a52-7329-475e-a3bb-5d6b7441b322"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "77a90f4f-7b07-472e-ae05-ed603494f39a",
                    "title": "Core service dbconns",
                    "fullFile": "/home/tim/src/integrify/core-service/test/dbconn.test.js",
                    "file": "/test/dbconn.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core service dbconns \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "e1caf412-dfff-46f4-aad0-2d1c0d596249",
                            "parentUUID": "77a90f4f-7b07-472e-ae05-ed603494f39a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "it should GET all dbconns",
                            "fullTitle": "Core service dbconns it should GET all dbconns",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                            "err": {},
                            "uuid": "8cea925a-f905-49db-a092-af6f0ac9caa9",
                            "parentUUID": "77a90f4f-7b07-472e-ae05-ed603494f39a",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should add a test dbconn",
                            "fullTitle": "Core service dbconns it should add a test dbconn",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/save/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\n  .send(testDbConn)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.be.a.guid()\ntestDbConnSid = res.text\n// verify testDbConn comes back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.be.greaterThan(-1);",
                            "err": {},
                            "uuid": "3f888681-e89c-4ceb-b1a4-fce7720c3719",
                            "parentUUID": "77a90f4f-7b07-472e-ae05-ed603494f39a",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should delete the test dbconn",
                            "fullTitle": "Core service dbconns it should delete the test dbconn",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/delete/script/')\n  .set('Authorization', 'Bearer ' + token)\n  .send([testDbConnSid])\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n// verify testDbConn does not come back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.equal(-1);",
                            "err": {},
                            "uuid": "c6cecdaa-0ae8-43ff-95be-923edb86422f",
                            "parentUUID": "77a90f4f-7b07-472e-ae05-ed603494f39a",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "8cea925a-f905-49db-a092-af6f0ac9caa9",
                        "3f888681-e89c-4ceb-b1a4-fce7720c3719",
                        "c6cecdaa-0ae8-43ff-95be-923edb86422f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 36,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "3346688a-35ce-478e-b07a-84741c1be439",
                    "title": "Core Service groups",
                    "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                    "file": "/test/group.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service groups \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "6baaa072-fd8b-4a19-9cdf-545c0ad4bb9e",
                            "parentUUID": "3346688a-35ce-478e-b07a-84741c1be439",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6e7b0d2c-955c-4e69-b37c-3f62fe15a459",
                            "title": "POST /group/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /group/save core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .post('/groups/save/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                        .send({ \"Name\": \"Qa Auto\", \"Description\": \"This is an automation\", \"Dynamic\": 0 })\n                  new_groupSid = res.text;\n                  expect(res.status).to.equal(200);\n                  expect(res.text).to.exist;\n                  expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "3cb6b378-d175-4f9e-9617-bb6fedb7a1a7",
                                    "parentUUID": "6e7b0d2c-955c-4e69-b37c-3f62fe15a459",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3cb6b378-d175-4f9e-9617-bb6fedb7a1a7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "40eeb86b-071a-4b6b-b46a-95a60647d852",
                            "title": "POST /groups/members/{groupSid}/add",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/add core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/add') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "016bb2dc-bd21-4588-9770-c90c19385bcf",
                                    "parentUUID": "40eeb86b-071a-4b6b-b46a-95a60647d852",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "016bb2dc-bd21-4588-9770-c90c19385bcf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1b23844e-1475-4cb2-94b0-5dff325d4cfc",
                            "title": "POST /groups/members/{groupSid}/remove",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/remove core service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/remove') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a78d6790-6b4b-4986-a954-21e367ab11da",
                                    "parentUUID": "1b23844e-1475-4cb2-94b0-5dff325d4cfc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a78d6790-6b4b-4986-a954-21e367ab11da"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5402fc42-22f8-45fb-b499-3d4514d0d9de",
                            "title": "GET /groups​/{sid}​/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service groups GET /groups​/{sid}​/delete core-service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + new_groupSid + '/delete')\n      .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('true')",
                                    "err": {},
                                    "uuid": "1c367cfb-add9-43d5-b15d-420f31268cb2",
                                    "parentUUID": "5402fc42-22f8-45fb-b499-3d4514d0d9de",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1c367cfb-add9-43d5-b15d-420f31268cb2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1e6d1ebb-7a50-4b95-9bb5-fa47991c76ae",
                            "title": "GET /groups/list/simple",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/list/simple core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/simple')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Administrators');",
                                    "err": {},
                                    "uuid": "5178b463-1c8f-4ac0-91c3-66e4fbd311a1",
                                    "parentUUID": "1e6d1ebb-7a50-4b95-9bb5-fa47991c76ae",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5178b463-1c8f-4ac0-91c3-66e4fbd311a1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "67c4f0ab-f248-4c32-a4d5-44dfb9b8e569",
                            "title": "GET /groups/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/{sid} core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.SID).to.exist\nexpect(res.body.SID).to.be.guid\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "3bda6284-3814-4a47-be20-bf7df638644c",
                                    "parentUUID": "67c4f0ab-f248-4c32-a4d5-44dfb9b8e569",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3bda6284-3814-4a47-be20-bf7df638644c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0db0ae8b-6958-40bb-948f-e22fd121c5d8",
                            "title": "GET /groups/listroleassociation/{groupSid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listroleassociation/{groupSid} core service",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listroleassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('System Administrators');\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "dae076b1-6a47-465b-8e6f-1c01c26276f9",
                                    "parentUUID": "0db0ae8b-6958-40bb-948f-e22fd121c5d8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dae076b1-6a47-465b-8e6f-1c01c26276f9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8244f03e-38b7-45a0-8c9f-eade392d42ba",
                            "title": "GET /groups/select/{contact_sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/select/{contact_sid} core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/select/' + system_user)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "08ae1964-6cfa-4805-8a0c-e383778164a5",
                                    "parentUUID": "8244f03e-38b7-45a0-8c9f-eade392d42ba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "08ae1964-6cfa-4805-8a0c-e383778164a5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "389b0332-b34c-48ed-a9f3-1cf26b04292a",
                            "title": "GET /groups​/nondynamic​/list​/simple",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups​/nondynamic​/list​/simple core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/nondynamic/list/simple')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2d145c8f-a2c1-4426-bc29-c864162f0967",
                                    "parentUUID": "389b0332-b34c-48ed-a9f3-1cf26b04292a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2d145c8f-a2c1-4426-bc29-c864162f0967"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "27ca1ab6-a6a7-4207-bfa0-54b548ad63d5",
                            "title": "​GET /groups​/listmembers​/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/listmembers​/{sid} core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listmembers/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "acc6a624-f02b-43ab-83cc-3df5ac31f245",
                                    "parentUUID": "27ca1ab6-a6a7-4207-bfa0-54b548ad63d5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "acc6a624-f02b-43ab-83cc-3df5ac31f245"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2633214c-5d2e-4daf-81b9-0d2be9f68e93",
                            "title": "​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir} core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "2e722dda-5260-4191-b2ad-44244064ac7b",
                                    "parentUUID": "2633214c-5d2e-4daf-81b9-0d2be9f68e93",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2e722dda-5260-4191-b2ad-44244064ac7b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f160600f-44bd-41dc-8e7b-4b9d9d7a0cbf",
                            "title": "GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listbypage/' + groupSid + '/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "33156318-dda1-46d4-bd70-af583a5fce26",
                                    "parentUUID": "f160600f-44bd-41dc-8e7b-4b9d9d7a0cbf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "33156318-dda1-46d4-bd70-af583a5fce26"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c9bdbf18-2324-4069-a543-44d21861abc7",
                            "title": "GET /groups/listprocessassociation/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listprocessassociation/{sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listprocessassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "aed08568-edea-4761-ab97-6a1fbd4b76bc",
                                    "parentUUID": "c9bdbf18-2324-4069-a543-44d21861abc7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "aed08568-edea-4761-ab97-6a1fbd4b76bc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "ea468642-6379-47aa-9b15-bf5764072c59",
                    "title": "Core Service Members",
                    "fullFile": "/home/tim/src/integrify/core-service/test/member.test.js",
                    "file": "/test/member.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Members \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "11fd5a8a-2bd9-4e57-bc19-2fd2c5be56e1",
                            "parentUUID": "ea468642-6379-47aa-9b15-bf5764072c59",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e4267168-23da-4953-8739-79e006b817b3",
                            "title": "{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/member.test.js",
                            "file": "/test/member.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Members {page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/member/0/10/Name/Asc/script/?filter=&include=3')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "4432c3e2-fae7-4e3c-a854-8a886d44961f",
                                    "parentUUID": "e4267168-23da-4953-8739-79e006b817b3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4432c3e2-fae7-4e3c-a854-8a886d44961f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "719c8f15-9ffc-456b-8d53-52e97d34dc61",
                    "title": "Core Service myTasks",
                    "fullFile": "/home/tim/src/integrify/core-service/test/myTasks.test.js",
                    "file": "/test/myTasks.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service myTasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "ef130ade-50ac-4909-a1c1-a4a2297f540f",
                            "parentUUID": "719c8f15-9ffc-456b-8d53-52e97d34dc61",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3a0aaf4a-95d0-4360-b847-594fbd2680c5",
                            "title": "GEt {status}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/myTasks.test.js",
                            "file": "/test/myTasks.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service myTasks GEt {status}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 93,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/myTasks/status/0/10/Name/Asc')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;",
                                    "err": {},
                                    "uuid": "4b017e94-71e7-4397-bb97-b787c531109a",
                                    "parentUUID": "3a0aaf4a-95d0-4360-b847-594fbd2680c5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b017e94-71e7-4397-bb97-b787c531109a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 93,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "604f4b64-1757-49c8-9528-dcf9b5442bb9",
                    "title": "Core Service powerForm",
                    "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                    "file": "/test/powerform.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service powerForm \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\n// //console.log(test_data);\nnew_role = '{ \"Name\": \"Qatest\", \"ExtendedDescription\": \"qa automated\", \"OwnerSID\":' + test_data.object_sid + ', \"OwnerType\": 2 }'\npowerform = {\n    CategorySID: test_data.category_sid,\n    Name: \"test\",\n    PowerFormType: \"0\",\n    Version: 1\n}\n// { \"ID\": 9999, \"Mode\": 2, \"ObjectType\": 1, \"RoleSID\": test_data.role_sid, \"SID\": \"90645d40-9de6-48b1-b689-0a610ef1d716\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 3, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"4711a8f4-68be-4772-b389-0a610ef1d7fe\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 4, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"b1e03457-e202-4a99-a389-0a610ef1d79d\", \"Permissions\": 0 }, { \"ID\": 0, \"Mode\": 5, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"f221751c-ba9f-4b19-9708-1f22372dffde\", \"Permissions\": 1023 }",
                            "err": {},
                            "uuid": "e9e2e729-3653-40de-a403-4bb75777acb0",
                            "parentUUID": "604f4b64-1757-49c8-9528-dcf9b5442bb9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b9c1c385-9ffc-43f4-966c-4bbbca4119f7",
                            "title": "POST /Powerform/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm POST /Powerform/save core service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/powerform/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(powerform)\nexpect(res.status).to.equal(200);\nsid = res.body.SID\n//console.log(sid)",
                                    "err": {},
                                    "uuid": "23269a18-fadf-4174-b6d1-5ebe6e39baff",
                                    "parentUUID": "b9c1c385-9ffc-43f4-966c-4bbbca4119f7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "23269a18-fadf-4174-b6d1-5ebe6e39baff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "35969e09-46a7-488a-8310-aa28cc636fd8",
                            "title": "GET /Powerform/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid} core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid)\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "610be2cb-20aa-4d00-97de-868b00dd9315",
                                    "parentUUID": "35969e09-46a7-488a-8310-aa28cc636fd8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "610be2cb-20aa-4d00-97de-868b00dd9315"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1bd6a90e-8fea-4d6d-8b93-c48a22ec07aa",
                            "title": "GET /Powerform/{sid}/detail",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2f7c31ee-9b33-4f6f-9151-d3cb00c5bbb1",
                                    "parentUUID": "1bd6a90e-8fea-4d6d-8b93-c48a22ec07aa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2f7c31ee-9b33-4f6f-9151-d3cb00c5bbb1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "9a94b42e-f4f7-4ffb-a877-164f671f6dec",
                            "title": "GET /Powerform/{sid}/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/delete core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "29570605-1ccc-44f5-96c7-d538b7f81edc",
                                    "parentUUID": "9a94b42e-f4f7-4ffb-a877-164f671f6dec",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "29570605-1ccc-44f5-96c7-d538b7f81edc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "633bdc00-b4cf-4d78-b352-2a4e18d77b4f",
                    "title": "Core Service Process",
                    "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                    "file": "/test/process.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken();\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nprc = { Name: new Date().toISOString(), Description: \"Qa Automation\", CategorySID: test_data.category_sid }",
                            "err": {},
                            "uuid": "f7d8b3c2-f331-41f5-add6-3c4a57c587c2",
                            "parentUUID": "633bdc00-b4cf-4d78-b352-2a4e18d77b4f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3657088d-7b97-4e33-95de-d949b3aa6c03",
                            "title": "POST /process​/create|delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service",
                                    "timedOut": false,
                                    "duration": 68,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/process/create')\n    .set('Authorization', 'Bearer ' + token)\n    .send(prc)\np1 = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "92ed994d-c8e6-42ac-88ba-3e95bfe06043",
                                    "parentUUID": "3657088d-7b97-4e33-95de-d949b3aa6c03",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | Delete",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service | Delete",
                                    "timedOut": false,
                                    "duration": 255,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/process/' + p1 + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nconsole.log(res);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "81609e3b-dcc3-41b8-abe8-cdf596c241dc",
                                    "parentUUID": "3657088d-7b97-4e33-95de-d949b3aa6c03",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92ed994d-c8e6-42ac-88ba-3e95bfe06043",
                                "81609e3b-dcc3-41b8-abe8-cdf596c241dc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 323,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f61c30d7-4d63-4e62-9fe4-4f23a70d1db3",
                            "title": "GET /process/{sid}/copy",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /process/{sid}/copy core service",
                                    "timedOut": false,
                                    "duration": 5518,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/' + test_data.process_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            expect(res.status).to.equal(200);\n            //delete copied process\n            let del = await chai.request(newUrlBase)\n                .get('/process/' + res.text + '/delete')\n                .set('Authorization', 'Bearer ' + token)\n            expect(del.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b2ee0380-8e55-4333-8e40-30de911e7673",
                                    "parentUUID": "f61c30d7-4d63-4e62-9fe4-4f23a70d1db3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b2ee0380-8e55-4333-8e40-30de911e7673"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5518,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a10e432b-d687-4867-9f7a-09f80024d4a6",
                            "title": "GET /processes",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes core service",
                                    "timedOut": false,
                                    "duration": 69,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "c4746fb1-3d7c-4989-b5e5-3573f982f8f8",
                                    "parentUUID": "a10e432b-d687-4867-9f7a-09f80024d4a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c4746fb1-3d7c-4989-b5e5-3573f982f8f8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 69,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "91d086dd-7354-4fb5-9edf-3e08b4f22e12",
                            "title": "GET /processes/{SID}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{SID} core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "f497fc64-fc3e-4cf7-a62d-14c1126365ca",
                                    "parentUUID": "91d086dd-7354-4fb5-9edf-3e08b4f22e12",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f497fc64-fc3e-4cf7-a62d-14c1126365ca"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a5a1e670-1582-4627-a342-de27829d32b5",
                            "title": "GET /processes/{sid}/detail",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "73fd1d09-df0d-4a32-bf75-977aa67d2d48",
                                    "parentUUID": "a5a1e670-1582-4627-a342-de27829d32b5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "73fd1d09-df0d-4a32-bf75-977aa67d2d48"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a6a244e5-7f48-43a6-9154-415ad72241b8",
                            "title": "GET /processes/{sid}/name",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/name core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/name')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ef351846-459e-4b5f-922e-ee34c6ce8beb",
                                    "parentUUID": "a6a244e5-7f48-43a6-9154-415ad72241b8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ef351846-459e-4b5f-922e-ee34c6ce8beb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d2ef45a8-4a7a-4869-b2e1-c6a83a04b770",
                            "title": "GET ​/processes​/{sid}​/summary",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET ​/processes​/{sid}​/summary core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/summary')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "06a6bba3-da50-4667-abcd-7ebcadb3dab1",
                                    "parentUUID": "d2ef45a8-4a7a-4869-b2e1-c6a83a04b770",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "06a6bba3-da50-4667-abcd-7ebcadb3dab1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "953937aa-16e6-439f-a037-7fe903f0af4c",
                            "title": "​GET /processes​/{process_sid}​/tasks",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process ​GET /processes​/{process_sid}​/tasks core service",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "e20bd5bd-bf8d-4037-81ad-4e46b378df63",
                                    "parentUUID": "953937aa-16e6-439f-a037-7fe903f0af4c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e20bd5bd-bf8d-4037-81ad-4e46b378df63"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "cfe91a3d-fa02-424c-8a70-33f1c4717e30",
                            "title": "GET /processes/{process_sid}/tasks/{task_sid}/rules",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{process_sid}/tasks/{task_sid}/rules core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b80e0822-6429-407c-ad08-ab4a96c4ad40",
                                    "parentUUID": "cfe91a3d-fa02-424c-8a70-33f1c4717e30",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b80e0822-6429-407c-ad08-ab4a96c4ad40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d1eefbd0-ec40-4799-887e-43599c8a6c99",
                            "title": "POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete ",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/update/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(rule)\nsids.one = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "65a9244a-92cb-4594-adac-45a9bd8677bd",
                                    "parentUUID": "d1eefbd0-ec40-4799-887e-43599c8a6c99",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | reorder",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service | reorder",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let reorder = { \"SID\": sids.two, \"Ordinal\": 2, \"ConditionType\": 1, \"MatchGuid\": \"\", \"RecipientSID\": null, \"DestinationAction\": \"0\" }\nlet res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/reorder/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(reorder)\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "26781808-9019-4b12-afc9-5c07445d5491",
                                    "parentUUID": "d1eefbd0-ec40-4799-887e-43599c8a6c99",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "65a9244a-92cb-4594-adac-45a9bd8677bd",
                                "26781808-9019-4b12-afc9-5c07445d5491"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "f3db6b5a-2851-4104-8d66-5bca93956462",
                    "title": "Core Service processes/tasks",
                    "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                    "file": "/test/processTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service processes/tasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nrecipient = [{ \"BaseObjectSID\": \"\", \"ContactType\": 2, \"ReferenceObjectSID\": \"\", \"SID\": test_data.contact_sid }]",
                            "err": {},
                            "uuid": "70c8a35b-3a4b-48db-b1c6-acdedc4734ab",
                            "parentUUID": "f3db6b5a-2851-4104-8d66-5bca93956462",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0fe94045-e4f0-4f68-a4ff-0f7e88b52dce",
                            "title": "GET {sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.task_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "23dc2bb0-3868-4fc9-934e-b6f74a951278",
                                    "parentUUID": "0fe94045-e4f0-4f68-a4ff-0f7e88b52dce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "23dc2bb0-3868-4fc9-934e-b6f74a951278"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "99604ab8-c9e4-44e7-912f-2639c446e3e6",
                            "title": "GET {task_sid}/copy",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/copy core-service",
                                    "timedOut": false,
                                    "duration": 67,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/tasks/' + test_data.task_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            //console.log(res.body);\n            expect(res.status).to.equal(200);\n            expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "cfd93cad-a1c5-45ef-877b-661b190ff8d7",
                                    "parentUUID": "99604ab8-c9e4-44e7-912f-2639c446e3e6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cfd93cad-a1c5-45ef-877b-661b190ff8d7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 67,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c3d62bae-237c-4f47-aaeb-35b38d6cd927",
                            "title": "GET {task_sid}/notification",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification core-service",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "87766375-cfaf-4510-83b0-db9eb97e3300",
                                    "parentUUID": "c3d62bae-237c-4f47-aaeb-35b38d6cd927",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "87766375-cfaf-4510-83b0-db9eb97e3300"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d46a3b5e-d47d-4a29-8b0d-c22f12368fab",
                            "title": "GET {task_sid}/notification/restore",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/restore core-service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/restore')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "27a3bf5d-d5c6-493f-81d4-f5bebe32127b",
                                    "parentUUID": "d46a3b5e-d47d-4a29-8b0d-c22f12368fab",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "27a3bf5d-d5c6-493f-81d4-f5bebe32127b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1f2c8bfa-ebaa-427e-b012-b117adc323de",
                            "title": "GET {task_sid}/notification/{enabledisable}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/{enabledisable} core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/enabled')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "f561ccea-e37b-4fde-abe3-ef70b86d96ec",
                                    "parentUUID": "1f2c8bfa-ebaa-427e-b012-b117adc323de",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f561ccea-e37b-4fde-abe3-ef70b86d96ec"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e3140fea-d8fe-4192-af46-6183482063ee",
                            "title": "POST notification/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST notification/save core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/notification/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(notification)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "413a64d8-f88b-490b-b721-b47ccc1ffffb",
                                    "parentUUID": "e3140fea-d8fe-4192-af46-6183482063ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "413a64d8-f88b-490b-b721-b47ccc1ffffb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "111b0aad-860a-4797-b57d-a7beb9cf3478",
                            "title": "GET {task_sid}/notification/advancedsettings",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/advancedsettings core-service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/advancesettings')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "09068e8f-c9f6-4fe7-9a12-37c96818a2ff",
                                    "parentUUID": "111b0aad-860a-4797-b57d-a7beb9cf3478",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "09068e8f-c9f6-4fe7-9a12-37c96818a2ff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f2fb48ca-8bee-417f-8a0f-19f715d800f1",
                            "title": "GET {task_sid}/recipients",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipients core-service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "38c01b18-8222-4f97-af53-b18efa79c9de",
                                    "parentUUID": "f2fb48ca-8bee-417f-8a0f-19f715d800f1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "38c01b18-8222-4f97-af53-b18efa79c9de"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "cbb5f1ad-be50-4403-9a8a-e0985b765bb6",
                            "title": "POST {task_sid}/recipients/add",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/add core-service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/add')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "1d47f9c8-b3a2-4f19-a57b-9037b3152036",
                                    "parentUUID": "cbb5f1ad-be50-4403-9a8a-e0985b765bb6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1d47f9c8-b3a2-4f19-a57b-9037b3152036"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0ab66ec6-c16f-4c54-bb6e-30ab94711697",
                            "title": "POST {task_sid}/recipients/remove",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/remove core-service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/remove')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "f0aee21f-eb5b-424a-89e1-378eb0cd0d17",
                                    "parentUUID": "0ab66ec6-c16f-4c54-bb6e-30ab94711697",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f0aee21f-eb5b-424a-89e1-378eb0cd0d17"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fa9176b8-8654-404f-8620-a3e3820bd81c",
                            "title": "GET {task_sid}/recipsettings",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipsettings core-service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipsettings/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n// expect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "98e9f9f3-2ff8-4f02-85e2-a4f875fba6d4",
                                    "parentUUID": "fa9176b8-8654-404f-8620-a3e3820bd81c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "98e9f9f3-2ff8-4f02-85e2-a4f875fba6d4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "24602ad5-b8bf-41c7-bd6c-b2077e6c5ae2",
                            "title": "GET task_sid}/recipients/dynamic",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET task_sid}/recipients/dynamic core-service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/dynamic/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body.TotalItemCnt).to.exist;",
                                    "err": {},
                                    "uuid": "d0c4be9e-381e-4ee0-9d8e-ff128d883f7e",
                                    "parentUUID": "24602ad5-b8bf-41c7-bd6c-b2077e6c5ae2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d0c4be9e-381e-4ee0-9d8e-ff128d883f7e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "b353bb65-0b1e-4a6b-a948-ca37fe968b2c",
                    "title": "Core Service systemmessages",
                    "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                    "file": "/test/systemmessage.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service systemmessages \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "be1f7afa-cd3b-441a-ad3d-09684a22a718",
                            "parentUUID": "b353bb65-0b1e-4a6b-a948-ca37fe968b2c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "176231a9-8e71-4c0a-a71f-57bad2bd44e2",
                            "title": "POST /systemmessages/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service systemmessages POST /systemmessages/save it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/systemmessages/save/script/')\n      .set('Authorization', 'Bearer ' + token)\n      .send(testMsg)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\n\n// verify systemMessage is in the list\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.MessageBody == testMsg.MessageBody);\nexpect(idx).to.be.greaterThan(-1);",
                                    "err": {},
                                    "uuid": "406002c7-2a99-4834-b11d-7c6908bc0bce",
                                    "parentUUID": "176231a9-8e71-4c0a-a71f-57bad2bd44e2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "406002c7-2a99-4834-b11d-7c6908bc0bce"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3f10082c-443b-40bc-bacc-4a9af8a5d4d2",
                            "title": "GET /systemmessages/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET all systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/list it should GET all systemmessages",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "3d128e47-0593-493b-b2a9-9117a75d0104",
                                    "parentUUID": "3f10082c-443b-40bc-bacc-4a9af8a5d4d2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3d128e47-0593-493b-b2a9-9117a75d0104"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5cd5b3d4-4f7f-4a6f-82e3-80effd2bb946",
                            "title": "GET /systemmessages/active/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET active systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/active/list it should GET active systemmessages",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/active/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "f2701123-dc5d-4db5-9aed-ea346751dee5",
                                    "parentUUID": "5cd5b3d4-4f7f-4a6f-82e3-80effd2bb946",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f2701123-dc5d-4db5-9aed-ea346751dee5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e779f647-fe39-4f84-89dd-c38c7157c59d",
                            "title": "/systemmessages/{sid}}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET system message by SID",
                                    "fullTitle": "Core Service systemmessages /systemmessages/{sid}} it should GET system message by SID",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n             .get('/systemmessages/list/script/')\n             .set('Authorization', 'Bearer ' + token);\n       \n             expect(res.status).to.equal(200);\n             expect(res.body.Items).to.exist;\n             const testSystemMsgSID = res.body.Items[0].SID;\n             res = await chai.request(newUrlBase)\n             .get(`/systemmessages/${testSystemMsgSID}/script/`)\n             .set('Authorization', 'Bearer ' + token);\n             expect(res.status).to.equal(200);\n             expect(res.body.SID).to.equal(testSystemMsgSID);",
                                    "err": {},
                                    "uuid": "0da3d4e4-9be3-49d7-bece-a42b10ad051e",
                                    "parentUUID": "e779f647-fe39-4f84-89dd-c38c7157c59d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0da3d4e4-9be3-49d7-bece-a42b10ad051e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e3061fdd-b9a5-4789-bc0e-a7ac3d6663c3",
                            "title": "GET /systemmessages/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should DELETE system message",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/delete it should DELETE system message",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n      \nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst testSystemMsgSID = res.body.Items[0].SID;\nres = await chai.request(newUrlBase)\n  .post('/systemmessages/delete/script/') \n  .set('Authorization', 'Bearer ' + token)\n  .send([testSystemMsgSID])\n        \nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n        \n// verify that system message is not in the list anymore\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testSystemMsgSID);\nexpect(idx).to.equal(-1);",
                                    "err": {},
                                    "uuid": "970fe09d-696b-47e4-bbd5-e95a843ce341",
                                    "parentUUID": "e3061fdd-b9a5-4789-bc0e-a7ac3d6663c3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "970fe09d-696b-47e4-bbd5-e95a843ce341"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "e40fc5b5-5de9-4d12-990a-48d56297f7ac",
                    "title": "Core Service System Process",
                    "fullFile": "/home/tim/src/integrify/core-service/test/systemProcess.test.js",
                    "file": "/test/systemProcess.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service System Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "ac167f6e-6e40-4080-909d-a3c5346b637d",
                            "parentUUID": "e40fc5b5-5de9-4d12-990a-48d56297f7ac",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d904675e-98e5-49b6-974d-548da720db5c",
                            "title": "GET S/SystemProcess/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemProcess.test.js",
                            "file": "/test/systemProcess.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service System Process GET S/SystemProcess/list it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/SystemProcess/list')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "9ade25d6-a3ff-4176-8c84-38bf1e4f1dc5",
                                    "parentUUID": "d904675e-98e5-49b6-974d-548da720db5c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ade25d6-a3ff-4176-8c84-38bf1e4f1dc5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "ae07a6e7-31c8-46c2-a7b7-99a59c8b30b9",
                    "title": "Core Service system Settings",
                    "fullFile": "/home/tim/src/integrify/core-service/test/systemSettings.test.js",
                    "file": "/test/systemSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service system Settings \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "966dc16a-93b7-4dda-85ba-de7f8a026fd2",
                            "parentUUID": "ae07a6e7-31c8-46c2-a7b7-99a59c8b30b9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "26a38ab3-fffc-463b-8362-1ce841ea63db",
                            "title": "GET /systemsettings/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemSettings.test.js",
                            "file": "/test/systemSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service system Settings GET /systemsettings/list core-service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/systemsettings/list/script/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n// expect(res.body.InstanceSID).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "1ddc7425-a72d-4b4b-bdcc-6826a2a97d38",
                                    "parentUUID": "26a38ab3-fffc-463b-8362-1ce841ea63db",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1ddc7425-a72d-4b4b-bdcc-6826a2a97d38"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "0dd40880-e1bb-4fe6-afb0-61fc49172dd6",
                    "title": "Core Service Tabs",
                    "fullFile": "/home/tim/src/integrify/core-service/test/tabs.test.js",
                    "file": "/test/tabs.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Tabs \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "f1fd2fdf-3f98-4936-bceb-af941e1bc9a0",
                            "parentUUID": "0dd40880-e1bb-4fe6-afb0-61fc49172dd6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "90a12849-37d6-44af-9501-dab13c6e8860",
                            "title": "GET {sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service Tabs GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "11371f5b-f2b4-4a4e-be49-750114a921d5",
                                    "parentUUID": "90a12849-37d6-44af-9501-dab13c6e8860",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "11371f5b-f2b4-4a4e-be49-750114a921d5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4b7d112b-811e-4992-9621-f781208faee2",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service ",
                                    "fullTitle": "Core Service Tabs GET {sid}/delete core-service ",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "55ff9411-cd49-4556-af3c-19978abcea33",
                                    "parentUUID": "4b7d112b-811e-4992-9621-f781208faee2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "55ff9411-cd49-4556-af3c-19978abcea33"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "1706a30a-ee22-4bc9-93de-8e1b8933b83c",
                    "title": "Core Service Utilities",
                    "fullFile": "/home/tim/src/integrify/core-service/test/utilities.test.js",
                    "file": "/test/utilities.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Utilities \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "308f6906-6313-48e9-8dac-2c90f93aca04",
                            "parentUUID": "1706a30a-ee22-4bc9-93de-8e1b8933b83c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "49df605f-219c-41f5-b382-3ce6e4f22a55",
                            "title": "locale",
                            "fullFile": "/home/tim/src/integrify/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities locale core service",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/Utilities/locales/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            // expect(res.text).to.exist;\n            // expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "61b18c42-a395-4920-8278-aef7052972c9",
                                    "parentUUID": "49df605f-219c-41f5-b382-3ce6e4f22a55",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "61b18c42-a395-4920-8278-aef7052972c9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3a0bce60-5289-4a86-8a41-b4fb9c54fcae",
                            "title": "GET /Utilities/timezone",
                            "fullFile": "/home/tim/src/integrify/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/timezone core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/timezone')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Etc/GMT+12');",
                                    "err": {},
                                    "uuid": "3d04717c-ecd4-4cc2-bf5c-cf83511487bf",
                                    "parentUUID": "3a0bce60-5289-4a86-8a41-b4fb9c54fcae",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3d04717c-ecd4-4cc2-bf5c-cf83511487bf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 100000
        },
        {
            "uuid": "e213d93d-c7b8-41f1-b4ef-67e291d18ee3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "dd612f8c-c15c-4b4d-aa30-3ddebdfbcf0f",
                    "title": "Integrify Libs JWT Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                    "file": "/test/integration/auth/jwt.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "37fe0c79-484a-4247-a8d4-c96ed4230e46",
                            "parentUUID": "dd612f8c-c15c-4b4d-aa30-3ddebdfbcf0f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e57312fb-f12c-46fe-a0f3-09e229144241",
                            "title": "getSystemToken",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a system token",
                                    "fullTitle": "Integrify Libs JWT Tests getSystemToken should return a system token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet token = await jwt.getSystemToken(process.env.INTEGRIFY_ENV_TOKEN, tenant)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "233ff630-76f4-43ca-95d9-cdc88d86792e",
                                    "parentUUID": "e57312fb-f12c-46fe-a0f3-09e229144241",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "233ff630-76f4-43ca-95d9-cdc88d86792e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "44a9dbc5-18ef-4482-81ef-054c7f32df3a",
                            "title": "createRefreshToken",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests createRefreshToken should return a refresh token",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(refreshToken).to.exist;\nexpect(exists !== null).to.be.true",
                                    "err": {},
                                    "uuid": "168956d2-7f12-4e4d-a690-3701850de21e",
                                    "parentUUID": "44a9dbc5-18ef-4482-81ef-054c7f32df3a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "168956d2-7f12-4e4d-a690-3701850de21e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6390c656-2a8f-4610-9e7b-838aef149ef2",
                            "title": "verifyRefreshToken",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for the non-expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return true for the non-expired token",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.exist",
                                    "err": {},
                                    "uuid": "fe6a2a8f-64d5-4c0a-a835-7498c51e9d66",
                                    "parentUUID": "6390c656-2a8f-4610-9e7b-838aef149ef2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for the expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return false for the expired token",
                                    "timedOut": false,
                                    "duration": 5004,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, options)\nawait delay(5000);\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.be.false\nexists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(exists === null).to.be.true",
                                    "err": {},
                                    "uuid": "039099de-6089-46c3-8f14-89ed9ffbd480",
                                    "parentUUID": "6390c656-2a8f-4610-9e7b-838aef149ef2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fe6a2a8f-64d5-4c0a-a835-7498c51e9d66",
                                "039099de-6089-46c3-8f14-89ed9ffbd480"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5005,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "71338b24-d4f2-4245-afe5-3e81a01975f1",
                            "title": "issueJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests issueJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 15\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\n//let exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\noptions.expiresInAmount = 5\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "41c6d6b7-3f5b-4604-a34d-337d4c62aec7",
                                    "parentUUID": "71338b24-d4f2-4245-afe5-3e81a01975f1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "41c6d6b7-3f5b-4604-a34d-337d4c62aec7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "26972bbf-dc6f-47c7-adc1-707ba9f1fece",
                            "title": "verifyJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nlet verified = jwt.verifyJwt(token, options);\nexpect(verified).to.exist",
                                    "err": {},
                                    "uuid": "d7ca8e12-b1ec-4310-b2f4-49a51b73c12b",
                                    "parentUUID": "26972bbf-dc6f-47c7-adc1-707ba9f1fece",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail for an expired JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should fail for an expired JWT",
                                    "timedOut": false,
                                    "duration": 5007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000);\nlet verified, error;\ntry {\n   verified = await jwt.verifyJwt(token, options)\n} catch(e) {\n    error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\nexpect(verified).to.not.exist",
                                    "err": {},
                                    "uuid": "36a029ca-28e5-465d-a10f-63754341cc6f",
                                    "parentUUID": "26972bbf-dc6f-47c7-adc1-707ba9f1fece",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d7ca8e12-b1ec-4310-b2f4-49a51b73c12b",
                                "36a029ca-28e5-465d-a10f-63754341cc6f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5010,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "7255f5f9-93e7-464e-a379-89c54705b5f8",
                            "title": "renewJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an expired token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should return a new JWT using a valid refresh token and an expired token",
                                    "timedOut": false,
                                    "duration": 3007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(3000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntoken = await jwt.renewJwt(token,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "6edb72ea-768c-4b96-8eda-3f6df11464e3",
                                    "parentUUID": "7255f5f9-93e7-464e-a379-89c54705b5f8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail to return a new JWT using a invalid refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should fail to return a new JWT using a invalid refresh token",
                                    "timedOut": false,
                                    "duration": 5006,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 2;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntry {\n    token = await jwt.renewJwt(token,refreshToken, options)\n} catch(e) {\n    error = e\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")",
                                    "err": {},
                                    "uuid": "2128c1b0-7da4-49de-9610-6f87c7092e42",
                                    "parentUUID": "7255f5f9-93e7-464e-a379-89c54705b5f8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6edb72ea-768c-4b96-8eda-3f6df11464e3",
                                "2128c1b0-7da4-49de-9610-6f87c7092e42"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8013,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "49044b1c-ecd3-4c62-bd96-c48a9cdb1579",
                            "title": "reIssueJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an Contact",
                                    "fullTitle": "Integrify Libs JWT Tests reIssueJwt should return a new JWT using a valid refresh token and an Contact",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\ntoken = await jwt.reIssueJwt(Contact,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "ad227d0d-50f1-44b5-9ad2-1c2b1c11a751",
                                    "parentUUID": "49044b1c-ecd3-4c62-bd96-c48a9cdb1579",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ad227d0d-50f1-44b5-9ad2-1c2b1c11a751"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "46b96f8c-4bda-4d58-ad6b-c470e0981f71",
                    "title": "Integrify Libs Config Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                    "file": "/test/integration/config/config.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ff90d724-a287-4e6b-bab2-a7e98836f035",
                            "title": "Config",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                            "file": "/test/integration/config/config.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Config Tests Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "fe50f369-b33f-408d-beea-2bbfd423da30",
                                    "parentUUID": "ff90d724-a287-4e6b-bab2-a7e98836f035",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "c3a10440-9e5d-4ebb-a203-ff47b6ea3bca",
                                    "title": "get a config from redis",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Config Tests Config get a config from redis should have config.mongo",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(config.mongo).to.exist;\n                //expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "27e23e97-e3ac-483b-925b-da47de813e55",
                                            "parentUUID": "c3a10440-9e5d-4ebb-a203-ff47b6ea3bca",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "27e23e97-e3ac-483b-925b-da47de813e55"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "6e5381e1-b2b4-42f3-b66c-ce972fe03748",
                                    "title": "log the latest git commit",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return the lates git commit",
                                            "fullTitle": "Integrify Libs Config Tests Config log the latest git commit should return the lates git commit",
                                            "timedOut": false,
                                            "duration": 4,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let commit = Config.logRunningGitCommit('integrify-libs', true);\nexpect(commit).to.exist;\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "5a927689-6775-48a9-9eeb-50096ef36c34",
                                            "parentUUID": "6e5381e1-b2b4-42f3-b66c-ce972fe03748",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "5a927689-6775-48a9-9eeb-50096ef36c34"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 4,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "77cf76e3-bb9d-40e7-abfb-cf17ee24b4d4",
                    "title": "Integrify Libs Logger Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/logger/logger.test.js",
                    "file": "/test/integration/logger/logger.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f66b08f1-3367-4d62-9992-b32eed29fe99",
                            "title": "Logger",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/logger/logger.test.js",
                            "file": "/test/integration/logger/logger.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Logger Tests Logger \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "49216792-a8cf-47be-b300-3aac385057f0",
                                    "parentUUID": "f66b08f1-3367-4d62-9992-b32eed29fe99",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "6876b3fd-7995-4c5f-a0d5-266c9361e6c0",
                                    "title": "info",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/logger/logger.test.js",
                                    "file": "/test/integration/logger/logger.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect log a message",
                                            "fullTitle": "Integrify Libs Logger Tests Logger info should connect log a message",
                                            "timedOut": false,
                                            "duration": 6,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "logger.info(config.tenantOne.tenantId);\n  \nexpect(logger).to.exist;\n              \n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "641aba1b-633d-4d6d-878b-ec7fe745f3a9",
                                            "parentUUID": "6876b3fd-7995-4c5f-a0d5-266c9361e6c0",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "641aba1b-633d-4d6d-878b-ec7fe745f3a9"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 6,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d74fbb85-4183-4898-bcc7-9af9f01ae285",
                    "title": "Integrify Libs Parse JWT Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                    "file": "/test/integration/middleware/parseJWT.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Parse JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);        config = await Config.getConfig()\nContact = {\n    contactSid: \"1234\",\n    userName: \"testuser\",\n    tenant: config.test.tenantOne.tenantId,\n    email: \"test@test.com\",\n    name: \"Test User\"\n}\nrefreshTokenPayload = {userName: Contact.userName, contactSid: Contact.contactSid}",
                            "err": {},
                            "uuid": "445d3fdc-5c84-4c26-980c-4e24496b0e4f",
                            "parentUUID": "d74fbb85-4183-4898-bcc7-9af9f01ae285",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a17684f7-30c4-4b0e-bc5a-ccd51183bbd5",
                            "title": "parse token",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": config.test.tenantOne.tenantId});\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "14296a07-23e9-4726-b426-cf989c34f27c",
                                    "parentUUID": "a17684f7-30c4-4b0e-bc5a-ccd51183bbd5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "14296a07-23e9-4726-b426-cf989c34f27c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "55b78729-9cc7-4789-9f6e-63ebd7dbb60a",
                            "title": "auto refresh and parse token",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests auto refresh and parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 20025,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(Contact.tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": Contact.tenant, expiresIn:1});\n           \nawait delay(20000)\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\n          \nlet mockRes = await mocks.mockResponse();\n\nawait parseJWT(req, mockRes, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "4027cf83-769f-4fcc-aea4-45a8836c5de4",
                                    "parentUUID": "55b78729-9cc7-4789-9f6e-63ebd7dbb60a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4027cf83-769f-4fcc-aea4-45a8836c5de4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20025,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "baf30533-8ca4-4bcd-b16e-0adcc36b5058",
                            "title": "use system token",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests use system token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let req = {headers: {\"integrify-system-token\": config.test.tenantOne.tenantId + \" \" +  process.env.INTEGRIFY_ENV_TOKEN}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"d8c469c3-f781-4179-a09c-6d148885fb30\");\nexpect(req.oauth.profile.user_name).to.equal(\"Integrify\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "0cc65043-52a2-4005-95b3-42cab2caa57f",
                                    "parentUUID": "baf30533-8ca4-4bcd-b16e-0adcc36b5058",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0cc65043-52a2-4005-95b3-42cab2caa57f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "2c4a9f1b-b890-4666-a805-84aa2c8c0e13",
                    "title": "Integrify Libs Mongeese Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                    "file": "/test/integration/mongeese/db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0acba192-2ffd-422a-9cf9-48f3e3544c05",
                            "title": "Mongeese",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                            "file": "/test/integration/mongeese/db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Mongeese Tests Mongeese \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconsole.log(config)\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "cec5e552-71bd-4ffd-82c1-628213c0d4ab",
                                    "parentUUID": "0acba192-2ffd-422a-9cf9-48f3e3544c05",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "aa4a2fd6-6ac3-431e-8e5b-dfab35b6de18",
                                    "title": "mongoConn",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                                    "file": "/test/integration/mongeese/db.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect to mongo based on a tenant id",
                                            "fullTitle": "Integrify Libs Mongeese Tests Mongeese mongoConn should connect to mongo based on a tenant id",
                                            "timedOut": false,
                                            "duration": 8,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const tenantId = await config.tenantOne.tenantId;\nvar db = await mongeese.getConn(tenantId);\n    \nexpect(db).to.exist;\nexpect(db.name).to.equal(tenantId);\nexpect(db.readyState).to.equal(2);\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "a42eb1f7-9109-451f-874b-9b4d1a20fc01",
                                            "parentUUID": "aa4a2fd6-6ac3-431e-8e5b-dfab35b6de18",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a42eb1f7-9109-451f-874b-9b4d1a20fc01"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 8,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fc3ae107-32ce-4f7a-805f-47bdcee6747f",
                    "title": "Integrify Libs Permissions Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                    "file": "/test/integration/permissions/permissions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet config = await Config.getConfig();\nconfig = config.test;\nsession = {user_sid: config.tenantOne.adminUser.sid.toLowerCase(), user_name: config.tenantOne.adminUser.userName, tenant: config.tenantOne.tenantId }\nlet deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\nconsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                            "err": {},
                            "uuid": "b9108c3e-bdfd-4598-aad6-8125f95aa4c4",
                            "parentUUID": "fc3ae107-32ce-4f7a-805f-47bdcee6747f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);",
                            "err": {},
                            "uuid": "b50af647-e36f-4215-b8fa-11649f250464",
                            "parentUUID": "fc3ae107-32ce-4f7a-805f-47bdcee6747f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "63202e12-64ef-419e-8774-915bf73fe293",
                            "title": "currentUserPermssions",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests currentUserPermssions should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 178,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.currentUserPermissions(session);\nlet cached =  await redis.getAsync([`${session.tenant}.permissions.${session.user_sid}`]);\ncached = JSON.parse(cached)\nexpect(perms).length.to.be.gt(0);\nexpect(cached.length).to.equal(perms.length)",
                                    "err": {},
                                    "uuid": "2ecd85ec-23cb-4352-92b0-be540c3c5490",
                                    "parentUUID": "63202e12-64ef-419e-8774-915bf73fe293",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2ecd85ec-23cb-4352-92b0-be540c3c5490"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 178,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3274620c-e5f4-4971-820a-a6df1c3c17b1",
                            "title": "isSysAdmin",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests isSysAdmin should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.exist",
                                    "err": {},
                                    "uuid": "70928add-5829-4562-8a92-a505c82b8d9d",
                                    "parentUUID": "3274620c-e5f4-4971-820a-a6df1c3c17b1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "70928add-5829-4562-8a92-a505c82b8d9d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "925cf81a-1a9b-489c-8327-57f837141576",
                            "title": "hasPermissions",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for sysAdmin permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for sysAdmin permissions",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.sysAdmin);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\", \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "29e00773-b121-4a34-ae44-012a3a839f83",
                                    "parentUUID": "925cf81a-1a9b-489c-8327-57f837141576",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for System scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for System scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.systemScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\",\n    \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.be.undefined",
                                    "err": {},
                                    "uuid": "6e8ac293-e475-4543-b8a9-9514a766d77a",
                                    "parentUUID": "925cf81a-1a9b-489c-8327-57f837141576",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for category scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for category scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.categoryScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    mocks.categoryScoped[0].ownerSid,\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "20581e20-9326-4862-8557-3e2e20ca5990",
                                    "parentUUID": "925cf81a-1a9b-489c-8327-57f837141576",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for Object scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for Object scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "d22ed9b4-2b7d-4751-bd58-2f7727741327",
                                    "parentUUID": "925cf81a-1a9b-489c-8327-57f837141576",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for Object scoped permissions with wrong publish status",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for Object scoped permissions with wrong publish status",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    \"production\");\nexpect(hasPerms).to.be.false;",
                                    "err": {},
                                    "uuid": "cb7100a8-3d11-4ce6-b021-7fa0bae4e5a9",
                                    "parentUUID": "925cf81a-1a9b-489c-8327-57f837141576",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for bogus permission type",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for bogus permission type",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edizt',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.false;\nhasPerms = await permissions.hasPermissions(session,\n    'holiday',\n    'viewconfig');\nexpect(hasPerms).to.be.false",
                                    "err": {},
                                    "uuid": "2ff84914-0c83-4996-9f28-7276cb1ef540",
                                    "parentUUID": "925cf81a-1a9b-489c-8327-57f837141576",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "29e00773-b121-4a34-ae44-012a3a839f83",
                                "6e8ac293-e475-4543-b8a9-9514a766d77a",
                                "20581e20-9326-4862-8557-3e2e20ca5990",
                                "d22ed9b4-2b7d-4751-bd58-2f7727741327",
                                "cb7100a8-3d11-4ce6-b021-7fa0bae4e5a9",
                                "2ff84914-0c83-4996-9f28-7276cb1ef540"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a81a32a5-d555-4815-9378-079671ae7513",
                    "title": "Integrify Libs SwaggerClient Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                    "file": "/test/integration/serviceClient/serviceClient.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4cf90964-91fb-497c-a9df-ea199d0e7582",
                            "title": "Test portalUrl",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                            "file": "/test/integration/serviceClient/serviceClient.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs SwaggerClient Tests Test portalUrl \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "0796e8a7-b332-4f20-bd75-76569332dc81",
                                    "parentUUID": "4cf90964-91fb-497c-a9df-ea199d0e7582",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "7c3dbf05-4fca-43ec-b4cb-6e85789e462c",
                                    "title": "first check PORTAL_URL env var, then check redis",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                                    "file": "/test/integration/serviceClient/serviceClient.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have gotten portalUrl from redis",
                                            "fullTitle": "Integrify Libs SwaggerClient Tests Test portalUrl first check PORTAL_URL env var, then check redis should have gotten portalUrl from redis",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.PORTAL_URL = ''\nconst serviceClient = new ServiceClient('constructor param no longer used')\nconst portalUrl = await serviceClient._getPortalUrl()\nexpect(portalUrl).to.exist\nexpect(portalUrl.startsWith('http')).to.be.true",
                                            "err": {},
                                            "uuid": "0d55a5a0-6ea2-426c-9dbb-9f31f8cea6a1",
                                            "parentUUID": "7c3dbf05-4fca-43ec-b4cb-6e85789e462c",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "0d55a5a0-6ea2-426c-9dbb-9f31f8cea6a1"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 0,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d1e53e80-1523-4dea-86b5-7313271b8f5c",
                    "title": "Integrify Libs Contact Model Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/contacts.test.js",
                    "file": "/test/integration/sqldb/contacts.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/contacts.test.js",
                            "file": "/test/integration/sqldb/contacts.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "1b3861b7-8cf0-426b-a627-84412b1c5546",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContact",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ContactModel = await model.getModel(config.test.tenantOne.tenantId, 'Contact')\n//console.dir(ContactModel)\nlet results = await ContactModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleContactGuid = results[0].contactGuid\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContact(sampleContactGuid);\nexpect(Contact).to.exist;\nexpect(Contact.contactGuid).equal(sampleContactGuid)",
                                    "err": {},
                                    "uuid": "48ef0455-526a-47f1-b6db-bdc8f97ed710",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getContactByUserName",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContactByUserName",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nlet sampleUserName = user.userName\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContactByUserName(sampleUserName);\nexpect(Contact).to.exist;\nexpect(Contact.userName).equal(sampleUserName)",
                                    "err": {},
                                    "uuid": "e08d7359-c4ea-4667-a2e8-9bfd99ba90f4",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should searchContacts",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should searchContacts",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne)\n            let Contacts = await contactController.searchContacts({'auth.userName': 'iApprov', firstName: 'Sys', lastName: 'S'});\n            expect(Contacts[0]).to.exist;\n            expect(Contacts[0].userName).equal('iApprove')\n            Contacts = await contactController.searchContacts({'auth.userName': 'iApprove'});\n            let Contact = Contacts[0]\n            expect(Contact).to.exist;\n            expect(Contact.userName).equal('iApprove')",
                                    "err": {},
                                    "uuid": "96de8496-0f37-47e8-9fba-babbf2b0ad58",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should dbAuthContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should dbAuthContact",
                                    "timedOut": false,
                                    "duration": 132,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            expect(Contact.token).to.exist;\n            expect(Contact.refreshToken).to.exist;\n            expect(Contact).to.have.property('passwordResetDate');\n            expect(Contact.userName).equal(user.userName);",
                                    "err": {},
                                    "uuid": "eeb76b83-85bc-4090-985e-6c0e327c6c70",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should indicate that juser password is not expired (passwordResetDate 2121)",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should indicate that juser password is not expired (passwordResetDate 2121)",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nconst isPasswordExpired = await contactController.isPasswordExpired('juser')\n\nexpect(isPasswordExpired).to.exist\nexpect(isPasswordExpired).to.be.false",
                                    "err": {},
                                    "uuid": "460983da-6d0a-4e3d-9ab3-fe849b967b90",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should indicate that password is expired (passwordResetDate is NULL)",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should indicate that password is expired (passwordResetDate is NULL)",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nconst isPasswordExpired = await contactController.isPasswordExpired(user.userName)\n\nexpect(isPasswordExpired).to.exist\nexpect(isPasswordExpired).to.be.true",
                                    "err": {},
                                    "uuid": "19454fae-e8bd-4181-9a8b-15d8e6a52e18",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getGroupSids",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getGroupSids",
                                    "timedOut": false,
                                    "duration": 123,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            let groupSids = await contactController.getGroupSids(Contact.contactSid)\n            expect(groupSids.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "ae675cae-5a70-4e3a-a877-4cd6d2a24a49",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getAccountsByEmail",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getAccountsByEmail",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contacts = await contactController.getAccountsByEmail(config.test.tenantOne.adminUser.email);\nexpect(Contacts.length).to.be.gt(0);\nContacts.forEach(contact => {\n  expect(contact).to.have.all.keys('contactGuid', 'ntId', 'email');\n  expect(contact.email).to.equal(config.test.tenantOne.adminUser.email);\n});",
                                    "err": {},
                                    "uuid": "f5ea9f70-a757-41ec-a203-da78224c2c7d",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should updatePassword",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should updatePassword",
                                    "timedOut": false,
                                    "duration": 148,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contact = await contactController.updatePassword(\n  config.test.tenantOne.adminUser.sid,\n  bcrypt.hashSync(config.test.tenantOne.adminUser.password)\n);\nexpect(Contact).to.exist\n  .and.to.equal(1)",
                                    "err": {},
                                    "uuid": "02a601ab-8f19-43bf-b9a1-d534b9abdb03",
                                    "parentUUID": "64e8fd27-ecbd-44c6-85c0-386990917d31",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "48ef0455-526a-47f1-b6db-bdc8f97ed710",
                                "e08d7359-c4ea-4667-a2e8-9bfd99ba90f4",
                                "96de8496-0f37-47e8-9fba-babbf2b0ad58",
                                "eeb76b83-85bc-4090-985e-6c0e327c6c70",
                                "460983da-6d0a-4e3d-9ab3-fe849b967b90",
                                "19454fae-e8bd-4181-9a8b-15d8e6a52e18",
                                "ae675cae-5a70-4e3a-a877-4cd6d2a24a49",
                                "f5ea9f70-a757-41ec-a203-da78224c2c7d",
                                "02a601ab-8f19-43bf-b9a1-d534b9abdb03"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 490,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9aa63304-491f-452d-9b55-fc164efa6af8",
                    "title": "Integrify Libs Controller Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/controller.test.js",
                    "file": "/test/integration/sqldb/controller.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c654c737-bb81-432c-bd8d-49faf73794fb",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/controller.test.js",
                            "file": "/test/integration/sqldb/controller.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "54cfe184-14ef-47e8-87d0-ca449e37e238",
                                    "parentUUID": "c654c737-bb81-432c-bd8d-49faf73794fb",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Controller Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(controllers.BaseController).to.exist;\nclass TestController extends controllers.BaseController {}            \nconst testController = new TestController(config.test.tenantOne)\nlet tenantDb =  await testController.getTenantDb()\n\nexpect(tenantDb).to.exist",
                                    "err": {},
                                    "uuid": "b24306ea-2258-4b94-b353-7fbfcddb6d3d",
                                    "parentUUID": "c654c737-bb81-432c-bd8d-49faf73794fb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b24306ea-2258-4b94-b353-7fbfcddb6d3d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0a147d92-b907-4ed6-81fb-0d76f4e47e72",
                    "title": "Integrify Libs Data Instance Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                    "file": "/test/integration/sqldb/data-instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Data Instance Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await Config.getConfig();\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "bb437a8e-40a6-4757-9c79-bde61f77f585",
                            "parentUUID": "0a147d92-b907-4ed6-81fb-0d76f4e47e72",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "42a3954f-0f7f-4bd2-bf7e-6f94e2412b5f",
                            "title": "Model Tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a consumer model",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should get a consumer model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;",
                                    "err": {},
                                    "uuid": "2c2b09a7-012c-41b1-b39a-2b3ce8fde536",
                                    "parentUUID": "42a3954f-0f7f-4bd2-bf7e-6f94e2412b5f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query()\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "b441cf6b-bf74-4d7b-9760-8eea29c9603d",
                                    "parentUUID": "42a3954f-0f7f-4bd2-bf7e-6f94e2412b5f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances with settings",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances with settings",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query().eager('[dataInstanceSettings]')\nconsole.dir(results)\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "34bdeb59-f99e-46d6-bbc9-576cc1eca4f4",
                                    "parentUUID": "42a3954f-0f7f-4bd2-bf7e-6f94e2412b5f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2c2b09a7-012c-41b1-b39a-2b3ce8fde536",
                                "b441cf6b-bf74-4d7b-9760-8eea29c9603d",
                                "34bdeb59-f99e-46d6-bbc9-576cc1eca4f4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 38,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1893e9eb-2740-4221-9c8c-2c9fc059222f",
                            "title": "Controller Tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list datainstances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should list datainstances",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstances = await dataInstanceController.listDataInstances()\nexpect(dataInstances).to.exist;\nexpect(dataInstances.length).to.be.gt(0)\nexpect(dataInstances[0].dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "d5b3ed33-bfba-47ee-9735-ce47723af121",
                                    "parentUUID": "1893e9eb-2740-4221-9c8c-2c9fc059222f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstance",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nexpect(dataInstance).to.exist;\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "3841cd29-ee33-4319-8bb6-7e113f20b118",
                                    "parentUUID": "1893e9eb-2740-4221-9c8c-2c9fc059222f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstances hash",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstances hash",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstanceHt = await dataInstanceController.GetDataInstancesHash()\nexpect(dataInstanceHt).to.exist;\nexpect(dataInstanceHt[config.test.tenantOne.tenantId]).to.exist;",
                                    "err": {},
                                    "uuid": "25465852-9305-4eff-bd7a-f50be9257552",
                                    "parentUUID": "1893e9eb-2740-4221-9c8c-2c9fc059222f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should update a datainstance",
                                    "timedOut": false,
                                    "duration": 55,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let settingVal = new Date().toISOString()\nlet dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nlet settingIdx  = dataInstance.dataInstanceSettings.findIndex((s => s.settingsKey === 'HelpURL'));\ndataInstance.dataInstanceSettings[settingIdx].settingsValue = settingVal\ndataInstance  = await dataInstanceController.updateDataInstance(dataInstance)\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)\nlet setting  = dataInstance.dataInstanceSettings.find((s => s.settingsKey === 'HelpURL'));\nexpect(setting).to.exist\nexpect(setting.settingsValue).to.equal(settingVal)",
                                    "err": {},
                                    "uuid": "3f82eb4f-c71c-4ad5-a749-b5731c0850f9",
                                    "parentUUID": "1893e9eb-2740-4221-9c8c-2c9fc059222f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d5b3ed33-bfba-47ee-9735-ce47723af121",
                                "3841cd29-ee33-4319-8bb6-7e113f20b118",
                                "25465852-9305-4eff-bd7a-f50be9257552",
                                "3f82eb4f-c71c-4ad5-a749-b5731c0850f9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 119,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "83d3ef8e-1d97-4922-b181-e60d8dfa6e87",
                    "title": "Integrify Libs Model Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/model.test.js",
                    "file": "/test/integration/sqldb/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "84716781-ae0e-4113-bfe0-1fb7f703e0b6",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/model.test.js",
                            "file": "/test/integration/sqldb/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "d06ef91f-64b7-4872-b30e-75caf58d1d16",
                                    "parentUUID": "84716781-ae0e-4113-bfe0-1fb7f703e0b6",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 42,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nthis.timeout(105000);\nconst ContactModel = await model.bindModel(config.test.tenantOne.tenantId, models.Contact)\n//console.dir(ContactModel)\n//ContactModel.setOptions({excludeDeleted:false})\n//let results = await ContactModel.query().where('contactId', '>', 0)\n//console.log(results)\nlet results;\nresults = await ContactModel.query().setOptions({excludeDeleted:false}).where('contactId', '>', 0)\nresults = await ContactModel.query().where('contactId', '>', 0)\nlet c = await ContactModel.query().findOne({userName: 'iApprove'}).joinRelated('auth').select('contact.*', 'contact.contactGuid as contactSid','auth.userName as userName')\nconsole.log(c)\nlet patched = await c.$query().patch({middleName: \"bob\"})\nconsole.log(patched)\n\n\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "ee9a5f02-914b-4bd2-be7d-da7349c76bcf",
                                    "parentUUID": "84716781-ae0e-4113-bfe0-1fb7f703e0b6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ee9a5f02-914b-4bd2-be7d-da7349c76bcf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 42,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "6f2147f9-9a65-484a-8de7-24b37aa8dc4f",
                    "title": "Integrify Libs Permissions Controller Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/permissions.test.js",
                    "file": "/test/integration/sqldb/permissions.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6065f0e0-6cb5-4e0b-a22c-c35c3dab0f73",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/permissions.test.js",
                            "file": "/test/integration/sqldb/permissions.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "d7876b1b-714e-48f6-8b7d-f255b3979bf2",
                                    "parentUUID": "6065f0e0-6cb5-4e0b-a22c-c35c3dab0f73",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getUserPermissionsFromDb",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests should getUserPermissionsFromDb",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst session = {tenantId: config.test.tenantOne.tenantId, user_sid: user.sid}\nlet permissionsController = new PermissionsController(session)\nlet permissions = await permissionsController.getWorkflowPermissionsFromDb(session);\nconsole.log(permissions)\nexpect(permissions[0]).to.exist;",
                                    "err": {},
                                    "uuid": "9abc52b0-9401-4f95-aaac-5ee8af3570cc",
                                    "parentUUID": "6065f0e0-6cb5-4e0b-a22c-c35c3dab0f73",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9abc52b0-9401-4f95-aaac-5ee8af3570cc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6784218e-3f91-4e50-b464-610938e7619c",
                    "title": "Integrify Libs Process Model Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/process.test.js",
                    "file": "/test/integration/sqldb/process.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "45f1580e-d30e-42aa-b322-af6d904e32f9",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/process.test.js",
                            "file": "/test/integration/sqldb/process.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Process Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "f4c4e0f0-8bff-454c-bab9-55a082c648a1",
                                    "parentUUID": "45f1580e-d30e-42aa-b322-af6d904e32f9",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a process from sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should get a process from sql",
                                    "timedOut": false,
                                    "duration": 227,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n\n\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nconst Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nconsole.log([Process])\nexpect(Process.processGuid).equal(sampleProcesstGuid)",
                                    "err": {},
                                    "uuid": "8f8f3cd9-f488-4ab3-9243-dc6778c13465",
                                    "parentUUID": "45f1580e-d30e-42aa-b322-af6d904e32f9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should upsert a process in sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should upsert a process in sql",
                                    "timedOut": false,
                                    "duration": 842,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n//console.dir(ContactModel)\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nlet Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nexpect(Process.processGuid).equal(sampleProcesstGuid)\nlet newName = 'Updated ' + new Date().toISOString()\nclonedProcess = JSON.parse(JSON.stringify(Process));\n           \nProcess.objective = newName;\nProcess.tasks[0].internalNotes = newName;\nProcess.processCategory.ordinal = 1;\nawait processController.upsertFullProcess(Process);\nProcess = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process.objective).to.equal(newName);\nexpect(Process.tasks[0].internalNotes).to.equal(newName);\nexpect(Process.processCategory.ordinal).equal(1)",
                                    "err": {},
                                    "uuid": "2378c457-36ef-4153-b7c0-3d670ddd431e",
                                    "parentUUID": "45f1580e-d30e-42aa-b322-af6d904e32f9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8f8f3cd9-f488-4ab3-9243-dc6778c13465",
                                "2378c457-36ef-4153-b7c0-3d670ddd431e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1069,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5ea16bc1-aab6-47f6-9234-8cacd8ea5f89",
                    "title": "Integrify Libs Tenant tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                    "file": "/test/integration/sqldb/sqldb-db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c26247df-d8a1-4962-942e-a1af1f5c505c",
                            "title": "tentantSql tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                            "file": "/test/integration/sqldb/sqldb-db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// let configClass = await require('../../../config')\n            // await configClass.setConfigs();\n            // config = await configClass.getConfig();\n            config = await Config.getConfig();\n            this.timeout(100000);",
                                    "err": {},
                                    "uuid": "9d723499-709b-4c19-ae75-1e368504deaf",
                                    "parentUUID": "c26247df-d8a1-4962-942e-a1af1f5c505c",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get the consumer Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests should get the consumer Db",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getConsumersDb(config.consumersConn)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`SELECT * FROM sys.tables WHERE name = 'data_instance'`)\nexpect(queyResults.length).equal(1)\n//console.log(queyResults)",
                                    "err": {},
                                    "uuid": "881a52c6-8b81-48a5-a129-9a2791fbf920",
                                    "parentUUID": "c26247df-d8a1-4962-942e-a1af1f5c505c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "shoulld get the tenant Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests shoulld get the tenant Db",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getTenantDb(config.test.tenantOne.tenantId)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`select * from contact`)\nexpect(queyResults.length).to.be.gt(0)\nqueyResults = await db.raw(\"select * from contact_auth where user_name = :uname\", {uname: 'iApprove'})\nexpect(queyResults.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "a7ce76d6-8814-42c3-8886-c88093785389",
                                    "parentUUID": "c26247df-d8a1-4962-942e-a1af1f5c505c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "881a52c6-8b81-48a5-a129-9a2791fbf920",
                                "a7ce76d6-8814-42c3-8886-c88093785389"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ad488258-eb7b-457d-a83b-b1571efac0a3",
                    "title": "Integrify Libs StreamConsumer Load Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3613,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\n/*\nRedis stream stuff:\nYou can scale up by running additional processors in the group. This creates a new Node process and runs a new consumer\nin the existing stream group. The consumer name for each processor will have an incremental suffix so it will be unique\nensuring that each consumer processes a unique set of events.\nWith 3 processors, it handeld a loadSize of a million events as they came in with no backlog build up in the group.\n */\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nforkedProcessor2 = await streamConsumer.forkStreamProcessor()\nforkedProcessor3 = await streamConsumer.forkStreamProcessor()\nfor (let index = 0; index < loadSize; index++) {\n\n    await sp.sendEvent(\"extendSession\",{\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\", \n            user_name: \"iapprove\", \n            email: \"iapprove@integrify.com\", \n            name: \"System System\"\n        }\n    })\n\n}\n       \nawait delay(1000);",
                            "err": {},
                            "uuid": "e916777c-fc85-4385-8e1b-a2499f1177e9",
                            "parentUUID": "ad488258-eb7b-457d-a83b-b1571efac0a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill()\nforkedProcessor2.kill()\nforkedProcessor3.kill()",
                            "err": {},
                            "uuid": "c5e81977-58fd-4bbf-acef-d6848471e7d5",
                            "parentUUID": "ad488258-eb7b-457d-a83b-b1571efac0a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6b8ae99e-1267-4936-81fc-d0c47f15bfb2",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                            "file": "/test/integration/stream/streamConsumer.load.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "aaa9fa6e-780e-437c-8dde-f616ea798532",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Load Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "ad5843ed-f54d-494f-b4d8-e977db493516",
                                            "parentUUID": "aaa9fa6e-780e-437c-8dde-f616ea798532",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "ad5843ed-f54d-494f-b4d8-e977db493516"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "07d2c15e-8246-4e2d-bb94-f3b2a107aafb",
                    "title": "Integrify Libs StreamConsumer Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                    "file": "/test/integration/stream/streamConsumer.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5016,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\",\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nawait delay(5000);",
                            "err": {},
                            "uuid": "6dc956ee-d754-4806-91b5-f52c257af77f",
                            "parentUUID": "07d2c15e-8246-4e2d-bb94-f3b2a107aafb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "03754235-30a2-4c4f-b0cc-17d9ca538752",
                            "parentUUID": "07d2c15e-8246-4e2d-bb94-f3b2a107aafb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4b9a2116-ca18-4467-98b3-7e9d77ec4d9e",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                            "file": "/test/integration/stream/streamConsumer.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "838660d4-9c56-4d15-a02a-be66b88bbfc1",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                                    "file": "/test/integration/stream/streamConsumer.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "fd3127e1-cae3-432c-8351-fa1ff3398989",
                                            "parentUUID": "838660d4-9c56-4d15-a02a-be66b88bbfc1",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "fd3127e1-cae3-432c-8351-fa1ff3398989"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "dd332b87-34bc-4ae0-b450-c701dbb99748",
                    "title": "Integrify Libs Stream Publisher Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamPublisher.test.js",
                    "file": "/test/integration/stream/streamPublisher.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b0879d2d-e5f8-433b-85aa-7d860029e6bc",
                            "title": "stream publisher",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamPublisher.test.js",
                            "file": "/test/integration/stream/streamPublisher.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(100000)\nprocess.env.jest = \"true\";\nawait redis.delAsync([fullStreamName, eventHistoryName])",
                                    "err": {},
                                    "uuid": "10365849-8aa6-4c69-946d-f47a5fd63992",
                                    "parentUUID": "b0879d2d-e5f8-433b-85aa-7d860029e6bc",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should handle the constructor",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should handle the constructor",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant);\nexpect(sp.streamName).equal(fullStreamName)\nexpect(sp.baseStreamName).equal(testStreamName)",
                                    "err": {},
                                    "uuid": "aef6f37d-ae16-4bd5-8934-c270fccd0978",
                                    "parentUUID": "b0879d2d-e5f8-433b-85aa-7d860029e6bc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should an sendEvent",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should an sendEvent",
                                    "timedOut": false,
                                    "duration": 102,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant,1000);\nexpect(sp.streamName).equal(fullStreamName)\n//sendEvent(eventType, data) data will get stringified\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}})   \nexpect(id).to.exist;\nexpect (id.indexOf(\"-\")).to.be.gt(-1)  \nawait delay(100);\nlet id2 = await sp.sendEvent(testEventType, {foo:\"bar2\", biz:\"buzz2\", beep:{bop:\"bam2\"}})   \nexpect (Number(id2.split(\"-\")[0])).to.be.gt(Number(id.split(\"-\")[0]))",
                                    "err": {},
                                    "uuid": "335eab1e-4335-46a6-816f-f360db95fdf9",
                                    "parentUUID": "b0879d2d-e5f8-433b-85aa-7d860029e6bc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should append to eventhistory",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should append to eventhistory",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant, 1000); \n\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}}) \n           \n//console.log(historySet)\nlet historyCount = await redis.zcardAsync(eventHistoryName)\nexpect(historyCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "123ac901-5960-4ce0-b674-64ecfaa39b1e",
                                    "parentUUID": "b0879d2d-e5f8-433b-85aa-7d860029e6bc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "aef6f37d-ae16-4bd5-8934-c270fccd0978",
                                "335eab1e-4335-46a6-816f-f360db95fdf9",
                                "123ac901-5960-4ce0-b674-64ecfaa39b1e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 104,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "90be433f-f065-4bc0-a56b-e92c51aa09b6",
                    "title": "Integrify Libs Tes-lib Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                    "file": "/test/integration/test-lib/test-lib.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6fe91356-9467-45f8-9168-2f30b7f7d68e",
                            "title": "Test Config",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                            "file": "/test/integration/test-lib/test-lib.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tes-lib Tests Test Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "aec1b0d5-dfd3-40a7-ada1-f6719b331786",
                                    "parentUUID": "6fe91356-9467-45f8-9168-2f30b7f7d68e",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "247602fa-e617-4b02-8ac7-cc4f02fe551b",
                                    "title": "get a test config",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get a test config should have config.mongo",
                                            "timedOut": false,
                                            "duration": 8,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const testConfig = await testLib.getTestConfig();\nconsole.log(testConfig)\nexpect(testConfig).to.exist;",
                                            "err": {},
                                            "uuid": "1b263670-a3b6-4223-ad8b-b6e5bed2d6dd",
                                            "parentUUID": "247602fa-e617-4b02-8ac7-cc4f02fe551b",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "1b263670-a3b6-4223-ad8b-b6e5bed2d6dd"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 8,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "d2bd90e9-bfa5-49ac-b4e3-8cea45a2fe0e",
                                    "title": "get an auth Token ",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have a auth token",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get an auth Token  should have a auth token",
                                            "timedOut": false,
                                            "duration": 6,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const authToken = await testLib.getAuthToken();\nconsole.log(authToken)\nexpect(authToken).to.exist;",
                                            "err": {},
                                            "uuid": "72480130-8875-48ea-9f16-3072c6e5de48",
                                            "parentUUID": "d2bd90e9-bfa5-49ac-b4e3-8cea45a2fe0e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "72480130-8875-48ea-9f16-3072c6e5de48"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 6,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "7afc4ae4-29cc-4e3f-b4dc-e7975c2089e4",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "e8c0e2c3-2055-4af8-9879-b14bec425cf2",
                    "title": "Scheduler CRUD tests",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                    "file": "/test/crud.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler CRUD tests\"",
                            "fullTitle": "Scheduler CRUD tests \"before all\" hook in \"Scheduler CRUD tests\"",
                            "timedOut": false,
                            "duration": 27,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntry {\n    testConfig = await serverConfig.setProcessServerConfig()\n    config = await (require(\"./test-config.js\")).consoleTestConfig();\n    jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl.js\");\n} catch(e){}",
                            "err": {},
                            "uuid": "aa61e888-a371-4917-844d-875a2c9a5243",
                            "parentUUID": "e8c0e2c3-2055-4af8-9879-b14bec425cf2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bcf1f11d-cf54-4996-b7af-516cd9de010c",
                            "title": ".save",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves the job",
                                    "fullTitle": "Scheduler CRUD tests .save saves the job",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let sDate = new Date();\nlet startThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() - 5)\n);\nlet endThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() + 5)\n);\nlet job = {\n    dbName: config.dbName,\n    status: \"Scheduled\",\n    name: config.name,\n    initData: config.initData,\n    runAs: config.runAs,\n    frequency: \"Recurring\",\n    rminutes: 1,\n    state: \"ended\",\n    startDate: startThis,\n    startHour: startThis.getHours(),\n    startMinute: startThis.getMinutes(),\n    startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n    endDate: endThis,\n    endHour: endThis.getHours(),\n    endMinute: endThis.getMinutes(),\n    endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\",\n    jobType: config.jobType\n};\nreturn jobCtrl.save(job).then(saved => {\n    expect(saved).to.exist;\n    dbJob = saved;\n});",
                                    "err": {},
                                    "uuid": "f6274a35-346d-44c5-be80-65090dec2a54",
                                    "parentUUID": "bcf1f11d-cf54-4996-b7af-516cd9de010c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f6274a35-346d-44c5-be80-65090dec2a54"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 45,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a7b19cc0-4866-48b2-bdf2-a3b7f00fba7a",
                            "title": ".upate",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates the job",
                                    "fullTitle": "Scheduler CRUD tests .upate updates the job",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.update(dbJob).then(updated => {\n    expect(updated).to.exist;\n    expect(updated.modifiedDate.getTime()).to.be.greaterThan(\n        updated.createdDate.getTime()\n    );\n});",
                                    "err": {},
                                    "uuid": "597cebd6-0ceb-49b3-b330-0d72b06ea178",
                                    "parentUUID": "a7b19cc0-4866-48b2-bdf2-a3b7f00fba7a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "597cebd6-0ceb-49b3-b330-0d72b06ea178"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f9e39923-ed1d-4a32-801f-4fc184c49133",
                            "title": ".getOne",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler CRUD tests .getOne should get a job by id",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.getOne(config.dbName, dbJob._id).then(job => {\n    expect(job).to.exist;\n    expect(job._id.toString()).to.equal(dbJob._id.toString());\n});",
                                    "err": {},
                                    "uuid": "9b76ef73-35c1-41b6-8344-448048e909d8",
                                    "parentUUID": "f9e39923-ed1d-4a32-801f-4fc184c49133",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9b76ef73-35c1-41b6-8344-448048e909d8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "806bc0b7-9e41-4b8d-bc3a-401ec6d176cd",
                            "title": ".getAll",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs",
                                    "fullTitle": "Scheduler CRUD tests .getAll should get all jobs",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName).then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "801ebe89-d2de-4836-b75d-67fe0ce6e184",
                                    "parentUUID": "806bc0b7-9e41-4b8d-bc3a-401ec6d176cd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "801ebe89-d2de-4836-b75d-67fe0ce6e184"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4505b04d-e119-4e93-ae60-51a6712ff397",
                            "title": ".getAll(filter)",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs of type testToConsole",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter) should get all jobs of type testToConsole",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"testToConsole\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "228701c3-b92f-48a5-9c8c-fb009b9f3bc4",
                                    "parentUUID": "4505b04d-e119-4e93-ae60-51a6712ff397",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "228701c3-b92f-48a5-9c8c-fb009b9f3bc4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b0759528-1e3f-4fab-9c77-c51542ef8ca2",
                            "title": ".getAll(filter-bad)",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should not have any jobs of type fakeJob",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter-bad) should not have any jobs of type fakeJob",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"fakeJob\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.empty;\n});",
                                    "err": {},
                                    "uuid": "fa87c349-b4f0-4f15-8cb9-d6355d24716d",
                                    "parentUUID": "b0759528-1e3f-4fab-9c77-c51542ef8ca2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fa87c349-b4f0-4f15-8cb9-d6355d24716d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6b75be99-c2b6-4e6f-9af6-e5caeca8fc95",
                            "title": ".delete",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a job",
                                    "fullTitle": "Scheduler CRUD tests .delete should delete a job",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.delete(config.dbName, dbJob._id).then(deleted => {\n    expect(deleted).to.be.true;\n});",
                                    "err": {},
                                    "uuid": "e78991f8-0c21-47f2-be89-9d8c134528bc",
                                    "parentUUID": "6b75be99-c2b6-4e6f-9af6-e5caeca8fc95",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e78991f8-0c21-47f2-be89-9d8c134528bc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "516fb5a3-b675-4942-8b9d-e1ba3f91825f",
                    "title": "Scheduler OneTimeJob",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                    "file": "/test/onetime.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler OneTimeJob\"",
                            "fullTitle": "Scheduler OneTimeJob \"before all\" hook in \"Scheduler OneTimeJob\"",
                            "timedOut": false,
                            "duration": 81,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\nconfig = await (require(\"./test-config.js\")).reportTestConfig();\njob = {\n    _id: \"596628f40fa55f6d4c30bc44\",\n    status: \"Scheduled\",\n    jobType: \"sendReport\",\n    initData: config.initData,\n    frequency: \"One Time\",\n    name: \"only run once\",\n    runAs: config.runAs,\n    dbName: config.dbName,\n    runCount: 0,\n    smonths: [],\n    sdays: [],\n    shours: [],\n    sminutes: [],\n    sdow: [],\n    restart: false,\n    startDate: dt\n};\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "ad4c0817-c64a-479a-9701-daab937e576a",
                            "parentUUID": "516fb5a3-b675-4942-8b9d-e1ba3f91825f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4f17ea9a-8d1a-4ed4-9c4b-f323997e4059",
                            "title": "#addOneTimeJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler OneTimeJob #addOneTimeJob should add a job",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "30d48b9f-c094-460b-8ae0-eda794a66e20",
                                    "parentUUID": "4f17ea9a-8d1a-4ed4-9c4b-f323997e4059",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "30d48b9f-c094-460b-8ae0-eda794a66e20"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "33ce8097-42c6-4f61-9a2f-93331b44ad2c",
                            "title": "#listJobs",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "5262aba6-5fd0-4bb1-a740-c4027100a3ef",
                                    "parentUUID": "33ce8097-42c6-4f61-9a2f-93331b44ad2c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "3ee0e907-ae9b-4b0e-851e-10f8a43ea702",
                                    "parentUUID": "33ce8097-42c6-4f61-9a2f-93331b44ad2c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5262aba6-5fd0-4bb1-a740-c4027100a3ef",
                                "3ee0e907-ae9b-4b0e-851e-10f8a43ea702"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d72c6835-7ccb-49c5-a249-b1cba328d133",
                            "title": "#getJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler OneTimeJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "351cc936-d89d-45e6-adfa-96bc631ccb5f",
                                    "parentUUID": "d72c6835-7ccb-49c5-a249-b1cba328d133",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "351cc936-d89d-45e6-adfa-96bc631ccb5f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "7f765288-dd09-49bd-9c7d-256250cce7dc",
                            "title": "#runJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should run the job",
                                    "fullTitle": "Scheduler OneTimeJob #runJob should run the job",
                                    "timedOut": false,
                                    "duration": 15000,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\nlet c = await delay(15000);\nexpect(j.triggeredJobs()).to.equal(1);",
                                    "err": {},
                                    "uuid": "b75efb1e-d8b7-40be-9b59-3a56986fd637",
                                    "parentUUID": "7f765288-dd09-49bd-9c7d-256250cce7dc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b75efb1e-d8b7-40be-9b59-3a56986fd637"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15000,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 20000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "52b4b7b7-35f3-4999-97d5-3fc202c0a64b",
                    "title": "Scheduler PubSubHandler",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/pubsub.test.js",
                    "file": "/test/pubsub.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"before all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 27,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await serverConfig.setProcessServerConfig()\n        config = await (require(\"./test-config.js\")).consoleTestConfig();\n        let dbJob = {\n            dbName: config.dbName,\n            name: config.name,\n            jobType: config.jobType,\n            status: \"Scheduled\",\n            initData: config.initData,\n            runAs: config.runAs,\n            frequency: \"Recurring\",\n            restart: true,\n            rminutes: 1,\n            state: \"ended\",\n            startDate: startThis,\n            startHour: startThis.getHours(),\n            startMinute: startThis.getMinutes(),\n            startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n            endDate: endThis,\n            endHour: endThis.getHours(),\n            endMinute: endThis.getMinutes(),\n            endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\"\n        };\n        scheduler = require(\"../lib/scheduler/index.js\");\n        jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");\n        dbJobWithId = await jobCtrl.save(dbJob);\n        service = require(\"../scheduler.js\");\n        integrify_redis = require(\"../lib/redis/integrify-redis.js\");\n        pubSubClient = integrify_redis.getRedisPubSubClient();",
                            "err": {},
                            "uuid": "dae44684-82b5-4bd5-a61b-5ec4000348a9",
                            "parentUUID": "52b4b7b7-35f3-4999-97d5-3fc202c0a64b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"after all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": "failed",
                            "speed": null,
                            "pass": false,
                            "fail": true,
                            "pending": false,
                            "context": null,
                            "code": "return await jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString());",
                            "err": {
                                "message": "TypeError: Cannot read property 'dbName' of undefined",
                                "estack": "TypeError: Cannot read property 'dbName' of undefined\n    at Context.<anonymous> (test/pubsub.test.js:56:43)\n    at processImmediate (internal/timers.js:456:21)",
                                "diff": null
                            },
                            "uuid": "c7edbf61-433d-4bf2-8c0f-9f814c895842",
                            "parentUUID": "52b4b7b7-35f3-4999-97d5-3fc202c0a64b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "640f9325-430c-4d43-9ee2-28c95a71e920",
                            "title": "#addJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add a new job based on a message",
                                    "fullTitle": "Scheduler PubSubHandler #addJob add a new job based on a message",
                                    "timedOut": false,
                                    "duration": 3004,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:add`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    function(err, ok) {\n        setTimeout(\n            function() {\n                let j = scheduler.getJobById(dbJobWithId._id);\n                expect(j).to.exist;\n                done();\n            },\n            3000\n        );\n    }\n);",
                                    "err": {},
                                    "uuid": "d1e83629-34bc-4a79-8597-a9541f7f1932",
                                    "parentUUID": "640f9325-430c-4d43-9ee2-28c95a71e920",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d1e83629-34bc-4a79-8597-a9541f7f1932"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3004,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "b84292f2-f985-4c9e-a002-9963857cc74a",
                            "title": "#cancel",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler PubSubHandler #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:delete`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    async function(err, ok) {\n        delay(500);\n        let jobs = scheduler.listJobs();\n        expect(jobs[dbJobWithId._id]).to.not.exist;\n                        }\n);",
                                    "err": {},
                                    "uuid": "4d1b2478-a853-46b2-a554-698b0b36e28d",
                                    "parentUUID": "b84292f2-f985-4c9e-a002-9963857cc74a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4d1b2478-a853-46b2-a554-698b0b36e28d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "cbc39e23-affa-4927-96af-47cd0dedd1d4",
                    "title": "Scheduler RecurringJob",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                    "file": "/test/recur.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler RecurringJob\"",
                            "fullTitle": "Scheduler RecurringJob \"before all\" hook in \"Scheduler RecurringJob\"",
                            "timedOut": false,
                            "duration": 18,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig();\nconfig = await (require(\"./test-config.js\")).consoleTestConfig();\njob = {\n    _id: \"596628f40fa55f6d4c30bc44\",\n    jobType: config.jobType,\n    status: \"Scheduled\",\n    initData: config.initData,\n    frequency: \"Recurring\",\n    name: \"this is recurring\",\n    runAs: config.runAs,\n    dbName: config.dbName,\n    runCount: 0,\n    smonths: [],\n    rseconds: 2,\n    rmonths: 1,\n    sdays: [],\n    shours: [],\n    sminutes: [],\n    sdow: [],\n    restart: false,\n    startDate: dt,\n    endDate: enddt\n};\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "b482a8ae-cebd-408d-96b9-5592b87510d9",
                            "parentUUID": "cbc39e23-affa-4927-96af-47cd0dedd1d4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5db206e6-ea83-477d-a8b3-68079b3501d3",
                            "title": "#addRecurringJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler RecurringJob #addRecurringJob should add a job",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);5\nexpect(job.recur).to.exist;",
                                    "err": {},
                                    "uuid": "abe34483-84b1-444b-80c2-150da8f26d03",
                                    "parentUUID": "5db206e6-ea83-477d-a8b3-68079b3501d3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "abe34483-84b1-444b-80c2-150da8f26d03"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "80d202be-b925-45f3-bab0-446a44010414",
                            "title": "#listJobs",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "5c3b8d23-912b-4497-92a7-57244f66215f",
                                    "parentUUID": "80d202be-b925-45f3-bab0-446a44010414",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "81193103-7b91-4bac-aa14-a7e1671d0c58",
                                    "parentUUID": "80d202be-b925-45f3-bab0-446a44010414",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c3b8d23-912b-4497-92a7-57244f66215f",
                                "81193103-7b91-4bac-aa14-a7e1671d0c58"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3ef78629-0ef1-4327-8e6d-7496f0464b16",
                            "title": "#getJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler RecurringJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "cc3f83d8-26a9-4b22-a401-ed41d01b78c1",
                                    "parentUUID": "3ef78629-0ef1-4327-8e6d-7496f0464b16",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cc3f83d8-26a9-4b22-a401-ed41d01b78c1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3a415e33-fa7e-4044-bb55-681ff91eb055",
                    "title": "Scheduler Scheduled Jobs",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                    "file": "/test/schedule.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "fullTitle": "Scheduler Scheduled Jobs \"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "timedOut": false,
                            "duration": 17,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nconfig = await (require(\"./test-config.js\")).consoleTestConfig();\njob = {\n    _id: \"596628f40fa55f6d4c30bc44\",\n    jobType: config.jobType,\n    status: \"Scheduled\",\n    initData: config.initData,\n    frequency: \"Recurring\",\n    name: \"this is recurring\",\n    runAs: config.runAs,\n    dbName: config.dbName,\n    runCount: 0,\n    smonths: [],\n    rseconds: 2,\n    rmonths: 1,\n    sdays: [],\n    shours: [],\n    sminutes: [],\n    sdow: [],\n    restart: false,\n    startDate: dt,\n    endDate: enddt\n};\nlet dbJob = {\n    dbName: config.dbName,\n    name: config.name,\n    jobType: config.jobType,\n    status: \"Scheduled\",\n    initData: config.initData,\n    runAs: config.runAs,\n    frequency: \"Recurring\",\n    restart: true,\n    rminutes: 1,\n    state: \"ended\",\n    startDate: startThis,\n    startHour: startThis.getHours(),\n    startMinute: startThis.getMinutes(),\n    startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n    endDate: endThis,\n    endHour: endThis.getHours(),\n    endMinute: endThis.getMinutes(),\n    endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\"\n};\nscheduler = require(\"../lib/scheduler/index.js\");\njobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");\nreturn jobCtrl.save(dbJob).then(j => {\n    dbJobWithId = j;\n});",
                            "err": {},
                            "uuid": "90ec058b-a199-4484-8f3d-d53f491cdeab",
                            "parentUUID": "3a415e33-fa7e-4044-bb55-681ff91eb055",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c5597036-30ba-411a-aec3-e7acadb9305a",
                            "title": "#addJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler Scheduled Jobs #addJob should add a job",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "6a6eeea2-ef39-4905-a9e9-d1a19aaaebec",
                                    "parentUUID": "c5597036-30ba-411a-aec3-e7acadb9305a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6a6eeea2-ef39-4905-a9e9-d1a19aaaebec"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "ca9435b1-fbf0-4dce-b467-80587723a472",
                            "title": "#loadAllJobsFromMongo",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [
                                {
                                    "title": "\"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//return jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString())",
                                    "err": {},
                                    "uuid": "f1aac169-3376-43fe-9eca-63730dd6fbf0",
                                    "parentUUID": "ca9435b1-fbf0-4dce-b467-80587723a472",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "tests": [
                                {
                                    "title": "should load the jobs from mongo",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo should load the jobs from mongo",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return scheduler.loadJobsFromMongo().then(loadedJobs => {\n    expect(loadedJobs.length).to.be.greaterThan(0);\n    expect(scheduler.listJobs()[dbJobWithId.id]).to.exist;\n});",
                                    "err": {},
                                    "uuid": "e2a16dda-e3cd-401b-b29e-5b1f9447dedb",
                                    "parentUUID": "ca9435b1-fbf0-4dce-b467-80587723a472",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e2a16dda-e3cd-401b-b29e-5b1f9447dedb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "2dc22d2a-6618-48c8-8af4-aee71d5af78b",
                            "title": "#listJobs",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "bdbb0636-57b7-4a79-9676-aac1d452f8f2",
                                    "parentUUID": "2dc22d2a-6618-48c8-8af4-aee71d5af78b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "b45adf96-3d7b-4cf7-b1a7-f45f3668288b",
                                    "parentUUID": "2dc22d2a-6618-48c8-8af4-aee71d5af78b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bdbb0636-57b7-4a79-9676-aac1d452f8f2",
                                "b45adf96-3d7b-4cf7-b1a7-f45f3668288b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "a6bb276e-4848-46a2-94c4-e40b13205615",
                            "title": "#getJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler Scheduled Jobs #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "29bf8f0c-923e-410f-bfc3-bf7f87a98884",
                                    "parentUUID": "a6bb276e-4848-46a2-94c4-e40b13205615",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "29bf8f0c-923e-410f-bfc3-bf7f87a98884"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "1c9dd39a-a3bf-4f45-9d01-9f35a8a30cdc",
                            "title": "#reschedule",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should reschedule the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #reschedule should reschedule the job",
                                    "timedOut": false,
                                    "duration": 305,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let oldStart = job.start;\n            job.start =  new Date(job.start.getTime() + 100);\n            job.end =   new Date(job.end.getTime() + 10000);\n            let rj = scheduler.rescheduleJob(job);\n            await delay(300);\n            let j = scheduler.getJobById(job._id);\n            expect(new Date(j.nextInvocation()).getTime()).to.be.greaterThan(oldStart.getTime());",
                                    "err": {},
                                    "uuid": "da63d193-66ac-4cb9-afcb-8af3d098d109",
                                    "parentUUID": "1c9dd39a-a3bf-4f45-9d01-9f35a8a30cdc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "da63d193-66ac-4cb9-afcb-8af3d098d109"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 305,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "a456c8d1-1163-40f0-af55-afa09f2d3f3b",
                            "title": "#cancel",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let cj = scheduler.cancelJob(job._id);\nlet jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.not.exist;",
                                    "err": {},
                                    "uuid": "1e7730c6-874a-4701-8237-54d35fc91f23",
                                    "parentUUID": "a456c8d1-1163-40f0-af55-afa09f2d3f3b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1e7730c6-874a-4701-8237-54d35fc91f23"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "61de63ec-0f43-4301-a78e-47d66d5744c9",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "a57ffb37-2a1e-40b0-ab45-8ff28bcbc30f",
                    "title": "Session Processor Tests",
                    "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                    "file": "/test/integration/sessionEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Session Processor Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10042,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let testConfig = await testLib.getTestConfig();\n       \nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"login\", {\n  token: \"abcd234\",\n  user:  {jwt_token: 'xxxxx', tenantId: testConfig.tenantOne.tenantId, sid: testConfig.tenantOne.adminUser.sid}\n})\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {\n        token: \"abcd234\",\n        user: {\n            sid: testConfig.tenantOne.adminUser.sid,\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\n\nforkedProcessor = await sessionStreamConsumer.forkStreamProcessor(tenant)\nawait delay(10000);",
                            "err": {},
                            "uuid": "991c2120-7554-4c25-94a3-83b8b774874f",
                            "parentUUID": "a57ffb37-2a1e-40b0-ab45-8ff28bcbc30f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Session Processor Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "d22aad73-513a-4472-aa05-9ef64b1d3bd3",
                            "parentUUID": "a57ffb37-2a1e-40b0-ab45-8ff28bcbc30f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "98200cfe-8b6b-4560-8ed1-b5f6d3c04def",
                            "title": "stream processor",
                            "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                            "file": "/test/integration/sessionEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "f1f985cc-1126-4f93-860b-6cac221a1036",
                                    "title": "reads from session stream",
                                    "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Session Processor Tests stream processor reads from session stream should process events",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "5651f3d2-aea3-4500-997a-c429f179d354",
                                            "parentUUID": "f1f985cc-1126-4f93-860b-6cac221a1036",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "5651f3d2-aea3-4500-997a-c429f179d354"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "02a30149-8e77-4d57-841b-5f33f3f11fda",
                                    "title": "handles events",
                                    "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should push events into REDIS activeSession set",
                                            "fullTitle": "Session Processor Tests stream processor handles events should push events into REDIS activeSession set",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions = await redis.zrangebyscoreAsync(`${tenant}.activeSessions`, \"-inf\", \"+inf\");\nconsole.log(sessions)\nexpect(sessions).to.exist;",
                                            "err": {},
                                            "uuid": "bd3e98da-6344-4ba2-9298-02ecf44507ee",
                                            "parentUUID": "02a30149-8e77-4d57-841b-5f33f3f11fda",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "bd3e98da-6344-4ba2-9298-02ecf44507ee"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "7e36606f-cd57-4f22-a7cc-34ca13c88696",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "d322c1f2-b9ea-428d-b560-fae799da8b61",
                    "title": "adminCategoryConfig.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminCategoryConfig.vue should render correctly",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=btn_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_editCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_deleteCategory]').exists()).to.equal(true);",
                            "err": {},
                            "uuid": "85ea9e3a-4a4c-422a-9907-09386feb2a9f",
                            "parentUUID": "d322c1f2-b9ea-428d-b560-fae799da8b61",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "85ea9e3a-4a4c-422a-9907-09386feb2a9f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b9ca1b21-02fc-4f47-b126-0927084b0327",
                    "title": "adminTreeAddObjectButton.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeAddObjectButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_addObject.exists()).to.be.true;",
                            "err": {},
                            "uuid": "8c9bc7ba-e53f-4d94-a3e8-c6c28ac5bc44",
                            "parentUUID": "b9ca1b21-02fc-4f47-b126-0927084b0327",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "8c9bc7ba-e53f-4d94-a3e8-c6c28ac5bc44"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "76eaf3dd-9c0e-437f-a81c-3161725921d4",
                    "title": "adminTreePermsButton.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreePermsButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_permsButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "25ce0a75-b9c8-4532-a215-341941263c79",
                            "parentUUID": "76eaf3dd-9c0e-437f-a81c-3161725921d4",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "25ce0a75-b9c8-4532-a215-341941263c79"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3122b697-572e-4a3e-a6cc-8ff63a6f37c7",
                    "title": "adminTreeViewButton.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeViewButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_viewButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "6b8c5b4b-f1b7-4d98-8805-914c6d3fe05f",
                            "parentUUID": "3122b697-572e-4a3e-a6cc-8ff63a6f37c7",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "6b8c5b4b-f1b7-4d98-8805-914c6d3fe05f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "aca7222f-0f89-4a9a-ae9c-2b79a799269d",
                    "title": "AddGroupDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "AddGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 94,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_AddGroupDialog.default);",
                            "err": {},
                            "uuid": "c62c534f-ec44-42b1-aec8-c664d7cd14c2",
                            "parentUUID": "aca7222f-0f89-4a9a-ae9c-2b79a799269d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c966263d-2781-492d-8e83-7c2864422e31",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "AddGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]')).to.exist;\nexpect(wrapper.find('[data-test=descField]')).to.exist;\nexpect(wrapper.find('[data-test=dynamicField]')).to.exist;\nexpect(wrapper.find('[data-test=sqlField]')).to.exist;",
                                    "err": {},
                                    "uuid": "d8eb300b-a8d1-4a21-820b-53f03b95fe32",
                                    "parentUUID": "c966263d-2781-492d-8e83-7c2864422e31",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save button disabled",
                                    "fullTitle": "AddGroupDialog.vue inital state save button disabled",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=saveButton]').element.disabled).to.equal(true);",
                                    "err": {},
                                    "uuid": "4c6c0224-b6e0-493a-a050-d8556b05f0b3",
                                    "parentUUID": "c966263d-2781-492d-8e83-7c2864422e31",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d8eb300b-a8d1-4a21-820b-53f03b95fe32",
                                "4c6c0224-b6e0-493a-a050-d8556b05f0b3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "627f2463-0d5b-4990-964f-b5c6e782eded",
                    "title": "EditGroupDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "EditGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 61,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\"\n};\nwrapper = (0, _mocks.initWrapper)(_EditGroupDialog.default, {\n  propsData: {\n    group\n  },\n  data() {\n    return {\n      activeTab: 0\n    };\n  },\n  store\n});",
                            "err": {},
                            "uuid": "a8a224e7-bfb0-45a9-8d23-41affe619cda",
                            "parentUUID": "627f2463-0d5b-4990-964f-b5c6e782eded",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bfa1fda6-470a-415c-83fe-f2d78b95f34f",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=descField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dynamicField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=sqlField]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "a4f21032-456e-48f1-bf6a-24953678c59e",
                                    "parentUUID": "bfa1fda6-470a-415c-83fe-f2d78b95f34f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "populates group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state populates group fields",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').element.value).to.equal(group.groupName);\nexpect(wrapper.find('[data-test=descField]').element.value).to.equal(group.groupDesc);\nexpect(wrapper.find('[data-test=sqlField]').element.value).to.equal(group.groupSql);",
                                    "err": {},
                                    "uuid": "d52dc42b-4a95-45bf-81ce-8cc7491e9d8b",
                                    "parentUUID": "bfa1fda6-470a-415c-83fe-f2d78b95f34f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a4f21032-456e-48f1-bf6a-24953678c59e",
                                "d52dc42b-4a95-45bf-81ce-8cc7491e9d8b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0c81115b-4e89-478e-976b-46604904a148",
                    "title": "GroupList.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 65,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_GroupList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "8038497f-fad5-4078-bcdb-c006408fb33f",
                            "parentUUID": "0c81115b-4e89-478e-976b-46604904a148",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ef4a3527-2c97-4549-8880-1556f0b56265",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "GroupList.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const toolbar = wrapper.find('[data-test=buttonBar]');\nexpect(toolbar.exists()).to.equal(true);\nconst buttons = toolbar.findAll('button');\nexpect(buttons.at(0).text()).to.equal('Add Group');\nexpect(buttons.at(1).text()).to.equal('Delete Group');\nexpect(buttons.at(1).props().disabled).to.equal(true);\nexpect(buttons.at(2).text()).to.equal('Set Roles & Permissions');",
                                    "err": {},
                                    "uuid": "105c930b-6b3e-4110-8797-ca6c8cbd5779",
                                    "parentUUID": "ef4a3527-2c97-4549-8880-1556f0b56265",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays list of groups",
                                    "fullTitle": "GroupList.vue inital state displays list of groups",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const table = wrapper.find('div.v-data-table');\nexpect(table.exists()).to.equal(true);\nconst rows = table.findAll('table > tbody > tr');\nconst adminRow = rows.at(0).findAll('td');\nconst userRow = rows.at(1).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(adminRow.at(3).text()).to.equal('Administrators'); // group name column\nexpect(userRow.at(3).text()).to.equal('Users');\nexpect(adminRow.at(5).text()).to.equal('No'); // dynamic column\nexpect(userRow.at(5).text()).to.equal('Yes');",
                                    "err": {},
                                    "uuid": "fdc9cb45-8f1c-4dc6-913f-459c817b0aa9",
                                    "parentUUID": "ef4a3527-2c97-4549-8880-1556f0b56265",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "105c930b-6b3e-4110-8797-ca6c8cbd5779",
                                "fdc9cb45-8f1c-4dc6-913f-459c817b0aa9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b13c7e14-2a72-4ee3-9703-bf96de3e503b",
                    "title": "GroupMembershipDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupMembershipDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 112,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\",\n  canManage: true,\n  canEdit: true\n};\nwrapper = (0, _mocks.initWrapper)(_GroupMembershipDialog.default, {\n  propsData: {\n    group\n  },\n  store\n});",
                            "err": {},
                            "uuid": "d8aed2ef-7700-4c1f-897d-69a774d2c8ad",
                            "parentUUID": "b13c7e14-2a72-4ee3-9703-bf96de3e503b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e3cd9d7b-dcc9-4a4b-b640-6036f0fb68ef",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "membership tables",
                                    "fullTitle": "GroupMembershipDialog.vue inital state membership tables",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const nonMembersTable = wrapper.find('[data-test=nonMembersTable]');\nconst membersTable = wrapper.find('[data-test=membersTable]');\nexpect(nonMembersTable.exists()).to.equal(true);\nexpect(membersTable.exists()).to.equal(true); // Non members table\nlet rows = nonMembersTable.findAll('table > tbody > tr');\nlet firstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(3);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-plus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('97'); // member id\nexpect(firstRow.at(4).text()).to.equal('Joe User'); // member name\nexpect(rows.at(2).find('i.mdi-account-multiple').exists()).to.equal(true); // check a group member row renders with the group icon\n// Members table\nrows = membersTable.findAll('table > tbody > tr');\nexpect(rows.length).to.equal(2);\nfirstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-minus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('98'); // member id\nexpect(firstRow.at(4).text()).to.equal('Integrify Services'); // member name",
                                    "err": {},
                                    "uuid": "ec22d57c-df97-42f5-9200-d9ea94387dfc",
                                    "parentUUID": "e3cd9d7b-dcc9-4a4b-b640-6036f0fb68ef",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ec22d57c-df97-42f5-9200-d9ea94387dfc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8c28d6b2-82d1-4723-8113-16ca758e53c5",
                    "title": "UserCreate.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserCreate.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 71,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserCreate.default, {\n  store\n});",
                            "err": {},
                            "uuid": "192fe581-51ed-41e2-b58d-8465f764eeb6",
                            "parentUUID": "8c28d6b2-82d1-4723-8113-16ca758e53c5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all necessary fields",
                            "fullTitle": "UserCreate.vue should display all necessary fields",
                            "timedOut": false,
                            "duration": 24,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['firstName', 'middleName', 'lastName', 'username', 'email', 'locale', 'timezone', 'language', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.text()).to.be.empty;\n});",
                            "err": {},
                            "uuid": "154ab1a6-b663-4f63-983d-bf044e45a7e1",
                            "parentUUID": "8c28d6b2-82d1-4723-8113-16ca758e53c5",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display cancel and save btns",
                            "fullTitle": "UserCreate.vue should display cancel and save btns",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "947b2bb4-57c8-4c0f-9bb5-357f1b03286e",
                            "parentUUID": "8c28d6b2-82d1-4723-8113-16ca758e53c5",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "154ab1a6-b663-4f63-983d-bf044e45a7e1",
                        "947b2bb4-57c8-4c0f-9bb5-357f1b03286e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ffdaa45e-db2c-43db-8938-a538123c463f",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 19,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// store = new Vuex.Store({modules: mockStore().modules})\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    },\n    actions: {\n      getUser: function () {\n        console.log('--- getUser()');\n        return { ..._mockedData.mockedUser\n        };\n      }\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEdit.default, {\n  store,\n  propsData: {\n    id: _mockedData.mockedUser.contactGuid\n  }\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "b62189a8-d0b9-423a-918d-1431de39daab",
                            "parentUUID": "ffdaa45e-db2c-43db-8938-a538123c463f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should always display page title",
                            "fullTitle": "UserEdit.vue should always display page title",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.text()).to.eq('Edit User');",
                            "err": {},
                            "uuid": "c011ca8c-e581-4644-a32c-317155651adf",
                            "parentUUID": "ffdaa45e-db2c-43db-8938-a538123c463f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not display form if loading",
                            "fullTitle": "UserEdit.vue should not display form if loading",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.false;",
                            "err": {},
                            "uuid": "d7c5948f-8e48-4efe-8db4-925360019073",
                            "parentUUID": "ffdaa45e-db2c-43db-8938-a538123c463f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display form and btns if user information present",
                            "fullTitle": "UserEdit.vue should display form and btns if user information present",
                            "timedOut": false,
                            "duration": 256,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.userLoading = false;\nawait wrapper.vm.$nextTick();\nconst form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.true;\n[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "7ae5461c-55d7-4308-9128-141a0f7957e7",
                            "parentUUID": "ffdaa45e-db2c-43db-8938-a538123c463f",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c011ca8c-e581-4644-a32c-317155651adf",
                        "d7c5948f-8e48-4efe-8db4-925360019073",
                        "7ae5461c-55d7-4308-9128-141a0f7957e7"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 257,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "77fa2bff-9e81-427e-913c-6279e6b46402",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 40,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditDelegation.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "432e9904-e82d-47d9-befd-2fbea71bc515",
                            "parentUUID": "77fa2bff-9e81-427e-913c-6279e6b46402",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEdit.vue should display all fields",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['delegate', 'processes'] // 'startDate', 'startTime', 'endDate', 'endTime'\n.forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n});",
                            "err": {},
                            "uuid": "2bca2614-80db-4626-a0bf-d798057ce133",
                            "parentUUID": "77fa2bff-9e81-427e-913c-6279e6b46402",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "2bca2614-80db-4626-a0bf-d798057ce133"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 15,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "811639e2-a5be-4af1-92ca-9bd5cf5fcbdb",
                    "title": "UserEditOrganizationalDetails.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditOrganizationalDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 39,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditOrganizationalDetails.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "1d19a5db-1bd7-4016-a1d1-c570a78e1729",
                            "parentUUID": "811639e2-a5be-4af1-92ca-9bd5cf5fcbdb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditOrganizationalDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 28,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['title', 'division', 'department', 'costCenter', 'location', 'phone', 'manager'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value || !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value).to.eq(_mockedData.mockedUser[fieldName]);\n  }\n});",
                            "err": {},
                            "uuid": "0a21a584-2174-47c8-b669-c255bbac8a5d",
                            "parentUUID": "811639e2-a5be-4af1-92ca-9bd5cf5fcbdb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "0a21a584-2174-47c8-b669-c255bbac8a5d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 28,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "05b405d2-8da5-4f46-b7ff-aa557ee550f2",
                    "title": "UserEditUserDetails.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditUserDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 89,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditUserDetails.default, {\n  store\n});",
                            "err": {},
                            "uuid": "4bbef960-d318-4ce9-98fa-d87eb111f66a",
                            "parentUUID": "05b405d2-8da5-4f46-b7ff-aa557ee550f2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display card title",
                            "fullTitle": "UserEditUserDetails.vue should display card title",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title');\nexpect(title.exists()).to.be.true;\nexpect(title.text()).contains('User Details');",
                            "err": {},
                            "uuid": "c8b8286d-f1fb-43c5-83f8-918748dd3d14",
                            "parentUUID": "05b405d2-8da5-4f46-b7ff-aa557ee550f2",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditUserDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 66,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['firstName', 'middleName', 'lastName', 'contactId', 'userName', 'email', 'address1', 'address2', 'city', 'state', 'zip', 'country', 'language', 'timezone', 'locale', 'cField1', 'cField2', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value && !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value.toString()).to.eq(_mockedData.mockedUser[fieldName].toString());\n  }\n});",
                            "err": {},
                            "uuid": "0efa6ae9-fd20-44ec-a100-bda5d8cd9bec",
                            "parentUUID": "05b405d2-8da5-4f46-b7ff-aa557ee550f2",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c8b8286d-f1fb-43c5-83f8-918748dd3d14",
                        "0efa6ae9-fd20-44ec-a100-bda5d8cd9bec"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 68,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "38a60f7c-5b7e-4bbe-b7e4-e7d1ba50e073",
                    "title": "UserFilterDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserFilterDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 64,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserFilterDialog.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "300cd23d-7d90-4acb-aeb5-d988e1210e87",
                            "parentUUID": "38a60f7c-5b7e-4bbe-b7e4-e7d1ba50e073",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "UserFilterDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 34,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title .headline');\nexpect(title.text()).to.eq('User Filters');\n['lastName', 'firstName', 'username', 'email', 'title', 'managerName', 'costCenter', 'country', 'department'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.element.value).to.be.empty;\n});",
                            "err": {},
                            "uuid": "e58eccbd-1837-4bac-a099-5f686c27d4b4",
                            "parentUUID": "38a60f7c-5b7e-4bbe-b7e4-e7d1ba50e073",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog on clicking Close btn",
                            "fullTitle": "UserFilterDialog.vue should close dialog on clicking Close btn",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.vm.showDialog).to.be.false;\nwrapper.vm.$store.state.users.showDialog = true;\nawait wrapper.vm.$nextTick();\nexpect(wrapper.vm.showDialog).to.be.true;\nconst closeBtn = wrapper.find('[data-test=closeBtn]');\nexpect(closeBtn.exists()).to.be.true;\nawait closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.actions.getUsers).to.have.been.called;",
                            "err": {},
                            "uuid": "24c071f3-0750-4fdc-b655-f79be61fee89",
                            "parentUUID": "38a60f7c-5b7e-4bbe-b7e4-e7d1ba50e073",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e58eccbd-1837-4bac-a099-5f686c27d4b4",
                        "24c071f3-0750-4fdc-b655-f79be61fee89"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 65,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9bfa8ab0-a2ab-4540-9ff1-79d588985c71",
                    "title": "UserList.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 56,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "e8f63b7f-3433-4040-9506-7e0f2b941eee",
                            "parentUUID": "9bfa8ab0-a2ab-4540-9ff1-79d588985c71",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should contain pageTitle and search input",
                            "fullTitle": "UserList.vue should contain pageTitle and search input",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nconst pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Users'); // searchInput\nconst searchInput = wrapper.get('input#searchText');\nexpect(searchInput.exists()).to.be.true;\nexpect(searchInput.text()).to.be.empty;",
                            "err": {},
                            "uuid": "11003cf1-3303-4fed-b8cb-32f194ea4ddf",
                            "parentUUID": "9bfa8ab0-a2ab-4540-9ff1-79d588985c71",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display toolbar buttons",
                            "fullTitle": "UserList.vue should display toolbar buttons",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'addUserBtn',\n  value: 'Add User'\n}, {\n  key: 'replaceUserBtn',\n  value: 'Replace User'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "0d35dcdc-440c-44a4-bab2-886b355d5067",
                            "parentUUID": "9bfa8ab0-a2ab-4540-9ff1-79d588985c71",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display list of users",
                            "fullTitle": "UserList.vue should display list of users",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const table = wrapper.find('[data-test=usersTable]');\nexpect(table.exists()).to.be.true;\nconst header = table.find('table > thead');\n['Last Name', 'First Name', 'Username', 'Email', 'Created', 'Last Updated', 'Active'].forEach(colName => {\n  expect(header.text()).contains(colName);\n});",
                            "err": {},
                            "uuid": "6b99dae8-6f6d-446d-89d1-fa8549adef95",
                            "parentUUID": "9bfa8ab0-a2ab-4540-9ff1-79d588985c71",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "11003cf1-3303-4fed-b8cb-32f194ea4ddf",
                        "0d35dcdc-440c-44a4-bab2-886b355d5067",
                        "6b99dae8-6f6d-446d-89d1-fa8549adef95"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                    "title": "users store actions",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "users store actions \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = { ..._users.default.state\n};",
                            "err": {},
                            "uuid": "fc1e209b-2e5f-4d97-9245-d927ef74e3ef",
                            "parentUUID": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook",
                            "fullTitle": "users store actions \"after each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "144d6d13-7043-4fc1-af0c-aa56f8f0fc24",
                            "parentUUID": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getUsers",
                            "fullTitle": "users store actions should getUsers",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getUsers({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS', [..._mockedData.mockedUsers]]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS_TOTAL', _mockedData.mockedUsers.length]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', false]);",
                            "err": {},
                            "uuid": "4540b66b-218c-4f0b-b72b-dea70ba470b7",
                            "parentUUID": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should getUser",
                            "fullTitle": "users store actions should getUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser\n};\nawait _actions.default.getUser({\n  commit,\n  state\n}, {\n  userGuid: user.contactGuid,\n  $commonLib: _commonLib.default\n});\nuser.active = !user.deletedDate;\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', user]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', false]);",
                            "err": {},
                            "uuid": "aab0d3b8-518f-4746-8b4d-bafe5444f1ea",
                            "parentUUID": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insertUser",
                            "fullTitle": "users store actions should insertUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.insertUser({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', _mockedData.mockedUser]);",
                            "err": {},
                            "uuid": "5d14fcac-d1f6-4af3-b235-30c0fbcb5a15",
                            "parentUUID": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should clearFiltersAndOptions",
                            "fullTitle": "users store actions should clearFiltersAndOptions",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_actions.default.clearFiltersAndOptions({\n  commit,\n  state\n});\n(0, _chai.expect)(commit.args).to.deep.eq([['CLEAR_FILTERS'], ['SET_LIST_OPTIONS']]);",
                            "err": {},
                            "uuid": "0e84324b-f6c1-46bc-b6ec-e05b142c6069",
                            "parentUUID": "fdd48f51-ed3c-49b6-8d92-a425a5c262df",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4540b66b-218c-4f0b-b72b-dea70ba470b7",
                        "aab0d3b8-518f-4746-8b4d-bafe5444f1ea",
                        "5d14fcac-d1f6-4af3-b235-30c0fbcb5a15",
                        "0e84324b-f6c1-46bc-b6ec-e05b142c6069"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6760afcd-2703-4a78-a4ae-a619f3f71716",
                    "title": "users store getters",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get users",
                            "fullTitle": "users store getters should get users",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.users = [..._mockedData.mockedUsers];\nconst users = _getters.default.users(state);\n(0, _chai.expect)(users).to.deep.equal(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "aca4bf71-f361-499e-89ea-59f7ce6f6d0c",
                            "parentUUID": "6760afcd-2703-4a78-a4ae-a619f3f71716",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get filterCount",
                            "fullTitle": "users store getters should get filterCount",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(0);\nstate.filters.lastName = 'foo';\nstate.filters.firstName = 'bar';\nstate.filters.costCenter = 'costCenter';\nstate.filters.country = '';\nstate.filters.activeOnly = true;\n(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(4);",
                            "err": {},
                            "uuid": "75a9f11d-7139-4f39-964b-08ec35816450",
                            "parentUUID": "6760afcd-2703-4a78-a4ae-a619f3f71716",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "aca4bf71-f361-499e-89ea-59f7ce6f6d0c",
                        "75a9f11d-7139-4f39-964b-08ec35816450"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                    "title": "users store mutations",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_USERS",
                            "fullTitle": "users store mutations should SET_USERS",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS(state, [..._mockedData.mockedUsers]);\n(0, _chai.expect)(state.users).to.deep.eq(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "756e3e59-0438-4525-ac1c-741b115eae8f",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USERS_TOTAL",
                            "fullTitle": "users store mutations should SET_USERS_TOTAL",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS_TOTAL(state, _mockedData.mockedUsers.length);\n(0, _chai.expect)(state.total).to.eq(_mockedData.mockedUsers.length);",
                            "err": {},
                            "uuid": "e50dec29-6180-4d78-bb96-02068e5aad35",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SEARCH",
                            "fullTitle": "users store mutations should SET_SEARCH",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const searchTxt = 'searching for something';\nSET_SEARCH(state, searchTxt);\n(0, _chai.expect)(state.search).to.eq(searchTxt);",
                            "err": {},
                            "uuid": "6a631305-49a3-47ce-a44c-44bcd5952d84",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_LOADING",
                            "fullTitle": "users store mutations should SET_LIST_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LIST_LOADING(state, true);\n(0, _chai.expect)(state.listLoading).to.eq(true);",
                            "err": {},
                            "uuid": "a202bfff-b118-41e7-8a06-82d50f17804c",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should CLEAR_FILTERS",
                            "fullTitle": "users store mutations should CLEAR_FILTERS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.filters = {\n  lastName: 'test last name',\n  firstName: 'first name',\n  userName: 'fooBar',\n  email: 'foo@bar.com',\n  title: 'my title',\n  managerName: 'manager name',\n  managerGuid: 123,\n  costCenter: 'cost center',\n  country: 'USM',\n  department: 'manager of managers',\n  activeOnly: true\n};\nCLEAR_FILTERS(state);\n(0, _chai.expect)(state.filters).to.deep.eq({\n  lastName: null,\n  firstName: null,\n  userName: null,\n  email: null,\n  title: null,\n  managerName: null,\n  managerGuid: null,\n  costCenter: null,\n  country: null,\n  department: null,\n  activeOnly: false\n});",
                            "err": {},
                            "uuid": "04437f07-6222-42f6-be37-c3aeb7d6a95d",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_OPTIONS",
                            "fullTitle": "users store mutations should SET_LIST_OPTIONS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const listOptions = {\n  sortBy: ['firstName'],\n  sortDesc: [true],\n  page: 2\n};\nSET_LIST_OPTIONS(state, listOptions);\n(0, _chai.expect)(state.listOptions).to.deep.eq(listOptions); // clear listOptions\nSET_LIST_OPTIONS(state);\n(0, _chai.expect)(state.listOptions).to.deep.eq({\n  sortBy: [],\n  sortDesc: [],\n  page: 1\n});",
                            "err": {},
                            "uuid": "75f43553-3c69-4d58-a792-61bb8cb874f8",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "users store mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.eq(true);",
                            "err": {},
                            "uuid": "c4edc1b4-bbab-4ce3-bcf9-b06d61587229",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USER_LOADING",
                            "fullTitle": "users store mutations should SET_USER_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USER_LOADING(state, false);\n(0, _chai.expect)(state.userLoading).to.be.false;",
                            "err": {},
                            "uuid": "49d735b8-0ebf-435a-b6e5-57d222893b53",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_IS_CHECKING_USERNAME",
                            "fullTitle": "users store mutations should SET_IS_CHECKING_USERNAME",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_IS_CHECKING_USERNAME(state, true);\n(0, _chai.expect)(state.isCheckingUsername).to.be.true;",
                            "err": {},
                            "uuid": "2e947ff1-b818-47bc-9310-3585e06281f9",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_USER",
                            "fullTitle": "users store mutations should SET_SELECTED_USER",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser,\n  password: 'testPwd',\n  confirmPassword: 'testPwd'\n};\nSET_SELECTED_USER(state, user);\n(0, _chai.expect)(state.selectedUser).to.deep.eq(user); // when no user specified\nSET_SELECTED_USER(state);\n(0, _chai.expect)(state.selectedUser).to.deep.eq({\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  userName: '',\n  email: '',\n  locale: 'en-US',\n  timezone: '',\n  languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460',\n  // US English\n  password: '',\n  confirmPassword: ''\n});",
                            "err": {},
                            "uuid": "2acdb5c6-7577-4032-85da-d36c78f518e0",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LOCALES",
                            "fullTitle": "users store mutations should SET_LOCALES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LOCALES(state, [..._mockedData.mockedLocales]);\n(0, _chai.expect)(state.locales).to.deep.eq(_mockedData.mockedLocales);\nSET_LOCALES(state);\n(0, _chai.expect)(state.locales).to.deep.eq([]);\nSET_LOCALES(state, []);\n(0, _chai.expect)(state.locales).to.deep.eq([]);",
                            "err": {},
                            "uuid": "bb649179-146f-461d-8584-d102a5115979",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_DELEGATION_START_DATE",
                            "fullTitle": "users store mutations should SET_DELEGATION_START_DATE",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const date = '2020-01-12';\nSET_SELECTED_USER(state, { ..._mockedData.mockedUser\n});\nSET_DELEGATION_START_DATE(state, date);\n(0, _chai.expect)(state.selectedUser.delegate.startDate).to.eq(date);",
                            "err": {},
                            "uuid": "a5861c41-8df6-4afb-baca-41f7f191ea19",
                            "parentUUID": "3a3359d4-5c5e-4fb5-bdf9-6196d769ea49",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "756e3e59-0438-4525-ac1c-741b115eae8f",
                        "e50dec29-6180-4d78-bb96-02068e5aad35",
                        "6a631305-49a3-47ce-a44c-44bcd5952d84",
                        "a202bfff-b118-41e7-8a06-82d50f17804c",
                        "04437f07-6222-42f6-be37-c3aeb7d6a95d",
                        "75f43553-3c69-4d58-a792-61bb8cb874f8",
                        "c4edc1b4-bbab-4ce3-bcf9-b06d61587229",
                        "49d735b8-0ebf-435a-b6e5-57d222893b53",
                        "2e947ff1-b818-47bc-9310-3585e06281f9",
                        "2acdb5c6-7577-4032-85da-d36c78f518e0",
                        "bb649179-146f-461d-8584-d102a5115979",
                        "a5861c41-8df6-4afb-baca-41f7f191ea19"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "734bea95-595a-43f2-9e2d-04cc5bb4ee1c",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "7e684a02-1dec-440e-85a8-d0c338abb443",
                    "title": "recentlyVisited",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/commonLib/tests/unit/bookmarks.spec.js",
                    "file": "/tests/unit/bookmarks.spec.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"recentlyVisited\"",
                            "fullTitle": "recentlyVisited \"before each\" hook in \"recentlyVisited\"",
                            "timedOut": false,
                            "duration": 32,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const dom = new JSDOM(\"<html>\\n       <body>\\n          <div class=\\\"v-toolbar__title hidden-sm-and-down\\\">Holidays</div>\\n       </body>\\n     </html>\");\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.location = {\n  hostname: hostname\n};",
                            "err": {},
                            "uuid": "208c825d-9fab-4432-b358-d491f708e377",
                            "parentUUID": "7e684a02-1dec-440e-85a8-d0c338abb443",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "adds to recently visted history",
                            "fullTitle": "recentlyVisited adds to recently visted history",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const bookmarks = require('./mocks/bookmarks');\nexpect(bookmarks.recentlyVisited).to.be.empty;\nawait bookmarks.addRecentlyVisited();\nexpect(bookmarks.recentlyVisited.length).to.equal(1);\nexpect(bookmarks.recentlyVisited[0].label).to.equal('Holidays');\nexpect(bookmarks.recentlyVisited[0].icon).to.equal('mdi-calendar-month');",
                            "err": {},
                            "uuid": "b17d5931-ed91-4af5-ada0-6df69cb3587e",
                            "parentUUID": "7e684a02-1dec-440e-85a8-d0c338abb443",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "b17d5931-ed91-4af5-ada0-6df69cb3587e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 14,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "89647980-600b-4a52-9f3f-0457728f44a1",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "8481051f-4c0b-4dc1-b929-621d4ec9d295",
                    "title": "CategorySelect.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelect.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 129,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelect.CategorySelect, {\n  showDialog: false\n});",
                            "err": {},
                            "uuid": "f5befb3f-37ce-4886-91ba-068acda902f9",
                            "parentUUID": "8481051f-4c0b-4dc1-b929-621d4ec9d295",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "eee754cd-d0e3-4a38-bb79-db2ebea3b5d7",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelect.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=input_categorySelect]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_categorySelect]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "d591c7f5-9d76-479a-b9fb-917bac039fb5",
                                    "parentUUID": "eee754cd-d0e3-4a38-bb79-db2ebea3b5d7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d591c7f5-9d76-479a-b9fb-917bac039fb5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "aea00450-3e25-4b21-bcff-501e08d93d24",
                    "title": "CategorySelectDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelectDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 57,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelectDialog.default, {\n  items: _mockedCategoryResponse.default\n});",
                            "err": {},
                            "uuid": "970b93e6-a784-43d6-8cde-f6a3706d9d3b",
                            "parentUUID": "aea00450-3e25-4b21-bcff-501e08d93d24",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1238df8e-7431-4956-a135-f2a400a9786f",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelectDialog.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "4d9aadac-9899-44cb-b44c-ec622263da1c",
                                    "parentUUID": "1238df8e-7431-4956-a135-f2a400a9786f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4d9aadac-9899-44cb-b44c-ec622263da1c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c67dc33b-8041-4bbd-a790-f9421e813993",
                    "title": "CategoryTreeTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategoryTreeTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 26,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategoryTreeTable.CategoryTreeTable, {\n  objectType: 'forms',\n  objectData: _mockedData.mockedObjectData,\n  items: _mockedCategoryResponse.mockedCategoryResponse\n});",
                            "err": {},
                            "uuid": "7e160000-c700-46ef-9244-181c73ff2e90",
                            "parentUUID": "c67dc33b-8041-4bbd-a790-f9421e813993",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "58c12a5b-e0e3-41af-a80b-2f0dfda55560",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategoryTreeTable.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=objectCatTree_permsButtonComponent]').exists()).to.equal(false);\nexpect(wrapper.find('[data-test=objectCatTree_datatable]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "d69b35da-6a1d-4fc3-988e-3ad314058058",
                                    "parentUUID": "58c12a5b-e0e3-41af-a80b-2f0dfda55560",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d69b35da-6a1d-4fc3-988e-3ad314058058"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "274e2d3c-7f6a-4fc6-9dc9-60de133ff557",
                    "title": "Report.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "Report.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 103,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.Report);\ndocument.body.setAttribute('data-app', true);",
                            "err": {},
                            "uuid": "14562eea-b7fb-4ebc-97b0-775ca3519ea1",
                            "parentUUID": "274e2d3c-7f6a-4fc6-9dc9-60de133ff557",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "efaf087b-0223-449a-ad36-eb5d1bb678e6",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "Report.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button i.mdi-refresh').exists()).to.equal(true);\nexpect(wrapper.find('button i.mdi-filter-plus-outline').exists()).to.equal(true);\nexpect(wrapper.find('button.mdi-export').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "45f2bfc2-a37f-463d-a025-05f21c67f18b",
                                    "parentUUID": "efaf087b-0223-449a-ad36-eb5d1bb678e6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays report name",
                                    "fullTitle": "Report.vue inital state displays report name",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('.v-toolbar__title').text()).to.equal('Report - Update profile tasks');",
                                    "err": {},
                                    "uuid": "d9fa8fbd-75ec-451e-83e0-a75a6773258d",
                                    "parentUUID": "efaf087b-0223-449a-ad36-eb5d1bb678e6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "45f2bfc2-a37f-463d-a025-05f21c67f18b",
                                "d9fa8fbd-75ec-451e-83e0-a75a6773258d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ec00bd65-c7bf-486a-9447-10e7ee1a9767",
                    "title": "ReportTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "ReportTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 78,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.ReportTable, {\n  propsData: {\n    report: _mockedData.mockedFormattedReport\n  }\n});",
                            "err": {},
                            "uuid": "83913983-d024-44db-bcac-1dec00c67bc7",
                            "parentUUID": "ec00bd65-c7bf-486a-9447-10e7ee1a9767",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "757a6937-eda2-4791-99ce-2940104dc956",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders column headers",
                                    "fullTitle": "ReportTable.vue inital state renders column headers",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const headers = wrapper.findAll('th');\nconst expectedHeaders = [\"Request Link\", \"Username\", \"ID For Manage Task\", \"Status\", \"Time from Start to Complete\", \"Date Completed\", \"Manager ID\", \"System ID\", \"Name\"];\nexpectedHeaders.forEach((title, i) => expect(headers.at(i).text()).to.equal(title));",
                                    "err": {},
                                    "uuid": "2feeca6a-1474-4a25-b209-283b1fc8acae",
                                    "parentUUID": "757a6937-eda2-4791-99ce-2940104dc956",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "renders links with the correct icons",
                                    "fullTitle": "ReportTable.vue inital state renders links with the correct icons",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const firstRow = wrapper.find('tbody > tr').findAll('td');\nexpect(firstRow.length).to.equal(9);\nexpect(firstRow.at(0).find('button.mdi-magnify').exists()).to.equal(true); // Request link\nexpect(firstRow.at(1).text()).to.equal('juser'); // Username\nexpect(firstRow.at(2).find('.mdi-menu-open').exists()).to.equal(true); // Manage Task menu icon\nexpect(firstRow.at(2).find('.v-menu').exists()).to.equal(true); // manage task menu\nexpect(firstRow.at(3).text()).to.equal('Completed'); // status\nexpect(firstRow.at(5).text()).to.equal('2/24/2021'); // date completed\nexpect(firstRow.at(6).text()).to.equal('1'); // manager id\nexpect(firstRow.at(7).find('button.mdi-magnify').exists()).to.equal(true); // link to Task\nexpect(firstRow.at(8).text()).to.equal('System Task - Update Profile'); // task name",
                                    "err": {},
                                    "uuid": "5ea1a1a7-4b19-4307-a845-6c77f6be1e6c",
                                    "parentUUID": "757a6937-eda2-4791-99ce-2940104dc956",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2feeca6a-1474-4a25-b209-283b1fc8acae",
                                "5ea1a1a7-4b19-4307-a845-6c77f6be1e6c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "3664e975-b2bc-4668-b02b-cbadbf076cd6",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
                {
                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                    "fullTitle": "commits SET_SELECTED_FOR_EDIT mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                    "err": {},
                    "uuid": "501b57a4-a1b2-445f-b395-c3df71288d3b",
                    "parentUUID": "3664e975-b2bc-4668-b02b-cbadbf076cd6",
                    "isHook": false,
                    "skipped": true
                },
                {
                    "title": "commits SET_SHOW_DIALOG mutation",
                    "fullTitle": "commits SET_SHOW_DIALOG mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                    "err": {},
                    "uuid": "e6b81b7c-8a1b-4692-ab37-b48fa4c86f54",
                    "parentUUID": "3664e975-b2bc-4668-b02b-cbadbf076cd6",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "2caf7054-841e-4d80-aead-e36cd87f5381",
                    "title": "PasswordSettings.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "renders correctly",
                            "fullTitle": "PasswordSettings.vue renders correctly",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(pwdSettingsApi.listPasswordSettings).to.have.been.called;\nexpect(pwdExpirationActiveCheckBox).to.be.exist;\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(false);\nexpect(pwdExpirationTextBox).to.be.exist;\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal('disabled');\nexpect(pwdExpirationTextBox.element.value).to.equal('7');\nexpect(pwdStrengthActiveCheckBox).to.be.exist;\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(false);\nexpect(minPwdLengthTextBox).to.be.exist;\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(minPwdLengthTextBox.element.value).to.equal('3');\nexpect(maxPwdLengthTextBox).to.be.exist;\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(maxPwdLengthTextBox.element.value).to.equal('10');\nexpect(pwdStrengthExpressionTextBox).to.be.exist;\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal('disabled'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton).to.be.exist;\nexpect(restoreButton.attributes('disabled')).to.equal('disabled');\nexpect(wrapper.find('button#save')).to.be.exist;",
                            "err": {},
                            "uuid": "a853d566-31c1-44a8-bc45-459b0d2f4223",
                            "parentUUID": "2caf7054-841e-4d80-aead-e36cd87f5381",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [
                        {
                            "uuid": "4d4a57d9-1c52-4fc9-a5de-74dbc76a71ab",
                            "title": "checkboxes enabling textboxes",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdExpirationActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(true);\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "486eb1d0-e55e-4fa7-aa63-3f9a0d3ae311",
                                    "parentUUID": "4d4a57d9-1c52-4fc9-a5de-74dbc76a71ab",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(true);\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal(undefined);\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "90883883-a7fd-4a2a-9db0-0458e5c5859b",
                                    "parentUUID": "4d4a57d9-1c52-4fc9-a5de-74dbc76a71ab",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "486eb1d0-e55e-4fa7-aa63-3f9a0d3ae311",
                                "90883883-a7fd-4a2a-9db0-0458e5c5859b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bd1afbee-c24c-44c4-9155-bf04809e36bd",
                            "title": "password length change effects on strength regular expression",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "correctly adjusts strength expression when min pwd length changes",
                                    "fullTitle": "PasswordSettings.vue password length change effects on strength regular expression correctly adjusts strength expression when min pwd length changes",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nminPwdLengthTextBox.element.value = '4';\nminPwdLengthTextBox.trigger('input');\nmaxPwdLengthTextBox.element.value = '11';\nmaxPwdLengthTextBox.trigger('input');\nawait wrapper.vm.$nextTick(); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "588cd137-68a8-425a-a999-e775de60dd2d",
                                    "parentUUID": "bd1afbee-c24c-44c4-9155-bf04809e36bd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "588cd137-68a8-425a-a999-e775de60dd2d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a20a142d-3483-45cc-a487-6e98b757dc03",
                            "title": "restore default password strength",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "restores default password strength values when restore button is clicked",
                                    "fullTitle": "PasswordSettings.vue restore default password strength restores default password strength values when restore button is clicked",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nawait wrapper.find('button#restoreDefaultPwdStrengthExpression').trigger('click'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');",
                                    "err": {},
                                    "uuid": "ffe91b09-7139-486a-bcb9-c6be288cb2de",
                                    "parentUUID": "a20a142d-3483-45cc-a487-6e98b757dc03",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ffe91b09-7139-486a-bcb9-c6be288cb2de"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9316eafe-9ea7-4c70-a676-af5aea9b5f52",
                            "title": "save password settings",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "calls updatePasswordSettings with correct params when Save button is clicked",
                                    "fullTitle": "PasswordSettings.vue save password settings calls updatePasswordSettings with correct params when Save button is clicked",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(pwdExpirationActiveCheckBox.element.checked).to.equal(true); // change some settings in ui. make sure api call has correct params when saved\npwdExpirationTextBox.setValue('10');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nwrapper.find('button#save').trigger('click');\nexpect(pwdSettingsApi.updatePasswordSettings).to.have.been.called;\nconst requestBody = pwdSettingsApi.updatePasswordSettings.args[0][1].requestBody;\nexpect(requestBody).to.be.ok;\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('10');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH').settingsValue).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "0f9ab4e7-de60-4610-b260-e603ef6e2604",
                                    "parentUUID": "9316eafe-9ea7-4c70-a676-af5aea9b5f52",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0f9ab4e7-de60-4610-b260-e603ef6e2604"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [
                        "a853d566-31c1-44a8-bc45-459b0d2f4223"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2803cb9b-1c5a-4f5a-97a3-4c9b5d7bc69b",
                    "title": "BiztimeDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimeDialog.vue\"",
                            "fullTitle": "BiztimeDialog.vue \"before each\" hook in \"BiztimeDialog.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "738b5304-56f8-46b9-b7c0-374bccedef67",
                            "parentUUID": "2803cb9b-1c5a-4f5a-97a3-4c9b5d7bc69b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimeDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// console.log('-- dd:', wrapper.vm.$store.state.biztimes.selectedForEdit);\n// headline\nconst headline = wrapper.find('span.headline');\nexpect(headline.exists()).to.be.true;\nexpect(headline.text()).to.eq(`Edit Business Hours for ${biztime.dayOfWeek}`); // inputs\nexpect(startTimeRef.value).to.deep.equal(biztime.startTime);\nexpect(endTimeRef.value).to.deep.equal(biztime.endTime);\nexpect(activeRef.inputValue).to.equal(biztime.active); // btns\nexpect(saveBtn.exists()).to.be.true;\nexpect(closeBtn.exists()).to.be.true;",
                            "err": {},
                            "uuid": "a6991153-41f6-48bf-9fe3-69d167d977b5",
                            "parentUUID": "2803cb9b-1c5a-4f5a-97a3-4c9b5d7bc69b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save biztime",
                            "fullTitle": "BiztimeDialog.vue should save biztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await saveBtn.trigger('click');\nexpect(mockstore.actions.saveBiztime).to.have.been.called;",
                            "err": {},
                            "uuid": "48f711d1-90c0-41b7-994c-f64d93851f1d",
                            "parentUUID": "2803cb9b-1c5a-4f5a-97a3-4c9b5d7bc69b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog",
                            "fullTitle": "BiztimeDialog.vue should close dialog",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.calledWith(store.state.biztimes, {});",
                            "err": {},
                            "uuid": "03363052-9213-4da9-aa3a-23c8ccd074a2",
                            "parentUUID": "2803cb9b-1c5a-4f5a-97a3-4c9b5d7bc69b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a6991153-41f6-48bf-9fe3-69d167d977b5",
                        "48f711d1-90c0-41b7-994c-f64d93851f1d",
                        "03363052-9213-4da9-aa3a-23c8ccd074a2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e861985d-c3f2-4f75-805c-b6b878683815",
                    "title": "BiztimesTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimesTable.vue\"",
                            "fullTitle": "BiztimesTable.vue \"before each\" hook in \"BiztimesTable.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "096c5646-867f-4e2b-9f6d-8e7a4e6c5c96",
                            "parentUUID": "e861985d-c3f2-4f75-805c-b6b878683815",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimesTable.vue should render correctly",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Business Hours'); // link to set permissions\nexpect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true); // getBiztimes\nexpect(mockstore.actions.getBiztimes).to.have.been.called;",
                            "err": {},
                            "uuid": "12192bd2-4608-49f2-8551-6503c8795106",
                            "parentUUID": "e861985d-c3f2-4f75-805c-b6b878683815",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "12192bd2-4608-49f2-8551-6503c8795106"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b3aad689-2c54-4b77-bb58-29b5369574e9",
                    "title": "HolidaysTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6bee293f-6481-481b-ad47-9ed6d711334f",
                            "title": "initial state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook",
                                    "fullTitle": "HolidaysTable.vue initial state \"before each\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_HolidaysTable.default, {\n  store\n});",
                                    "err": {},
                                    "uuid": "dd3bbbc2-0cee-4027-b2c5-75566f59de4a",
                                    "parentUUID": null,
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e8e623b2-7647-40b7-b6e4-26d5542e9eb4",
                    "title": "Menu.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Menu.vue\"",
                            "fullTitle": "Menu.vue \"before each\" hook in \"Menu.vue\"",
                            "timedOut": false,
                            "duration": 28,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n}); // data-app prevents warning during test: [Vuetify] Unable to locate target [data-app]\n// https://forum.vuejs.org/t/vuetify-data-app-true-and-problems-rendering-v-dialog-in-unit-tests/27495\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");",
                            "err": {},
                            "uuid": "2da7e09e-de5e-4de1-8126-ef1d2a67cd52",
                            "parentUUID": "e8e623b2-7647-40b7-b6e4-26d5542e9eb4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3fb7bbee-d789-48ff-a10a-d4d9093c7738",
                            "title": "initial state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Menu.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 78,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "bce986d7-d41c-4380-8629-d99cddd3191c",
                                    "parentUUID": "3fb7bbee-d789-48ff-a10a-d4d9093c7738",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Menu.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 69,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('[data-test=\"setPermissionsMobile\"').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "f084076c-de19-4de4-9b57-c8f970b1b5a0",
                                    "parentUUID": "3fb7bbee-d789-48ff-a10a-d4d9093c7738",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Menu.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.exists()).to.equal(true);\n  expect(deleteButton.attributes('disabled')).to.not.be.undefined;\n  done();\n});",
                                    "err": {},
                                    "uuid": "65232ee4-d745-496c-99e0-b7097ad70f4b",
                                    "parentUUID": "3fb7bbee-d789-48ff-a10a-d4d9093c7738",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bce986d7-d41c-4380-8629-d99cddd3191c",
                                "f084076c-de19-4de4-9b57-c8f970b1b5a0",
                                "65232ee4-d745-496c-99e0-b7097ad70f4b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 211,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6e65e13c-d93a-427d-9f78-200983384f78",
                            "title": "Menu item clicks",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add holiday button click",
                                    "fullTitle": "Menu.vue Menu item clicks add holiday button click",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  wrapper.find('button#addHolidayMobile').trigger('click');\n  it('commits SET_SELECTED_FOR_EDIT mutation', () => {\n    expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;\n  });\n  it('commits SET_SHOW_DIALOG mutation', () => {\n    expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\n  });\n  done();\n});",
                                    "err": {},
                                    "uuid": "fee56870-731b-43db-9bef-04978c57c24a",
                                    "parentUUID": "6e65e13c-d93a-427d-9f78-200983384f78",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Menu.vue Menu item clicks enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n});\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");\nmenuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.attributes('disabled')).to.equal(undefined);\n  done();\n});",
                                    "err": {},
                                    "uuid": "ec925b85-6318-49a9-a359-916490a7be76",
                                    "parentUUID": "6e65e13c-d93a-427d-9f78-200983384f78",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fee56870-731b-43db-9bef-04978c57c24a",
                                "ec925b85-6318-49a9-a359-916490a7be76"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 167,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f5cac3df-6e51-470c-af33-42d8dd589454",
                    "title": "Toolbar.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "579eaa02-7e92-492d-9a73-69a6831afe7d",
                            "title": "initial state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"initial state\"",
                                    "fullTitle": "Toolbar.vue initial state \"before each\" hook in \"initial state\"",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "874b2b69-4d81-4083-9e75-180d644cf73a",
                                    "parentUUID": "579eaa02-7e92-492d-9a73-69a6831afe7d",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Toolbar.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button#addHoliday').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "ffa1b3e7-c27a-4152-acfd-b4e498ae883a",
                                    "parentUUID": "579eaa02-7e92-492d-9a73-69a6831afe7d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Toolbar.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "d6d01c35-1a9e-4a1e-8eab-7a9a8cece5d0",
                                    "parentUUID": "579eaa02-7e92-492d-9a73-69a6831afe7d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Toolbar.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.exists()).to.equal(true);\nexpect(deleteButton.attributes('disabled')).to.equal('disabled');",
                                    "err": {},
                                    "uuid": "1beb8711-4bf6-4a5f-8e82-d699f18b0ad2",
                                    "parentUUID": "579eaa02-7e92-492d-9a73-69a6831afe7d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ffa1b3e7-c27a-4152-acfd-b4e498ae883a",
                                "d6d01c35-1a9e-4a1e-8eab-7a9a8cece5d0",
                                "1beb8711-4bf6-4a5f-8e82-d699f18b0ad2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6baa5f6b-2e70-4778-9c09-059594f625b9",
                            "title": "add holiday button click",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"add holiday button click\"",
                                    "fullTitle": "Toolbar.vue add holiday button click \"before each\" hook in \"add holiday button click\"",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "mockstore = (0, _store.mockStore)();\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\nwrapper.find('button#addHoliday').trigger('click');",
                                    "err": {},
                                    "uuid": "527517dd-98c1-4732-a4e2-2a9c84aba847",
                                    "parentUUID": "6baa5f6b-2e70-4778-9c09-059594f625b9",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SELECTED_FOR_EDIT mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                                    "err": {},
                                    "uuid": "ed2c1d1d-20b8-4e0d-99c1-cac486dae81a",
                                    "parentUUID": "6baa5f6b-2e70-4778-9c09-059594f625b9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "commits SET_SHOW_DIALOG mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SHOW_DIALOG mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                                    "err": {},
                                    "uuid": "e3066a5c-1dba-45e4-be19-9174af6725ee",
                                    "parentUUID": "6baa5f6b-2e70-4778-9c09-059594f625b9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ed2c1d1d-20b8-4e0d-99c1-cac486dae81a",
                                "e3066a5c-1dba-45e4-be19-9174af6725ee"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a2d91785-673f-4473-bdb9-fd077857693f",
                            "title": "holidays have been selected for deletion",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"holidays have been selected for deletion\"",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion \"before each\" hook in \"holidays have been selected for deletion\"",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nmockstore = (0, _store.mockStore)({\n  state\n});\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "aea2c9f8-e87b-473c-b709-8b7aac90bace",
                                    "parentUUID": "a2d91785-673f-4473-bdb9-fd077857693f",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "9717f959-4e95-4398-81ac-d8cb4cc39b8b",
                                    "parentUUID": "a2d91785-673f-4473-bdb9-fd077857693f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "dispatches delete_holidays action when delete holidays button is clicked",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion dispatches delete_holidays action when delete holidays button is clicked",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "deleteButton.trigger('click');\nexpect(mockstore.actions.delete_holidays).to.have.been.called;",
                                    "err": {},
                                    "uuid": "0ee773ae-3e28-4a72-a3c4-64d9b55eec3a",
                                    "parentUUID": "a2d91785-673f-4473-bdb9-fd077857693f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9717f959-4e95-4398-81ac-d8cb4cc39b8b",
                                "0ee773ae-3e28-4a72-a3c4-64d9b55eec3a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6a28bc7d-8e59-49f8-93dd-3901c31cb7d7",
                    "title": "biztime actions",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"before each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = {};",
                            "err": {},
                            "uuid": "1e54f39f-3a93-4200-a292-8f7ed8b0fb1a",
                            "parentUUID": "6a28bc7d-8e59-49f8-93dd-3901c31cb7d7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"after each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "f0f1b56a-325a-489e-a6e4-9a68657f8229",
                            "parentUUID": "6a28bc7d-8e59-49f8-93dd-3901c31cb7d7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getBiztimes",
                            "fullTitle": "biztime actions should getBiztimes",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getBiztimes({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]]]);",
                            "err": {},
                            "uuid": "98ded8c0-4184-4f96-a9fe-0a8ab93fb256",
                            "parentUUID": "6a28bc7d-8e59-49f8-93dd-3901c31cb7d7",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should saveBiztime",
                            "fullTitle": "biztime actions should saveBiztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.saveBiztime({\n  commit,\n  state\n}, { ..._list.default[0],\n  $commonLib: _commonLib.default\n});\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]], ['SET_SELECTED_FOR_EDIT', {}], ['SET_SHOW_DIALOG', false]]);",
                            "err": {},
                            "uuid": "058989a4-03db-4c73-87fc-c1cedfc01d7e",
                            "parentUUID": "6a28bc7d-8e59-49f8-93dd-3901c31cb7d7",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "98ded8c0-4184-4f96-a9fe-0a8ab93fb256",
                        "058989a4-03db-4c73-87fc-c1cedfc01d7e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 3,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "83b801c2-4b89-434f-a9a0-c578f5153cf4",
                    "title": "biztime getters",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get biztimes",
                            "fullTitle": "biztime getters should get biztimes",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const state = {\n  biztimes: JSON.parse(JSON.stringify(_list.default))\n};\nconst biztimes = _getters.default.biztimes(state);\n(0, _chai.expect)(biztimes).not.to.deep.equal(_list.default);\nbiztimes.forEach(biztime => {\n  const startTime = {\n    hour: biztime.startHour,\n    minute: biztime.startMinute\n  };\n  const endTime = {\n    hour: biztime.endHour,\n    minute: biztime.endMinute\n  };\n  (0, _chai.expect)(biztime.startTime).to.deep.equal(startTime);\n  (0, _chai.expect)(biztime.endTime).to.deep.equal(endTime);\n});",
                            "err": {},
                            "uuid": "b5e37da0-28fb-427c-ad5b-e7425e1fd8b4",
                            "parentUUID": "83b801c2-4b89-434f-a9a0-c578f5153cf4",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "b5e37da0-28fb-427c-ad5b-e7425e1fd8b4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "885c26ae-3dac-4909-b6d9-461dda7dd465",
                    "title": "biztime mutations",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_BIZTIMES",
                            "fullTitle": "biztime mutations should SET_BIZTIMES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_BIZTIMES(state, [..._list.default]);\n(0, _chai.expect)(state.biztimes).to.deep.equal(_list.default);",
                            "err": {},
                            "uuid": "bb594c3f-41ba-4112-b8f1-6f9694e0de34",
                            "parentUUID": "885c26ae-3dac-4909-b6d9-461dda7dd465",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_FOR_EDIT",
                            "fullTitle": "biztime mutations should SET_SELECTED_FOR_EDIT",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SELECTED_FOR_EDIT(state, _list.default[0]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[0]);\nSET_SELECTED_FOR_EDIT(state, _list.default[3]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[3]);",
                            "err": {},
                            "uuid": "3e542bfe-9e77-4289-93be-6db3a0c2cccc",
                            "parentUUID": "885c26ae-3dac-4909-b6d9-461dda7dd465",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "biztime mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.equal(true);\nSET_SHOW_DIALOG(state, false);\n(0, _chai.expect)(state.showDialog).to.equal(false);",
                            "err": {},
                            "uuid": "776b9ee4-3697-44a9-9486-97285b66ca70",
                            "parentUUID": "885c26ae-3dac-4909-b6d9-461dda7dd465",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "bb594c3f-41ba-4112-b8f1-6f9694e0de34",
                        "3e542bfe-9e77-4289-93be-6db3a0c2cccc",
                        "776b9ee4-3697-44a9-9486-97285b66ca70"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "501b57a4-a1b2-445f-b395-c3df71288d3b",
                "e6b81b7c-8a1b-4692-ab37-b48fa4c86f54"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        }
    ],
    "meta": {
        "mocha": {
            "version": "8.1.1"
        },
        "mochawesome": {
            "options": {
                "quiet": false,
                "reportFilename": "mochawesome",
                "saveHtml": true,
                "saveJson": true,
                "consoleReporter": "spec",
                "useInlineDiffs": false,
                "code": true
            },
            "version": "6.1.1"
        },
        "marge": {
            "options": null,
            "version": "5.1.0"
        }
    }
}