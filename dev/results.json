{
    "stats": {
        "suites": 18,
        "tests": 473,
        "passes": 462,
        "pending": 0,
        "failures": 8,
        "start": "2021-03-31T00:49:15.131Z",
        "end": "2021-03-31T00:49:15.131Z",
        "duration": 121138,
        "testsRegistered": 473,
        "passPercent": 97.67441860465117,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 3,
        "hasSkipped": true
    },
    "results": [
        {
            "uuid": "bba42b4a-db41-4451-8897-faf1ae54bd51",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [
                {
                    "title": "\"before all\" hook",
                    "fullTitle": "\"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "// insert known tokens into redis (normally these are created by emailPasswordReset)\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait redisClient.setexAsync(`pwReset:${accountGuid}`, 3600, securityToken);\nawait redisClient.setexAsync(`pwReset:${securityToken}`, 3600, accountGuid);",
                    "err": {},
                    "uuid": "20fb6227-5adb-430e-84a2-f13687fe2812",
                    "parentUUID": "bba42b4a-db41-4451-8897-faf1ae54bd51",
                    "isHook": true,
                    "skipped": false
                }
            ],
            "afterHooks": [],
            "tests": [
                {
                    "title": "should create a new password",
                    "fullTitle": "should create a new password",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "const mockReq = mocks.createNewPassword(securityToken);\nconst mockRes = mocks.mockResponse();\nawait resetPassword.createNewPassword(mockReq, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\n// ensure createNewPassword cleans up redis\nexpect(await redisClient.getAsync(`pwReset:${accountGuid}`)).to.be.null;\nexpect(await redisClient.getAsync(`pwReset:${securityToken}`)).to.be.null;",
                    "err": {},
                    "uuid": "9b61e24a-9e96-4efa-9c3c-0b3ee99b15da",
                    "parentUUID": "bba42b4a-db41-4451-8897-faf1ae54bd51",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "9401372e-d02b-474f-ad8d-86dc4b0d65f0",
                    "title": "Auth API API Key Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/apiKey.test.js",
                    "file": "/test/integration/functions/apiKey.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"before all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "4dfa831c-fd9a-4196-8b8a-b6acb62feec1",
                            "parentUUID": "9401372e-d02b-474f-ad8d-86dc4b0d65f0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"after all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await apiKey.deleteTestKeys(testConfig.tenantOne.tenantId);",
                            "err": {},
                            "uuid": "2c5d4aac-dfde-4c98-af9f-99ed2df9930d",
                            "parentUUID": "9401372e-d02b-474f-ad8d-86dc4b0d65f0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                            "title": "api key crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/apiKey.test.js",
                            "file": "/test/integration/functions/apiKey.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should insert an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 367,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = {expires: new Date(new Date().getTime() + 60000), testOnly: true, description: \"this is a test\"}\nawait apiKey.createApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nkey = inserted.key;\nid = inserted._id;\nexpect(inserted).to.exist;",
                                    "err": {},
                                    "uuid": "1b66136a-5453-429b-92b8-b1ebc8707bfe",
                                    "parentUUID": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list an apiKeys",
                                    "fullTitle": "Auth API API Key Tests api key crud  should list an apiKeys",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nawait apiKey.listApiKeys(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst keyList = mockRes.body;\nexpect(keyList).to.exist;\nexpect(keyList.length).to.be.gt(0);\nexpect(keyList[0].hashedKey).to.exist",
                                    "err": {},
                                    "uuid": "3ca12286-84d2-435f-b9eb-eca4bef7feb0",
                                    "parentUUID": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should verify an apiKey",
                                    "fullTitle": "Auth API API Key Tests api key crud  should verify an apiKey",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait apiKey.verifyApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"api key valid\");",
                                    "err": {},
                                    "uuid": "b87407a7-d839-417b-baf5-1604993b79fa",
                                    "parentUUID": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid api key and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid api key and return a JWT",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonate(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "7ca2ecbe-c2e8-4729-93aa-58bc63d35f15",
                                    "parentUUID": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userName and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userName and return a JWT",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);\ncontact = impersonated;",
                                    "err": {},
                                    "uuid": "40c6d57e-1d96-4e38-b441-e99c57ea5256",
                                    "parentUUID": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userSid and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userSid and return a JWT",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userSid = contact.contactGuid;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "a6e11ef4-d0cc-47af-9348-d7a55a27282e",
                                    "parentUUID": "c65c0d93-fa21-4b96-bf7e-f99806d90e7b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1b66136a-5453-429b-92b8-b1ebc8707bfe",
                                "3ca12286-84d2-435f-b9eb-eca4bef7feb0",
                                "b87407a7-d839-417b-baf5-1604993b79fa",
                                "7ca2ecbe-c2e8-4729-93aa-58bc63d35f15",
                                "40c6d57e-1d96-4e38-b441-e99c57ea5256",
                                "a6e11ef4-d0cc-47af-9348-d7a55a27282e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 518,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e6a489f0-c93c-4bd8-8bf0-2da1b9af8690",
                    "title": "Auth API Auth Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                    "file": "/test/integration/functions/auth.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Auth Tests\"",
                            "fullTitle": "Auth API Auth Tests \"before all\" hook in \"Auth API Auth Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "0cf91f62-2130-402a-b29e-706f647a55ed",
                            "parentUUID": "e6a489f0-c93c-4bd8-8bf0-2da1b9af8690",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a60d3e11-04c8-4742-82ac-c45df7a783bf",
                            "title": "getGuestToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return guest auth token",
                                    "fullTitle": "Auth API Auth Tests getGuestToken should return guest auth token",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "failed",
                                    "speed": null,
                                    "pass": false,
                                    "fail": true,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet getGuestTokenEvent = await mocks.getGuestTokenEvent()\n\t\t\tlet results = await dbauth.getGuestToken(getGuestTokenEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n      expect(mockRes.body.length).to.be.greaterThan(1000);",
                                    "err": {
                                        "message": "AssertionError: expected 500 to equal 200",
                                        "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/integration/functions/auth.test.js:20:31)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                                        "diff": "- 500\n+ 200\n"
                                    },
                                    "uuid": "d065c6d8-8015-45fc-83a8-63204e172320",
                                    "parentUUID": "a60d3e11-04c8-4742-82ac-c45df7a783bf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [],
                            "failures": [
                                "d065c6d8-8015-45fc-83a8-63204e172320"
                            ],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "775ffb08-c164-44ba-9eed-3382e06ed488",
                            "title": "login",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a contact with a token",
                                    "fullTitle": "Auth API Auth Tests login should return a contact with a token",
                                    "timedOut": false,
                                    "duration": 210,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet loginEvent = await mocks.loginEvent()\n\t\t\tlet results = await dbauth.login(loginEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst contactInfo = mockRes.body;\n\t\t\texpect(contactInfo.userName).equal(loginEvent.body.username);\n\t\t\texpect(contactInfo.token).to.exist;",
                                    "err": {},
                                    "uuid": "97037345-a316-4754-a677-ca99a9a1685d",
                                    "parentUUID": "775ffb08-c164-44ba-9eed-3382e06ed488",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "97037345-a316-4754-a677-ca99a9a1685d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 210,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8851949d-0bcd-4257-b05d-b2c82736587e",
                            "title": "refreshJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests refreshJwt refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 205,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\nlet loginEvent = await mocks.loginEvent()\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.login(loginEvent, mockRes);\nconst contactInfo = mockRes.body;\nlogoutEvent.cookies = {\"integrifyRefreshToken\": contactInfo.refreshToken };\nlogoutEvent.body = {token: contactInfo.token, refreshToken: contactInfo.refreshToken }\nawait jwtFuncs.refreshJwt(logoutEvent, await mocks.mockResponse());\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "7c71f69a-9f95-410e-9272-821575a4169c",
                                    "parentUUID": "8851949d-0bcd-4257-b05d-b2c82736587e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7c71f69a-9f95-410e-9272-821575a4169c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 205,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8661daa4-9bc7-42ec-a1ad-fce8d62bcc60",
                            "title": "isAuthenticated",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests isAuthenticated refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\n\nawait jwtFuncs.isAuthenticated({cookies: {integrifyToken: \"fake\"}}, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "2efa3dfa-91ff-47a9-b9c0-feefaa4efcef",
                                    "parentUUID": "8661daa4-9bc7-42ec-a1ad-fce8d62bcc60",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2efa3dfa-91ff-47a9-b9c0-feefaa4efcef"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3c8ef35c-3998-4d01-b209-bc1be91a3d7f",
                            "title": "logout",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should log a user out",
                                    "fullTitle": "Auth API Auth Tests logout should log a user out",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.logout(logoutEvent, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body).to.deep.equal({message: 'OK'});",
                                    "err": {},
                                    "uuid": "8d946423-a41b-4611-9ace-9d785479a76b",
                                    "parentUUID": "3c8ef35c-3998-4d01-b209-bc1be91a3d7f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8d946423-a41b-4611-9ace-9d785479a76b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8fb799af-e6b6-4db3-8170-6b62d173f9e0",
                    "title": "Auth API Reset Password Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                    "file": "/test/integration/functions/resetPassword.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Reset Password Tests\"",
                            "fullTitle": "Auth API Reset Password Tests \"before all\" hook in \"Auth API Reset Password Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000);\nprocess.env.TESTING = true;\nresetRewired.__set__('nodemailer', nodemailerMock);",
                            "err": {},
                            "uuid": "23e26fb7-ff49-41c5-af0e-1e893b3392c1",
                            "parentUUID": "8fb799af-e6b6-4db3-8170-6b62d173f9e0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ba9df226-aef2-41e6-bad7-b2cfe5c6c887",
                            "title": "emailUsernames",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should send an email of accounts for existing email",
                                    "fullTitle": "Auth API Reset Password Tests emailUsernames should send an email of accounts for existing email",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\n      const accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\n      const mockRes = mocks.mockResponse();\n      const mockReq = await mocks.emailUsernames();\n      await resetRewired.emailUsernames(mockReq, mockRes);\n      expect(mockRes.statusCode).equal(200);\n      expect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "9f4958ea-1a7c-485b-8801-7909e73666e2",
                                    "parentUUID": "ba9df226-aef2-41e6-bad7-b2cfe5c6c887",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9f4958ea-1a7c-485b-8801-7909e73666e2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "82b44ebe-c29e-4a1f-aeeb-f2e2bcc96e43",
                            "title": "passwordReset",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"passwordReset\"",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset \"before all\" hook in \"passwordReset\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "resetRewired.__set__('nodemailer', nodemailerMock);",
                                    "err": {},
                                    "uuid": "2b8c52fa-a63d-4bd6-b99a-1a0ef10e03de",
                                    "parentUUID": "82b44ebe-c29e-4a1f-aeeb-f2e2bcc96e43",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "emailPassworReset",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset emailPassworReset",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\nconst accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait resetRewired.emailPasswordReset(mockReq, mockRes);\n// check if security token was added to redis\nconst securityToken = await redisClient.getAsync(`pwReset:${accountGuid}`);\nconst accountEntry = await redisClient.getAsync(`pwReset:${securityToken}`);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(securityToken).to.exist;\nexpect(accountEntry).to.exist;\n// clean up entries leftover from calling emailPasswordReset\nawait redisClient.del(`pwReset:${accountGuid}`);\nawait redisClient.del(`pwReset:${securityToken}`);",
                                    "err": {},
                                    "uuid": "41ce9730-718d-4399-a56a-6084001b48a4",
                                    "parentUUID": "82b44ebe-c29e-4a1f-aeeb-f2e2bcc96e43",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "41ce9730-718d-4399-a56a-6084001b48a4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "84f8541e-3fc6-46c5-9928-2e6e3a44321e",
                    "title": "Auth API SAML Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/samlSettings.test.js",
                    "file": "/test/integration/functions/samlSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "8cd49e6f-84a6-4955-a928-55f7e1a123f8",
                            "parentUUID": "84f8541e-3fc6-46c5-9928-2e6e3a44321e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await samlSettings.deleteSamlSettingsByName(testConfig.tenantOne.tenantId, 'unitTestIDP')",
                            "err": {},
                            "uuid": "a5f78b95-3085-411c-829c-986658255009",
                            "parentUUID": "84f8541e-3fc6-46c5-9928-2e6e3a44321e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                            "title": "SAML Settings crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/samlSettings.test.js",
                            "file": "/test/integration/functions/samlSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert saml settings and return a doc",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should insert saml settings and return a doc",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n           \nreq.body = data;\nawait samlSettings.createSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\n\nsamlId = inserted._id;\nexpect(inserted).to.exist;\nexpect(inserted.idpMetaData).to.equal(data.idpMetaData);\nexpect(inserted.idpName).to.equal(data.idpName);\nexpect(inserted.idpDescription).to.equal(data.idpDescription);\nexpect(inserted.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "673c657a-3a84-4876-9dd4-de8284c1ef62",
                                    "parentUUID": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings without an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings without an id",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "65253adb-a71c-4df6-b9cc-ec8f47aa8b04",
                                    "parentUUID": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings with an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings with an id",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId.toString();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result._id.toString()).to.equal(samlId.toString());",
                                    "err": {},
                                    "uuid": "d25a40d8-fb21-4c43-83fe-01270ec9225b",
                                    "parentUUID": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should update saml settings",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\n\nreq.body = data;\n\nawait samlSettings.updateSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.exist;",
                                    "err": {},
                                    "uuid": "35497c92-c4bb-4c40-a5bf-41d80385f536",
                                    "parentUUID": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return sp metadata",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should return sp metadata",
                                    "timedOut": false,
                                    "duration": 33,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait samlSettings.getMetaData(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst metadata = mockRes.body;\nexpect(metadata).to.exist;",
                                    "err": {},
                                    "uuid": "f72f88c6-ac9e-4877-b303-aae2006fbe45",
                                    "parentUUID": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should delete saml settings",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.deleteSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "7f43a81c-11e9-4cfc-9df1-9f5f90d9af87",
                                    "parentUUID": "c79e49b0-3b7f-44f4-9f43-4f6bb14a16c0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "673c657a-3a84-4876-9dd4-de8284c1ef62",
                                "65253adb-a71c-4df6-b9cc-ec8f47aa8b04",
                                "d25a40d8-fb21-4c43-83fe-01270ec9225b",
                                "35497c92-c4bb-4c40-a5bf-41d80385f536",
                                "f72f88c6-ac9e-4877-b303-aae2006fbe45",
                                "7f43a81c-11e9-4cfc-9df1-9f5f90d9af87"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 98,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "9b61e24a-9e96-4efa-9c3c-0b3ee99b15da"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        },
        {
            "uuid": "b1dc6e6d-178f-4a12-b7bb-be1fd9e48d50",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "450711be-c434-4afe-9726-c767da9f4e7f",
                    "title": "Dashboard controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.controller.test.js",
                    "file": "/test/dashboard.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 14,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "1737e90c-2143-48c6-a510-e3ce8e53716b",
                            "parentUUID": "450711be-c434-4afe-9726-c767da9f4e7f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 9,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "6429619d-01fe-458d-a6c9-f95f6d9f1195",
                            "parentUUID": "450711be-c434-4afe-9726-c767da9f4e7f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                            "title": "dashboard crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.controller.test.js",
                            "file": "/test/dashboard.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 88,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.createDashboard(tenant, dashboardObj);\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "3719d4e1-a450-47fa-9f1a-432332b763e0",
                                    "parentUUID": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboards = await dashboardController.listDashboards(tenant);\n         expect(dashboards.length).to.be.gt(0);  \n         let createdDashord  = dashboards.find((d) => {\n             return d.sid === sid;\n         })\n         expect\n         (createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "1a2c46e2-a173-4106-81e5-a0dc92e499c9",
                                    "parentUUID": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard = await dashboardController.getDashboard(tenant,sid);\n            expect(dashboard).to.exist         \n            expect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "d5305ef4-511e-4209-9144-1555503ea4df",
                                    "parentUUID": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard.banner = 'test-updated';\n            const updatedDashboard = await dashboardController.updateDashboard(tenant,dashboard.toObject());\n            expect(updatedDashboard).to.exist         \n            expect(updatedDashboard.sid).to.equal(sid)\n            expect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "ca7421ac-b42d-407e-95cc-5890cba42bd3",
                                    "parentUUID": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const copiedDashboard = await dashboardController.copyDashboard(tenant, sid);\n            expect(copiedDashboard).to.exist         \n            expect(copiedDashboard.sid).to.not.equal(sid)\n            expect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "be18eb45-19fd-4581-915c-7f170848a4c1",
                                    "parentUUID": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  delete a a dashboard",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await dashboardController.deleteDashboard(tenant,sid);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "74d5ec2a-626c-4d6a-9d90-7d6021714cb9",
                                    "parentUUID": "25e5572a-8685-4e6f-b726-1fcecfbd9a97",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3719d4e1-a450-47fa-9f1a-432332b763e0",
                                "1a2c46e2-a173-4106-81e5-a0dc92e499c9",
                                "d5305ef4-511e-4209-9144-1555503ea4df",
                                "ca7421ac-b42d-407e-95cc-5890cba42bd3",
                                "be18eb45-19fd-4581-915c-7f170848a4c1",
                                "74d5ec2a-626c-4d6a-9d90-7d6021714cb9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 154,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ed68f8cf-d6c6-480a-961b-075a8858cc25",
                    "title": "Dashboard route handler tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.handlers.test.js",
                    "file": "/test/dashboard.handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nsession = (await mocks.req()).oauth;\nperms  = await permissions.currentUserPermissions(session)\nlet permissionsWithRun = perms.concat([\n    {\n        \"objectType\": \"tab\",\n        \"ownerSid\": \"bb6cb26b-d179-4763-b2cb-69d107dfd1d8\",\n        \"ownerType\": \"system\",\n        \"permissions\": enums.permissionTypes.run,\n        \"roleName\": \"system administrators\",\n        \"roleGuid\": \"a48ea7cf-f1ba-4ca9-bf17-2c97d49336cd\"\n      }\n])\nawait permissions.cachePerms(session, permissionsWithRun);\nconsole.log(permissionsWithRun)",
                            "err": {},
                            "uuid": "9a33058e-b258-4fc5-ae85-b4079e651119",
                            "parentUUID": "ed68f8cf-d6c6-480a-961b-075a8858cc25",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard route handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);\nawait permissions.cachePerms(session, perms);",
                            "err": {},
                            "uuid": "31ed9732-88c4-4834-bc99-0a85adf234fe",
                            "parentUUID": "ed68f8cf-d6c6-480a-961b-075a8858cc25",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                            "title": "dashboard crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.handlers.test.js",
                            "file": "/test/dashboard.handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = dashboardObj;\nawait handlers.createDashboard(req,mockRes);\nconst dashboard = req.body;\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "c7a22277-c306-4300-a6a6-f3b8e65f137b",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "db40e9d9-49b5-47d7-8c6a-860d0f5cc99a",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for admins",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for admins",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.admin = true;\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "094627d6-bdb6-4a5a-b132-12f42a04832c",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.getDashboard(req,mockRes);\ndashboard = mockRes.body;\nexpect(dashboard).to.exist         \nexpect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "85163deb-5289-442b-9cae-18383b73de3f",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.updateDashboard(req,mockRes);\nconst updatedDashboard = mockRes.body;\nexpect(updatedDashboard).to.exist         \nexpect(updatedDashboard.sid).to.equal(sid)\nexpect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "2190025b-bde3-47fe-afa9-41f26e9aa00c",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.copyDashboard(req,mockRes);\nconst copiedDashboard = mockRes.body;\nexpect(copiedDashboard).to.exist         \nexpect(copiedDashboard.sid).to.not.equal(sid)\nexpect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "9cdd5132-4dbd-444c-a412-1763b2a53a6e",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should delete a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.deleteDashboard(req,mockRes);\nlet deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "608c8375-21cc-40db-9bbf-217a05d7d8e2",
                                    "parentUUID": "7e153e09-3ae9-4bcb-b728-936bc91b6951",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c7a22277-c306-4300-a6a6-f3b8e65f137b",
                                "db40e9d9-49b5-47d7-8c6a-860d0f5cc99a",
                                "094627d6-bdb6-4a5a-b132-12f42a04832c",
                                "85163deb-5289-442b-9cae-18383b73de3f",
                                "2190025b-bde3-47fe-afa9-41f26e9aa00c",
                                "9cdd5132-4dbd-444c-a412-1763b2a53a6e",
                                "608c8375-21cc-40db-9bbf-217a05d7d8e2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 75,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "07468183-3f6f-48bd-9d12-e1843501586d",
                    "title": "Legacy tab mongo tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/tab.test.js",
                    "file": "/test/tab.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()\ntenant = testConfig.tenantOne.tenantId;;\ntab = await dashboardController.createTestTab(tenant)\nexpect(tab.SID).to.exist",
                            "err": {},
                            "uuid": "394b5962-fd68-4046-a8dd-581d4f4e55cb",
                            "parentUUID": "07468183-3f6f-48bd-9d12-e1843501586d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteTabs(tenant, {Title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-migrated'});",
                            "err": {},
                            "uuid": "5391096d-c6d0-485a-a05c-fd6846263766",
                            "parentUUID": "07468183-3f6f-48bd-9d12-e1843501586d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                            "title": "tab crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/tab.test.js",
                            "file": "/test/tab.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should create a legacy tab",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tab = await dashboardController.createTestTab(tenant);\n\n tabSid = tab.SID;\n expect(tabSid).to.exist",
                                    "err": {},
                                    "uuid": "5b4d1c9b-ee72-4d77-ad96-9308598ffdd0",
                                    "parentUUID": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list legacy tabs",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should list legacy tabs",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tabs = await dashboardController.listTabs(tenant);\n expect(tabs.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "3ffa2e10-5939-478b-8bb0-866a238aa875",
                                    "parentUUID": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should get a legacy tab",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "tab = await dashboardController.getTab(tenant,tabSid);\n            expect(tab).to.exist         \n            expect(tab.SID).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "2bea6107-f3e8-45af-bf54-aacd938d82a1",
                                    "parentUUID": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a tab using a dashboard object",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should update a tab using a dashboard object",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const dashboardObject = {\n    sid: tab.SID,\n    title: tab.Title,\n    ordinal: 5000,\n}\nconst dashboardMask = await dashboardController.updateTabFromDashboardObject(tenant,dashboardObject);\nexpect(dashboardObject.modifiedDate).to.exist\ntab = await dashboardController.getTab(tenant,tab.SID);\nexpect(tab).to.exist         \nexpect(tab.SID).to.equal(tabSid)\nexpect(tab.Ordinal).to.equal(dashboardObject.ordinal)",
                                    "err": {},
                                    "uuid": "6a1c7a33-d830-4bff-ae11-d6b052178ab5",
                                    "parentUUID": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should convert a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should convert a legacy tab",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.converTabToDashboard(tab);\n            expect(dashboard).to.exist         \n            expect(dashboard.layouts).to.exist;\n            expect(dashboard.legacySid).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "b4fc2c4c-d46b-4035-bca2-7b7d4b6c6c2a",
                                    "parentUUID": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should migrate legacy tab to dashboard",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should migrate legacy tab to dashboard",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  success = await dashboardController.migrateTabToDashboard(tenant, tabSid);\n            expect(success.sid).to.exist;",
                                    "err": {},
                                    "uuid": "3d7266c9-6f07-47c6-9758-1872e4c4b478",
                                    "parentUUID": "0d6f3ea5-302d-4be8-9b83-d09e44d3377b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5b4d1c9b-ee72-4d77-ad96-9308598ffdd0",
                                "3ffa2e10-5939-478b-8bb0-866a238aa875",
                                "2bea6107-f3e8-45af-bf54-aacd938d82a1",
                                "6a1c7a33-d830-4bff-ae11-d6b052178ab5",
                                "b4fc2c4c-d46b-4035-bca2-7b7d4b6c6c2a",
                                "3d7266c9-6f07-47c6-9758-1872e4c4b478"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 43,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "15808ff4-cbaa-4afc-94c8-c819f2f8cd2b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "0a9433ca-2019-424e-a7b1-ea7350dae259",
                    "title": "Files db controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-files/test/db/file.controller.test.js",
                    "file": "/test/db/file.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"before all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 14,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await testLib.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "1c4f7947-b3a6-4a6f-9277-1e0ebcd7dc72",
                            "parentUUID": "0a9433ca-2019-424e-a7b1-ea7350dae259",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"after all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await fileController.removeFiles(tenant, {path: \"/created/by/mocha/test\"});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "0c6fe3f1-7bb8-43d3-a57c-ffaf56d93b6c",
                            "parentUUID": "0a9433ca-2019-424e-a7b1-ea7350dae259",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "11d42fe2-6276-467a-a36b-9aca65cfd1e4",
                            "title": "file crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-files/test/db/file.controller.test.js",
                            "file": "/test/db/file.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a file",
                                    "fullTitle": "Files db controller tests file crud  should create a file",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const file = await fileController.createFile(tenant, fileObj);\nsid = file.sid;\nexpect(sid).to.exist;",
                                    "err": {},
                                    "uuid": "5ca7c445-8283-491a-adda-05118267eb6f",
                                    "parentUUID": "11d42fe2-6276-467a-a36b-9aca65cfd1e4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a file",
                                    "fullTitle": "Files db controller tests file crud  should get a file",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.getFile(tenant, sid);\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "15a5e3e4-da5b-4321-bdfa-2fc5858f9f3a",
                                    "parentUUID": "11d42fe2-6276-467a-a36b-9aca65cfd1e4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should find a file",
                                    "fullTitle": "Files db controller tests file crud  should find a file",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.findFile(tenant, {filePath: \"/created/by/mocha/test\"});\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "9d1a5b88-deec-4065-bd4c-43831a53deca",
                                    "parentUUID": "11d42fe2-6276-467a-a36b-9aca65cfd1e4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a file",
                                    "fullTitle": "Files db controller tests file crud  should update a file",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const updatedFile = await fileController.updateFile(\n  tenant,\n  file.toObject()\n);\nexpect(updatedFile).to.exist;\nexpect(updatedFile.sid).to.equal(sid);\nexpect(updatedFile.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "fed914c3-4974-4337-962c-a1197e4db779",
                                    "parentUUID": "11d42fe2-6276-467a-a36b-9aca65cfd1e4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a file",
                                    "fullTitle": "Files db controller tests file crud  delete a a file",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await fileController.removeFile(tenant, fileObj);\nexpect(deleted).to.exist;\nexpect(deleted.deletedCount).to.equal(1);",
                                    "err": {},
                                    "uuid": "37f65823-e5ce-4147-9b5f-a56f1408b406",
                                    "parentUUID": "11d42fe2-6276-467a-a36b-9aca65cfd1e4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5ca7c445-8283-491a-adda-05118267eb6f",
                                "15a5e3e4-da5b-4321-bdfa-2fc5858f9f3a",
                                "9d1a5b88-deec-4065-bd4c-43831a53deca",
                                "fed914c3-4974-4337-962c-a1197e4db779",
                                "37f65823-e5ce-4147-9b5f-a56f1408b406"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 89,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "b00745c7-5cea-4e4c-8174-bd7c41556072",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "fa0ad325-1287-4d73-ad0e-237037515b4a",
                    "title": "Instance API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                    "file": "/test/db/instanceController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\n// session = {tenant: config.tenantOne.tenantId, user_sid: '1e660111-de6f-4318-8f51-6e59cb33d8d7'} //process level\n// session = {tenant: config.tenantOne.tenantId, user_sid:'521a92c8-e77c-4537-811b-dea6e533d800'} //category level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "b4509253-6047-4f1a-a296-2687b2d728c8",
                            "parentUUID": "fa0ad325-1287-4d73-ad0e-237037515b4a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "get a full instance",
                                    "fullTitle": "Instance API Controller Tests list tests get a full instance",
                                    "timedOut": false,
                                    "duration": 553,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst fullInstance = await instanceController.getFullInstance(\n  sampleInstanceGuid\n);\nexpect(fullInstance).to.exist;\nexpect(fullInstance.instanceTasks.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "c8c52191-a561-4a5d-9eff-f7142f3c4eee",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid)\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "b9c6124b-6a93-4e73-80a5-68693df54f2b",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with requester",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with requester",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {requester: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.exist;\nexpect(instance.requester.contactGuid).to.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "64e2dcd2-c67c-4c09-a655-c9728a67eba3",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {client: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "993ef545-6d42-42d4-aed7-28b70ec0df33",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client manager",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client manager",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\n// get instances for Joe User, who reports to System System\nlet instances = await Instance.query().where(\"clientGuid\", '92a73dad-d953-4c59-9c5e-5d037791d411');\n\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {clientManager: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;\nexpect(instance.client.manager).to.exist;\nexpect(instance.client.manager.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "0ee0c6b8-ebcc-4332-a5e1-1d04bc7ea086",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance process",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance process",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instanceProcess = await instanceController.getInstanceProcess(sampleInstanceGuid)\nexpect(instanceProcess).to.exist;\nexpect(instanceProcess.instanceGuid).to.equal(sampleInstanceGuid)",
                                    "err": {},
                                    "uuid": "bfe4c60a-5dcb-4335-8a96-20302baea824",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance recipient tasks data by instanceSid",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance recipient tasks data by instanceSid",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(config.tenantOne);\nconst instanceSid = '6D4785AE-57A2-46C5-9141-DE2B134ED8EF'\nconst instanceTasks = await instanceController.getInstanceRecipientTasksData(instanceSid);\n\nexpect(instanceTasks).to.exist;\nexpect(instanceTasks.length).to.be.gt(0);\nconst maintenanceReqFormTask = instanceTasks[2]\nexpect(maintenanceReqFormTask.taskName).to.equal('Maintenance Request Form')\nexpect(maintenanceReqFormTask.recipientTasks.length).to.be.gt(0)\nconst recipientTask = maintenanceReqFormTask.recipientTasks[0]\nexpect(recipientTask.recipientGuid).to.equal('4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF');\nexpect(recipientTask.taskData.length).to.be.gt(0)\nexpect(recipientTask.taskData.find(x => x.dataLabel == 'Location of Problem').dataValue).to.equal('Inside the building');",
                                    "err": {},
                                    "uuid": "e3f231b5-e8d0-4ece-bc8f-102ec154bf4f",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests columns",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests columns",
                                    "timedOut": false,
                                    "duration": 84,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getMyRequests();\n        \nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "e58f7aa7-50e1-4110-80cb-ea08d1558319",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - ID",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - ID",
                                    "timedOut": false,
                                    "duration": 153,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processId\",\n          data: {\n            comparison: \"eq\",\n            value: sampleInstance.processId,\n          },\n        },\n      ],\n      count: 5,\n    });\n        \n    expect(result.results[0].processId).to.equal(sampleInstance.processId);\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"gt\",\n            value: 500,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"asc\",\n      count: 5,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.length.should.equal(5); \n        \n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.gt(500);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"lt\",\n            value: 505,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"desc\",\n      count: 2,\n    });\n        \n    expect(result.results.length).to.equal(2);\n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.lt(505);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "6ffdf137-fd3f-425b-bd51-26d3207d8fa5",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - date",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - date",
                                    "timedOut": false,
                                    "duration": 187,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let d = moment().day(-90);\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"90\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n      expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().year(-30);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"30\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n        expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().day(-7);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"7\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-3);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"3\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-1);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"1\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    const startDate = moment(\"2018-10-11\");\n    const endDate = moment(\"2018-11-23\");\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"gt\", value: \"2018-10-11\" },\n        },\n        {\n          field: \"StartDate\",\n          data: { comparison: \"lt\", value: \"2018-11-23\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length) {\n        expect(result.results[0].startDate).to.be.gt(startDate.toDate());\n        expect(result.results[0].startDate).to.be.lt(endDate.toDate());\n    }\n  })\n);",
                                    "err": {},
                                    "uuid": "5f950a56-f9aa-477f-aa0b-cf343a3eb55f",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - name",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - name",
                                    "timedOut": false,
                                    "duration": 142,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.instanceName.toLowerCase()).to.contain(\"test\");\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.forEach((instance) => {\n    //   instance.processName.should.contain(\"test\");\n    // });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requester\",\n          data: { comparison: \"contains\", value: \"system system\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid.toLowerCase());\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "bec462bc-9079-49e2-a195-63c82fc4b3c5",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - guid",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - guid",
                                    "timedOut": false,
                                    "duration": 99,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processGuid\",\n          data: { comparison: \"contains\", value: sampleInstance.processGuid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.processName.indexOf(sampleInstance.processName)).to.be.gt(-1);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requesterGuid\",\n          data: { comparison: \"contains\", value: session.user_sid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "5257c10d-7fa9-4364-9fbf-94e9e31fe355",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - count",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - count",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, { count: 2 });\n        \n    expect(result.results).to.exist;\n    expect(result.results.length).to.equal(2);\n  })\n);",
                                    "err": {},
                                    "uuid": "15295ecc-f54a-4573-b433-83a2b21b35b0",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests params - sort, dir",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests params - sort, dir",
                                    "timedOut": false,
                                    "duration": 66,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      count: 2,\n      dir: \"asc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.lt(\n      result.results[1].createdDate\n    );\n        \n    result = await f.call(instanceController, {\n      count: 2,\n      dir: \"desc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.gt(\n      result.results[1].createdDate\n    );\n  })\n);",
                                    "err": {},
                                    "uuid": "9263a92e-e5e9-427f-a64c-7fb9d7c4af1a",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests param - start",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests param - start",
                                    "timedOut": false,
                                    "duration": 56,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      start: 0,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startZeroId = result.results[0].instanceId;\n        \n    result = await f.call(instanceController, {\n      start: 1,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startOneId = result.results[0].instanceId;\n        \n    expect(startZeroId).to.be.lessThan(startOneId);\n  })\n);",
                                    "err": {},
                                    "uuid": "20b67361-97c1-449e-8168-9f611fa71044",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "dd6479d6-36e4-40c4-b112-f1690be3455f",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with search term against procssName, instanceName and requester",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with search term against procssName, instanceName and requester",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.processName, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "bdae556a-6973-45e1-9bdf-dbf4e16d07b9",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with a numeric term against instanceId",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with a numeric term against instanceId",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.instanceId, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "6c5629cc-f3dc-4b21-a189-7056ff62f699",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get manage requests",
                                    "fullTitle": "Instance API Controller Tests list tests get manage requests",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'manage'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "73bbab7f-0fc6-4efa-8f7a-d1bb1482bbd0",
                                    "parentUUID": "a3e8adc8-2887-45c2-a93c-a7bd5291424e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c8c52191-a561-4a5d-9eff-f7142f3c4eee",
                                "b9c6124b-6a93-4e73-80a5-68693df54f2b",
                                "64e2dcd2-c67c-4c09-a655-c9728a67eba3",
                                "993ef545-6d42-42d4-aed7-28b70ec0df33",
                                "0ee0c6b8-ebcc-4332-a5e1-1d04bc7ea086",
                                "bfe4c60a-5dcb-4335-8a96-20302baea824",
                                "e3f231b5-e8d0-4ece-bc8f-102ec154bf4f",
                                "e58f7aa7-50e1-4110-80cb-ea08d1558319",
                                "6ffdf137-fd3f-425b-bd51-26d3207d8fa5",
                                "5f950a56-f9aa-477f-aa0b-cf343a3eb55f",
                                "bec462bc-9079-49e2-a195-63c82fc4b3c5",
                                "5257c10d-7fa9-4364-9fbf-94e9e31fe355",
                                "15295ecc-f54a-4573-b433-83a2b21b35b0",
                                "9263a92e-e5e9-427f-a64c-7fb9d7c4af1a",
                                "20b67361-97c1-449e-8168-9f611fa71044",
                                "dd6479d6-36e4-40c4-b112-f1690be3455f",
                                "bdae556a-6973-45e1-9bdf-dbf4e16d07b9",
                                "6c5629cc-f3dc-4b21-a189-7056ff62f699",
                                "73bbab7f-0fc6-4efa-8f7a-d1bb1482bbd0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1667,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "4364ef6a-8d51-402a-8e62-65ad890ed328",
                            "title": "delete/undelete tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "deletes a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a request",
                                    "timedOut": false,
                                    "duration": 170,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nsampleInstances = result.results;\n    \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\nsampleInstanceGuid = firstInstance.instanceGuid;\n      \nlet deleted = await instanceController.deleteInstance(sampleInstanceGuid);\n\nexpect(sampleInstanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.deletedDate).not.be.null\nconst Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet excludeDeleted = await Instance.query().where({instanceGuid: sampleInstanceGuid})\nexpect(excludeDeleted.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "c6dc11db-2c26-4e4e-8437-6d2e6f2e7ec7",
                                    "parentUUID": "4364ef6a-8d51-402a-8e62-65ad890ed328",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retores a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests retores a request",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet undeleted = await instanceController.restoreInstance(sampleInstanceGuid);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(sampleInstanceGuid).to.equal(undeleted.instanceGuid)\nexpect(undeleted.deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "e9aaf66b-c091-41b1-acde-a8e10e51a6db",
                                    "parentUUID": "4364ef6a-8d51-402a-8e62-65ad890ed328",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "deletes a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a batch of requests",
                                    "timedOut": false,
                                    "duration": 152,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.deleteInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\n//expect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).not.to.be.null;",
                                    "err": {},
                                    "uuid": "09ffafcf-bad7-4337-aae7-8286b6c753f9",
                                    "parentUUID": "4364ef6a-8d51-402a-8e62-65ad890ed328",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores a batch of requests",
                                    "timedOut": false,
                                    "duration": 148,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.restoreInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\nexpect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "38b67fca-b172-4a25-98a6-9fa219d0ae85",
                                    "parentUUID": "4364ef6a-8d51-402a-8e62-65ad890ed328",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores all",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores all",
                                    "timedOut": false,
                                    "duration": 530,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet restored = await instanceController.restoreAllInstances();\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(restored.length).to.gt(0);",
                                    "err": {},
                                    "uuid": "9678f0dc-fb5a-4b32-bdcc-1f6db2dc87db",
                                    "parentUUID": "4364ef6a-8d51-402a-8e62-65ad890ed328",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c6dc11db-2c26-4e4e-8437-6d2e6f2e7ec7",
                                "e9aaf66b-c091-41b1-acde-a8e10e51a6db",
                                "09ffafcf-bad7-4337-aae7-8286b6c753f9",
                                "38b67fca-b172-4a25-98a6-9fa219d0ae85",
                                "9678f0dc-fb5a-4b32-bdcc-1f6db2dc87db"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1058,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "04706070-44b0-4f26-b2d0-8a1c08aa004e",
                            "title": "insert tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts an instance data",
                                    "fullTitle": "Instance API Controller Tests insert tests inserts an instance data",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceDataRow = {\n  itaskRecipientGuid: '8ad1a6f2-9f6f-4667-9750-d961044ed817',\n  itaskGuid: '5bde578f-615f-4494-86b2-ca61044ed883',\n  taskGuid: '6386f905-7fac-41c6-9b6b-86d53f14d61c',\n  objectGuid: null,\n  objectType: null,\n  objectId: null,\n  dataProperty: '1491430190541',\n  dataType: 'String',\n  dataSid: '14777392-ac81-44f0-b1f2-87d53f14d65d',\n  dataId: null,\n  dataClientId: '1491430190541',\n  dataLabel: 'Enter Details:',\n  dataValue: 'Need a background check',\n  META_1: 'TEST_INSERT_INSTANCE_DATA',\n  META_2: null,\n  dataHide: null,\n  instanceContactGuid: null,\n  roleGuid: null,\n  dataValueExt: null,\n  questionType: 'LongText',\n  deletedDate: new Date().toISOString() // so that it doesnt interfere with its instance\n}\nconst instanceController = new InstanceController(session)\nlet instanceDataGuid = await instanceController.insertInstanceData(instanceDataRow)\nexpect(instanceDataGuid).to.be.a.uuid()",
                                    "err": {},
                                    "uuid": "b4a21aa6-d8f6-41d8-8ed3-3b5aed5546ae",
                                    "parentUUID": "04706070-44b0-4f26-b2d0-8a1c08aa004e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b4a21aa6-d8f6-41d8-8ed3-3b5aed5546ae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "def206fb-ee93-474e-aaf0-fe3d86feb525",
                            "title": "update tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates an instance task recipient task state",
                                    "fullTitle": "Instance API Controller Tests update tests updates an instance task recipient task state",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session)\nconst recipTaskSid = 'b3fef53a-7742-46d1-9faf-be573c14d6fa'\nlet taskState = 'Cancelled'\nlet updated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)\n// change it back to Completed\ntaskState = 'Completed'\nupdated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)",
                                    "err": {},
                                    "uuid": "356903b7-38a0-44cb-8b38-fce7c8dc51ce",
                                    "parentUUID": "def206fb-ee93-474e-aaf0-fe3d86feb525",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "356903b7-38a0-44cb-8b38-fce7c8dc51ce"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "40bf8155-6e5d-4a54-b60c-9f348fa25047",
                    "title": "Instance API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceModel.test.js",
                    "file": "/test/db/instanceModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8d91f726-8324-4e6b-8ac7-b3e540498936",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceModel.test.js",
                            "file": "/test/db/instanceModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Instance API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "752e3002-577a-4b67-a1fd-d62dc1405cfe",
                                    "parentUUID": "8d91f726-8324-4e6b-8ac7-b3e540498936",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Instance API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = await sqldb.models.bindModel(config.tenantOne.tenantId, instanceModels.Instance)\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "b1fb774b-0f58-46b3-aa82-20fdb9a811db",
                                    "parentUUID": "8d91f726-8324-4e6b-8ac7-b3e540498936",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Instance API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = (await models.getModels(config.tenantOne.tenantId)).Instance;\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "126d8b19-3a04-43da-821b-21b1b1ffa216",
                                    "parentUUID": "8d91f726-8324-4e6b-8ac7-b3e540498936",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Instance API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\n          let results = await models._tenantModels[config.tenantOne.tenantId].Instance.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "1e3fa298-1379-4c16-b1e8-64a1f3239c58",
                                    "parentUUID": "8d91f726-8324-4e6b-8ac7-b3e540498936",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b1fb774b-0f58-46b3-aa82-20fdb9a811db",
                                "126d8b19-3a04-43da-821b-21b1b1ffa216",
                                "1e3fa298-1379-4c16-b1e8-64a1f3239c58"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "ef21cd08-e836-41a5-9f7c-f97164c66068",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskController.test.js",
                    "file": "/test/db/myTaskController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "c74f3aa0-cb67-4b24-b416-62e35616dd51",
                            "parentUUID": "ef21cd08-e836-41a5-9f7c-f97164c66068",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskController.test.js",
                            "file": "/test/db/myTaskController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 201,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "dbb4c2ac-884d-4dcd-a202-23a0acff784e",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 237,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\nexpect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "1f3580c6-5ba0-44c1-a2c6-a8e5906263a5",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 237,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "d776494a-32cf-4664-b215-15bd62b49d88",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 227,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "4a9494c2-39f4-4c7b-b5f7-16a00e8cab16",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 217,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "e0a8e2b9-2d72-4c8a-8f5d-0ad2d9ee8516",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 230,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "35c4ca57-e904-4db1-9ef2-a535057725aa",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 227,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "d6c9d17d-daf8-4dc4-b754-7ede079e5391",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 125,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "830c4fdd-9279-48b8-8cf5-39d827393cf6",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 239,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "43888c09-9d8e-4a54-8605-9a5c0d462218",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 902,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "e47a03a1-1560-461e-9bfc-dd76d9dc6181",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 362,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "008ec041-ae57-4774-a6c2-e4535c527cde",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 300,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "ab890c28-6915-4f1f-a603-b8b1cf6d2b94",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 123,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "6de57207-fff4-4cbe-be9c-8359504e4e51",
                                    "parentUUID": "6596553c-570a-4cf8-84a6-f53ec36f75ec",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dbb4c2ac-884d-4dcd-a202-23a0acff784e",
                                "1f3580c6-5ba0-44c1-a2c6-a8e5906263a5",
                                "d776494a-32cf-4664-b215-15bd62b49d88",
                                "4a9494c2-39f4-4c7b-b5f7-16a00e8cab16",
                                "e0a8e2b9-2d72-4c8a-8f5d-0ad2d9ee8516",
                                "35c4ca57-e904-4db1-9ef2-a535057725aa",
                                "d6c9d17d-daf8-4dc4-b754-7ede079e5391",
                                "830c4fdd-9279-48b8-8cf5-39d827393cf6",
                                "43888c09-9d8e-4a54-8605-9a5c0d462218",
                                "e47a03a1-1560-461e-9bfc-dd76d9dc6181",
                                "008ec041-ae57-4774-a6c2-e4535c527cde",
                                "ab890c28-6915-4f1f-a603-b8b1cf6d2b94",
                                "6de57207-fff4-4cbe-be9c-8359504e4e51"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3627,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "97d85382-7fec-48cc-94dc-58296387747b",
                    "title": "My Task API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskModel.test.js",
                    "file": "/test/db/myTaskModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4a1c85f1-a199-4839-96d5-dcba4d7f15f2",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskModel.test.js",
                            "file": "/test/db/myTaskModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "My Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "5c79124b-f668-4dc5-9de9-5ef99b8c2617",
                                    "parentUUID": "4a1c85f1-a199-4839-96d5-dcba4d7f15f2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "My Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "51eb1511-5d2a-424c-90aa-400f83cf841c",
                                    "parentUUID": "4a1c85f1-a199-4839-96d5-dcba4d7f15f2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "My Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "151fc094-0aae-44fc-babd-5e96c654ca60",
                                    "parentUUID": "4a1c85f1-a199-4839-96d5-dcba4d7f15f2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "My Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "2349d70c-5c65-431e-bfbb-ffa4a2f37694",
                                    "parentUUID": "4a1c85f1-a199-4839-96d5-dcba4d7f15f2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "51eb1511-5d2a-424c-90aa-400f83cf841c",
                                "151fc094-0aae-44fc-babd-5e96c654ca60",
                                "2349d70c-5c65-431e-bfbb-ffa4a2f37694"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 31,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "707c1138-4796-4814-b672-bc8934263e49",
                    "title": "Instance API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                    "file": "/test/integration/instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 16,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken()\nthis.timeout(105000); \nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "00a32884-83d7-4418-b217-f003d12dd841",
                            "parentUUID": "707c1138-4796-4814-b672-bc8934263e49",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "537735cc-6148-4bb1-abe0-9580a8dfcc79",
                            "title": "getInstancesByPermission",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of instances for a user with monitor permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with monitor permissions",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "94ce4bdf-c901-45ec-980d-93b4a46aa9f7",
                                    "parentUUID": "537735cc-6148-4bb1-abe0-9580a8dfcc79",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances for a user with manage permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with manage permissions",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "8bfb85c9-5f01-4755-aad5-79b6939d7c77",
                                    "parentUUID": "537735cc-6148-4bb1-abe0-9580a8dfcc79",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances started by the user calling the endpoint",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances started by the user calling the endpoint",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "d6786f14-0666-4cc6-bc9e-b681e3bdb8d2",
                                    "parentUUID": "537735cc-6148-4bb1-abe0-9580a8dfcc79",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"monitor\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"monitor\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 143,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"gteq\",\"type\":\"date\",\"value\":'2010-01-01'}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"lteq\",\"type\":\"date\",\"value\":'2030-01-01'}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "435b894f-f551-4419-ac35-bcd3af668a44",
                                    "parentUUID": "537735cc-6148-4bb1-abe0-9580a8dfcc79",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"mine\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"mine\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 153,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "b7252612-adba-42ec-804c-a76d307a6c02",
                                    "parentUUID": "537735cc-6148-4bb1-abe0-9580a8dfcc79",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "94ce4bdf-c901-45ec-980d-93b4a46aa9f7",
                                "8bfb85c9-5f01-4755-aad5-79b6939d7c77",
                                "d6786f14-0666-4cc6-bc9e-b681e3bdb8d2",
                                "435b894f-f551-4419-ac35-bcd3af668a44",
                                "b7252612-adba-42ec-804c-a76d307a6c02"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 353,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "27bf1669-05dc-4b31-ac79-ddd5c855e1a0",
                            "title": "deleteInstances",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a batch of instances",
                                    "fullTitle": "Instance API Tests deleteInstances should delete a batch of instances",
                                    "timedOut": false,
                                    "duration": 331,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n            let result = await instanceController.getMyRequests()\n            let instanceGuids= result.results.map((i) => {\n                return i.instanceGuid;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.body = JSON.stringify(instanceGuids);\n           \n\t\t\tawait handlers.deleteInstances(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n            expect(mockRes.body).to.exist;\n\t\t\tlet deleted = mockRes.body;\n            expect(deleted.instancesDeleted).to.exist;\n            expect(deleted.instancesDeleted).to.equal(instanceGuids.length);\n            \n            //retore them\n            \n            let restored = await instanceController.restoreInstances(instanceGuids);\n            //expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\n            expect(restored.length).to.equal(instanceGuids.length);",
                                    "err": {},
                                    "uuid": "8bb8ad46-ec59-427d-bdc6-b8ed1cb1d1a9",
                                    "parentUUID": "27bf1669-05dc-4b31-ac79-ddd5c855e1a0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8bb8ad46-ec59-427d-bdc6-b8ed1cb1d1a9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 331,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "78b4650d-ef26-4bca-a6b2-e7dcfa6573b0",
                    "title": "MyTask API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/myTask.test.js",
                    "file": "/test/integration/myTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "MyTask API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 9,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "ec0f766a-8014-493c-a048-003c3557067f",
                            "parentUUID": "78b4650d-ef26-4bca-a6b2-e7dcfa6573b0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "MyTask API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 127,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "66feeab3-83ca-4bc6-be1e-48d8ed75ca4d",
                            "parentUUID": "78b4650d-ef26-4bca-a6b2-e7dcfa6573b0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "66feeab3-83ca-4bc6-be1e-48d8ed75ca4d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 127,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "32c47144-8646-4aa0-9748-1ba2de08d921",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "10b55b10-6f65-4b17-a2e3-874a09ef1dbf",
                    "title": "Permission/User Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/user.test.js",
                    "file": "/test/integration/user.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Permission/User Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 13,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nconst user  = config.tenantOne.adminUser;\nconst session = {tenant: config.tenantOne.tenantId, user_sid: user.sid.toLowerCase()}\nthis.timeout(105000); \nlet deletes = await redis.delAsync([`{$session.tenant}.permissions.${session.user_sid}.`]);",
                            "err": {},
                            "uuid": "c0ac1e01-cdb4-430b-af8d-f059e85e2370",
                            "parentUUID": "10b55b10-6f65-4b17-a2e3-874a09ef1dbf",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Permission/User Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "",
                            "err": {},
                            "uuid": "f04d9308-5c35-4aac-a0d5-70214d5cb2bd",
                            "parentUUID": "10b55b10-6f65-4b17-a2e3-874a09ef1dbf",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "331cecfd-e6db-4920-a03d-4c05cf2dfe98",
                            "title": "isSysAdminHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/user.test.js",
                            "file": "/test/integration/user.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return {isSysAdmin: true} for an admin user",
                                    "fullTitle": "Permission/User Tests isSysAdminHandler should return {isSysAdmin: true} for an admin user",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n        let req = await mocks.req();\n        let isSysAdmin  = await userFunctions.isSysAdminHandler(req, mockRes);\n        expect(mockRes.statusCode).equal(200);\n        expect(mockRes.body).to.exist;\n        const info = mockRes.body;\n        expect(info.isSysAdmin).to.be.true",
                                    "err": {},
                                    "uuid": "7027e50d-187a-43a9-8199-633b238aaf1a",
                                    "parentUUID": "331cecfd-e6db-4920-a03d-4c05cf2dfe98",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7027e50d-187a-43a9-8199-633b238aaf1a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8691313c-be3e-4bd2-90c3-d1af8415f4b8",
                    "title": "Permission/Workflow Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/workflow.test.js",
                    "file": "/test/integration/workflow.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Permission/Workflow Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig()\nuser  = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: user.sid.toLowerCase()}\nthis.timeout(105000);\nlet deletes = await redis.delAsync([`{$session.tenant}.${session.user_name}.permissions`]);",
                            "err": {},
                            "uuid": "1250ee82-7fb4-4eb0-879d-15da5259b7cb",
                            "parentUUID": "8691313c-be3e-4bd2-90c3-d1af8415f4b8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Permission/Workflow Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "",
                            "err": {},
                            "uuid": "ee879e74-4ec2-41bd-8379-9da35acac1fd",
                            "parentUUID": "8691313c-be3e-4bd2-90c3-d1af8415f4b8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5dd7db86-36d7-4116-b877-df6c1552f879",
                            "title": "currentUserPermissionssHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/workflow.test.js",
                            "file": "/test/integration/workflow.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return permissions",
                                    "fullTitle": "Permission/Workflow Tests currentUserPermissionssHandler should cache and return permissions",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n        let req = await mocks.req();\n        let isSysAdmin  = await workflow.currentUserPermissionsHandler(req, mockRes);\n        expect(mockRes.statusCode).equal(200);\n        expect(mockRes.body).to.exist;\n        const info = mockRes.body;\n        expect(info.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "b42789a3-ffc1-4399-93df-5047ad09f030",
                                    "parentUUID": "5dd7db86-36d7-4116-b877-df6c1552f879",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b42789a3-ffc1-4399-93df-5047ad09f030"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "b291aed1-1f6d-47ab-8a37-89d0bfa01cc9",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "fc7bf246-c1b6-4448-aec4-fa2f9fc6f66b",
                    "title": "Settings API Holiday Controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/holidays.controller.test.js",
                    "file": "/test/integration/db/holidays.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Holiday Controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 13,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenantId: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}\ntenantId = config.tenantOne.tenantId;\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "d915144c-6a3e-4ad8-a7de-4a16f1bcf68e",
                            "parentUUID": "fc7bf246-c1b6-4448-aec4-fa2f9fc6f66b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should insert, select, delete and list holidays",
                            "fullTitle": "Settings API Holiday Controller tests should insert, select, delete and list holidays",
                            "timedOut": false,
                            "duration": 1190,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let holiday = {\n  holidayName: \"O Day\",\n  startDate: \"2019-10-10T00:00:00.000Z\",\n  endDate: \"2019-10-11T00:00:00.000Z\",\n  country: \"USA\"\n};\nlet holidayController = new HolidayController(oauth);\n// insert\nconst inserted = await holidayController.insertHoliday(holiday);\nvalidateHoliday(holiday, inserted);\n// select\nlet gotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n// update\nholiday.holidayGuid = inserted.holidayGuid;\nholiday.holidayName = \"Easter Monday\";\nholiday.country = \"Papa New Guinea\";\nawait holidayController.updateHoliday(holiday);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n//list\nconst holidays = await holidayController.listHolidays();\nexpect(holidays.length).to.be.gt(0);\nholiday = holidays[0];\nexpect(holiday.holidayGuid).to.exist;\nexpect(holiday.holidayName).to.exist;\nexpect(holiday.startDate).to.exist;\nexpect(holiday.endDate).to.exist;\nexpect(holiday.country).to.exist;\n// delete\nconst holidayGuids = [inserted.holidayGuid];\nawait holidayController.deleteHolidays(holidayGuids);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nexpect(gotOne).to.not.exist;",
                            "err": {},
                            "uuid": "d72d579a-17ce-4f9e-b8d3-9ef16691ffb2",
                            "parentUUID": "fc7bf246-c1b6-4448-aec4-fa2f9fc6f66b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "d72d579a-17ce-4f9e-b8d3-9ef16691ffb2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1190,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d5ce1d0b-0142-44d3-b3b3-9a05ed09b0b9",
                    "title": "Settings API Language Controller test",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/languages.controller.test.js",
                    "file": "/test/integration/db/languages.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Language Controller test \"before all\" hook",
                            "timedOut": false,
                            "duration": 16,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}",
                            "err": {},
                            "uuid": "3b0a073c-a78c-4c06-9b54-9cb902da51ac",
                            "parentUUID": "d5ce1d0b-0142-44d3-b3b3-9a05ed09b0b9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of languages",
                            "fullTitle": "Settings API Language Controller test should get a list of languages",
                            "timedOut": false,
                            "duration": 31,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const languageCtrl = new LanguageController(oauth);\nconst languages = await languageCtrl.listLanguages();\nexpect(languages.length).to.be.gt(0);\nconst language = languages[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "f18086da-7858-474c-b488-ca9a50569e0c",
                            "parentUUID": "d5ce1d0b-0142-44d3-b3b3-9a05ed09b0b9",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f18086da-7858-474c-b488-ca9a50569e0c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 31,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f99a3032-9c5a-421c-af16-689ba0d75ee4",
                    "title": "Settings API System Setting Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                    "file": "/test/integration/db/systemsetting.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API System Setting Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 12,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} \nthis.timeout(105000);",
                            "err": {},
                            "uuid": "c6fa46f2-853a-4e56-99b0-3db22b5bb740",
                            "parentUUID": "f99a3032-9c5a-421c-af16-689ba0d75ee4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "676e3d51-d900-4fe0-9bc0-9cb7adcbfcbe",
                            "title": "Model Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a system setting model",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should get a system setting model",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nexpect(SystemSettingsModel).to.exist;",
                                    "err": {},
                                    "uuid": "04304855-048f-42db-aa67-0e06df691855",
                                    "parentUUID": "676e3d51-d900-4fe0-9bc0-9cb7adcbfcbe",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should return system settings",
                                    "timedOut": false,
                                    "duration": 136,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nlet results = await SystemSettingsModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "e17284ad-c050-401b-8748-988bc3a939d6",
                                    "parentUUID": "676e3d51-d900-4fe0-9bc0-9cb7adcbfcbe",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "04304855-048f-42db-aa67-0e06df691855",
                                "e17284ad-c050-401b-8748-988bc3a939d6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 138,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6a309e15-efaa-45b7-9a6c-c9c81237d300",
                            "title": "Controller Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list system settings",
                                    "timedOut": false,
                                    "duration": 360,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listSystemSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\nexpect(systemSettings[0].masterSettings.settingsGuid).to.exist;",
                                    "err": {},
                                    "uuid": "8a03444c-0b3f-4a87-b7a0-c7b236a320b0",
                                    "parentUUID": "6a309e15-efaa-45b7-9a6c-c9c81237d300",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list password settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list password settings",
                                    "timedOut": false,
                                    "duration": 334,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\n// only system settings listed should be the ones related to passwords   \nexpect(systemSettings.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(systemSettings.length);",
                                    "err": {},
                                    "uuid": "839d52a7-0831-4cda-8e68-06fcd4ca31eb",
                                    "parentUUID": "6a309e15-efaa-45b7-9a6c-c9c81237d300",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should update system settings",
                                    "timedOut": false,
                                    "duration": 1204,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let pwdSettings = [{\n  \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION\",\n  \"settingsValue\":\"14\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n    \"settingsKey\":\"PWD_EXPIRATION\",\n    \"keyDefault\":\"7\",\n    \"keyOptions\":null,\n    \"description\":\"Length in days before a user is prompted to change his or her password.\"\n  }\n}, {\n  \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n  \"settingsValue\":\"1\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n    \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n    \"keyDefault\":\"0\",\n    \"keyOptions\":\"1|0\",\n    \"description\":\"Flag to turn enforcement of password expiration.  1 = On, 0 = Off\"\n  }\n}]\n// save the changes above, query to verify changes, set them back to the defaults\nlet systemSettingController = new SystemSettingController(session)\nawait systemSettingController.updateSystemSettings(pwdSettings)\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('14')\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1')\npwdSettings.forEach(setting => {\n  setting.settingsValue = setting.masterSettings.keyDefault\n})\nawait systemSettingController.updateSystemSettings(pwdSettings)\nsystemSettings = await systemSettingController.listPasswordSettings();\nlet pwdExpiration = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION')\nlet pwdExpirationActive = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE')\nexpect(pwdExpiration.settingsValue).to.equal(pwdExpiration.masterSettings.keyDefault)\nexpect(pwdExpirationActive.settingsValue).to.equal(pwdExpirationActive.masterSettings.keyDefault)",
                                    "err": {},
                                    "uuid": "9db22454-f071-4ba5-b70f-9fe0c5aecd6f",
                                    "parentUUID": "6a309e15-efaa-45b7-9a6c-c9c81237d300",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8a03444c-0b3f-4a87-b7a0-c7b236a320b0",
                                "839d52a7-0831-4cda-8e68-06fcd4ca31eb",
                                "9db22454-f071-4ba5-b70f-9fe0c5aecd6f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1898,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c167c46c-e855-4826-b411-0d26d944959d",
                    "title": "Biztime API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/biztimes.test.js",
                    "file": "/test/integration/functions/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Biztime API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 55,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nmockRes = await mocks.mockResponse();\nreq = await mocks.req(jwt);",
                            "err": {},
                            "uuid": "77343d46-6820-4956-96a7-211355a7a220",
                            "parentUUID": "c167c46c-e855-4826-b411-0d26d944959d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of biztimes",
                            "fullTitle": "Biztime API Tests should return a list of biztimes",
                            "timedOut": false,
                            "duration": 68,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.listBiztimes(req, mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body.length).to.be.gt(0);\nvalidateBiztime(mockRes.body[0]);",
                            "err": {},
                            "uuid": "a5351cda-14ba-48dd-b7a0-350ca4d1ddad",
                            "parentUUID": "c167c46c-e855-4826-b411-0d26d944959d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert a biztime",
                            "fullTitle": "Biztime API Tests should insert a biztime",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.insertBiztime(\n  {...req, body: {...biztimeToInsert}},\n  mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\ninsertedBiztime = mockRes.body;\nvalidateBiztime(biztimeToInsert, insertedBiztime);",
                            "err": {},
                            "uuid": "e4d0d7d2-d013-4ae6-9faf-b9817ef22dbc",
                            "parentUUID": "c167c46c-e855-4826-b411-0d26d944959d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update a biztime",
                            "fullTitle": "Biztime API Tests should update a biztime",
                            "timedOut": false,
                            "duration": 105,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.updateBiztime(\n  {\n    ...req,\n    params: {bizTimeGuid: insertedBiztime.bizTimeGuid},\n    body: {...biztimeToUpdate}},\n  mockRes\n  );\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nvalidateBiztime(biztimeToUpdate, mockRes.body);",
                            "err": {},
                            "uuid": "9533f3fd-876a-40f6-b452-fc61ddc98c45",
                            "parentUUID": "c167c46c-e855-4826-b411-0d26d944959d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a5351cda-14ba-48dd-b7a0-350ca4d1ddad",
                        "e4d0d7d2-d013-4ae6-9faf-b9817ef22dbc",
                        "9533f3fd-876a-40f6-b452-fc61ddc98c45"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 205,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fd80422f-c081-48bd-a4f2-12bb5ed78597",
                    "title": "Settings API Holiday Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/holidays.test.js",
                    "file": "/test/integration/functions/holidays.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "insert, list, get, delete holiday",
                            "fullTitle": "Settings API Holiday Tests insert, list, get, delete holiday",
                            "timedOut": false,
                            "duration": 308,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nlet listHolidaysEvent = await mocks.listHolidaysEvent()\nlet insertHolidayEvent = await mocks.insertHolidayEvent();\nlet getHolidayEvent = await mocks.getHolidayEvent();\n\n// insert\nawait holidays.insert(insertHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nvalidateHoliday(insertHolidayEvent.body, inserted);\n//list\nawait holidays.list(listHolidaysEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nexpect(mockRes.body.length).to.be.greaterThan(0);\nexpectDefinedHoliday(mockRes.body[0]);\n// get\ngetHolidayEvent.params.holidayGuid = inserted.holidayGuid;\nawait holidays.get(getHolidayEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst got = mockRes.body;\nvalidateHoliday(inserted, got);\n// delete\nlet deleteEvent = Object.assign({}, listHolidaysEvent);\ndeleteEvent.body = [inserted.holidayGuid];\nawait holidays.remove(deleteEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\ngetHolidayEvent.params = {\n  holidayGuid: inserted.holidayGuid\n};\nawait holidays.get(getHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(404);",
                            "err": {},
                            "uuid": "4054cff9-5972-4a24-8297-ac928f87d4f1",
                            "parentUUID": "fd80422f-c081-48bd-a4f2-12bb5ed78597",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4054cff9-5972-4a24-8297-ac928f87d4f1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 308,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b28f5fa6-f4ae-4176-bbe3-ba019f040c47",
                    "title": "Settings API Languages Test",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/languages.test.js",
                    "file": "/test/integration/functions/languages.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of holidays",
                            "fullTitle": "Settings API Languages Test should get a list of holidays",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nconst listLanguagesEvent = await mocks.listLanguagesEvent();\nawait languages.list(listLanguagesEvent, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nexpect(mockRes.body.length).to.be.gt(0);\nconst language = mockRes.body[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "817669f6-24e7-4eb8-aae6-f153b5dd8e79",
                            "parentUUID": "b28f5fa6-f4ae-4176-bbe3-ba019f040c47",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "817669f6-24e7-4eb8-aae6-f153b5dd8e79"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 17,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4bb087ad-908d-45ea-a33e-255ed0398d4c",
                    "title": "Settings API Password Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/passwordSettings.test.js",
                    "file": "/test/integration/functions/passwordSettings.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the password settings",
                            "fullTitle": "Settings API Password Settings Tests lists the password settings",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait passwordSettings.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\n// only system settings listed should be the ones related to passwords\nexpect(result.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(result.length);",
                            "err": {},
                            "uuid": "a4fafb27-9520-4108-804b-63b1f1335e45",
                            "parentUUID": "4bb087ad-908d-45ea-a33e-255ed0398d4c",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a4fafb27-9520-4108-804b-63b1f1335e45"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 59,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9fba15f7-d2a1-4299-bf83-acaaa847cf06",
                    "title": "Settings API System Config Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/systemConfig.test.js",
                    "file": "/test/integration/functions/systemConfig.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the system config settings",
                            "fullTitle": "Settings API System Config Tests lists the system config settings",
                            "timedOut": false,
                            "duration": 155,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait systemConfig.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(40);\nexpect(result[0].settingsGuid).to.exist\nexpect(result[0].settingsKey).to.exist\nexpect(result[0].settingsValue).to.exist\nexpect(result[0].masterSettings.description).to.exist\nexpect(result[0].masterSettings.keyDefault).to.exist\nexpect(result[0].masterSettings.keyOptions).to.exist",
                            "err": {},
                            "uuid": "7029c745-d678-4380-b132-8d59a635525d",
                            "parentUUID": "9fba15f7-d2a1-4299-bf83-acaaa847cf06",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates system config settings",
                            "fullTitle": "Settings API System Config Tests updates system config settings",
                            "timedOut": false,
                            "duration": 912,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"true\"\n}]\nawait systemConfig.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nlet result = mockRes.body\nexpect(result).to.equal('1');\n// verify that change was made\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nlet allowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('true')\n// revert the change\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"false\"\n}]\nawait systemConfig.update(mockReq, mockRes);\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nallowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('false')",
                            "err": {},
                            "uuid": "0dbf62eb-6314-419e-82a5-8f70706063e8",
                            "parentUUID": "9fba15f7-d2a1-4299-bf83-acaaa847cf06",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7029c745-d678-4380-b132-8d59a635525d",
                        "0dbf62eb-6314-419e-82a5-8f70706063e8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1067,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b4b72fa5-b812-426d-8a0c-0e216b0f9267",
                    "title": "Settings API Utilities Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                    "file": "/test/integration/functions/utilities.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3cabd95a-2a45-4e7b-b8f3-b26349b51028",
                            "title": "locales",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "lists locales",
                                    "fullTitle": "Settings API Utilities Tests locales lists locales",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\nawait utils.listLocales(mocks.req(), mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "a57fd9be-e658-446c-8bfe-7acfff59f6e5",
                                    "parentUUID": "3cabd95a-2a45-4e7b-b8f3-b26349b51028",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a57fd9be-e658-446c-8bfe-7acfff59f6e5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "93a8d943-b766-4ebb-840d-b86e3650769b",
                            "title": "timezones",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list timezones",
                                    "fullTitle": "Settings API Utilities Tests timezones should list timezones",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listTimezones(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "3a199b9e-50ce-416b-9a7a-15d0069353f1",
                                    "parentUUID": "93a8d943-b766-4ebb-840d-b86e3650769b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3a199b9e-50ce-416b-9a7a-15d0069353f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8ce0b879-67fe-4801-abe9-9a2181208b0f",
                            "title": "running versions",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list running versions",
                                    "fullTitle": "Settings API Utilities Tests running versions should list running versions",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listRunningVersions(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "ee6ecb54-b429-42d6-9347-5f300f81e094",
                                    "parentUUID": "8ce0b879-67fe-4801-abe9-9a2181208b0f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ee6ecb54-b429-42d6-9347-5f300f81e094"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "0044277e-ec50-48b9-9bc6-0a61c41992d3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "1fe9b1c0-1155-48d5-b130-33028b59c6ee",
                    "title": "Task Dispatcher API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                    "file": "/test/integration/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "fullTitle": "Task Dispatcher API Controller Tests \"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "timedOut": false,
                            "duration": 23,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}",
                            "err": {},
                            "uuid": "8514c0e0-d423-4635-8497-c0890fc3ac0c",
                            "parentUUID": "1fe9b1c0-1155-48d5-b130-33028b59c6ee",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4a15289d-b1dd-427c-a0ca-e4da31ce3214",
                            "title": "ProcessTaskController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get process tasks",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskController should get process tasks",
                                    "timedOut": false,
                                    "duration": 1553,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskController = new controllers.ProcessTaskController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nlet processTasks = await processTaskController.getProcessTasks(updateMyProfileProcessSid)\nexpect(processTasks).to.exist;\nexpect(processTasks.length).to.be.gt(0);\nexpect(processTasks[0].processTaskGuid).to.exist;",
                                    "err": {},
                                    "uuid": "eb110951-e6aa-4182-a05d-b6b014a7ac0f",
                                    "parentUUID": "4a15289d-b1dd-427c-a0ca-e4da31ce3214",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "eb110951-e6aa-4182-a05d-b6b014a7ac0f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1553,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "31cf64a4-2c4f-4b85-bc57-8a8b7f13ef17",
                            "title": "ProcessTaskAttributeController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task attributes",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should list process task attributes",
                                    "timedOut": false,
                                    "duration": 177,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet includeExt = false\nlet processTaskAttributes = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributes[6].extendedAtt).to.not.exist;\nincludeExt = true\nlet processTaskAttributesIncExt = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributesIncExt).to.exist;\nexpect(processTaskAttributesIncExt.length).to.be.gt(0);\nexpect(processTaskAttributesIncExt[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributesIncExt[6].extendedAtt.extAttribute).to.exist;",
                                    "err": {},
                                    "uuid": "de22f782-e864-4895-84b9-2ed06a4693d9",
                                    "parentUUID": "31cf64a4-2c4f-4b85-bc57-8a8b7f13ef17",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get and update a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get and update a process task attribute",
                                    "timedOut": false,
                                    "duration": 377,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeGuid = '7cece0ab-bda6-4b13-a8fb-3f5c467371e6'  \nlet processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nlet processTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\n// console.log(processTaskAttribute)\nexpect(processTaskAttribute.attributeValue).to.equal('0')\nlet numberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: 'TEST'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('TEST')\n// must set it back to original value so that we don't break anything\nnumberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: '0'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('0')",
                                    "err": {},
                                    "uuid": "6b506272-fd80-4c48-870c-773d02034622",
                                    "parentUUID": "31cf64a4-2c4f-4b85-bc57-8a8b7f13ef17",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should insert a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should insert a process task attribute",
                                    "timedOut": false,
                                    "duration": 87,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// pick any process task and insert a process task attribute\n// then delete it\nconst processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// give \"Update my profile - Start task\" a test process task att\nconst processTaskGuid = '27cb04ea-b19d-4327-8b3a-e82cc538d44d'\nconst attributeKey = 'TEST_KEY'\nconst attributeValue = 'TEST_VALUE'\nconst ordinal = 1\nconst processTaskAttribute = await processTaskAttributeController.insert({\n  processTaskGuid,\n  attributeKey,\n  attributeValue,\n  ordinal\n})\nexpect(processTaskAttribute.processTaskAttributeGuid).to.be.a.uuid()\nexpect(processTaskAttribute.processTaskGuid).to.equal(processTaskGuid)\nexpect(processTaskAttribute.attributeKey).to.equal(attributeKey)\nexpect(processTaskAttribute.attributeValue).to.equal(attributeValue)\nexpect(processTaskAttribute.ordinal).to.equal(ordinal)\n// cleanup\n// const numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nconst numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nexpect(numberOfAffectedRows).to.equal(1)",
                                    "err": {},
                                    "uuid": "a39ac705-e172-489f-aed3-ee2924e055b0",
                                    "parentUUID": "31cf64a4-2c4f-4b85-bc57-8a8b7f13ef17",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get the process task attribute max ordinal value for a process task",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get the process task attribute max ordinal value for a process task",
                                    "timedOut": false,
                                    "duration": 50,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// \"Update my profile - Start task\" a test process task att\nlet processTaskGuid = \"27cb04ea-b19d-4327-8b3a-e82cc538d44d\";\n// that process task has no atts so its max ordinal should be null\nlet maxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(null);\n// \"Update my profile - User Profile\" task does have atts.  seed db goes up to 12\nprocessTaskGuid = \"28d88aa5-fc4c-4e16-b32d-2964c738d49b\";\nmaxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(12);",
                                    "err": {},
                                    "uuid": "7390e485-1406-430f-9b75-78c8d57defcf",
                                    "parentUUID": "31cf64a4-2c4f-4b85-bc57-8a8b7f13ef17",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "de22f782-e864-4895-84b9-2ed06a4693d9",
                                "6b506272-fd80-4c48-870c-773d02034622",
                                "a39ac705-e172-489f-aed3-ee2924e055b0",
                                "7390e485-1406-430f-9b75-78c8d57defcf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 691,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3b4ba0f7-0ef3-42de-99af-cf8c6ccb2429",
                            "title": "ProcessTaskMappingController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task mappings",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskMappingController should list process task mappings",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskMappingController = new controllers.ProcessTaskMappingController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet processTaskAttributes = await processTaskMappingController.list(profileFormProcessTaskSid)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[0].processTaskMappingGuid).to.exist;",
                                    "err": {},
                                    "uuid": "4dd011d3-6b9b-49fb-a44e-a82cb5e997f9",
                                    "parentUUID": "3b4ba0f7-0ef3-42de-99af-cf8c6ccb2429",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4dd011d3-6b9b-49fb-a44e-a82cb5e997f9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "dd5ded65-35ff-4116-b044-7bf33a5fce3d",
                            "title": "ProcessController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should update a process's modified by and date fields",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessController should update a process's modified by and date fields",
                                    "timedOut": false,
                                    "duration": 83,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processController = new controllers.ProcessController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nconst systemUserGuid = 'D8C469C3-F781-4179-A09C-6D148885FB30'\nlet process = await processController.get(updateMyProfileProcessSid)\nexpect(process).to.exist;\nexpect(process.processGuid.toLowerCase()).to.equal(updateMyProfileProcessSid);\nconst oldModifiedDate = process.modifiedDate\nconst numberOfAffectedRows = await processController.updateModifiedByAndDate(updateMyProfileProcessSid)\nexpect(numberOfAffectedRows).to.equal(1)\nprocess = await processController.get(updateMyProfileProcessSid) \nexpect(process.modifiedDate).to.be.greaterThan(oldModifiedDate)\n// for some reason when executed in a test the db record's modifiedBy is set to \n// the systemUserGuid instead of the contact sid specified in the session (4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF)\nexpect(process.modifiedBy).to.equal(systemUserGuid)",
                                    "err": {},
                                    "uuid": "714f67bf-32da-4db1-a2ac-b46a44471c51",
                                    "parentUUID": "dd5ded65-35ff-4116-b044-7bf33a5fce3d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "714f67bf-32da-4db1-a2ac-b46a44471c51"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 83,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "47a53ace-94e8-4f3e-b4c1-d364fa2201e5",
                    "title": "Task Dispatcher API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/model.test.js",
                    "file": "/test/integration/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c942d5ca-911f-427c-a150-c6584b5f78c5",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/model.test.js",
                            "file": "/test/integration/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Task Dispatcher API Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "8ea00e92-6931-430c-ab09-cc9c21bd1500",
                                    "parentUUID": "c942d5ca-911f-427c-a150-c6584b5f78c5",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 570,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = await sqldb.models.bindModel(\n  config.tenantOne.tenantId,\n  vwProcessTasksModels.vwProcessTasks\n);\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "2dcec059-25d8-42af-8e24-b71dc6402c47",
                                    "parentUUID": "c942d5ca-911f-427c-a150-c6584b5f78c5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 186,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = (await models.getModels(config.tenantOne.tenantId))\n  .vwProcessTasks;\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "7e0124f2-28a3-4b87-aa6a-17bb070b89fe",
                                    "parentUUID": "c942d5ca-911f-427c-a150-c6584b5f78c5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 293,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tentantModels[config.tenantOne.tenantId]).to.exist;\nlet results = await models._tentantModels[\n  config.tenantOne.tenantId\n].vwProcessTasks.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "f9b744ae-73b6-4a23-85ba-85c4cc5be0a3",
                                    "parentUUID": "c942d5ca-911f-427c-a150-c6584b5f78c5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2dcec059-25d8-42af-8e24-b71dc6402c47",
                                "7e0124f2-28a3-4b87-aa6a-17bb070b89fe",
                                "f9b744ae-73b6-4a23-85ba-85c4cc5be0a3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1049,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8b5dfd60-78f8-417b-9703-044e92a4a5ad",
                    "title": "Task Dispatcher API FPT Push Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/functions/ftpPush.test.js",
                    "file": "/test/integration/functions/ftpPush.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task file settings",
                            "fullTitle": "Task Dispatcher API FPT Push Tests gets task file settings",
                            "timedOut": false,
                            "duration": 39,
                            "state": "failed",
                            "speed": null,
                            "pass": false,
                            "fail": true,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfilesettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst data = mockRes.body.Data;\nexpect(data).to.include({PickDirectory: \"No\"});\nexpect(data).to.include({FileToFTP: \"da062754-a9c3-4f22-ac6a-1da38bf3d8ed;cf50007e-11b6-4c3c-bb1f-0dfdcc435a45\"});\nexpect(data).to.include({FTPPassword: \"ftp\"});\nexpect(data).to.include({FTPSite: \"ftp\"});\nexpect(data).to.include({FTPUsername: \"ftp\"});",
                            "err": {
                                "message": "AssertionError: expected {} to have property 'PickDirectory'",
                                "estack": "AssertionError: expected {} to have property 'PickDirectory'\n    at Context.<anonymous> (test/integration/functions/ftpPush.test.js:20:21)",
                                "diff": null
                            },
                            "uuid": "330e529a-3d2f-47ce-adf3-cb39bbc8127c",
                            "parentUUID": "8b5dfd60-78f8-417b-9703-044e92a4a5ad",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets task file options",
                            "fullTitle": "Task Dispatcher API FPT Push Tests gets task file options",
                            "timedOut": false,
                            "duration": 69,
                            "state": "failed",
                            "speed": null,
                            "pass": false,
                            "fail": true,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfileoptions\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nconst data = mockRes.body.Data[0];\nconsole.log(data);\nexpect(data).to.include('da062754-a9c3-4f22-ac6a-1da38bf3d8ed;cf50007e-11b6-4c3c-bb1f-0dfdcc435a45');\nexpect(data).to.include('Form : File Attachment:  (Task Output)');\nexpect(data).to.include('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {
                                "message": "AssertionError: expected 500 to equal 200",
                                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/integration/functions/ftpPush.test.js:35:35)",
                                "diff": "- 500\n+ 200\n"
                            },
                            "uuid": "e7105c16-9072-43da-b7cf-818b5a9eff41",
                            "parentUUID": "8b5dfd60-78f8-417b-9703-044e92a4a5ad",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [],
                    "failures": [
                        "330e529a-3d2f-47ce-adf3-cb39bbc8127c",
                        "e7105c16-9072-43da-b7cf-818b5a9eff41"
                    ],
                    "pending": [],
                    "skipped": [],
                    "duration": 108,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "541d0ead-e58b-4d17-a9df-1146ca413168",
                    "title": "Task Dispatcher API PDF Merge Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/functions/pdfMerge.test.js",
                    "file": "/test/integration/functions/pdfMerge.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task settings",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets task settings",
                            "timedOut": false,
                            "duration": 87,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_gettasksettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\n// vue output\n// expect(result.length).to.be.greaterThan(1);\n// expect(result[0].attributeKey).to.exist;\n// expect(result[0].attributeValue).to.exist;\n// expect(result.find(x => x.attributeKey == 'GeneratedFileName')).to.exist\n// expect(result.find(x => x.attributeKey == 'FirstPDF')).to.exist\n// angular output\nexpect(result.Data.GeneratedFileName).to.exist;\nexpect(result.Data.FirstPDF).to.exist;\nexpect(result.Data.SecondPDF).to.exist;",
                            "err": {},
                            "uuid": "e306281d-853f-48aa-b222-580041e7819c",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF options",
                            "timedOut": false,
                            "duration": 86,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getpdfoptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.length).to.be.greaterThan(1);\n// vue output\n// expect(result[0].displayName).to.exist;\n// expect(result[0].processTaskGuid).to.exist;\n// expect(result[0].taskTypeGuid).to.exist;\n// angular output\nexpect(result[0].length).to.be.greaterThan(1);\nexpect(result[0][0]).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e;52407ad7-bd98-4023-8d88-91ef4464cd98');\nexpect(result[0][1]).to.equal('second PDF Merge Form : File Attachment (Task Output)');\nexpect(result[0][2]).to.equal('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "79626559-b153-4dcd-98cd-22b7a6df9fe6",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists PDF rule options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests lists PDF rule options",
                            "timedOut": false,
                            "duration": 49,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"listRuleOptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.eql([{ Value: \"GeneratedPDF\", Label: \"Generated PDF\", Type: \"FileAttachment\"}])",
                            "err": {},
                            "uuid": "abee0cd4-f232-4e73-a406-b75bb1dc4d94",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF fields",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF fields",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\n// vue output\n// expect(result.length).to.equal(1)\n// expect(result[0]).to.equal('FILE_NAME')\n// angular output\nexpect(result.Data.length).to.equal(1)\nexpect(result.Data[0][0]).to.equal('FILE_NAME')\nexpect(result.Data[0][1]).to.equal('FILE_NAME')",
                            "err": {},
                            "uuid": "c31f0460-7453-42e7-8814-8b5142acb60c",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - data source - form mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - data source - form mapping",
                            "timedOut": false,
                            "duration": 95,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_Input')\nexpect(result[0].PrefillField).to.equal('1601919933647')\nexpect(result[0].Description).to.equal('Data - second PDF Merge Form - Merged PDF Filename:')\nexpect(result[0].TaskSID).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e')",
                            "err": {},
                            "uuid": "8a273c31-2dfb-4374-9e3d-ceeddac463d9",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - fixed value mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - fixed value mapping",
                            "timedOut": false,
                            "duration": 86,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_fixedValue = 'c2095ccf-896b-46a0-b5e9-8e5b7e288270' \nconst processTaskSid_fixedValue = '5f719bb1-11b8-43d9-a9fd-66e55306f4eb'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_fixedValue, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_fixedValue }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Fixed_Value')\nexpect(result[0].PrefillField).to.equal('fixValFileName')\nexpect(result[0].Description).to.equal('Fixed Value - fixValFileName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "592a9a9a-6687-46ac-9302-2851fe263094",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - request id mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - request id mapping",
                            "timedOut": false,
                            "duration": 114,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_requestId = 'f9f94cfe-d4b3-4d89-9695-1b32c6cee55d' \nconst processTaskSid_requestId = '9b4f1444-7bd7-481a-8008-69a0490da139'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_requestId, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_requestId }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Request')\nexpect(result[0].PrefillField).to.equal('ID')\nexpect(result[0].Description).to.equal('Request - ID')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "7db9cd48-48a7-4d1e-aa76-ba048b1f401e",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - client username mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - client username mapping",
                            "timedOut": false,
                            "duration": 104,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_clientUsername = 'd1a7c44e-1e6e-4cdf-9d39-deac08a8b5cc' \nconst processTaskSid_clientUsername = 'a79cde56-9f3a-4be4-9824-dd634eddbff3'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_clientUsername, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_clientUsername }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Client')\nexpect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Client - UserName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "f5ba8fba-576a-42a5-8961-db8450a08095",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - status pdfmerge mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - status pdfmerge mapping",
                            "timedOut": false,
                            "duration": 204,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_statusPdfMerge = 'ab3a8404-c208-4ca7-8ae6-637b16c23368' \nconst processTaskSid_statusPdfMerge = '7f4f1f42-228c-46dc-90a3-77fe15fe7412'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_statusPdfMerge, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_statusPdfMerge }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_State')\n// expect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Status - PDF Merge - ')\nexpect(result[0].TaskSID).to.equal('7f4f1f42-228c-46dc-90a3-77fe15fe7412')",
                            "err": {},
                            "uuid": "5d975ab1-273d-4b00-badf-e417698c1841",
                            "parentUUID": "541d0ead-e58b-4d17-a9df-1146ca413168",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e306281d-853f-48aa-b222-580041e7819c",
                        "79626559-b153-4dcd-98cd-22b7a6df9fe6",
                        "abee0cd4-f232-4e73-a406-b75bb1dc4d94",
                        "c31f0460-7453-42e7-8814-8b5142acb60c",
                        "8a273c31-2dfb-4374-9e3d-ceeddac463d9",
                        "592a9a9a-6687-46ac-9302-2851fe263094",
                        "7db9cd48-48a7-4d1e-aa76-ba048b1f401e",
                        "f5ba8fba-576a-42a5-8961-db8450a08095",
                        "5d975ab1-273d-4b00-badf-e417698c1841"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 847,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "d88e5cd9-14d9-4f70-a5ee-9cb44d724b0b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "eebcc236-90a2-42cb-929b-8172657baf14",
                    "title": "Tenant API Sessions Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                    "file": "/test/integration/activeSessions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 27,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \ntestConfig = await testLib.getTestConfig();\n    \ntenant = testConfig.tenantOne.tenantId;\ngroup = \"sessionServiceGroup\"\ntestEventType = 'extendSession'\nfullStreamName = tenant + '.stream.' + testStreamName\neventProcessedName = fullStreamName + \".\" + group + \".processed\";\neventHistoryName = fullStreamName + \".history\"",
                            "err": {},
                            "uuid": "ba4d97b5-4466-4a3b-ae52-3a3c4cb7875e",
                            "parentUUID": "eebcc236-90a2-42cb-929b-8172657baf14",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "266815d4-3cfb-4551-8fc5-7acd0224d36d",
                            "parentUUID": "eebcc236-90a2-42cb-929b-8172657baf14",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "797d9e72-7db5-4077-ab10-7b995f9788e6",
                            "title": "Active Sessions",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                            "file": "/test/integration/activeSessions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "7157f3b6-db1d-42af-8d3e-abb23636a349",
                                    "title": "count active sessions",
                                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                                    "file": "/test/integration/activeSessions.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return activeSessions",
                                            "fullTitle": "Tenant API Sessions Tests Active Sessions count active sessions should return activeSessions",
                                            "timedOut": false,
                                            "duration": 7,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions  = await getActiveSessions(tenant);\n//console.log(sessions)\nexpect(sessions).to.exist;\nexpect(sessions).to.have.property(\"activeSessions\")\nexpect(sessions).to.have.property(\"activeUsers\")",
                                            "err": {},
                                            "uuid": "abfaddb6-2323-40c4-ac78-18b551249256",
                                            "parentUUID": "7157f3b6-db1d-42af-8d3e-abb23636a349",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "abfaddb6-2323-40c4-ac78-18b551249256"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 7,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "081b0180-c1cd-4a9b-9f2b-43b175c5067d",
                    "title": "Tenant API licsense stats",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/licenseStats.test.js",
                    "file": "/test/integration/licenseStats.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API licsense stats \"before all\" hook",
                            "timedOut": false,
                            "duration": 3008,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \nconfig = await testLib.getTestConfig();\nlet sp = new stream.StreamPublisher('sessions',config.tenantOne.tenantId);\nawait sp.sendEvent(\"extendSession\", {\n    token: \"abcd234\",\n    user: {\n        sid:\"11111\", \n        user_name: \"iapprove\", \n        email: \"iapprove@integrify.com\", \n        name: \"System System\"\n    }\n})\n    \nawait delay(3000);",
                            "err": {},
                            "uuid": "68340214-bb92-4889-93c2-74b2ef9f1d93",
                            "parentUUID": "081b0180-c1cd-4a9b-9f2b-43b175c5067d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API licsense stats \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "a711a408-6a92-4ce5-8fb5-56e5c06809c4",
                            "parentUUID": "081b0180-c1cd-4a9b-9f2b-43b175c5067d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "94e09c83-248e-4631-88f5-589a9795c112",
                            "title": "Post all stats",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/licenseStats.test.js",
                            "file": "/test/integration/licenseStats.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return ok",
                                    "fullTitle": "Tenant API licsense stats Post all stats should return ok",
                                    "timedOut": false,
                                    "duration": 677,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let result = await postAllStats();\nexpect(result).to.eq(\"ok\");",
                                    "err": {},
                                    "uuid": "b9c17167-617e-4d75-8550-cf9c01c43110",
                                    "parentUUID": "94e09c83-248e-4631-88f5-589a9795c112",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b9c17167-617e-4d75-8550-cf9c01c43110"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 677,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "60ba8b1c-7256-4371-803d-80bec00a0820",
                    "title": "Tenant API Stream-Manager Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                    "file": "/test/integration/monitor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a77fb236-61cf-4e30-b109-172c052a8921",
                            "title": "listTenantStreams",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of the streams for a tenant",
                                    "fullTitle": "Tenant API Stream-Manager Tests listTenantStreams should return a list of the streams for a tenant",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\tlet results = await streamMonitor.listTenantStreams(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\tstreamName = apps[0]\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "b44accaa-30c5-4941-9bde-9eec4c764498",
                                    "parentUUID": "a77fb236-61cf-4e30-b109-172c052a8921",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b44accaa-30c5-4941-9bde-9eec4c764498"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6094018d-c740-4a3f-80a3-51a8ddf1f207",
                            "title": "streamInfoReqHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests streamInfoReqHandler should return info for the stream",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.streamInfoReqHandler(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.exist",
                                    "err": {},
                                    "uuid": "572b1b55-3165-4ab8-8033-cedb0a565fa0",
                                    "parentUUID": "6094018d-c740-4a3f-80a3-51a8ddf1f207",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "572b1b55-3165-4ab8-8033-cedb0a565fa0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9cab54e5-2d22-418f-96b4-519ee3ae7012",
                            "title": "getGroupInfo",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return group info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests getGroupInfo should return group info for the stream",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.getGroupInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "fb8c67db-076d-4737-909b-e5fa07e02b32",
                                    "parentUUID": "9cab54e5-2d22-418f-96b4-519ee3ae7012",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fb8c67db-076d-4737-909b-e5fa07e02b32"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8fd064b6-5722-48f8-b4e7-7a68f28b6f4e",
                            "title": "getConsumerInfo",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return consumer info for the group",
                                    "fullTitle": "Tenant API Stream-Manager Tests getConsumerInfo should return consumer info for the group",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\treq.params.groupName = \"sessionServiceGroup\" \n\t\t\tlet results = await streamMonitor.getConsumerInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "606022d5-046b-473b-b54f-a1884ccdc9ec",
                                    "parentUUID": "8fd064b6-5722-48f8-b4e7-7a68f28b6f4e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "606022d5-046b-473b-b54f-a1884ccdc9ec"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "073936ad-052a-4fbe-a7ec-e59d79e613ff",
                    "title": "Tenant API License, Apps and Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                    "file": "/test/integration/tenant.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9b845587-e744-47e0-a23b-3c417d3ee041",
                            "title": "getTenantLicense",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a license for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicense should return a license for a tenant",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req()\n\t\t\tlet results = await getTenantLicense(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseInfo = mockRes.body;\n\t\t\texpect(licenseInfo.instanceId).equal(req.oauth.tenant);",
                                    "err": {},
                                    "uuid": "b68d094f-4c4a-47b3-b4f6-4229c47ae50c",
                                    "parentUUID": "9b845587-e744-47e0-a23b-3c417d3ee041",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b68d094f-4c4a-47b3-b4f6-4229c47ae50c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "eba6a578-b4bd-467f-b119-6dedf84f35cf",
                            "title": "getTenantApps",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return apps for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantApps should return apps for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantApps(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "fc451367-9400-479f-a630-9af67ad04456",
                                    "parentUUID": "eba6a578-b4bd-467f-b119-6dedf84f35cf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fc451367-9400-479f-a630-9af67ad04456"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "7ca714ed-9228-431e-b6e1-3a389789225c",
                            "title": "getTenantLicenseLocation",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return license location for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicenseLocation should return license location for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantLicenseLocation(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseLocation = mockRes.body;\n      expect(licenseLocation).to.satisfy(function(val) { return val === 'onpremise' || val.toLowerCase().includes('cloud'); });",
                                    "err": {},
                                    "uuid": "372b7c3d-1f57-40d3-836e-d73da7040029",
                                    "parentUUID": "7ca714ed-9228-431e-b6e1-3a389789225c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "372b7c3d-1f57-40d3-836e-d73da7040029"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f43bdc7b-09a4-46dc-aabf-b48ea8501d3a",
                            "title": "getTenantLoginSettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should login settings for a tenant based on a tenant id",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a tenant id",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {tenant: req.config.tenantOne.tenantId}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "f378a423-59c1-41a2-8c4d-4b6c2fc47b39",
                                    "parentUUID": "f43bdc7b-09a4-46dc-aabf-b48ea8501d3a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should login settings for a tenant based on a host header",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a host header",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {hostHeader: req.config.tenantOne.hostHeader}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "e8b12ef3-b9fe-4890-9c79-5146eb0445d4",
                                    "parentUUID": "f43bdc7b-09a4-46dc-aabf-b48ea8501d3a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f378a423-59c1-41a2-8c4d-4b6c2fc47b39",
                                "e8b12ef3-b9fe-4890-9c79-5146eb0445d4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d5db1967-8a33-4e51-ba4d-e684633d299d",
                    "title": "Tenant API Translation controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                    "file": "/test/integration/translation.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "44da1164-624a-413d-884f-7383f0f9e079",
                            "parentUUID": "d5db1967-8a33-4e51-ba4d-e684633d299d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "4a8aeba6-ec39-408b-a19a-d1cd7e966fc8",
                            "parentUUID": "d5db1967-8a33-4e51-ba4d-e684633d299d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "26a44228-ecd9-43ba-9e61-73940ea120d3",
                            "title": "language crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  language = await translationController.createLanguage(tenant, languageObj);\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "97d5dbe3-c0b0-4c58-8181-d7c8b8a7a2ff",
                                    "parentUUID": "26a44228-ecd9-43ba-9e61-73940ea120d3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  languages = await translationController.listLanguages(tenant);\n         console.log(JSON.stringify(languages));\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "e546b347-bc49-437c-9efd-a28e8bdfe9b9",
                                    "parentUUID": "26a44228-ecd9-43ba-9e61-73940ea120d3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language = await translationController.getLanguage(tenant,_id);\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "63282e65-ea04-4cda-bdb5-085f6167319e",
                                    "parentUUID": "26a44228-ecd9-43ba-9e61-73940ea120d3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language.translationCode = 'test-updated';\n            language.modifiedBy = IntegrifySystemContactSid;\n            const updatedLanguage = await translationController.updateLanguage(tenant,language.toObject());\n            expect(updatedLanguage).to.exist         \n            expect(updatedLanguage._id.toString()).to.equal(_id)\n            expect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "0aa30822-801d-4db5-9475-c22d7883bf76",
                                    "parentUUID": "26a44228-ecd9-43ba-9e61-73940ea120d3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  delete a a language",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLanguage(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "01eded9f-6b8b-42e1-94cc-61100da3cc52",
                                    "parentUUID": "26a44228-ecd9-43ba-9e61-73940ea120d3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "97d5dbe3-c0b0-4c58-8181-d7c8b8a7a2ff",
                                "e546b347-bc49-437c-9efd-a28e8bdfe9b9",
                                "63282e65-ea04-4cda-bdb5-085f6167319e",
                                "0aa30822-801d-4db5-9475-c22d7883bf76",
                                "01eded9f-6b8b-42e1-94cc-61100da3cc52"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 93,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                            "title": "label crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  label = await translationController.createLabel(tenant, labelObj);\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "c4e8c601-b442-4aae-b6aa-970678dcfaff",
                                    "parentUUID": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  labels = await translationController.listLabels(tenant);\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "1093df92-cc40-4132-8725-ff967d80e94b",
                                    "parentUUID": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label = await translationController.getLabel(tenant,_id);\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "af00a92a-fdb4-497f-894d-d80142cd09d4",
                                    "parentUUID": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\n            label.modifiedBy = IntegrifySystemContactSid;\n            const updatedLabel = await translationController.updateLabel(tenant,label.toObject());\n            expect(updatedLabel).to.exist         \n            expect(updatedLabel._id.toString()).to.equal(_id)\n            expect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "059fe948-a1f1-4b2c-8f7f-d76d8cfd6f43",
                                    "parentUUID": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  delete a a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLabel(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "621804c0-c0b8-4b2e-825c-5f361e4337cb",
                                    "parentUUID": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation controller tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst savedCount = await translationController.saveNewDefaultLabels(tenant, unsaved);\nexpect(savedCount).to.exist         \nexpect(savedCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "5a68df5e-2e34-4a84-bf2b-622f46aa4ddd",
                                    "parentUUID": "89ff4e32-5c5f-424b-8324-46dd429ae363",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c4e8c601-b442-4aae-b6aa-970678dcfaff",
                                "1093df92-cc40-4132-8725-ff967d80e94b",
                                "af00a92a-fdb4-497f-894d-d80142cd09d4",
                                "059fe948-a1f1-4b2c-8f7f-d76d8cfd6f43",
                                "621804c0-c0b8-4b2e-825c-5f361e4337cb",
                                "5a68df5e-2e34-4a84-bf2b-622f46aa4ddd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cbf58b35-9cf8-458d-b6aa-7a8464400eaf",
                            "title": "seed functions ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should seed languages",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed languages",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLanguages(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "b3aab576-487e-4ec4-9c1a-64e704db8fd4",
                                    "parentUUID": "cbf58b35-9cf8-458d-b6aa-7a8464400eaf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should seed labels",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed labels",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLabels(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "8a2e0a17-c555-43ed-86e8-4d2e2e2a3d13",
                                    "parentUUID": "cbf58b35-9cf8-458d-b6aa-7a8464400eaf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b3aab576-487e-4ec4-9c1a-64e704db8fd4",
                                "8a2e0a17-c555-43ed-86e8-4d2e2e2a3d13"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 39,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ea862730-5726-442a-9e39-f3f3269b907b",
                    "title": "Tenant API Translation handler tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.handler.test.js",
                    "file": "/test/integration/translation.handler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "1ffe9c7a-e215-4f60-a3a9-9bacd0a03f66",
                            "parentUUID": "ea862730-5726-442a-9e39-f3f3269b907b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "36dce312-93d9-4f6d-ae02-556da6e2fd3a",
                            "parentUUID": "ea862730-5726-442a-9e39-f3f3269b907b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                            "title": "language crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = languageObj;\nawait translationHandler.createLanguage(req, mockRes);\nlanguage = mockRes.body;\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "664213af-1bf0-43e7-bc60-e3abba2b1088",
                                    "parentUUID": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         await translationHandler.listLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "9e0acdf9-124f-4398-9b71-dfcc73775440",
                                    "parentUUID": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list tenant languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list tenant languages",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.params.tenant = tenant\n         await translationHandler.listTenantLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "acc3a1cc-af79-4f06-9f16-0a162120dfb6",
                                    "parentUUID": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLanguage(req,mockRes);\n            language = mockRes.body;\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "742480d8-b95f-4569-a220-8963be1d31a3",
                                    "parentUUID": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = language;\nawait translationHandler.updateLanguage(req, mockRes);\nconst updatedLanguage = mockRes.body;\nexpect(updatedLanguage).to.exist         \nexpect(updatedLanguage._id.toString()).to.equal(_id)\nexpect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "ef5a4af2-3c6d-45dd-b069-4bd054865fba",
                                    "parentUUID": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  delete a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLanguage(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "d7c3f6c7-898f-4e27-aeca-69f0ce97433a",
                                    "parentUUID": "e85e2fcf-e09b-4c12-838c-80fd279b93ae",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "664213af-1bf0-43e7-bc60-e3abba2b1088",
                                "9e0acdf9-124f-4398-9b71-dfcc73775440",
                                "acc3a1cc-af79-4f06-9f16-0a162120dfb6",
                                "742480d8-b95f-4569-a220-8963be1d31a3",
                                "ef5a4af2-3c6d-45dd-b069-4bd054865fba",
                                "d7c3f6c7-898f-4e27-aeca-69f0ce97433a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 42,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                            "title": "label crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = labelObj;\nawait translationHandler.createLabel(req, mockRes);\nlabel = mockRes.body;\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "c79ef40c-8518-45ef-a252-5332cb6d3f4d",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.query.tenant = tenant\n         await translationHandler.listLabels(req,mockRes);\n         const  labels = mockRes.body;\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "f20da2c6-fac2-4835-8124-81870619e73a",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLabel(req,mockRes);\n            label = mockRes.body;\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "725da09c-cd29-4fd8-8874-933852e690d0",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\nlabel.modifiedBy = IntegrifySystemContactSid;\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = label;\nawait translationHandler.updateLabel(req, mockRes);\nconst updatedLabel = mockRes.body;   \nexpect(updatedLabel).to.exist         \nexpect(updatedLabel._id.toString()).to.equal(_id)\nexpect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "0a14eb61-8a62-4b5a-b2f7-63eff6f4a1fe",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete aa label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete aa label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLabel(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "aa930aac-1508-48f4-be99-fb6a7d8bafde",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete labels",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let results = await translationController.listLabels(tenant,{_id})\n            let labelIds= results.map((i) => {\n                return i._id;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req()\n            req.body = labelIds;\n            await translationHandler.deleteLabels(req,mockRes);\n\t\t\tconst  deleted = mockRes.body;\n            expect(deleted).to.exist         \n            expect(deleted.deletedCount).to.exist",
                                    "err": {},
                                    "uuid": "42b4ac85-d841-44c0-a4c9-e38a224acccc",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation handler tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst mockRes = await mocks.mockResponse();\nlet req = await mocks.req()\nreq.body = unsaved;\nawait translationHandler.saveNewDefaultLabels(req,mockRes);\nconst result = mockRes.body;\nexpect(result).to.exist         \nexpect(result.saved).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "84f318fb-4fed-4d13-867a-df42b5c7211e",
                                    "parentUUID": "f5a67c66-f809-473d-97c5-a3b047eafe41",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c79ef40c-8518-45ef-a252-5332cb6d3f4d",
                                "f20da2c6-fac2-4835-8124-81870619e73a",
                                "725da09c-cd29-4fd8-8874-933852e690d0",
                                "0a14eb61-8a62-4b5a-b2f7-63eff6f4a1fe",
                                "aa930aac-1508-48f4-be99-fb6a7d8bafde",
                                "42b4ac85-d841-44c0-a4c9-e38a224acccc",
                                "84f318fb-4fed-4d13-867a-df42b5c7211e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 37,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "00e3d7a8-85db-4015-b8c1-594384f0f68c",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "dc736104-190f-4dbd-af01-e31bceaa8c3c",
                    "title": "api-user Group Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                    "file": "/test/db/groupController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 736,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = { tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase() }; // system level\ntenantId = config.tenantOne.tenantId;\nfor (i = 1; i <= 10; i++) {\n  const groupController = new GroupController(session);\n  const result = await groupController.addGroup({ groupName: `Test Automation Group ${i}` });\n  testGroups.push(result);\n}",
                            "err": {},
                            "uuid": "ca858d20-b883-4dd5-8911-c15d1b2ed3a1",
                            "parentUUID": "dc736104-190f-4dbd-af01-e31bceaa8c3c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 106,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// clean up our test data\nconst Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst ContactGroup = await models.getModel(config.tenantOne.tenantId, 'ContactGroup');\nawait Promise.all(testGroups.map(async (group) => {\n  await Group.query().hardDelete(group);\n  await ContactGroup.query()\n    .where('groupGuid', group.groupGuid)\n    .delete();\n}));",
                            "err": {},
                            "uuid": "944c3c0f-cf98-4a08-80b0-c6fbeb59eb7e",
                            "parentUUID": "dc736104-190f-4dbd-af01-e31bceaa8c3c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "457c3611-6ddd-48fe-82fb-f9bcd6d1b867",
                            "title": "get tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "retrieves a group",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves a group",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groups = await Group.query().where('group_name', '=', 'Administrators');\nexpect(groups.length).to.equal(1);\nadminGroupGuid = groups[0].groupGuid;\nconst groupController = new GroupController(config.tenantOne);\nconst adminGroup = await groupController.getGroup(adminGroupGuid);\nexpect(adminGroup).to.exist;\nexpect(adminGroup.groupName).to.equal('Administrators');\nexpect(adminGroup.groupDesc).to.equal('System administrators');\nexpect(adminGroup.groupSql).to.be.null;",
                                    "err": {},
                                    "uuid": "1a00554c-e46f-46c4-8572-dfe62fe23942",
                                    "parentUUID": "457c3611-6ddd-48fe-82fb-f9bcd6d1b867",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all groups by default",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all groups by default",
                                    "timedOut": false,
                                    "duration": 49,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups();\nconst groups = response.results;\nexpect(groups.length).to.be.above(10);",
                                    "err": {},
                                    "uuid": "820c2e41-579b-4871-b5f3-e7d14bd15aa2",
                                    "parentUUID": "457c3611-6ddd-48fe-82fb-f9bcd6d1b867",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves filtered list of groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves filtered list of groups",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups({ search: 'Test Automation Group', count: 4 });\nconst groups = response.results;\nexpect(groups.length).to.equal(4);",
                                    "err": {},
                                    "uuid": "addc028e-9878-4867-978e-556cd81bd15f",
                                    "parentUUID": "457c3611-6ddd-48fe-82fb-f9bcd6d1b867",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all possible members for adding to groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all possible members for adding to groups",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst group = testGroups[9];\nconst response = await groupController.getNonMembers(group.groupGuid);\nconst results = response.results;\nexpect(results.length).to.be.equal(response.total);\n// empty group, so test a sampling of accounts that should be non-members\nexpect(results).to.include.deep({ memberGuid: \"A03BDD24-A0BA-4071-9A5B-2833C865EC3D\",\n                                  memberId: 1,\n                                  memberName: \"Administrators\",\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: testGroups[8].groupGuid.toUpperCase(),\n                                  memberId: testGroups[8].groupId,\n                                  memberName: testGroups[8].groupName,\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n                                  memberId: 1,\n                                  memberName: 'System System',\n                                  memberType: 'User'\n                                })\n// two system accounts that should not be returned, plus the group itself\nexpect(results).to.not.include.deep({ memberGuid: 'D8C469C3-F781-4179-A09C-6D148885FB30',\n                                               memberId: 92,\n                                               memberName: \"Integrify System\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: '64EC8FC9-B426-4376-A1A4-3AD16F0F9906',\n                                               memberId: 96,\n                                               memberName: \"Guest Account\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: testGroups[9].groupGuid.toUpperCase(),\n                                           memberId: testGroups[9].groupId,\n                                           memberName: testGroups[9].groupName,\n                                           memberType: \"Group\"\n                                         })",
                                    "err": {},
                                    "uuid": "c61f4e90-c57c-4cb7-9ef6-128148bd796f",
                                    "parentUUID": "457c3611-6ddd-48fe-82fb-f9bcd6d1b867",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1a00554c-e46f-46c4-8572-dfe62fe23942",
                                "820c2e41-579b-4871-b5f3-e7d14bd15aa2",
                                "addc028e-9878-4867-978e-556cd81bd15f",
                                "c61f4e90-c57c-4cb7-9ef6-128148bd796f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 165,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "37c4282a-db8d-4c01-b04f-b673dac4ad75",
                            "title": "insert tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts a non-dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a non-dynamic group",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.dynamic).to.equal('No'); // ensure defaulting to \"No\" rather than null\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "dc542355-05f7-4a99-8a84-6ec21e464f3a",
                                    "parentUUID": "37c4282a-db8d-4c01-b04f-b673dac4ad75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "inserts a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a dynamic group",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "6b70fa45-8dce-489e-858a-8abfc5283ef1",
                                    "parentUUID": "37c4282a-db8d-4c01-b04f-b673dac4ad75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with bad SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with bad SQL",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"bad_column_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "5ffea0f8-bed9-46b2-9893-f82d020f2c23",
                                    "parentUUID": "37c4282a-db8d-4c01-b04f-b673dac4ad75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a group with no name",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a group with no name",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nawait expect(groupController.addGroup({ groupDesc: 'Test Group' })).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "9b3ceab2-eaac-448d-a0e2-3a12d7f488b1",
                                    "parentUUID": "37c4282a-db8d-4c01-b04f-b673dac4ad75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with no SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with no SQL",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupData = {\n  groupName: 'Dynamic Test Group',\n  dynamic: 'Yes',\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "d8c874b7-7170-467e-9201-bd8fb9f06f5f",
                                    "parentUUID": "37c4282a-db8d-4c01-b04f-b673dac4ad75",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dc542355-05f7-4a99-8a84-6ec21e464f3a",
                                "6b70fa45-8dce-489e-858a-8abfc5283ef1",
                                "5ffea0f8-bed9-46b2-9893-f82d020f2c23",
                                "9b3ceab2-eaac-448d-a0e2-3a12d7f488b1",
                                "d8c874b7-7170-467e-9201-bd8fb9f06f5f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 89,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "3437c59f-b4dc-4e42-9bdc-65829013b25d",
                            "title": "update tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates a group",
                                    "fullTitle": "api-user Group Controller Tests update tests updates a group",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nconst result = await groupController.updateGroup({\n  groupGuid: group.groupGuid,\n  groupName: 'Updated Test Automation Group',\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n});\nexpect(result.groupName).to.equal('Updated Test Automation Group');\nexpect(result.dynamic).to.equal('Yes');\nexpect(result.groupSql).to.equal(\"first_name = 'Admin'\");",
                                    "err": {},
                                    "uuid": "cb94513c-dfd6-4de6-a19b-0bd92623d808",
                                    "parentUUID": "3437c59f-b4dc-4e42-9bdc-65829013b25d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update with no group name",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update with no group name",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "87b8ef25-d9f3-442f-bbba-ad6b370bf193",
                                    "parentUUID": "3437c59f-b4dc-4e42-9bdc-65829013b25d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic without sql",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic without sql",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'Yes',\n    groupSql: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "95ef7780-4435-46a7-8ae4-22feea212daf",
                                    "parentUUID": "3437c59f-b4dc-4e42-9bdc-65829013b25d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic other than Yes/No",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic other than Yes/No",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: true,\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'yes',\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "36efc3e7-5f22-4703-8c9e-769083d4f0b6",
                                    "parentUUID": "3437c59f-b4dc-4e42-9bdc-65829013b25d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cb94513c-dfd6-4de6-a19b-0bd92623d808",
                                "87b8ef25-d9f3-442f-bbba-ad6b370bf193",
                                "95ef7780-4435-46a7-8ae4-22feea212daf",
                                "36efc3e7-5f22-4703-8c9e-769083d4f0b6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 38,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "fddc39fb-7082-4571-b4c0-a9acc902006f",
                            "title": "delete tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "soft deletes a list of groups",
                                    "fullTitle": "api-user Group Controller Tests delete tests soft deletes a list of groups",
                                    "timedOut": false,
                                    "duration": 105,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst timeBeforeDelete = Date.now();\nconst firstGroup = testGroups[0];\nconst response = await groupController.deleteGroups(testGroups.slice(0, 5).map((group) => group.groupGuid));\nexpect(response).to.eql([1, 1, 1, 1, 1]);\nconst deletedGroup = groupController.getGroup(firstGroup.groupGuid);\nexpect(deletedGroup).to.be.empty;",
                                    "err": {},
                                    "uuid": "2613f553-b8ef-41b3-b813-c5cbb64e0a0d",
                                    "parentUUID": "fddc39fb-7082-4571-b4c0-a9acc902006f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2613f553-b8ef-41b3-b813-c5cbb64e0a0d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 105,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "afce5884-13ef-4039-b9fc-74641486669f",
                            "title": "membership test",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "adds a user to a group",
                                    "fullTitle": "api-user Group Controller Tests membership test adds a user to a group",
                                    "timedOut": false,
                                    "duration": 50,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9]; // 0-4 get deleted in a previous test\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(0); // make sure group starts empty\nlet result = await groupController.addMembersToGroup({\n  groupGuid: group.groupGuid,\n  members: [{\n    memberGuid: session.user_sid,\n    memberType: 'User',\n  },\n  ],\n});\nexpect(result).to.not.be.undefined;\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(1);\nexpect(result[0].memberGuid.toLowerCase()).to.equal(session.user_sid);\nexpect(result[0].groupGuid.toLowerCase()).to.equal(group.groupGuid);\nexpect(result[0].memberType).to.equal('User');",
                                    "err": {},
                                    "uuid": "c065184a-d321-4b49-8b6b-dcb6a948ed08",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "removes members from a group",
                                    "fullTitle": "api-user Group Controller Tests membership test removes members from a group",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9];\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(1); // should have 1 member from preceding addUser test\nlet result = await groupController.removeMembersFromGroup({\n  groupGuid: group.groupGuid,\n  members: [session.user_sid],\n});\nexpect(result).to.equal(1);\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "f6cc936c-d646-41d6-b5a6-bd211933c186",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a group",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid);\nexpect(res.results.length).to.be.at.least(2);",
                                    "err": {},
                                    "uuid": "79d38d68-8b6a-4525-bd23-8f8bd9c5971f",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "filters members of a group based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test filters members of a group based on search string",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid, { search: 'no-reply@integrify.com' });\nexpect(res.results.length).to.equal(2);",
                                    "err": {},
                                    "uuid": "cd4d168d-b86f-4a68-9548-27d63e22ee7b",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits result members of a group based start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits result members of a group based start/count",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nlet res = await groupController.getMembers(usersGroupGuid);\nconst groupSize = res.results.length;\nexpect(groupSize).to.equal(res.total);\nres = await groupController.getMembers(usersGroupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(groupSize);\nres = await groupController.getMembers(usersGroupGuid, { start: 1 });\nexpect(res.results.length).to.equal(groupSize - 1);\nexpect(res.total).to.equal(groupSize);",
                                    "err": {},
                                    "uuid": "50061ba3-74cc-427a-bbb9-93ed814a988f",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to users only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to users only",
                                    "timedOut": false,
                                    "duration": 37,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'true', groups: 'false' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('User'));",
                                    "err": {},
                                    "uuid": "e0c0d924-d2b7-4822-9b17-2e3761624efe",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to groups only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to groups only",
                                    "timedOut": false,
                                    "duration": 49,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'false', groups: 'true' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('Group'));",
                                    "err": {},
                                    "uuid": "00556d58-0485-46a9-abe6-86506561d552",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves groups a user belongs to",
                                    "fullTitle": "api-user Group Controller Tests membership test retrieves groups a user belongs to",
                                    "timedOut": false,
                                    "duration": 71,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst userGuid = '4e99e0dd-b3b3-4d5d-826d-3d5ae62a16cf';\nconst res = await groupController.getUserGroups(userGuid);\nexpect(res.results.find((result) => result.groupName == 'Administrators')).to.not.be.undefined;\nexpect(res.results.find((result) => result.groupDesc == 'All users')).to.not.be.undefined;",
                                    "err": {},
                                    "uuid": "6fbc8582-2b00-461e-97ea-d8ddb4040340",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on start/count",
                                    "timedOut": false,
                                    "duration": 143,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 0, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 1, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);",
                                    "err": {},
                                    "uuid": "051c4d2d-589b-4bce-a0da-c49e21c743b5",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on search string",
                                    "timedOut": false,
                                    "duration": 127,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { search: 'System' });\nconst { results } = res;\nexpect(results).to.eql([{\n  memberGuid: 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D',\n  memberName: 'Administrators',\n  memberType: 'Group',\n  memberId: 1,\n},\n{\n  memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n  memberId: 1,\n  memberName: 'System System',\n  memberType: 'User',\n},\n]);",
                                    "err": {},
                                    "uuid": "a9ac2d5d-30d7-4a62-b0ed-fecacf5120aa",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a dynamic group",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst allUsersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst result = await groupController.getMembers(allUsersGroupGuid);",
                                    "err": {},
                                    "uuid": "d35d5e95-ad1c-44fa-8494-db51c350ac21",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists all members of a group containing groups",
                                    "fullTitle": "api-user Group Controller Tests membership test lists all members of a group containing groups",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "",
                                    "err": {},
                                    "uuid": "75f84b96-103e-4c1c-a601-2adc42e1cd09",
                                    "parentUUID": "afce5884-13ef-4039-b9fc-74641486669f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c065184a-d321-4b49-8b6b-dcb6a948ed08",
                                "f6cc936c-d646-41d6-b5a6-bd211933c186",
                                "79d38d68-8b6a-4525-bd23-8f8bd9c5971f",
                                "cd4d168d-b86f-4a68-9548-27d63e22ee7b",
                                "50061ba3-74cc-427a-bbb9-93ed814a988f",
                                "e0c0d924-d2b7-4822-9b17-2e3761624efe",
                                "00556d58-0485-46a9-abe6-86506561d552",
                                "6fbc8582-2b00-461e-97ea-d8ddb4040340",
                                "051c4d2d-589b-4bce-a0da-c49e21c743b5",
                                "a9ac2d5d-30d7-4a62-b0ed-fecacf5120aa",
                                "d35d5e95-ad1c-44fa-8494-db51c350ac21",
                                "75f84b96-103e-4c1c-a601-2adc42e1cd09"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 635,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "e32fa37a-e6fb-4709-b799-50b31a5800fd",
                            "title": "association tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(47);\n// should not include categoryLevel by default\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName');",
                                    "err": {},
                                    "uuid": "fd9b3a2c-719d-4a03-8162-0ae1c886ac79",
                                    "parentUUID": "e32fa37a-e6fb-4709-b799-50b31a5800fd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 91,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D', { include: ['category'] });\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName', 'categoryLevel');",
                                    "err": {},
                                    "uuid": "be5601cb-14b2-437c-bfe9-7bf875eafe22",
                                    "parentUUID": "e32fa37a-e6fb-4709-b799-50b31a5800fd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list roles associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list roles associated to a group",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getRoleAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(1);",
                                    "err": {},
                                    "uuid": "43870517-2b8d-4d1a-a19d-0c5448478e45",
                                    "parentUUID": "e32fa37a-e6fb-4709-b799-50b31a5800fd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fd9b3a2c-719d-4a03-8162-0ae1c886ac79",
                                "be5601cb-14b2-437c-bfe9-7bf875eafe22",
                                "43870517-2b8d-4d1a-a19d-0c5448478e45"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 138,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                    "title": "api-user User Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/userController.test.js",
                    "file": "/test/db/userController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2694,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenantId = config.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nMetadataValue = await models.getModel(tenantId, 'MetadataValue');\nUserAuth = await models.getModel(tenantId, 'UserAuth');\n// add user\nuserCtrl = new UserController(session);\nfor (let i=1; i<=limit; i++) {\n  const user = {\n    firstName: 'test first name' + i,\n    lastName: 'last' + i,\n    userName: 'test_username' + i,\n    email: `test${i}@test.test${i}`,\n    locale: 'en-US',\n    languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460', // US English\n    password: testPwd,\n    confirmPassword: testPwd,\n    title: 'title' + i\n  };\n  const dbUser = await userCtrl.insertUser(user)\n  testUsers.push(dbUser);\n}",
                            "err": {},
                            "uuid": "7af82873-b0c1-48a2-a995-cbd501a22eca",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 107,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await Promise.all( testUsers.map( async (user) => {\n  return UserAuth.query().deleteById(user.contactGuid);\n}));\nawait User.query().delete().where('firstName', 'like', 'test first%');",
                            "err": {},
                            "uuid": "56a3aa84-8ef2-4fba-8b6f-28f9328e4634",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should retrieves users",
                            "fullTitle": "api-user User Controller Tests should retrieves users",
                            "timedOut": false,
                            "duration": 201,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenantId, 'User');\nconst UserAuth = await models.getModel(tenantId, 'UserAuth');\nconst users = await User.query()\n  .orderBy('createdDate', 'desc')\n  .limit(limit);\nawait Promise.all(users.map(async user => {\n  const result = await userCtrl.getUser(user.contactGuid);\n  const {userName, managerGuid, ...userToCompare1} = result;\n  user.languageGuid = user.languageGuid.toLowerCase() // 'user' from Database query has \"upper case\" language guid - but userToCompare1 from API should be in lower case\n  user.contactGuid = user.contactGuid.toLowerCase()\n  user.createdBy = user.createdBy.toLowerCase()\n  expect(userToCompare1).to.deep.eq(user);\n  // compare testUser to user\n  const testUser = testUsers.find(u => u.contactGuid === user.contactGuid);\n  ['firstName', 'lastName', 'email', 'locale', 'languageGuid', 'contactId', 'title'].forEach(p => {\n    expect(testUser[p]).to.eq(user[p]);\n  });\n  // check userNames\n  const userAuth = await UserAuth.query()\n    .findById(user.contactGuid);\n  expect(userAuth).to.exist;\n  expect(userAuth.userName).to.eq(testUser.userName);\n}));",
                            "err": {},
                            "uuid": "28c30e84-7119-4666-915a-8ed76440426e",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should search in users",
                            "fullTitle": "api-user User Controller Tests should search in users",
                            "timedOut": false,
                            "duration": 184,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\n// search by id\nlet result = await userCtrl.getUsers({search: testUser.contactId});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(1);\n// search by username\nresult = await userCtrl.getUsers({search: testUser.userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = testUser.userName);\nexpect(found).to.exist;\n// search by first & last names\nresult = await userCtrl.getUsers({search: testUser.firstName.slice(0, -2)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.first === testUser.first);\nexpect(found).to.exist;\nresult = await userCtrl.getUsers({search: testUser.lastName.slice(0, -1)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.lastName === testUser.lastName);\nexpect(found).to.exist;\n// search by email\nresult = await userCtrl.getUsers({search: testUser.email.slice(-10)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.email === testUser.email);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "3cf50ac6-484c-48e6-876e-afbe7ef4a47a",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should limit results",
                            "fullTitle": "api-user User Controller Tests should limit results",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const result = await userCtrl.getUsers({count: 4});\nexpect(result.results.length).to.eq(4);",
                            "err": {},
                            "uuid": "ee35f27d-c71c-4aea-9102-9206bde5b828",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should retrieve filtered users ",
                            "fullTitle": "api-user User Controller Tests should retrieve filtered users ",
                            "timedOut": false,
                            "duration": 32,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nconst filters = [\n  {\n    field: 'lastName',\n    data: {comparison: 'eq', type: 'string', value: user.lastName,}\n  },\n  {\n    field: 'firstName',\n    data: {comparison: 'contains', value: user.firstName}\n  },\n  {\n    field: 'userName',\n    data: {comparison: 'eq', value: user.userName}\n  },\n  {\n    field: 'email',\n    data: {comparison: 'contains', value: user.email}\n  },\n  {\n    field: 'title',\n    data: {comparison: 'contains', value: user.title}\n  },\n  {\n    field: 'constCenter',\n    data: {comparison: 'contains', value: user.constCenter}\n  },\n  {\n    field: 'country',\n    data: {comparison: 'contains', value: user.country}\n  },\n  {\n    field: 'department',\n    data: {comparison: 'contains', value: user.department}\n  },\n  {\n    field: 'managerName',\n    data: {comparison: 'contains', value: user.managerName}\n  },\n  {\n    field: 'managerGuid',\n    data: {comparison: 'contains', value: user.managerGuid}\n  },\n];\nconst result = await userCtrl.getUsers({filters});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst found = result.results.find(u => u.contactGuid === testUser.contactGuid);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "038dbc3a-dd39-4c1f-b13d-1b5f1a228f10",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a list of managers",
                            "fullTitle": "api-user User Controller Tests should get a list of managers",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const exceptGuid = testUsers[0].contactGuid;\nconst managers = await userCtrl.getManagers({exceptGuid});\nmanagers.forEach(manager => {\n  expect(manager.contactGuid).to.not.eq(exceptGuid);\n});\ntestUsers.filter(u => u.contactGuid !== exceptGuid).forEach(u => {\n  const manager = managers.find(m => m.contactGuid === u.contactGuid);\n  const {contactGuid, firstName, lastName, email, title} = u;\n  const testUser = {contactGuid, firstName, lastName, email, title};\n  expect(manager).to.deep.eq(testUser);\n});",
                            "err": {},
                            "uuid": "966778e1-77e8-449c-9fcc-f8e0d42070f4",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a single user",
                            "fullTitle": "api-user User Controller Tests should get a single user",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[3];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nexpect(user).to.exist;\n['contactGuid', 'contactId', 'firstName', 'lastName', 'userName', 'email', 'locale', 'languageGuid', 'title'].forEach(p => {\n  expect(user[p]).to.eq(testUser[p]);\n});\n['middleName', 'phone', 'address1', 'address2', 'city', 'state', 'zip', 'country',\n  'department', 'costCenter', 'division', 'managerGuid', 'cField1', 'cField2'].forEach(p => {\n  expect(!!user[p] || user[p] === null || user[p] === '').to.eq(true);\n});",
                            "err": {},
                            "uuid": "fcf09779-9df4-4aa9-805c-2f2205ae5f0c",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update and get delegate",
                            "fullTitle": "api-user User Controller Tests should update and get delegate",
                            "timedOut": false,
                            "duration": 79,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// insert delegate\nconst testDelegate = {\n  contactGuid: testUsers[3].contactGuid,\n  processes: [{id: 'a6714779-4bde-4000-8361-ad37c838d440'}, {id: '3545404d-6fff-4ed5-ba9a-1100ce38d421'}, {id: 'cfc36de0-a71b-451f-817a-2092c3c247ca'}],\n  startDate: '2021-01-14',\n  startTime: '06:00',\n  endDate: '2021-01-15',\n  endTime: '17:35',\n};\nawait userCtrl.updateDelegate(testUsers[3].contactGuid, testDelegate);\n// get delegate\nlet delegate = await userCtrl.getDelegate(testDelegate.contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.exist;\n  expect(delegate[p]).to.eq(testDelegate[p]);\n})\nexpect(delegate.processes).to.exist;\nexpect(delegate.processes.length).to.eq(testDelegate.processes.length);\ntestDelegate.processes.forEach(p => {\n  const process = delegate.processes.find(dp => dp.id === p.id);\n  expect(process).to.exist;\n});\n// for user without delegate\ndelegate = await userCtrl.getDelegate(testUsers[1].contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.be.null;\n});\nexpect(delegate.processes.length).to.eq(0);\n// delete delegate\nawait MetadataValue.query()\n  .where('ownerSid', testDelegate.contactGuid)\n  .delete();",
                            "err": {},
                            "uuid": "8d697908-1c76-40f0-8863-7b1da17fdc29",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "password should be hashed",
                            "fullTitle": "api-user User Controller Tests password should be hashed",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await UserAuth.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.password).to.not.eq(testPwd);",
                            "err": {},
                            "uuid": "00a76aa3-c283-4d45-9508-9dd730859d69",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "user should be active (not deleted)",
                            "fullTitle": "api-user User Controller Tests user should be active (not deleted)",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await User.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.deletedDate).to.be.null;\nexpect(user.deletedBy).to.be.null;",
                            "err": {},
                            "uuid": "e7bc69c6-8efc-4c28-97f5-511db755e54d",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should convert user Guids",
                            "fullTitle": "api-user User Controller Tests should convert user Guids",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = {\n  contactGuid: 'SomeRandomString',\n  managerGuid: 'SomeRandomString',\n  signatureGuid: 'SomeRandomString',\n  languageGuid: 'SomeRandomString',\n  createdBy: 'SomeRandomString',\n};\nconst convertedUser1 = userCtrl.convertUserGuids(testUser);\nconst convertedUser2 = userCtrl.convertUserGuids({contactGuid: testUser.contactGuid});\n[convertedUser1, convertedUser2].forEach(u => {\n  Object.keys(u).forEach(key => {\n    expect(u[key]).to.eq(u[key].toLowerCase());\n  });\n});",
                            "err": {},
                            "uuid": "29bb81ff-a62b-45ab-9361-b28f26c45621",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if username is taken",
                            "fullTitle": "api-user User Controller Tests should check if username is taken",
                            "timedOut": false,
                            "duration": 23,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[0].contactGuid;\nconst username = testUsers[0].userName;\nlet isTaken = await userCtrl.isUserNameTaken(username);\nexpect(isTaken).to.be.true;\nisTaken = await userCtrl.isUserNameTaken(username.toUpperCase());\nexpect(isTaken).to.be.true;\n// with un-taken username\nisTaken = await userCtrl.isUserNameTaken('someUnusedUsernameTest');\nexpect(isTaken).to.be.false;\n// with Guid provided\nisTaken = await userCtrl.isUserNameTaken(username, userGuid);\nexpect(isTaken).to.be.false;",
                            "err": {},
                            "uuid": "cec319f6-09bf-43bb-bbb2-f6124491eea0",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Controller Tests should update user",
                            "timedOut": false,
                            "duration": 206,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[3].contactGuid;\nconst data = {\n  firstName: 'test first updated',\n  middleName: 'up mid name',\n  lastName: 'up last name',\n  email: 'updated@email.com',\n  title: 'updatedTitle',\n  division: 'up division',\n  department: 'upd department',\n  costCenter: 'upd cost center',\n  location: 'upd loc',\n  phone: '094-242-5654 ext 4',\n  managerGuid: testUsers[0].contactGuid,\n  address1: '654 Some ave',\n  address2: 'apt 589',\n  city: 'New London',\n  state: 'OR',\n  zip: '98353',\n  country: 'USM',\n  languageGuid: testUsers[0].languageGuid,\n  timezone: 'PFT-09',\n  locale: 'en-US',\n  cField1: 'upd cust field 1',\n  cField2: 'upd cust field 2',\n  active: false,\n  userName: 'updatedUserName',\n  password: 'updatedPwd',\n  signatureGuid: '36b65bca-140d-41b9-ac8b-89b50c86e7ba'\n};\n// get current password\nlet user = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst previousPwd = user.password;\n// update\nuser = await userCtrl.updateUser(userGuid, data);\nconst {contactGuid, contactId, createdBy, createdDate, deletedBy, deletedDate, modifiedBy, modifiedDate, ntId, reportsToGuid, lastUpdate, ...updatedUser} = user;\nconst {password, active, ...testData} = data;\nexpect(updatedUser).to.deep.eq(testData);\n// should be inactive/deleted\nexpect(!!deletedBy).to.be.true;\nexpect(!!deletedDate).to.be.true;\n// should change the password\nuser = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst updatedPwd = user.password;\nexpect(previousPwd).to.not.eq(updatedPwd);",
                            "err": {},
                            "uuid": "d02ca4f6-e79e-48ab-9ab6-66141fe49102",
                            "parentUUID": "3f2a1cd8-e7b1-40c2-b2e1-b8d6bbe49eeb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "28c30e84-7119-4666-915a-8ed76440426e",
                        "3cf50ac6-484c-48e6-876e-afbe7ef4a47a",
                        "ee35f27d-c71c-4aea-9102-9206bde5b828",
                        "038dbc3a-dd39-4c1f-b13d-1b5f1a228f10",
                        "966778e1-77e8-449c-9fcc-f8e0d42070f4",
                        "fcf09779-9df4-4aa9-805c-2f2205ae5f0c",
                        "8d697908-1c76-40f0-8863-7b1da17fdc29",
                        "00a76aa3-c283-4d45-9508-9dd730859d69",
                        "e7bc69c6-8efc-4c28-97f5-511db755e54d",
                        "29bb81ff-a62b-45ab-9361-b28f26c45621",
                        "cec319f6-09bf-43bb-bbb2-f6124491eea0",
                        "d02ca4f6-e79e-48ab-9ab6-66141fe49102"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 774,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "6eaca87b-6a90-4fa0-ab5c-9927dda4200c",
                    "title": "api-user Group Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/groupHandler.test.js",
                    "file": "/test/groupHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 196,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nconst userCtl = new UserController({tenantId: tenant})\nrestrictedUser = await userCtl.insertUser({firstName: 'groups test',\n                                           lastName: 'groups test',\n                                           userName: 'restricted user for groups permission test',\n                                           password: 'password'})",
                            "err": {},
                            "uuid": "475c2fab-e705-49f8-b0f6-b352259f4607",
                            "parentUUID": "6eaca87b-6a90-4fa0-ab5c-9927dda4200c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 70,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenant, 'User');\nawait User.query().hardDelete(restrictedUser)",
                            "err": {},
                            "uuid": "f10d3e7b-ed80-43a2-9405-a3fb3f60d6cc",
                            "parentUUID": "6eaca87b-6a90-4fa0-ab5c-9927dda4200c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cd9ac25d-fcf9-4265-83cb-c93934638920",
                            "title": "crud tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a group",
                                    "fullTitle": "api-user Group Handler Tests crud tests should create a group",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nconst group = response.body\nexpect(response.statusCode).to.equal(200)\nexpect(group.groupGuid).to.match(/([-\\w]+)/)\nexpect(group.groupName).to.equal(groupName);\n// cleanup\nreq.body = [group.groupGuid]\nconst foo = await handlers.deleteGroups(req, mockRes)",
                                    "err": {},
                                    "uuid": "0b3800c3-8b9f-49bd-98cf-4097cbdbb3f1",
                                    "parentUUID": "cd9ac25d-fcf9-4265-83cb-c93934638920",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0b3800c3-8b9f-49bd-98cf-4097cbdbb3f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "06fd0f98-68b9-4799-b820-e67bddbdae25",
                            "title": "permission tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "admin should have manage/edit permissions per group",
                                    "fullTitle": "api-user Group Handler Tests permission tests admin should have manage/edit permissions per group",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = testConfig.tenantOne.adminUser.sid;\nconst response = await handlers.getGroups(req,mockRes);\nconst groups = response.body.results;\ngroups.forEach( group => {\n  expect(group.canManage).to.equal(true);\n  expect(group.canEdit).to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "457153d5-1c12-4b28-a002-a4d9b4fa21fd",
                                    "parentUUID": "06fd0f98-68b9-4799-b820-e67bddbdae25",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to create a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to create a group",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid;\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "381c4b7a-3e28-4342-a0a6-6bc2e10a0b7b",
                                    "parentUUID": "06fd0f98-68b9-4799-b820-e67bddbdae25",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to list groups members",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to list groups members",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.groupGuid = group.groupGuid\nconst response = await handlers.getGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "ed188717-7cf5-4fb3-aac0-038ffdb42f87",
                                    "parentUUID": "06fd0f98-68b9-4799-b820-e67bddbdae25",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to delete a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to delete a group",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.body = [ group.groupGuid ]\nconst response = await handlers.deleteGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "52cf21af-1de4-4871-b51b-f4748432d089",
                                    "parentUUID": "06fd0f98-68b9-4799-b820-e67bddbdae25",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "457153d5-1c12-4b28-a002-a4d9b4fa21fd",
                                "381c4b7a-3e28-4342-a0a6-6bc2e10a0b7b",
                                "ed188717-7cf5-4fb3-aac0-038ffdb42f87",
                                "52cf21af-1de4-4871-b51b-f4748432d089"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 56,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                    "title": "api-user User Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/userHandler.test.js",
                    "file": "/test/userHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenantId = testConfig.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: testConfig.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nUserAuth = await models.getModel(tenantId, 'UserAuth');",
                            "err": {},
                            "uuid": "9690fd63-bc89-4451-90b9-008df6f74c91",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": true,
                            "skipped": false
                        },
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "api-user User Handler Tests \"before each\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req = await mocks.req();\nmockRes = await mocks.mockResponse();\ntestUser = (await User.query().limit(1))[0];\ntestUser.userName  = (await UserAuth.query().select('userName').where('contactGuid', testUser.contactGuid))[0].userName;",
                            "err": {},
                            "uuid": "e1915399-c876-4491-8347-beea86cc100b",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 55,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await UserAuth.query().delete().where('userName', 'like', 'user_to_delete%');\nawait User.query().delete().where('firstName', 'like', 'user_to_delete%');",
                            "err": {},
                            "uuid": "97668a16-6ff7-4fb9-ac81-27927c3919da",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should get a list of users",
                            "fullTitle": "api-user User Handler Tests should get a list of users",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getUsers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.results).to.exist;\nexpect(response.body.results.length).to.be.gt(0);\nexpect(response.body.total).to.exist;\nexpect(response.body.total).to.be.gt(0);",
                            "err": {},
                            "uuid": "3eab2252-8c0f-47d4-ab07-0fb1f6a632b3",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return a list of managers",
                            "fullTitle": "api-user User Handler Tests should return a list of managers",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getManagers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.length).to.be.gt(0);",
                            "err": {},
                            "uuid": "3fcb7ca9-c7f8-4626-a34d-9779153a0490",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get single user",
                            "fullTitle": "api-user User Handler Tests should get single user",
                            "timedOut": false,
                            "duration": 12,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.params.userGuid = testUser.contactGuid;\nconst response = await handlers.getUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.delegate).to.exist;",
                            "err": {},
                            "uuid": "1350428b-d6a4-48cc-ac1d-154151cdf343",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if userName is taken",
                            "fullTitle": "api-user User Handler Tests should check if userName is taken",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.query.userName = testUser.userName;\nreq.query.userGuid = testUser.contactGuid;\nconst response = await handlers.checkIfUserNameIsTaken(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.isTaken).to.exist;\nexpect(response.body.isTaken).to.be.false;",
                            "err": {},
                            "uuid": "b177c3b7-153e-4449-943c-434f4cd6968d",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not insert user without data",
                            "fullTitle": "api-user User Handler Tests should not insert user without data",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;\nexpect(response.body.password).to.exist;",
                            "err": {},
                            "uuid": "0fe34b1d-54c5-414b-8090-383bb28c15d2",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert user",
                            "fullTitle": "api-user User Handler Tests should insert user",
                            "timedOut": false,
                            "duration": 204,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = {\n  firstName: 'user_to_delete',\n  lastName: 'lastName',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n  email: 'random@test.com',\n  locale: 'en-US',\n  timezone: 'Pacific',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n}\nconst response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;",
                            "err": {},
                            "uuid": "d6de4594-9b3c-424d-9eee-e020f02e4898",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should register a user",
                            "fullTitle": "api-user User Handler Tests should register a user",
                            "timedOut": false,
                            "duration": 16,
                            "state": "failed",
                            "speed": null,
                            "pass": false,
                            "fail": true,
                            "pending": false,
                            "context": null,
                            "code": "const userName = 'register_user' + Math.random().toString(36).substring(7) // random string\nreq.body = {\n  firstName: 'register_user',\n  lastName: 'lastName',\n  userName,\n  email: 'random@test.com',\n  // locale: 'en-US',\n  timezone: 'US/Central',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n  tenant: tenantId\n}\nreq.bypassRecaptcha = true\nconst response = await handlers.registerUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\n// search by username to verify user record was created\nconst userCtrl = new UserController(session);\nconst result = await userCtrl.getUsers({search: userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = userName);\nexpect(found).to.exist;",
                            "err": {
                                "message": "TypeError: Cannot read property 'statusCode' of undefined",
                                "estack": "TypeError: Cannot read property 'statusCode' of undefined\n    at Context.<anonymous> (test/userHandler.test.js:118:21)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                                "diff": null
                            },
                            "uuid": "8a0cc595-28f8-438f-a82a-0c3e0f459e83",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not update user with empty data",
                            "fullTitle": "api-user User Handler Tests should not update user with empty data",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = '{}';\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;",
                            "err": {},
                            "uuid": "ebac1a52-3a78-4fca-b922-a786fb23717a",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Handler Tests should update user",
                            "timedOut": false,
                            "duration": 36,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let userToDelete = (await UserAuth.query().where('userName', 'like', 'user_to_delete%').limit(1))[0];\nif (!userToDelete) {\n  req.body = {\n    firstName: 'user_to_delete',\n    lastName: 'lastName',\n    userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n    email: 'random@test.com',\n    locale: 'en-US',\n    timezone: 'Pacific',\n    languageGuid: testUser.languageGuid,\n    password: 'randomPwd',\n  }\n  userToDelete  = (await handlers.insertUser(req, mockRes)).body;\n}\nconst data = {\n  firstName: 'user_to_delete',\n  lastName: 'updated last',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7),\n  email: 'random@test.updated',\n  locale: 'en-US',\n  timezone: 'Atlantic/New York',\n  languageGuid: testUser.languageGuid,\n};\nreq.params.userGuid = userToDelete.contactGuid;\nreq.body = JSON.stringify(data);\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.eq(data.firstName);\nexpect(response.body.timezone).to.exist;\nexpect(response.body.timezone).to.eq(data.timezone);",
                            "err": {},
                            "uuid": "5373c79c-a565-4dde-be53-d2767ac93ef4",
                            "parentUUID": "6ed060af-6551-4df1-8f6a-f73645259e5c",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3eab2252-8c0f-47d4-ab07-0fb1f6a632b3",
                        "3fcb7ca9-c7f8-4626-a34d-9779153a0490",
                        "1350428b-d6a4-48cc-ac1d-154151cdf343",
                        "b177c3b7-153e-4449-943c-434f4cd6968d",
                        "0fe34b1d-54c5-414b-8090-383bb28c15d2",
                        "d6de4594-9b3c-424d-9eee-e020f02e4898",
                        "ebac1a52-3a78-4fca-b922-a786fb23717a",
                        "5373c79c-a565-4dde-be53-d2767ac93ef4"
                    ],
                    "failures": [
                        "8a0cc595-28f8-438f-a82a-0c3e0f459e83"
                    ],
                    "pending": [],
                    "skipped": [],
                    "duration": 297,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "bdfe02eb-e4bf-4f83-9e7e-5a0c519a7a93",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "4d7a4211-19c2-459e-9cb6-0c81b2a110c6",
                    "title": "Config Processor ENV.CONFIG tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                    "file": "/test/integration/config.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor ENV.CONFIG tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 128,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nprocess.env.TESTING = true;\n\nconfigHelper = require(\"../../src/helpers/config\")\nredis = require(\"integrify-libs\").redisClient\npubSubClient = redis.makeCopy();\npubSubClient.subscribe('updateEnvConfig')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n//let deletes = await redis.delAsync(['ENV.CONFIG']);\n//console.log(deletes)",
                            "err": {},
                            "uuid": "0d49be75-32f0-496e-8993-bfc9356d2e53",
                            "parentUUID": "4d7a4211-19c2-459e-9cb6-0c81b2a110c6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "07c91da7-020e-4bf6-9bf5-2b51d0f9c75a",
                            "title": "config helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                            "file": "/test/integration/config.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "9707b5b7-e115-4e7b-a903-848159d96b23",
                                    "title": "setConfig",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                                    "file": "/test/integration/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a local config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a local config file",
                                            "timedOut": false,
                                            "duration": 30056,
                                            "state": "failed",
                                            "speed": null,
                                            "pass": false,
                                            "fail": true,
                                            "pending": false,
                                            "context": null,
                                            "code": "await configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nconsole.log(\"wow\",storedConfig)\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\n//expect(storedConfig.cacheTime).to.exist;\nawait delay(300)",
                                            "err": {
                                                "message": "Error: the string \"No default config found.\" was thrown, throw an Error :)",
                                                "estack": "Error: the string \"No default config found.\" was thrown, throw an Error :)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                                                "diff": null
                                            },
                                            "uuid": "afe2adc2-1ae6-4d9b-aa6e-62861e6652c8",
                                            "parentUUID": "9707b5b7-e115-4e7b-a903-848159d96b23",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateEnvConfig pub/sub channel",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should get a message on the updateEnvConfig pub/sub channel",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "failed",
                                            "speed": null,
                                            "pass": false,
                                            "fail": true,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(pubSubMessage.channel).to.equal('updateEnvConfig');",
                                            "err": {
                                                "message": "TypeError: Cannot read property 'channel' of undefined",
                                                "estack": "TypeError: Cannot read property 'channel' of undefined\n    at Context.<anonymous> (test/integration/config.test.js:46:36)\n    at processImmediate (internal/timers.js:461:21)",
                                                "diff": null
                                            },
                                            "uuid": "a660ca69-f846-4859-9898-0dfec2e0963f",
                                            "parentUUID": "9707b5b7-e115-4e7b-a903-848159d96b23",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a S3 config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a S3 config file",
                                            "timedOut": false,
                                            "duration": 9,
                                            "state": "failed",
                                            "speed": null,
                                            "pass": false,
                                            "fail": true,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.USE_S3_FILES=\"true\"\nawait configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\nexpect(storedConfig.cacheTime).to.exist;",
                                            "err": {
                                                "message": "Error: the string \"No default config found.\" was thrown, throw an Error :)",
                                                "estack": "Error: the string \"No default config found.\" was thrown, throw an Error :)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                                                "diff": null
                                            },
                                            "uuid": "43a2d52f-cab3-4b4b-8c16-d470136c8922",
                                            "parentUUID": "9707b5b7-e115-4e7b-a903-848159d96b23",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [],
                                    "failures": [
                                        "afe2adc2-1ae6-4d9b-aa6e-62861e6652c8",
                                        "a660ca69-f846-4859-9898-0dfec2e0963f",
                                        "43a2d52f-cab3-4b4b-8c16-d470136c8922"
                                    ],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 30065,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b6a4b245-74fd-45a5-9b92-abb80aee3c10",
                    "title": "Config Processor Event Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                    "file": "/test/integration/configEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5103,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName]);\n\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"updateEnvConfig\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateDataInstances\", {\n  update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n  update: new Date().toISOString(),\n  tenantId: 'integrifydev'\n      });\n\n\nforkedProcessor = await configStreamConsumer.monitorStream(tenant);\nawait delay(5000);",
                            "err": {},
                            "uuid": "60f0e24b-a8e9-48cd-87ef-5c1b70f7193a",
                            "parentUUID": "b6a4b245-74fd-45a5-9b92-abb80aee3c10",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "7848988d-927e-43d8-92bf-a020db712e92",
                            "parentUUID": "b6a4b245-74fd-45a5-9b92-abb80aee3c10",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "312aefcf-efc3-4131-9048-975b6b445349",
                            "title": "config stream processor",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                            "file": "/test/integration/configEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "8a853e5c-4276-4c15-be73-27c80165b9bf",
                                    "title": "reads from config stream",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                                    "file": "/test/integration/configEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Config Processor Event Handler Tests config stream processor reads from config stream should process events",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "failed",
                                            "speed": null,
                                            "pass": false,
                                            "fail": true,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {
                                                "message": "AssertionError: expected 4 to equal 0",
                                                "estack": "AssertionError: expected 4 to equal 0\n    at Context.<anonymous> (test/integration/configEventHandler.test.js:52:39)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                                                "diff": "- 4\n+ 0\n"
                                            },
                                            "uuid": "73fb79cb-b212-46d1-a0cb-96652dab5e74",
                                            "parentUUID": "8a853e5c-4276-4c15-be73-27c80165b9bf",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [],
                                    "failures": [
                                        "73fb79cb-b212-46d1-a0cb-96652dab5e74"
                                    ],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f6fae283-92df-4ac2-8c01-d2c430591b52",
                    "title": "Config data instance tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                    "file": "/test/integration/dataInstance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config data instance tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateDataInstances')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n  \nlet deletes = await redis.delAsync(['data_instances']);",
                            "err": {},
                            "uuid": "342afd76-c4dc-478b-9d4a-820258bdf803",
                            "parentUUID": "f6fae283-92df-4ac2-8c01-d2c430591b52",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2d5792b8-4d7c-4180-8b3f-348efdeb1073",
                            "title": "dataInstasnce helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                            "file": "/test/integration/dataInstance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "d905b4ad-3957-43ce-81b0-cfe12e483803",
                                    "title": "updateDataInstances",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                                    "file": "/test/integration/dataInstance.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set data_instances in redis",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should set data_instances in redis",
                                            "timedOut": false,
                                            "duration": 930,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await dataInstanceHelper.updateDataInstances();\nlet storedDataInstances = await redis.getAsync('data_instances')\nexpect(storedDataInstances).to.exist;\nstoredDataInstances = JSON.parse(storedDataInstances);\nexpect(Object.keys(storedDataInstances).length).to.be.gt(0);",
                                            "err": {},
                                            "uuid": "a3973a07-4993-4192-a5e6-88b81c3875e3",
                                            "parentUUID": "d905b4ad-3957-43ce-81b0-cfe12e483803",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateDataInstances pub/sub channel",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should get a message on the updateDataInstances pub/sub channel",
                                            "timedOut": false,
                                            "duration": 300,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateDataInstances');",
                                            "err": {},
                                            "uuid": "804f5c30-705c-44de-bf6d-1648a081f14c",
                                            "parentUUID": "d905b4ad-3957-43ce-81b0-cfe12e483803",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a3973a07-4993-4192-a5e6-88b81c3875e3",
                                        "804f5c30-705c-44de-bf6d-1648a081f14c"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1230,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2eb3f414-28d1-45c7-ae03-a991144586a5",
                    "title": "Config license tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                    "file": "/test/integration/license.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config license tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateLicenses')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});",
                            "err": {},
                            "uuid": "4ca26b71-8b1e-4137-8dc5-48f8568c9bcd",
                            "parentUUID": "2eb3f414-28d1-45c7-ae03-a991144586a5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bf6a5636-4608-4574-9df8-01959b48cfa9",
                            "title": "license helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                            "file": "/test/integration/license.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "f59c45b7-bacc-437d-acc7-1c9d28efdf55",
                                    "title": "updateLicenses",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                                    "file": "/test/integration/license.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set licenses and x.license in redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set licenses and x.license in redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 351,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses()\nlet storedLicences = await redis.hgetallAsync('licenses')\nlicenseId = Object.keys(storedLicences)[0]\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "1574a52a-c6ba-46b4-a4a5-53c3006579e5",
                                            "parentUUID": "f59c45b7-bacc-437d-acc7-1c9d28efdf55",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateLicenses pub/sub channel",
                                            "fullTitle": "Config license tests license helper updateLicenses should get a message on the updateLicenses pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateLicenses');",
                                            "err": {},
                                            "uuid": "a12f23aa-699e-4dd7-b3c3-f64db34b8882",
                                            "parentUUID": "f59c45b7-bacc-437d-acc7-1c9d28efdf55",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set license redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set license redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 127,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses(licenseId)\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "180e0959-4ea3-4be0-8242-ea95a04ea7ea",
                                            "parentUUID": "f59c45b7-bacc-437d-acc7-1c9d28efdf55",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "1574a52a-c6ba-46b4-a4a5-53c3006579e5",
                                        "a12f23aa-699e-4dd7-b3c3-f64db34b8882",
                                        "180e0959-4ea3-4be0-8242-ea95a04ea7ea"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 779,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "c5c18b36-124e-4e8e-ae36-c229e4be98b4",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "2d038669-4ab9-4093-8324-102804064f92",
                    "title": "Core Service biztimes",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                    "file": "/test/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service biztimes \"before all\" hook",
                            "timedOut": false,
                            "duration": 24,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nbiz = { \"Active\": false, \"EndHour\": 17, \"EndMinute\": 0, \"SID\": test_data.biz_sid, \"StartHour\": 9, \"StartMinute\": 15, \"Weekday\": 0 }",
                            "err": {},
                            "uuid": "46b8bb28-f924-4c90-a40d-608b6a935c0a",
                            "parentUUID": "2d038669-4ab9-4093-8324-102804064f92",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "25e0cdbe-fbd0-471f-b88e-a807f009bf96",
                            "title": "GET /biztimes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets biztimes",
                                    "fullTitle": "Core Service biztimes GET /biztimes gets biztimes",
                                    "timedOut": false,
                                    "duration": 810,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/biztimes')\n    .set('Authorization', 'Bearer ' + token)\n// biz = res.body.Items[0];\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a27d39af-d874-461d-b4dd-12b1bb2cf532",
                                    "parentUUID": "25e0cdbe-fbd0-471f-b88e-a807f009bf96",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a27d39af-d874-461d-b4dd-12b1bb2cf532"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 810,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e2393131-81cf-4f04-857e-794ffccdf198",
                            "title": "POST /biztimes/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "if (biz.EndHour < 24)\n    biz.EndHour = biz.EndHour + 1\nelse\n    biz.EndHour = biz.EndHour - 23",
                                    "err": {},
                                    "uuid": "4b8585d6-f47b-4909-acb8-25d6a3c37a45",
                                    "parentUUID": "e2393131-81cf-4f04-857e-794ffccdf198",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves biztimes",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save saves biztimes",
                                    "timedOut": false,
                                    "duration": 77,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/biztimes/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(biz)\n//console.log(res.body)\nexpect(res.status).to.equal(200);\nexpect(res.body.EndHour).to.exist;",
                                    "err": {},
                                    "uuid": "506c596a-f51b-4793-a8a5-fef2465c1502",
                                    "parentUUID": "e2393131-81cf-4f04-857e-794ffccdf198",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "506c596a-f51b-4793-a8a5-fef2465c1502"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 77,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "e5aec65e-bff0-41b3-9f84-7de52333bbb7",
                    "title": "Core Service category",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                    "file": "/test/category.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service category \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "c0c28b42-0323-46c0-925e-45603f2c0be8",
                            "parentUUID": "e5aec65e-bff0-41b3-9f84-7de52333bbb7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "40af05b1-161c-4496-a9f8-0f461ecd2c55",
                            "title": "GET tree/{object_type}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET tree/{object_type} core-service",
                                    "timedOut": false,
                                    "duration": 74,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = res.body[0]\n            coreResult = res.body;\n            //console.log(res.body)\n            expect(res.status).to.equal(200);\n            // expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "7ff8a5dd-f6cd-4077-a70d-0c71dbde895a",
                                    "parentUUID": "40af05b1-161c-4496-a9f8-0f461ecd2c55",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7ff8a5dd-f6cd-4077-a70d-0c71dbde895a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 74,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4b3bb9d8-40b8-4acf-9e77-b0f2573b4e18",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/category/' + category.id)\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "c4603fe4-66e9-4386-b161-c68bcc4d1a79",
                                    "parentUUID": "4b3bb9d8-40b8-4acf-9e77-b0f2573b4e18",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c4603fe4-66e9-4386-b161-c68bcc4d1a79"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "68cbb838-0468-489b-95d5-7b4238b11041",
                            "title": "POST save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category POST save core-service",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/category/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(category_save)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.CreatedDate).to.exist;\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "20c6f762-84aa-4cdc-8394-05cce9327420",
                                    "parentUUID": "68cbb838-0468-489b-95d5-7b4238b11041",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "20c6f762-84aa-4cdc-8394-05cce9327420"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "47741c3a-b52b-40f6-96c7-af3b19f3ee66",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service category GET {sid}/delete \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//Fetch category sid to delete\n            let resp = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = resp.body;\n            category.forEach(element => {\n                //console.log(element.Name);\n                if (element.Name == 'Qa Auto')\n                    cate_delete = element;\n            });",
                                    "err": {},
                                    "uuid": "322e9fc6-676a-4c39-ab1c-64eaf6eda5b5",
                                    "parentUUID": "47741c3a-b52b-40f6-96c7-af3b19f3ee66",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid}/delete core-service",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/category/' + cate_delete.id + '/delete')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(0);\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "c998d345-edfa-4466-9451-57bc03c3c954",
                                    "parentUUID": "47741c3a-b52b-40f6-96c7-af3b19f3ee66",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c998d345-edfa-4466-9451-57bc03c3c954"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5e6d922b-2452-4b71-90d4-5caaf4558306",
                    "title": "Core Service contacts",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                    "file": "/test/contact.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service contacts \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "93f2c990-a5d8-47ac-9e09-04208b913585",
                            "parentUUID": "5e6d922b-2452-4b71-90d4-5caaf4558306",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d0276e41-2209-4e44-9f68-fe1d55acfbd6",
                            "title": "GET /contacts/current",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/current core service",
                                    "timedOut": false,
                                    "duration": 147,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/current/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;\n                  currentUser_sid = res.body.SID",
                                    "err": {},
                                    "uuid": "b130c0ac-0a18-45fe-b396-558d21947e05",
                                    "parentUUID": "d0276e41-2209-4e44-9f68-fe1d55acfbd6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b130c0ac-0a18-45fe-b396-558d21947e05"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 147,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "632decb2-70cc-4850-b74d-7db906ce22c2",
                            "title": "GET detail/{contact_sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET detail/{contact_sid} core-service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/detail/' + currentUser_sid)\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;",
                                    "err": {},
                                    "uuid": "d3e8a5e2-6add-450b-97ad-73f02973a06e",
                                    "parentUUID": "632decb2-70cc-4850-b74d-7db906ce22c2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d3e8a5e2-6add-450b-97ad-73f02973a06e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ef5bf3da-1fa0-44b3-999f-2684cd35d103",
                            "title": "GET {contact_sid}/attributes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/attributes core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/attributes')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \nexpect(res.body[0]).to.exist;\nexpect(res.body[1]).to.exist;\nexpect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "313b757e-4b10-430c-9835-e34e4d12eb9c",
                                    "parentUUID": "ef5bf3da-1fa0-44b3-999f-2684cd35d103",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "313b757e-4b10-430c-9835-e34e4d12eb9c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ec72584b-6ecb-4870-90a8-f620839e412f",
                            "title": "GET {contact_sid}/delegations",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/delegations core-service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/delegations')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\n// //console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "26c7ae46-f81d-4503-b11a-064990e4f1c0",
                                    "parentUUID": "ec72584b-6ecb-4870-90a8-f620839e412f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "26c7ae46-f81d-4503-b11a-064990e4f1c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "283a830d-5a61-4a07-9f3a-9ee76ced0273",
                            "title": "GET byuserid/{user_id}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET byuserid/{user_id} core-service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/byuserid/iApprove')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\n//console.log(res.body)\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \n// expect(res.body[0]).to.exist;\n// expect(res.body[1]).to.exist;\n// expect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "4c7628e3-d0c4-4118-b56a-20108c973b0f",
                                    "parentUUID": "283a830d-5a61-4a07-9f3a-9ee76ced0273",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4c7628e3-d0c4-4118-b56a-20108c973b0f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2fe85547-4f80-4720-9587-e6145c90ddcf",
                            "title": "GET /contacts/search",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET /contacts/search core-service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search?search=System')\n      .set('Authorization', 'Bearer ' + token);\n// //console.log(res.body)\ncoreResult = res.body;\n//console.log(res.body);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "f0ccc251-9efc-422f-9650-5c7d951be2b9",
                                    "parentUUID": "2fe85547-4f80-4720-9587-e6145c90ddcf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f0ccc251-9efc-422f-9650-5c7d951be2b9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "22d956bd-dde2-4a98-9d24-9de330450525",
                            "title": "GET /contact/search/quick/name",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contact/search/quick/name core service",
                                    "timedOut": false,
                                    "duration": 126,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search/quick/name/script/?start=0&count=20&sort=Name&dir=ASC&filter=System')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "4b6a8e5d-3144-4235-a21e-9ae4a519a620",
                                    "parentUUID": "22d956bd-dde2-4a98-9d24-9de330450525",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b6a8e5d-3144-4235-a21e-9ae4a519a620"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 126,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "69106015-278c-464f-a625-fc47096999ca",
                            "title": "GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/contactdetailsearch/0/10/LAST_NAME/ASC/script/')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\nexpect(res.status).to.equal(200);\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "dd8dad16-d7f1-41ee-8291-1da49cfc955c",
                                    "parentUUID": "69106015-278c-464f-a625-fc47096999ca",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dd8dad16-d7f1-41ee-8291-1da49cfc955c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 41,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f9ac6b69-9bf6-4faa-9ddb-48b51c18232f",
                            "title": "POST /contacts/save | update",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service",
                                    "timedOut": false,
                                    "duration": 573,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/contacts/save')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\ninsertedSid = res.text\n//console.log(res.text)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "d9a7eb91-6c68-4269-bd88-54fbd064aa58",
                                    "parentUUID": "f9ac6b69-9bf6-4faa-9ddb-48b51c18232f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service update",
                                    "timedOut": false,
                                    "duration": 547,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/update')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "60960fd4-5636-4121-97b3-a3f53092cb78",
                                    "parentUUID": "f9ac6b69-9bf6-4faa-9ddb-48b51c18232f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d9a7eb91-6c68-4269-bd88-54fbd064aa58",
                                "60960fd4-5636-4121-97b3-a3f53092cb78"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1120,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "07a5baea-70d5-46cb-b258-0bb2c22e8974",
                            "title": "POST /contacts/replace POST",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "replace_user = [[\"OldContactSid\", insertedSid], [\"ReplacementContactSid\", insertedSid2], [\"RecipientReplace\", \"No\"], [\"OpenTaskReplace\", \"No\"], [\"GroupReplace\", \"No\"], [\"RoleReplace\", \"No\"], [\"DelegationReplace\", \"No\"]]",
                                    "err": {},
                                    "uuid": "bfd5b5e6-2e89-4d83-aeb4-9f93e83857bb",
                                    "parentUUID": "07a5baea-70d5-46cb-b258-0bb2c22e8974",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST core service update",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/replace ')\n      .set('Authorization', 'Bearer ' + token)\n      .send(replace_user);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "8d9cb922-91b3-455f-88cc-70487e2f7b26",
                                    "parentUUID": "07a5baea-70d5-46cb-b258-0bb2c22e8974",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8d9cb922-91b3-455f-88cc-70487e2f7b26"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5f4da992-7279-4aa7-9c4a-2ab3b857d721",
                    "title": "Core service dbconns",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/dbconn.test.js",
                    "file": "/test/dbconn.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core service dbconns \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "9cf3b3ef-d346-48ce-8244-129def585437",
                            "parentUUID": "5f4da992-7279-4aa7-9c4a-2ab3b857d721",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "it should GET all dbconns",
                            "fullTitle": "Core service dbconns it should GET all dbconns",
                            "timedOut": false,
                            "duration": 34,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                            "err": {},
                            "uuid": "5d8466a0-1bc5-49bc-8323-a781fdb23205",
                            "parentUUID": "5f4da992-7279-4aa7-9c4a-2ab3b857d721",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should add a test dbconn",
                            "fullTitle": "Core service dbconns it should add a test dbconn",
                            "timedOut": false,
                            "duration": 41,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/save/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\n  .send(testDbConn)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.be.a.guid()\ntestDbConnSid = res.text\n// verify testDbConn comes back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.be.greaterThan(-1);",
                            "err": {},
                            "uuid": "66dc62b6-f7c8-4f96-ae9f-68900fb08e6a",
                            "parentUUID": "5f4da992-7279-4aa7-9c4a-2ab3b857d721",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should delete the test dbconn",
                            "fullTitle": "Core service dbconns it should delete the test dbconn",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/delete/script/')\n  .set('Authorization', 'Bearer ' + token)\n  .send([testDbConnSid])\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n// verify testDbConn does not come back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.equal(-1);",
                            "err": {},
                            "uuid": "003fbbac-4964-42cf-ad31-45feeffdad70",
                            "parentUUID": "5f4da992-7279-4aa7-9c4a-2ab3b857d721",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "5d8466a0-1bc5-49bc-8323-a781fdb23205",
                        "66dc62b6-f7c8-4f96-ae9f-68900fb08e6a",
                        "003fbbac-4964-42cf-ad31-45feeffdad70"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 101,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "a2ce9ce8-591e-4206-8e8e-8b509b643311",
                    "title": "Core Service groups",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                    "file": "/test/group.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service groups \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "7b9edc3a-e14c-4145-933c-6a53925afbb3",
                            "parentUUID": "a2ce9ce8-591e-4206-8e8e-8b509b643311",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7bb635a0-5b52-463e-b8b6-9fd1ccac20cc",
                            "title": "POST /group/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /group/save core service",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .post('/groups/save/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                        .send({ \"Name\": \"Qa Auto\", \"Description\": \"This is an automation\", \"Dynamic\": 0 })\n                  new_groupSid = res.text;\n                  expect(res.status).to.equal(200);\n                  expect(res.text).to.exist;\n                  expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "d7c9bf3b-33bf-4d0a-85a8-e8db34875683",
                                    "parentUUID": "7bb635a0-5b52-463e-b8b6-9fd1ccac20cc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d7c9bf3b-33bf-4d0a-85a8-e8db34875683"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8df6d7f3-88f2-4f18-855b-8d1e71f07692",
                            "title": "POST /groups/members/{groupSid}/add",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/add core service",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/add') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "110324df-d772-4aec-8958-e838332f0865",
                                    "parentUUID": "8df6d7f3-88f2-4f18-855b-8d1e71f07692",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "110324df-d772-4aec-8958-e838332f0865"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 65,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "329c24f4-1317-4cfe-9778-0585dab575ce",
                            "title": "POST /groups/members/{groupSid}/remove",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/remove core service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/remove') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "40cd565b-93c7-4ea2-9207-16842044cedc",
                                    "parentUUID": "329c24f4-1317-4cfe-9778-0585dab575ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "40cd565b-93c7-4ea2-9207-16842044cedc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "735302c6-2a72-4d4a-852d-2dbb4f3bc22c",
                            "title": "GET /groups​/{sid}​/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service groups GET /groups​/{sid}​/delete core-service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + new_groupSid + '/delete')\n      .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('true')",
                                    "err": {},
                                    "uuid": "58b1e51a-ebc4-4e87-9b11-7b587f23bc40",
                                    "parentUUID": "735302c6-2a72-4d4a-852d-2dbb4f3bc22c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "58b1e51a-ebc4-4e87-9b11-7b587f23bc40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7626d9fd-4c5d-42c5-991b-c266fc3f3ac2",
                            "title": "GET /groups/list/simple",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/list/simple core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/simple')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Administrators');",
                                    "err": {},
                                    "uuid": "d607592f-5b82-4c90-903a-1fa7f56c8a04",
                                    "parentUUID": "7626d9fd-4c5d-42c5-991b-c266fc3f3ac2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d607592f-5b82-4c90-903a-1fa7f56c8a04"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0a541727-4526-466a-971a-535a766e1621",
                            "title": "GET /groups/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/{sid} core service",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.SID).to.exist\nexpect(res.body.SID).to.be.guid\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "27703574-4cb6-4d6d-b063-6918a75977bb",
                                    "parentUUID": "0a541727-4526-466a-971a-535a766e1621",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "27703574-4cb6-4d6d-b063-6918a75977bb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1bbc4893-59a9-48b2-a179-91d477a2114d",
                            "title": "GET /groups/listroleassociation/{groupSid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listroleassociation/{groupSid} core service",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listroleassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('System Administrators');\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "d6364585-3de3-448a-9ae3-6ac890bc70c6",
                                    "parentUUID": "1bbc4893-59a9-48b2-a179-91d477a2114d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d6364585-3de3-448a-9ae3-6ac890bc70c6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b58e4fbb-599c-43f7-b750-9b8c36cb6b24",
                            "title": "GET /groups/select/{contact_sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/select/{contact_sid} core service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/select/' + system_user)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "4ca2fe37-a654-4303-a9e7-dc7e4a293af5",
                                    "parentUUID": "b58e4fbb-599c-43f7-b750-9b8c36cb6b24",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4ca2fe37-a654-4303-a9e7-dc7e4a293af5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7dfcebab-56a0-45f3-b94c-9cadd027f436",
                            "title": "GET /groups​/nondynamic​/list​/simple",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups​/nondynamic​/list​/simple core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/nondynamic/list/simple')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5c65ee23-6730-412a-ace7-03f9087cd124",
                                    "parentUUID": "7dfcebab-56a0-45f3-b94c-9cadd027f436",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c65ee23-6730-412a-ace7-03f9087cd124"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "85c804ee-6875-4276-84a7-efb17f541f59",
                            "title": "​GET /groups​/listmembers​/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/listmembers​/{sid} core service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listmembers/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "acf51242-2c9d-42cb-8eb5-54397d4c83a6",
                                    "parentUUID": "85c804ee-6875-4276-84a7-efb17f541f59",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "acf51242-2c9d-42cb-8eb5-54397d4c83a6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c3eb72cc-4910-4506-a7fa-86dbb939b755",
                            "title": "​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir} core service",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "c834b0f7-a2fc-4b6e-8054-0345e837cef2",
                                    "parentUUID": "c3eb72cc-4910-4506-a7fa-86dbb939b755",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c834b0f7-a2fc-4b6e-8054-0345e837cef2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "303835f9-6a39-4a00-824c-7aa198c10a43",
                            "title": "GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listbypage/' + groupSid + '/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "af506596-aae4-4e35-886e-78ad30528fce",
                                    "parentUUID": "303835f9-6a39-4a00-824c-7aa198c10a43",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "af506596-aae4-4e35-886e-78ad30528fce"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "71608419-196a-4b3f-aacd-cb5bc621d71f",
                            "title": "GET /groups/listprocessassociation/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listprocessassociation/{sid} core service",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listprocessassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "d5c2d7f3-f510-4de1-aed6-9da958bd6e6e",
                                    "parentUUID": "71608419-196a-4b3f-aacd-cb5bc621d71f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d5c2d7f3-f510-4de1-aed6-9da958bd6e6e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "7bee44a9-088e-47b7-a5a5-8e38c6e046ce",
                    "title": "Core Service Members",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/member.test.js",
                    "file": "/test/member.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Members \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "4408b183-b61e-477c-b284-89c78ccc173d",
                            "parentUUID": "7bee44a9-088e-47b7-a5a5-8e38c6e046ce",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5c7998fb-8a70-4e06-9c0d-80f18364c818",
                            "title": "{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/member.test.js",
                            "file": "/test/member.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Members {page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/member/0/10/Name/Asc/script/?filter=&include=3')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "37fbf50c-a827-4fac-9db0-ef6efffaec82",
                                    "parentUUID": "5c7998fb-8a70-4e06-9c0d-80f18364c818",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "37fbf50c-a827-4fac-9db0-ef6efffaec82"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "dd19f311-4d38-4e20-9280-73fb81443881",
                    "title": "Core Service myTasks",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/myTasks.test.js",
                    "file": "/test/myTasks.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service myTasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "76e80577-dac2-40e8-b1cf-659af504a991",
                            "parentUUID": "dd19f311-4d38-4e20-9280-73fb81443881",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "77debc53-3774-41fc-985a-b3df4adb603d",
                            "title": "GEt {status}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/myTasks.test.js",
                            "file": "/test/myTasks.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service myTasks GEt {status}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 119,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/myTasks/status/0/10/Name/Asc')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;",
                                    "err": {},
                                    "uuid": "ca435ed0-8e5f-42b4-a0ec-bc446e34c018",
                                    "parentUUID": "77debc53-3774-41fc-985a-b3df4adb603d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ca435ed0-8e5f-42b4-a0ec-bc446e34c018"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 119,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "7b667fa1-74b4-4b7d-9230-bba87a373730",
                    "title": "Core Service powerForm",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                    "file": "/test/powerform.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service powerForm \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\n// //console.log(test_data);\nnew_role = '{ \"Name\": \"Qatest\", \"ExtendedDescription\": \"qa automated\", \"OwnerSID\":' + test_data.object_sid + ', \"OwnerType\": 2 }'\npowerform = {\n    CategorySID: test_data.category_sid,\n    Name: \"test\",\n    PowerFormType: \"0\",\n    Version: 1\n}\n// { \"ID\": 9999, \"Mode\": 2, \"ObjectType\": 1, \"RoleSID\": test_data.role_sid, \"SID\": \"90645d40-9de6-48b1-b689-0a610ef1d716\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 3, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"4711a8f4-68be-4772-b389-0a610ef1d7fe\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 4, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"b1e03457-e202-4a99-a389-0a610ef1d79d\", \"Permissions\": 0 }, { \"ID\": 0, \"Mode\": 5, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"f221751c-ba9f-4b19-9708-1f22372dffde\", \"Permissions\": 1023 }",
                            "err": {},
                            "uuid": "b9c0f518-a440-43f6-aece-48030df533d5",
                            "parentUUID": "7b667fa1-74b4-4b7d-9230-bba87a373730",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e3f72319-57bb-42a6-9427-3aed7d954ccb",
                            "title": "POST /Powerform/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm POST /Powerform/save core service",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/powerform/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(powerform)\nexpect(res.status).to.equal(200);\nsid = res.body.SID\n//console.log(sid)",
                                    "err": {},
                                    "uuid": "1ee765cf-40d7-4e5a-a876-ad8db0e1da1f",
                                    "parentUUID": "e3f72319-57bb-42a6-9427-3aed7d954ccb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1ee765cf-40d7-4e5a-a876-ad8db0e1da1f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 53,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "79d8b25d-eff1-41f9-867c-91bfde1db44a",
                            "title": "GET /Powerform/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid)\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "57f41352-4eb7-4171-8270-67b9de35d248",
                                    "parentUUID": "79d8b25d-eff1-41f9-867c-91bfde1db44a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "57f41352-4eb7-4171-8270-67b9de35d248"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2588b418-a248-45f1-9f0f-1d45098b82a6",
                            "title": "GET /Powerform/{sid}/detail",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "6222ed70-2f32-4deb-b755-2200308193f8",
                                    "parentUUID": "2588b418-a248-45f1-9f0f-1d45098b82a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6222ed70-2f32-4deb-b755-2200308193f8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "dcdcb85f-d71d-41b8-a89b-434e99087027",
                            "title": "GET /Powerform/{sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/delete core service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "10f38c34-4ffb-4616-a36d-da2c2999ca4b",
                                    "parentUUID": "dcdcb85f-d71d-41b8-a89b-434e99087027",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "10f38c34-4ffb-4616-a36d-da2c2999ca4b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "8a44c85a-5576-4e4e-bf15-efa35d870db0",
                    "title": "Core Service Process",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                    "file": "/test/process.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken();\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nprc = { Name: new Date().toISOString(), Description: \"Qa Automation\", CategorySID: test_data.category_sid }",
                            "err": {},
                            "uuid": "e579450a-66e0-4f24-8e4e-2c536853f2ff",
                            "parentUUID": "8a44c85a-5576-4e4e-bf15-efa35d870db0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8a943942-69e8-45e7-ad86-bf582340baf6",
                            "title": "POST /process​/create|delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service",
                                    "timedOut": false,
                                    "duration": 250,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/process/create')\n    .set('Authorization', 'Bearer ' + token)\n    .send(prc)\np1 = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ee6091d8-cb3e-47fe-b902-fa347d3d28cf",
                                    "parentUUID": "8a943942-69e8-45e7-ad86-bf582340baf6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | Delete",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service | Delete",
                                    "timedOut": false,
                                    "duration": 241,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/process/' + p1 + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nconsole.log(res);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ba16e5c8-0871-4b46-bad4-028ff5f39686",
                                    "parentUUID": "8a943942-69e8-45e7-ad86-bf582340baf6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ee6091d8-cb3e-47fe-b902-fa347d3d28cf",
                                "ba16e5c8-0871-4b46-bad4-028ff5f39686"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 491,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e4fceddc-545f-4349-bf4c-c4e413bee390",
                            "title": "GET /process/{sid}/copy",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /process/{sid}/copy core service",
                                    "timedOut": false,
                                    "duration": 1274,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/' + test_data.process_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            expect(res.status).to.equal(200);\n            //delete copied process\n            let del = await chai.request(newUrlBase)\n                .get('/process/' + res.text + '/delete')\n                .set('Authorization', 'Bearer ' + token)\n            expect(del.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b1a79de3-1eaa-4b50-8193-2dc011db85a3",
                                    "parentUUID": "e4fceddc-545f-4349-bf4c-c4e413bee390",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b1a79de3-1eaa-4b50-8193-2dc011db85a3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1274,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "dfd537b4-ca82-4290-af01-08f79373fe44",
                            "title": "GET /processes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes core service",
                                    "timedOut": false,
                                    "duration": 149,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "415ada8c-1393-4d2d-a7ea-3bf780b44352",
                                    "parentUUID": "dfd537b4-ca82-4290-af01-08f79373fe44",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "415ada8c-1393-4d2d-a7ea-3bf780b44352"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 149,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "50482797-46ac-4178-93bf-2a1ae938f41d",
                            "title": "GET /processes/{SID}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{SID} core service",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "14337b57-65f2-4368-afc3-b16039b62c0f",
                                    "parentUUID": "50482797-46ac-4178-93bf-2a1ae938f41d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "14337b57-65f2-4368-afc3-b16039b62c0f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 34,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "2a248d82-a6e6-4ea6-8ca0-02926854b023",
                            "title": "GET /processes/{sid}/detail",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "56ccb237-0747-442f-9180-43fe5f851702",
                                    "parentUUID": "2a248d82-a6e6-4ea6-8ca0-02926854b023",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "56ccb237-0747-442f-9180-43fe5f851702"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 43,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8941086d-c366-4eb2-9089-3c5885162089",
                            "title": "GET /processes/{sid}/name",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/name core service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/name')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "8f8f5631-9c0b-4d25-bc73-91cfe0dfa820",
                                    "parentUUID": "8941086d-c366-4eb2-9089-3c5885162089",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8f8f5631-9c0b-4d25-bc73-91cfe0dfa820"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1169771e-9924-4761-8c99-ffc440556043",
                            "title": "GET ​/processes​/{sid}​/summary",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET ​/processes​/{sid}​/summary core service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/summary')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ecf89d98-a91d-452b-8ad4-ae9539008099",
                                    "parentUUID": "1169771e-9924-4761-8c99-ffc440556043",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ecf89d98-a91d-452b-8ad4-ae9539008099"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "209c8bc0-3bfd-4bc8-b7eb-e0f2924014f9",
                            "title": "​GET /processes​/{process_sid}​/tasks",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process ​GET /processes​/{process_sid}​/tasks core service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ae2e3090-74db-4f8e-972b-b38f2aa824da",
                                    "parentUUID": "209c8bc0-3bfd-4bc8-b7eb-e0f2924014f9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ae2e3090-74db-4f8e-972b-b38f2aa824da"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3b55a8d4-14d0-4e88-84ed-e63a49b4367f",
                            "title": "GET /processes/{process_sid}/tasks/{task_sid}/rules",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{process_sid}/tasks/{task_sid}/rules core service",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "32fad2eb-284d-4880-86fd-9ce751bcd712",
                                    "parentUUID": "3b55a8d4-14d0-4e88-84ed-e63a49b4367f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "32fad2eb-284d-4880-86fd-9ce751bcd712"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 51,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c4099323-d1d9-4c69-ba66-abb3c45b9bc6",
                            "title": "POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete ",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/update/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(rule)\nsids.one = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "8fef944f-d786-4dbf-9fc3-270697a10874",
                                    "parentUUID": "c4099323-d1d9-4c69-ba66-abb3c45b9bc6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | reorder",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service | reorder",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let reorder = { \"SID\": sids.two, \"Ordinal\": 2, \"ConditionType\": 1, \"MatchGuid\": \"\", \"RecipientSID\": null, \"DestinationAction\": \"0\" }\nlet res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/reorder/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(reorder)\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "97b82ce1-8ee1-476a-a419-4e7b72ceca2c",
                                    "parentUUID": "c4099323-d1d9-4c69-ba66-abb3c45b9bc6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8fef944f-d786-4dbf-9fc3-270697a10874",
                                "97b82ce1-8ee1-476a-a419-4e7b72ceca2c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 64,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "194d50a9-5ba2-4093-8039-c65d5d86644c",
                    "title": "Core Service processes/tasks",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                    "file": "/test/processTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service processes/tasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 9,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nrecipient = [{ \"BaseObjectSID\": \"\", \"ContactType\": 2, \"ReferenceObjectSID\": \"\", \"SID\": test_data.contact_sid }]",
                            "err": {},
                            "uuid": "67f772ab-9184-44c4-846f-cd1a79151d29",
                            "parentUUID": "194d50a9-5ba2-4093-8039-c65d5d86644c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f121fe08-a5df-47b1-b47d-b2e13cbe0698",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 48,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.task_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "67c8398a-50db-4cfa-a69b-70782c4b457a",
                                    "parentUUID": "f121fe08-a5df-47b1-b47d-b2e13cbe0698",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "67c8398a-50db-4cfa-a69b-70782c4b457a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 48,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5361d9e3-03b0-4ce3-abe6-a053190e3305",
                            "title": "GET {task_sid}/copy",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/copy core-service",
                                    "timedOut": false,
                                    "duration": 73,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/tasks/' + test_data.task_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            //console.log(res.body);\n            expect(res.status).to.equal(200);\n            expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "5a7a9b80-5e71-40e4-bde2-b5ba65d4cc35",
                                    "parentUUID": "5361d9e3-03b0-4ce3-abe6-a053190e3305",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5a7a9b80-5e71-40e4-bde2-b5ba65d4cc35"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 73,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f6faddcd-8ac9-425d-8c28-de656e332c54",
                            "title": "GET {task_sid}/notification",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification core-service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "6f2cf73c-2b2b-4bf9-b9d2-67fd2910e17e",
                                    "parentUUID": "f6faddcd-8ac9-425d-8c28-de656e332c54",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6f2cf73c-2b2b-4bf9-b9d2-67fd2910e17e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fad8b4f2-4cd4-44ce-9529-01b6948e361d",
                            "title": "GET {task_sid}/notification/restore",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/restore core-service",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/restore')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "d3b12a86-d1f5-40aa-8468-3f4acf54e3f0",
                                    "parentUUID": "fad8b4f2-4cd4-44ce-9529-01b6948e361d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d3b12a86-d1f5-40aa-8468-3f4acf54e3f0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 60,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "94d76be2-3166-4217-9bea-cc15d18300d1",
                            "title": "GET {task_sid}/notification/{enabledisable}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/{enabledisable} core-service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/enabled')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "eabf42f7-3bb9-440b-8764-ca135685323e",
                                    "parentUUID": "94d76be2-3166-4217-9bea-cc15d18300d1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "eabf42f7-3bb9-440b-8764-ca135685323e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4b31250e-37df-4b0a-a06f-107d07c70c88",
                            "title": "POST notification/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST notification/save core-service",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/notification/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(notification)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "f628acdc-f0b2-4e07-9a89-f2fefe6f3f0b",
                                    "parentUUID": "4b31250e-37df-4b0a-a06f-107d07c70c88",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f628acdc-f0b2-4e07-9a89-f2fefe6f3f0b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f382d618-ba95-4791-ae98-3729328846c2",
                            "title": "GET {task_sid}/notification/advancedsettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/advancedsettings core-service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/advancesettings')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "1da52e1b-b28a-4f29-b904-7b356146ca13",
                                    "parentUUID": "f382d618-ba95-4791-ae98-3729328846c2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1da52e1b-b28a-4f29-b904-7b356146ca13"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d554ef87-04d8-4fe1-b3b6-ef0cd4a56ae0",
                            "title": "GET {task_sid}/recipients",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipients core-service",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "b515feab-9764-44cc-ac5f-04b6fe9a6df1",
                                    "parentUUID": "d554ef87-04d8-4fe1-b3b6-ef0cd4a56ae0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b515feab-9764-44cc-ac5f-04b6fe9a6df1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 51,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c7988945-613c-4276-89a0-80b813ad13ee",
                            "title": "POST {task_sid}/recipients/add",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/add core-service",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/add')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "3b8f76d5-ba11-41a5-9adc-87f17a4f5535",
                                    "parentUUID": "c7988945-613c-4276-89a0-80b813ad13ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3b8f76d5-ba11-41a5-9adc-87f17a4f5535"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 31,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b97e8fc8-1679-4c8f-a12d-b520d33f09d1",
                            "title": "POST {task_sid}/recipients/remove",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/remove core-service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/remove')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "1ef7f12a-aa5a-4f1f-a01c-da9e5fa75294",
                                    "parentUUID": "b97e8fc8-1679-4c8f-a12d-b520d33f09d1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1ef7f12a-aa5a-4f1f-a01c-da9e5fa75294"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6c352f30-9513-466e-8613-c44083c0f918",
                            "title": "GET {task_sid}/recipsettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipsettings core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipsettings/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n// expect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "20921e13-22b2-45ce-83d2-e2348437e2a1",
                                    "parentUUID": "6c352f30-9513-466e-8613-c44083c0f918",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "20921e13-22b2-45ce-83d2-e2348437e2a1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "82315f2a-b757-4343-a2ca-a3694ef94f86",
                            "title": "GET task_sid}/recipients/dynamic",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET task_sid}/recipients/dynamic core-service",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/dynamic/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body.TotalItemCnt).to.exist;",
                                    "err": {},
                                    "uuid": "37ecd797-0569-49a6-8006-0d1dca17a1cd",
                                    "parentUUID": "82315f2a-b757-4343-a2ca-a3694ef94f86",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "37ecd797-0569-49a6-8006-0d1dca17a1cd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "853d525f-08cc-4e7b-b83f-0a3edf6f08c4",
                    "title": "Core Service systemmessages",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                    "file": "/test/systemmessage.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service systemmessages \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "9797469d-d0bf-4283-ad2b-5d9850d816a8",
                            "parentUUID": "853d525f-08cc-4e7b-b83f-0a3edf6f08c4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bbcac58b-7d41-4238-a7e2-3ed4760833e4",
                            "title": "POST /systemmessages/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service systemmessages POST /systemmessages/save it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 77,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/systemmessages/save/script/')\n      .set('Authorization', 'Bearer ' + token)\n      .send(testMsg)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\n\n// verify systemMessage is in the list\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.MessageBody == testMsg.MessageBody);\nexpect(idx).to.be.greaterThan(-1);",
                                    "err": {},
                                    "uuid": "ca6ab304-b639-4148-b358-f04fe5d14e60",
                                    "parentUUID": "bbcac58b-7d41-4238-a7e2-3ed4760833e4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ca6ab304-b639-4148-b358-f04fe5d14e60"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 77,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c8cf5b92-5aad-410b-9944-229d4bfeb0ce",
                            "title": "GET /systemmessages/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET all systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/list it should GET all systemmessages",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "831a5830-0deb-414c-901a-4f514cf2e358",
                                    "parentUUID": "c8cf5b92-5aad-410b-9944-229d4bfeb0ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "831a5830-0deb-414c-901a-4f514cf2e358"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "df8b351f-6399-4e95-b5c5-fe681e7a5ffa",
                            "title": "GET /systemmessages/active/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET active systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/active/list it should GET active systemmessages",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/active/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "d8c96496-47fc-4398-89ed-70d71dad8584",
                                    "parentUUID": "df8b351f-6399-4e95-b5c5-fe681e7a5ffa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d8c96496-47fc-4398-89ed-70d71dad8584"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "625a2f7f-e61b-46e9-90cf-28b22cb0a5ee",
                            "title": "/systemmessages/{sid}}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET system message by SID",
                                    "fullTitle": "Core Service systemmessages /systemmessages/{sid}} it should GET system message by SID",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n             .get('/systemmessages/list/script/')\n             .set('Authorization', 'Bearer ' + token);\n       \n             expect(res.status).to.equal(200);\n             expect(res.body.Items).to.exist;\n             const testSystemMsgSID = res.body.Items[0].SID;\n             res = await chai.request(newUrlBase)\n             .get(`/systemmessages/${testSystemMsgSID}/script/`)\n             .set('Authorization', 'Bearer ' + token);\n             expect(res.status).to.equal(200);\n             expect(res.body.SID).to.equal(testSystemMsgSID);",
                                    "err": {},
                                    "uuid": "ccca416a-9c41-4968-a342-a3fadf7a6298",
                                    "parentUUID": "625a2f7f-e61b-46e9-90cf-28b22cb0a5ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ccca416a-9c41-4968-a342-a3fadf7a6298"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 53,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ac09457f-1b7c-4a49-9788-4200827a04da",
                            "title": "GET /systemmessages/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should DELETE system message",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/delete it should DELETE system message",
                                    "timedOut": false,
                                    "duration": 69,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n      \nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst testSystemMsgSID = res.body.Items[0].SID;\nres = await chai.request(newUrlBase)\n  .post('/systemmessages/delete/script/') \n  .set('Authorization', 'Bearer ' + token)\n  .send([testSystemMsgSID])\n        \nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n        \n// verify that system message is not in the list anymore\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testSystemMsgSID);\nexpect(idx).to.equal(-1);",
                                    "err": {},
                                    "uuid": "b73549e2-24dc-4c74-9931-44ed523c87c8",
                                    "parentUUID": "ac09457f-1b7c-4a49-9788-4200827a04da",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b73549e2-24dc-4c74-9931-44ed523c87c8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 69,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "761012e0-5393-434f-b121-04c7030d8986",
                    "title": "Core Service System Process",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemProcess.test.js",
                    "file": "/test/systemProcess.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service System Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 17,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "9e46be9d-a263-4481-a2e9-9186ca7bddef",
                            "parentUUID": "761012e0-5393-434f-b121-04c7030d8986",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0bdbbe37-5842-436e-951d-31c90f5e6bc5",
                            "title": "GET S/SystemProcess/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemProcess.test.js",
                            "file": "/test/systemProcess.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service System Process GET S/SystemProcess/list it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 80,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/SystemProcess/list')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "2bc48381-d0f3-4198-a6f1-e8a508b6c1ac",
                                    "parentUUID": "0bdbbe37-5842-436e-951d-31c90f5e6bc5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2bc48381-d0f3-4198-a6f1-e8a508b6c1ac"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 80,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "dc6cd064-93fc-48c7-ac8c-b39bb30ea1cc",
                    "title": "Core Service system Settings",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemSettings.test.js",
                    "file": "/test/systemSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service system Settings \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "7ad0b51b-de7b-45b1-a345-072c9abdf995",
                            "parentUUID": "dc6cd064-93fc-48c7-ac8c-b39bb30ea1cc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c284df14-7344-42de-baa4-780e3902db28",
                            "title": "GET /systemsettings/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemSettings.test.js",
                            "file": "/test/systemSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service system Settings GET /systemsettings/list core-service",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/systemsettings/list/script/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n// expect(res.body.InstanceSID).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "8e46c0be-2785-4eac-9a0a-cb686d2db7f6",
                                    "parentUUID": "c284df14-7344-42de-baa4-780e3902db28",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8e46c0be-2785-4eac-9a0a-cb686d2db7f6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 46,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "a9eb63cc-7d38-490f-93bc-1b0d40c6a4fd",
                    "title": "Core Service Tabs",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                    "file": "/test/tabs.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Tabs \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "71007365-49c0-44a4-b909-904b9a1a0d7a",
                            "parentUUID": "a9eb63cc-7d38-490f-93bc-1b0d40c6a4fd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0d55add0-5c78-4dab-967a-fb2e184fd301",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service Tabs GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 48,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "fd1861ff-bd60-45c1-aeab-0b829d3a10d5",
                                    "parentUUID": "0d55add0-5c78-4dab-967a-fb2e184fd301",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fd1861ff-bd60-45c1-aeab-0b829d3a10d5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 48,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f1e1e58f-2dd6-4bfa-9227-e5439c71f0e2",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service ",
                                    "fullTitle": "Core Service Tabs GET {sid}/delete core-service ",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "cc9ffe12-4975-4e6d-9e27-fa45e081e228",
                                    "parentUUID": "f1e1e58f-2dd6-4bfa-9227-e5439c71f0e2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cc9ffe12-4975-4e6d-9e27-fa45e081e228"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "29cd70f2-40ac-4ad2-8a01-d28d45ea8dcb",
                    "title": "Core Service Utilities",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                    "file": "/test/utilities.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Utilities \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "8908a31c-c4a2-4767-81a9-2e09fdf2f8d8",
                            "parentUUID": "29cd70f2-40ac-4ad2-8a01-d28d45ea8dcb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1a291670-d703-4979-8155-dc083b3aa912",
                            "title": "locale",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities locale core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/Utilities/locales/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            // expect(res.text).to.exist;\n            // expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "9b47a54b-d448-4878-994c-0a47f346ed31",
                                    "parentUUID": "1a291670-d703-4979-8155-dc083b3aa912",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9b47a54b-d448-4878-994c-0a47f346ed31"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "76db3387-78ec-4225-8ce5-855201adc89d",
                            "title": "GET /Utilities/timezone",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/timezone core service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/timezone')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Etc/GMT+12');",
                                    "err": {},
                                    "uuid": "ab30cdc8-c6b6-4bfc-8ffc-f30255acad46",
                                    "parentUUID": "76db3387-78ec-4225-8ce5-855201adc89d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ab30cdc8-c6b6-4bfc-8ffc-f30255acad46"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 100000
        },
        {
            "uuid": "f215ca42-02b8-4ecb-aa22-42285abd7ca3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "352437e6-e22c-4021-a6e0-b80275b4010c",
                    "title": "Integrify Libs JWT Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                    "file": "/test/integration/auth/jwt.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "5fc0d74b-fa69-42f3-9863-ae5191ce4a23",
                            "parentUUID": "352437e6-e22c-4021-a6e0-b80275b4010c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "38f49e85-fd88-471e-8255-cae9131b2312",
                            "title": "getSystemToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a system token",
                                    "fullTitle": "Integrify Libs JWT Tests getSystemToken should return a system token",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet token = await jwt.getSystemToken(process.env.INTEGRIFY_ENV_TOKEN, tenant)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "0581d3f6-571d-48ec-838c-5e951d8a8f4b",
                                    "parentUUID": "38f49e85-fd88-471e-8255-cae9131b2312",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0581d3f6-571d-48ec-838c-5e951d8a8f4b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6dc47483-cb89-49af-b366-e09d70b759cf",
                            "title": "createRefreshToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests createRefreshToken should return a refresh token",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(refreshToken).to.exist;\nexpect(exists !== null).to.be.true",
                                    "err": {},
                                    "uuid": "7baa0413-6c30-463e-b6dd-c7514f71f68b",
                                    "parentUUID": "6dc47483-cb89-49af-b366-e09d70b759cf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7baa0413-6c30-463e-b6dd-c7514f71f68b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2e42c85f-7c5b-4687-9b17-7d20025d7f71",
                            "title": "verifyRefreshToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for the non-expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return true for the non-expired token",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.exist",
                                    "err": {},
                                    "uuid": "dad7efbd-b621-4cc7-a0d8-defcef8e7daa",
                                    "parentUUID": "2e42c85f-7c5b-4687-9b17-7d20025d7f71",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for the expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return false for the expired token",
                                    "timedOut": false,
                                    "duration": 5006,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, options)\nawait delay(5000);\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.be.false\nexists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(exists === null).to.be.true",
                                    "err": {},
                                    "uuid": "4ba32df5-f6d5-4e61-b7fc-9f14efe6edea",
                                    "parentUUID": "2e42c85f-7c5b-4687-9b17-7d20025d7f71",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dad7efbd-b621-4cc7-a0d8-defcef8e7daa",
                                "4ba32df5-f6d5-4e61-b7fc-9f14efe6edea"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5010,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bb332395-0897-4781-b5f9-c12ed8619a1d",
                            "title": "issueJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests issueJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 15\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\n//let exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\noptions.expiresInAmount = 5\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "01a9c7e5-cd4f-4cb2-8a15-192a20e3656f",
                                    "parentUUID": "bb332395-0897-4781-b5f9-c12ed8619a1d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "01a9c7e5-cd4f-4cb2-8a15-192a20e3656f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f4adf151-99d8-4490-8206-2cdde3fc1dfc",
                            "title": "verifyJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nlet verified = jwt.verifyJwt(token, options);\nexpect(verified).to.exist",
                                    "err": {},
                                    "uuid": "6ac37887-e0b7-4c45-8c01-2db40d390179",
                                    "parentUUID": "f4adf151-99d8-4490-8206-2cdde3fc1dfc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail for an expired JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should fail for an expired JWT",
                                    "timedOut": false,
                                    "duration": 5007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000);\nlet verified, error;\ntry {\n   verified = await jwt.verifyJwt(token, options)\n} catch(e) {\n    error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\nexpect(verified).to.not.exist",
                                    "err": {},
                                    "uuid": "63793e38-5467-4f57-a1a6-631dbeb376e7",
                                    "parentUUID": "f4adf151-99d8-4490-8206-2cdde3fc1dfc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6ac37887-e0b7-4c45-8c01-2db40d390179",
                                "63793e38-5467-4f57-a1a6-631dbeb376e7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5010,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d4766d92-29fb-4603-a853-6ee34ceb1182",
                            "title": "renewJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an expired token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should return a new JWT using a valid refresh token and an expired token",
                                    "timedOut": false,
                                    "duration": 3011,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(3000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntoken = await jwt.renewJwt(token,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "8ffac8ec-103d-4e42-963d-0266a2647f39",
                                    "parentUUID": "d4766d92-29fb-4603-a853-6ee34ceb1182",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail to return a new JWT using a invalid refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should fail to return a new JWT using a invalid refresh token",
                                    "timedOut": false,
                                    "duration": 5012,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 2;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntry {\n    token = await jwt.renewJwt(token,refreshToken, options)\n} catch(e) {\n    error = e\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")",
                                    "err": {},
                                    "uuid": "081e233c-142d-4d94-bcc7-6bb25e4509a9",
                                    "parentUUID": "d4766d92-29fb-4603-a853-6ee34ceb1182",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8ffac8ec-103d-4e42-963d-0266a2647f39",
                                "081e233c-142d-4d94-bcc7-6bb25e4509a9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8023,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "0156012b-06bd-4ddf-9a56-44a5219672c0",
                            "title": "reIssueJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an Contact",
                                    "fullTitle": "Integrify Libs JWT Tests reIssueJwt should return a new JWT using a valid refresh token and an Contact",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\ntoken = await jwt.reIssueJwt(Contact,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "f9006a98-a4dd-4924-b10e-ae08700146c6",
                                    "parentUUID": "0156012b-06bd-4ddf-9a56-44a5219672c0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f9006a98-a4dd-4924-b10e-ae08700146c6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e8817a97-d363-4868-9b95-2fe2b0283361",
                    "title": "Integrify Libs Config Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                    "file": "/test/integration/config/config.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3f4f8b73-ea5d-4d6a-968a-c6679342c844",
                            "title": "Config",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                            "file": "/test/integration/config/config.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Config Tests Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "95331767-5264-410b-b464-3fca7cfb86a4",
                                    "parentUUID": "3f4f8b73-ea5d-4d6a-968a-c6679342c844",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "3799f602-e052-47b9-8277-ea49a8698b48",
                                    "title": "get a config from redis",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Config Tests Config get a config from redis should have config.mongo",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(config.mongo).to.exist;\n                //expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "d4182a97-17b0-4126-88d3-4702cc5c8fd2",
                                            "parentUUID": "3799f602-e052-47b9-8277-ea49a8698b48",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "d4182a97-17b0-4126-88d3-4702cc5c8fd2"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 0,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "03f3905b-05f5-48d3-9b74-14e2ccf8ea57",
                                    "title": "log the latest git commit",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return the lates git commit",
                                            "fullTitle": "Integrify Libs Config Tests Config log the latest git commit should return the lates git commit",
                                            "timedOut": false,
                                            "duration": 4,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let commit = Config.logRunningGitCommit('integrify-libs', true);\nexpect(commit).to.exist;\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "bfbec1c2-e10b-4e5c-98e8-1431c3693d65",
                                            "parentUUID": "03f3905b-05f5-48d3-9b74-14e2ccf8ea57",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "bfbec1c2-e10b-4e5c-98e8-1431c3693d65"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 4,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d6029dc4-e8b8-4f8b-8133-9473021a7dc0",
                    "title": "Integrify Libs Logger Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                    "file": "/test/integration/logger/logger.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b2be0e00-c37a-40fc-83ec-c9f1196b44f2",
                            "title": "Logger",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                            "file": "/test/integration/logger/logger.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Logger Tests Logger \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "d28f20ef-0ec1-4a64-ac26-e81494affc60",
                                    "parentUUID": "b2be0e00-c37a-40fc-83ec-c9f1196b44f2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "190d20ed-54d1-4091-a581-16839337022f",
                                    "title": "info",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                                    "file": "/test/integration/logger/logger.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect log a message",
                                            "fullTitle": "Integrify Libs Logger Tests Logger info should connect log a message",
                                            "timedOut": false,
                                            "duration": 8,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "logger.info(config.tenantOne.tenantId);\n  \nexpect(logger).to.exist;\n              \n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "fbf4d4bc-3ec2-4122-a373-1a52f50db0e2",
                                            "parentUUID": "190d20ed-54d1-4091-a581-16839337022f",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "fbf4d4bc-3ec2-4122-a373-1a52f50db0e2"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 8,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6bd6984f-cdf2-4284-b6bc-dfee4690ad0f",
                    "title": "Integrify Libs Parse JWT Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                    "file": "/test/integration/middleware/parseJWT.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Parse JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);        config = await Config.getConfig()\nContact = {\n    contactSid: \"1234\",\n    userName: \"testuser\",\n    tenant: config.test.tenantOne.tenantId,\n    email: \"test@test.com\",\n    name: \"Test User\"\n}\nrefreshTokenPayload = {userName: Contact.userName, contactSid: Contact.contactSid}",
                            "err": {},
                            "uuid": "35252c3c-b2f2-416e-a5d6-1f7a5c47e3e8",
                            "parentUUID": "6bd6984f-cdf2-4284-b6bc-dfee4690ad0f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c66b6b80-8983-4b05-ae34-2ff1d9efba6d",
                            "title": "parse token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": config.test.tenantOne.tenantId});\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "c5a545a9-45a2-49b1-a519-1735c26df38b",
                                    "parentUUID": "c66b6b80-8983-4b05-ae34-2ff1d9efba6d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c5a545a9-45a2-49b1-a519-1735c26df38b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "570f3d7e-030f-42a8-842e-018e636bf084",
                            "title": "auto refresh and parse token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests auto refresh and parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 20031,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(Contact.tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": Contact.tenant, expiresIn:1});\n           \nawait delay(20000)\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\n          \nlet mockRes = await mocks.mockResponse();\n\nawait parseJWT(req, mockRes, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "4cb0206b-ba0c-4eda-b34b-3cd354839f1a",
                                    "parentUUID": "570f3d7e-030f-42a8-842e-018e636bf084",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4cb0206b-ba0c-4eda-b34b-3cd354839f1a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20031,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "9b4af2e5-4ea7-4cdb-8877-8bcc49672100",
                            "title": "use system token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests use system token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let req = {headers: {\"integrify-system-token\": config.test.tenantOne.tenantId + \" \" +  process.env.INTEGRIFY_ENV_TOKEN}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"d8c469c3-f781-4179-a09c-6d148885fb30\");\nexpect(req.oauth.profile.user_name).to.equal(\"Integrify\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "033f2cef-78e5-4668-8d07-d629ff268fa5",
                                    "parentUUID": "9b4af2e5-4ea7-4cdb-8877-8bcc49672100",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "033f2cef-78e5-4668-8d07-d629ff268fa5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "32300561-192d-46c7-937e-5a61134ccabe",
                    "title": "Integrify Libs Mongeese Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                    "file": "/test/integration/mongeese/db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2a96816f-f9ec-4df1-955c-ce8eb2b29134",
                            "title": "Mongeese",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                            "file": "/test/integration/mongeese/db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Mongeese Tests Mongeese \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconsole.log(config)\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "4c663f40-9b23-4f22-85f5-0d4a7bcfb8a8",
                                    "parentUUID": "2a96816f-f9ec-4df1-955c-ce8eb2b29134",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "ff2d184d-6df0-4667-b88d-c8b443e22db2",
                                    "title": "mongoConn",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                                    "file": "/test/integration/mongeese/db.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect to mongo based on a tenant id",
                                            "fullTitle": "Integrify Libs Mongeese Tests Mongeese mongoConn should connect to mongo based on a tenant id",
                                            "timedOut": false,
                                            "duration": 17,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const tenantId = await config.tenantOne.tenantId;\nvar db = await mongeese.getConn(tenantId);\n    \nexpect(db).to.exist;\nexpect(db.name).to.equal(tenantId);\nexpect(db.readyState).to.equal(2);\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "a184cedc-aba3-4459-8225-740798d5a200",
                                            "parentUUID": "ff2d184d-6df0-4667-b88d-c8b443e22db2",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a184cedc-aba3-4459-8225-740798d5a200"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 17,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "dc0a89c2-32d2-46f1-96b7-4fbe0298414c",
                    "title": "Integrify Libs Permissions Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                    "file": "/test/integration/permissions/permissions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet config = await Config.getConfig();\nconfig = config.test;\nsession = {user_sid: config.tenantOne.adminUser.sid.toLowerCase(), user_name: config.tenantOne.adminUser.userName, tenant: config.tenantOne.tenantId }\nlet deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\nconsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                            "err": {},
                            "uuid": "4b5841cc-7d68-4921-b4df-4cf9f68c222b",
                            "parentUUID": "dc0a89c2-32d2-46f1-96b7-4fbe0298414c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);",
                            "err": {},
                            "uuid": "578e13c4-b5e9-4017-bab2-2be327187d43",
                            "parentUUID": "dc0a89c2-32d2-46f1-96b7-4fbe0298414c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f1908b02-71ae-4501-acb5-b536b74f3fa1",
                            "title": "currentUserPermssions",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests currentUserPermssions should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 601,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.currentUserPermissions(session);\nlet cached =  await redis.getAsync([`${session.tenant}.permissions.${session.user_sid}`]);\ncached = JSON.parse(cached)\nexpect(perms).length.to.be.gt(0);\nexpect(cached.length).to.equal(perms.length)",
                                    "err": {},
                                    "uuid": "6d8b55b1-7ba8-411c-b6e5-e226cb249bf8",
                                    "parentUUID": "f1908b02-71ae-4501-acb5-b536b74f3fa1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6d8b55b1-7ba8-411c-b6e5-e226cb249bf8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 601,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "59b43e6b-5dbb-426b-a9fd-f1ede8b4a634",
                            "title": "isSysAdmin",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests isSysAdmin should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.exist",
                                    "err": {},
                                    "uuid": "a3c5d2f3-561b-4fe1-ab5f-0631035153a3",
                                    "parentUUID": "59b43e6b-5dbb-426b-a9fd-f1ede8b4a634",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a3c5d2f3-561b-4fe1-ab5f-0631035153a3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                            "title": "hasPermissions",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for sysAdmin permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for sysAdmin permissions",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.sysAdmin);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\", \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "169fabf3-b1f9-4a52-ad7c-20c8f99f86ba",
                                    "parentUUID": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for System scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for System scoped permissions",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.systemScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\",\n    \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.be.undefined",
                                    "err": {},
                                    "uuid": "aa2d1c25-fcee-46cd-8611-b20e3b9f7329",
                                    "parentUUID": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for category scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for category scoped permissions",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.categoryScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    mocks.categoryScoped[0].ownerSid,\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "ba866f41-180f-414b-b6cc-59885d3e4f66",
                                    "parentUUID": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for Object scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for Object scoped permissions",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "a938c414-c44d-4854-9e84-d135089c58ef",
                                    "parentUUID": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for Object scoped permissions with wrong publish status",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for Object scoped permissions with wrong publish status",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    \"production\");\nexpect(hasPerms).to.be.false;",
                                    "err": {},
                                    "uuid": "206b1111-e982-4486-aa09-536f2fe747ad",
                                    "parentUUID": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for bogus permission type",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for bogus permission type",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edizt',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.false;\nhasPerms = await permissions.hasPermissions(session,\n    'holiday',\n    'viewconfig');\nexpect(hasPerms).to.be.false",
                                    "err": {},
                                    "uuid": "25688190-ec3f-4710-928c-7cd5535e90f1",
                                    "parentUUID": "64e96dec-bf49-46a7-89f0-c642e0383f81",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "169fabf3-b1f9-4a52-ad7c-20c8f99f86ba",
                                "aa2d1c25-fcee-46cd-8611-b20e3b9f7329",
                                "ba866f41-180f-414b-b6cc-59885d3e4f66",
                                "a938c414-c44d-4854-9e84-d135089c58ef",
                                "206b1111-e982-4486-aa09-536f2fe747ad",
                                "25688190-ec3f-4710-928c-7cd5535e90f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b9ea3843-2fa4-47bb-8656-e89f944e8d8d",
                    "title": "Integrify Libs Contact Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/contacts.test.js",
                    "file": "/test/integration/sqldb/contacts.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/contacts.test.js",
                            "file": "/test/integration/sqldb/contacts.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "340ab322-7365-4c7a-a99e-7a487b746573",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContact",
                                    "timedOut": false,
                                    "duration": 56,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ContactModel = await model.getModel(config.test.tenantOne.tenantId, 'Contact')\n//console.dir(ContactModel)\nlet results = await ContactModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleContactGuid = results[0].contactGuid\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContact(sampleContactGuid);\nexpect(Contact).to.exist;\nexpect(Contact.contactGuid).equal(sampleContactGuid)",
                                    "err": {},
                                    "uuid": "1daf766c-5c82-4ba0-adbd-42dfb73f72d2",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getContactByUserName",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContactByUserName",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nlet sampleUserName = user.userName\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContactByUserName(sampleUserName);\nexpect(Contact).to.exist;\nexpect(Contact.userName).equal(sampleUserName)",
                                    "err": {},
                                    "uuid": "49d1a04d-d3b9-4715-89b8-6ef823317007",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should searchContacts",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should searchContacts",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne)\n            let Contacts = await contactController.searchContacts({'auth.userName': 'iApprov', firstName: 'Sys', lastName: 'S'});\n            expect(Contacts[0]).to.exist;\n            expect(Contacts[0].userName).equal('iApprove')\n            Contacts = await contactController.searchContacts({'auth.userName': 'iApprove'});\n            let Contact = Contacts[0]\n            expect(Contact).to.exist;\n            expect(Contact.userName).equal('iApprove')",
                                    "err": {},
                                    "uuid": "d7732d7e-73d1-436f-bf0c-da900685227e",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should dbAuthContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should dbAuthContact",
                                    "timedOut": false,
                                    "duration": 206,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            expect(Contact.token).to.exist;\n            expect(Contact.refreshToken).to.exist;\n            expect(Contact).to.have.property('passwordResetDate');\n            expect(Contact.userName).equal(user.userName);",
                                    "err": {},
                                    "uuid": "85e04702-c1d5-4cf0-811f-38e6b18185ea",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getGroupSids",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getGroupSids",
                                    "timedOut": false,
                                    "duration": 304,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            let groupSids = await contactController.getGroupSids(Contact.contactSid)\n            expect(groupSids.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "627b83fc-0e2c-4d3b-90f7-5669407a103b",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getAccountsByEmail",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getAccountsByEmail",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contacts = await contactController.getAccountsByEmail(config.test.tenantOne.adminUser.email);\nexpect(Contacts.length).to.be.gt(0);\nContacts.forEach(contact => {\n  expect(contact).to.have.all.keys('contactGuid', 'ntId', 'email');\n  expect(contact.email).to.equal(config.test.tenantOne.adminUser.email);\n});",
                                    "err": {},
                                    "uuid": "d64ce766-d61b-46dc-b1ec-9f38805b3683",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should updatePassword",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should updatePassword",
                                    "timedOut": false,
                                    "duration": 290,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contact = await contactController.updatePassword(\n  config.test.tenantOne.adminUser.sid,\n  bcrypt.hashSync(config.test.tenantOne.adminUser.password)\n);\nexpect(Contact).to.exist\n  .and.to.equal(1)",
                                    "err": {},
                                    "uuid": "e3d3b484-1d68-44c5-aa1a-7730c111b7c5",
                                    "parentUUID": "a6313d03-7b8e-4bcd-8e4a-df2996d75942",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1daf766c-5c82-4ba0-adbd-42dfb73f72d2",
                                "49d1a04d-d3b9-4715-89b8-6ef823317007",
                                "d7732d7e-73d1-436f-bf0c-da900685227e",
                                "85e04702-c1d5-4cf0-811f-38e6b18185ea",
                                "627b83fc-0e2c-4d3b-90f7-5669407a103b",
                                "d64ce766-d61b-46dc-b1ec-9f38805b3683",
                                "e3d3b484-1d68-44c5-aa1a-7730c111b7c5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 899,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "237a07d3-a278-4734-b5f7-95ac4af11689",
                    "title": "Integrify Libs Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/controller.test.js",
                    "file": "/test/integration/sqldb/controller.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c4302053-5eb0-499c-ac11-278acc5fa0ce",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/controller.test.js",
                            "file": "/test/integration/sqldb/controller.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "a448960e-5d02-4b1a-9bf9-cac897c1d6b7",
                                    "parentUUID": "c4302053-5eb0-499c-ac11-278acc5fa0ce",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Controller Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(controllers.BaseController).to.exist;\nclass TestController extends controllers.BaseController {}            \nconst testController = new TestController(config.test.tenantOne)\nlet tenantDb =  await testController.getTenantDb()\n\nexpect(tenantDb).to.exist",
                                    "err": {},
                                    "uuid": "97a0d1cf-f245-449e-b81b-bacab23555c9",
                                    "parentUUID": "c4302053-5eb0-499c-ac11-278acc5fa0ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "97a0d1cf-f245-449e-b81b-bacab23555c9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "dd71d323-3bda-446c-8a1c-dcefd07074cf",
                    "title": "Integrify Libs Data Instance Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                    "file": "/test/integration/sqldb/data-instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Data Instance Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await Config.getConfig();\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "8db4148b-18a3-47c9-9bf5-a4d092099b3c",
                            "parentUUID": "dd71d323-3bda-446c-8a1c-dcefd07074cf",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "28e46fb8-f511-4c49-b093-6794b6ee5646",
                            "title": "Model Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a consumer model",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should get a consumer model",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;",
                                    "err": {},
                                    "uuid": "fadb572a-ae53-4009-b0e9-1044c12b83b1",
                                    "parentUUID": "28e46fb8-f511-4c49-b093-6794b6ee5646",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query()\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "5ffe0988-14c0-4c4f-9ffb-bac1f98b0a7d",
                                    "parentUUID": "28e46fb8-f511-4c49-b093-6794b6ee5646",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances with settings",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances with settings",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query().eager('[dataInstanceSettings]')\nconsole.dir(results)\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "d84d7dbb-b601-4cb5-a901-7bdf92343630",
                                    "parentUUID": "28e46fb8-f511-4c49-b093-6794b6ee5646",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fadb572a-ae53-4009-b0e9-1044c12b83b1",
                                "5ffe0988-14c0-4c4f-9ffb-bac1f98b0a7d",
                                "d84d7dbb-b601-4cb5-a901-7bdf92343630"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 95,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "89fb84cb-0966-4134-a36b-6acceb03606a",
                            "title": "Controller Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list datainstances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should list datainstances",
                                    "timedOut": false,
                                    "duration": 55,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstances = await dataInstanceController.listDataInstances()\nexpect(dataInstances).to.exist;\nexpect(dataInstances.length).to.be.gt(0)\nexpect(dataInstances[0].dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "495370fc-d621-4995-9c55-4bbb7511e109",
                                    "parentUUID": "89fb84cb-0966-4134-a36b-6acceb03606a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstance",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nexpect(dataInstance).to.exist;\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "8856c5dd-4702-46e5-b624-4d4a5db07bfc",
                                    "parentUUID": "89fb84cb-0966-4134-a36b-6acceb03606a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstances hash",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstances hash",
                                    "timedOut": false,
                                    "duration": 73,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstanceHt = await dataInstanceController.GetDataInstancesHash()\nexpect(dataInstanceHt).to.exist;\nexpect(dataInstanceHt[config.test.tenantOne.tenantId]).to.exist;",
                                    "err": {},
                                    "uuid": "ae4b242e-93e7-4610-941a-49165ee2a8f5",
                                    "parentUUID": "89fb84cb-0966-4134-a36b-6acceb03606a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should update a datainstance",
                                    "timedOut": false,
                                    "duration": 259,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let settingVal = new Date().toISOString()\nlet dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nlet settingIdx  = dataInstance.dataInstanceSettings.findIndex((s => s.settingsKey === 'HelpURL'));\ndataInstance.dataInstanceSettings[settingIdx].settingsValue = settingVal\ndataInstance  = await dataInstanceController.updateDataInstance(dataInstance)\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)\nlet setting  = dataInstance.dataInstanceSettings.find((s => s.settingsKey === 'HelpURL'));\nexpect(setting).to.exist\nexpect(setting.settingsValue).to.equal(settingVal)",
                                    "err": {},
                                    "uuid": "b3773cd6-058b-4ba0-9918-029401d620d9",
                                    "parentUUID": "89fb84cb-0966-4134-a36b-6acceb03606a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "495370fc-d621-4995-9c55-4bbb7511e109",
                                "8856c5dd-4702-46e5-b624-4d4a5db07bfc",
                                "ae4b242e-93e7-4610-941a-49165ee2a8f5",
                                "b3773cd6-058b-4ba0-9918-029401d620d9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 440,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b736dc11-0f47-45c0-8d19-67bf87a420b5",
                    "title": "Integrify Libs Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/model.test.js",
                    "file": "/test/integration/sqldb/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3975cbeb-3d91-42ba-a336-da01ce2a42bd",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/model.test.js",
                            "file": "/test/integration/sqldb/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "f704bfa1-5658-4c5b-b2de-6a3f2cd862b7",
                                    "parentUUID": "3975cbeb-3d91-42ba-a336-da01ce2a42bd",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 89,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nthis.timeout(105000);\nconst ContactModel = await model.bindModel(config.test.tenantOne.tenantId, models.Contact)\n//console.dir(ContactModel)\n//ContactModel.setOptions({excludeDeleted:false})\n//let results = await ContactModel.query().where('contactId', '>', 0)\n//console.log(results)\nlet results;\nresults = await ContactModel.query().setOptions({excludeDeleted:false}).where('contactId', '>', 0)\nresults = await ContactModel.query().where('contactId', '>', 0)\nlet c = await ContactModel.query().findOne({userName: 'iApprove'}).joinRelated('auth').select('contact.*', 'contact.contactGuid as contactSid','auth.userName as userName')\nconsole.log(c)\nlet patched = await c.$query().patch({middleName: \"bob\"})\nconsole.log(patched)\n\n\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "58bb009a-6a32-4bc5-bb2a-58393ad41465",
                                    "parentUUID": "3975cbeb-3d91-42ba-a336-da01ce2a42bd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "58bb009a-6a32-4bc5-bb2a-58393ad41465"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 89,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "f310a097-14a2-470c-bb0f-0eb693e0356c",
                    "title": "Integrify Libs Permissions Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/permissions.test.js",
                    "file": "/test/integration/sqldb/permissions.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c128e4bb-d5d3-41dd-9b97-2bd36042514a",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/permissions.test.js",
                            "file": "/test/integration/sqldb/permissions.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "55fc1239-6c82-4189-a719-2e267715307c",
                                    "parentUUID": "c128e4bb-d5d3-41dd-9b97-2bd36042514a",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getUserPermissionsFromDb",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests should getUserPermissionsFromDb",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst session = {tenantId: config.test.tenantOne.tenantId, user_sid: user.sid}\nlet permissionsController = new PermissionsController(session)\nlet permissions = await permissionsController.getWorkflowPermissionsFromDb(session);\nconsole.log(permissions)\nexpect(permissions[0]).to.exist;",
                                    "err": {},
                                    "uuid": "137bb63a-fce3-4472-9e61-11e066e82123",
                                    "parentUUID": "c128e4bb-d5d3-41dd-9b97-2bd36042514a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "137bb63a-fce3-4472-9e61-11e066e82123"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 46,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "01dfb9cb-4acb-49b0-b4ae-469b51fd120f",
                    "title": "Integrify Libs Process Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/process.test.js",
                    "file": "/test/integration/sqldb/process.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a33cf477-f2cd-4a75-9d11-7540cd1bec21",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/process.test.js",
                            "file": "/test/integration/sqldb/process.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Process Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "726b832d-d3bc-4a5f-bee5-9dac7832fb32",
                                    "parentUUID": "a33cf477-f2cd-4a75-9d11-7540cd1bec21",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a process from sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should get a process from sql",
                                    "timedOut": false,
                                    "duration": 379,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n\n\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nconst Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nconsole.log([Process])\nexpect(Process.processGuid).equal(sampleProcesstGuid)",
                                    "err": {},
                                    "uuid": "a18e99e5-cd96-41e7-8269-9a055d226554",
                                    "parentUUID": "a33cf477-f2cd-4a75-9d11-7540cd1bec21",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should upsert a process in sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should upsert a process in sql",
                                    "timedOut": false,
                                    "duration": 710,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n//console.dir(ContactModel)\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nlet Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nexpect(Process.processGuid).equal(sampleProcesstGuid)\nlet newName = 'Updated ' + new Date().toISOString()\nclonedProcess = JSON.parse(JSON.stringify(Process));\n           \nProcess.objective = newName;\nProcess.tasks[0].internalNotes = newName;\nProcess.processCategory.ordinal = 1;\nawait processController.upsertFullProcess(Process);\nProcess = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process.objective).to.equal(newName);\nexpect(Process.tasks[0].internalNotes).to.equal(newName);\nexpect(Process.processCategory.ordinal).equal(1)",
                                    "err": {},
                                    "uuid": "421659b9-d199-4eb4-979f-b06dbb7d2899",
                                    "parentUUID": "a33cf477-f2cd-4a75-9d11-7540cd1bec21",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a18e99e5-cd96-41e7-8269-9a055d226554",
                                "421659b9-d199-4eb4-979f-b06dbb7d2899"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1089,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0eb3791b-84ae-428a-b879-a165cf750fb2",
                    "title": "Integrify Libs Tenant tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                    "file": "/test/integration/sqldb/sqldb-db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0c5746cc-0483-464a-a84f-b70ea709efa2",
                            "title": "tentantSql tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                            "file": "/test/integration/sqldb/sqldb-db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// let configClass = await require('../../../config')\n            // await configClass.setConfigs();\n            // config = await configClass.getConfig();\n            config = await Config.getConfig();\n            this.timeout(100000);",
                                    "err": {},
                                    "uuid": "131b8cf2-f698-4fef-bdc5-141e533317a2",
                                    "parentUUID": "0c5746cc-0483-464a-a84f-b70ea709efa2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get the consumer Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests should get the consumer Db",
                                    "timedOut": false,
                                    "duration": 82,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getConsumersDb(config.consumersConn)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`SELECT * FROM sys.tables WHERE name = 'data_instance'`)\nexpect(queyResults.length).equal(1)\n//console.log(queyResults)",
                                    "err": {},
                                    "uuid": "2be48103-2f6e-4c28-b773-c00e26b458fb",
                                    "parentUUID": "0c5746cc-0483-464a-a84f-b70ea709efa2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "shoulld get the tenant Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests shoulld get the tenant Db",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getTenantDb(config.test.tenantOne.tenantId)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`select * from contact`)\nexpect(queyResults.length).to.be.gt(0)\nqueyResults = await db.raw(\"select * from contact_auth where user_name = :uname\", {uname: 'iApprove'})\nexpect(queyResults.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "08202be2-ef79-4761-b809-d80d44e3f62f",
                                    "parentUUID": "0c5746cc-0483-464a-a84f-b70ea709efa2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2be48103-2f6e-4c28-b773-c00e26b458fb",
                                "08202be2-ef79-4761-b809-d80d44e3f62f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 91,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "297c1160-ea86-48cc-bedc-6c02a5ec3b81",
                    "title": "Integrify Libs StreamConsumer Load Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6631,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\n/*\nRedis stream stuff:\nYou can scale up by running additional processors in the group. This creates a new Node process and runs a new consumer\nin the existing stream group. The consumer name for each processor will have an incremental suffix so it will be unique\nensuring that each consumer processes a unique set of events.\nWith 3 processors, it handeld a loadSize of a million events as they came in with no backlog build up in the group.\n */\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nforkedProcessor2 = await streamConsumer.forkStreamProcessor()\nforkedProcessor3 = await streamConsumer.forkStreamProcessor()\nfor (let index = 0; index < loadSize; index++) {\n\n    await sp.sendEvent(\"extendSession\",{\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\", \n            user_name: \"iapprove\", \n            email: \"iapprove@integrify.com\", \n            name: \"System System\"\n        }\n    })\n\n}\n       \nawait delay(1000);",
                            "err": {},
                            "uuid": "a39ef5fe-f67d-45ea-acba-21994883a0a3",
                            "parentUUID": "297c1160-ea86-48cc-bedc-6c02a5ec3b81",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill()\nforkedProcessor2.kill()\nforkedProcessor3.kill()",
                            "err": {},
                            "uuid": "d7e64768-b7cb-4b94-91ff-34cbc07362db",
                            "parentUUID": "297c1160-ea86-48cc-bedc-6c02a5ec3b81",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "dc9175de-066b-46c9-8f79-c41cc41d7606",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                            "file": "/test/integration/stream/streamConsumer.load.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "8faec6f5-d09a-4180-a240-5da9d205b4a3",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Load Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "75e21017-7b1e-43df-9841-7e9654a5818d",
                                            "parentUUID": "8faec6f5-d09a-4180-a240-5da9d205b4a3",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "75e21017-7b1e-43df-9841-7e9654a5818d"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "210d5c2f-7d85-497a-b08f-47a4ffdf5b96",
                    "title": "Integrify Libs StreamConsumer Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                    "file": "/test/integration/stream/streamConsumer.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5024,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\",\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nawait delay(5000);",
                            "err": {},
                            "uuid": "fc332745-1e1c-42db-8424-91b69d71ba23",
                            "parentUUID": "210d5c2f-7d85-497a-b08f-47a4ffdf5b96",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "8941d1d6-1b17-424f-bd76-765cb3edfe2a",
                            "parentUUID": "210d5c2f-7d85-497a-b08f-47a4ffdf5b96",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0d70be34-e712-4bf6-bc36-2988fd637691",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                            "file": "/test/integration/stream/streamConsumer.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "3a4427bf-7c46-46cd-bf55-976a6d54745c",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                                    "file": "/test/integration/stream/streamConsumer.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "10768996-4ba5-4e18-9c75-1b4fb8cc8caa",
                                            "parentUUID": "3a4427bf-7c46-46cd-bf55-976a6d54745c",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "10768996-4ba5-4e18-9c75-1b4fb8cc8caa"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ae1d17fd-5fc9-4e43-9bc0-481f8f202b7b",
                    "title": "Integrify Libs Stream Publisher Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamPublisher.test.js",
                    "file": "/test/integration/stream/streamPublisher.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6b917ee0-2dbe-4616-b752-6daeb9444330",
                            "title": "stream publisher",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamPublisher.test.js",
                            "file": "/test/integration/stream/streamPublisher.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(100000)\nprocess.env.jest = \"true\";\nawait redis.delAsync([fullStreamName, eventHistoryName])",
                                    "err": {},
                                    "uuid": "19aff7a1-1182-4e50-b420-f5239c9d1154",
                                    "parentUUID": "6b917ee0-2dbe-4616-b752-6daeb9444330",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should handle the constructor",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should handle the constructor",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant);\nexpect(sp.streamName).equal(fullStreamName)\nexpect(sp.baseStreamName).equal(testStreamName)",
                                    "err": {},
                                    "uuid": "2a1c1c28-8889-4e92-a458-fae0d3365cda",
                                    "parentUUID": "6b917ee0-2dbe-4616-b752-6daeb9444330",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should an sendEvent",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should an sendEvent",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant,1000);\nexpect(sp.streamName).equal(fullStreamName)\n//sendEvent(eventType, data) data will get stringified\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}})   \nexpect(id).to.exist;\nexpect (id.indexOf(\"-\")).to.be.gt(-1)  \nawait delay(100);\nlet id2 = await sp.sendEvent(testEventType, {foo:\"bar2\", biz:\"buzz2\", beep:{bop:\"bam2\"}})   \nexpect (Number(id2.split(\"-\")[0])).to.be.gt(Number(id.split(\"-\")[0]))",
                                    "err": {},
                                    "uuid": "322e60bf-9e17-4888-8f31-c8d2846b4abb",
                                    "parentUUID": "6b917ee0-2dbe-4616-b752-6daeb9444330",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should append to eventhistory",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should append to eventhistory",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant, 1000); \n\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}}) \n           \n//console.log(historySet)\nlet historyCount = await redis.zcardAsync(eventHistoryName)\nexpect(historyCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "6534a102-2965-4816-be6a-cb948def79f5",
                                    "parentUUID": "6b917ee0-2dbe-4616-b752-6daeb9444330",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2a1c1c28-8889-4e92-a458-fae0d3365cda",
                                "322e60bf-9e17-4888-8f31-c8d2846b4abb",
                                "6534a102-2965-4816-be6a-cb948def79f5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 104,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7373cef4-1c8c-4c07-8681-7d18cbac53b3",
                    "title": "Integrify Libs Tes-lib Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                    "file": "/test/integration/test-lib/test-lib.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "29039ffe-ef13-48e6-96be-306b70d1de3c",
                            "title": "Test Config",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                            "file": "/test/integration/test-lib/test-lib.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tes-lib Tests Test Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "2ef0c25c-2c76-4e46-93da-44cab7e27ee0",
                                    "parentUUID": "29039ffe-ef13-48e6-96be-306b70d1de3c",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "58e19566-9b28-4e78-ae82-d129c740307f",
                                    "title": "get a test config",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get a test config should have config.mongo",
                                            "timedOut": false,
                                            "duration": 9,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const testConfig = await testLib.getTestConfig();\nconsole.log(testConfig)\nexpect(testConfig).to.exist;",
                                            "err": {},
                                            "uuid": "e7ed7e43-5135-45b4-991c-0a710d2f8918",
                                            "parentUUID": "58e19566-9b28-4e78-ae82-d129c740307f",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "e7ed7e43-5135-45b4-991c-0a710d2f8918"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 9,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "81029cdb-7045-4722-96e5-829382262e6e",
                                    "title": "get an auth Token ",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have a auth token",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get an auth Token  should have a auth token",
                                            "timedOut": false,
                                            "duration": 4,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const authToken = await testLib.getAuthToken();\nconsole.log(authToken)\nexpect(authToken).to.exist;",
                                            "err": {},
                                            "uuid": "efbb66fe-8735-4bfd-8bfc-2bfdf9553f73",
                                            "parentUUID": "81029cdb-7045-4722-96e5-829382262e6e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "efbb66fe-8735-4bfd-8bfc-2bfdf9553f73"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 4,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "3818bf0b-314c-4d91-9c8f-ea79eda52938",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "9b171045-c336-4979-a18e-f2e5d07660a9",
                    "title": "Scheduler CRUD tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                    "file": "/test/crud.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler CRUD tests\"",
                            "fullTitle": "Scheduler CRUD tests \"before all\" hook in \"Scheduler CRUD tests\"",
                            "timedOut": false,
                            "duration": 372,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntry {\n    testConfig = await serverConfig.setProcessServerConfig()\n    jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl.js\");\n} catch(e){}",
                            "err": {},
                            "uuid": "5e1384dd-ed02-4d19-9a39-e3a8d200b36d",
                            "parentUUID": "9b171045-c336-4979-a18e-f2e5d07660a9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "63dd29b6-5f21-4dff-b6ce-85b36c5895c1",
                            "title": ".save",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves the job",
                                    "fullTitle": "Scheduler CRUD tests .save saves the job",
                                    "timedOut": false,
                                    "duration": 66,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let sDate = new Date();\nlet startThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() - 5)\n);\nlet endThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() + 5)\n);\nlet job = {\n    dbName: config.dbName,\n    status: \"Scheduled\",\n    name: config.name,\n    initData: config.initData,\n    runAs: config.runAs,\n    frequency: \"Recurring\",\n    rminutes: 1,\n    state: \"ended\",\n    startDate: startThis,\n    startHour: startThis.getHours(),\n    startMinute: startThis.getMinutes(),\n    startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n    endDate: endThis,\n    endHour: endThis.getHours(),\n    endMinute: endThis.getMinutes(),\n    endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\",\n    jobType: config.jobType\n};\nreturn jobCtrl.save(job).then(saved => {\n    expect(saved).to.exist;\n    dbJob = saved;\n});",
                                    "err": {},
                                    "uuid": "5d9a8eda-7878-4747-9dd8-b6f20c002d2e",
                                    "parentUUID": "63dd29b6-5f21-4dff-b6ce-85b36c5895c1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5d9a8eda-7878-4747-9dd8-b6f20c002d2e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 66,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e2efb4af-3db0-4520-82db-02ee2d9e248e",
                            "title": ".upate",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates the job",
                                    "fullTitle": "Scheduler CRUD tests .upate updates the job",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.update(dbJob).then(updated => {\n    expect(updated).to.exist;\n    expect(updated.modifiedDate.getTime()).to.be.greaterThan(\n        updated.createdDate.getTime()\n    );\n});",
                                    "err": {},
                                    "uuid": "6a30f460-6ea7-4363-ae78-4b5f3476b07f",
                                    "parentUUID": "e2efb4af-3db0-4520-82db-02ee2d9e248e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6a30f460-6ea7-4363-ae78-4b5f3476b07f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c38e0d6c-d9da-4a93-9bcd-f733a4c7a8d8",
                            "title": ".getOne",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler CRUD tests .getOne should get a job by id",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.getOne(config.dbName, dbJob._id).then(job => {\n    expect(job).to.exist;\n    expect(job._id.toString()).to.equal(dbJob._id.toString());\n});",
                                    "err": {},
                                    "uuid": "1a6b2337-5cb1-401e-b0e1-0a8ce7983805",
                                    "parentUUID": "c38e0d6c-d9da-4a93-9bcd-f733a4c7a8d8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1a6b2337-5cb1-401e-b0e1-0a8ce7983805"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ab22e03d-67f8-4a1e-82d3-bd913a3d1060",
                            "title": ".getAll",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs",
                                    "fullTitle": "Scheduler CRUD tests .getAll should get all jobs",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName).then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "3b3409df-4a4e-4b49-a973-25d4b53ddda1",
                                    "parentUUID": "ab22e03d-67f8-4a1e-82d3-bd913a3d1060",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3b3409df-4a4e-4b49-a973-25d4b53ddda1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4e17148b-06f6-410c-9b66-595a28bac0f1",
                            "title": ".getAll(filter)",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs of type testToConsole",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter) should get all jobs of type testToConsole",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"testToConsole\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "1c984dc9-018e-4340-aafc-927948e6d7d0",
                                    "parentUUID": "4e17148b-06f6-410c-9b66-595a28bac0f1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1c984dc9-018e-4340-aafc-927948e6d7d0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "31f554e3-211d-4906-839c-a2a2118734a3",
                            "title": ".getAll(filter-bad)",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should not have any jobs of type fakeJob",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter-bad) should not have any jobs of type fakeJob",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"fakeJob\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.empty;\n});",
                                    "err": {},
                                    "uuid": "b0459c96-0180-4bd6-9255-d56dee91ae46",
                                    "parentUUID": "31f554e3-211d-4906-839c-a2a2118734a3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b0459c96-0180-4bd6-9255-d56dee91ae46"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bab83285-14c4-4323-9fcd-6ab2aea5d4e4",
                            "title": ".delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a job",
                                    "fullTitle": "Scheduler CRUD tests .delete should delete a job",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.delete(config.dbName, dbJob._id).then(deleted => {\n    expect(deleted).to.be.true;\n});",
                                    "err": {},
                                    "uuid": "01d38b3c-3274-4d11-82ff-fdbf89b16c42",
                                    "parentUUID": "bab83285-14c4-4323-9fcd-6ab2aea5d4e4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "01d38b3c-3274-4d11-82ff-fdbf89b16c42"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ab074d35-6d33-4675-83d7-385a77fe43c3",
                    "title": "Scheduler OneTimeJob",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                    "file": "/test/onetime.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler OneTimeJob\"",
                            "fullTitle": "Scheduler OneTimeJob \"before all\" hook in \"Scheduler OneTimeJob\"",
                            "timedOut": false,
                            "duration": 116,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "c9ca1679-84aa-40c5-88a7-82052cf1d8c6",
                            "parentUUID": "ab074d35-6d33-4675-83d7-385a77fe43c3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6a0c8f04-8023-46b5-a614-c8cef583608d",
                            "title": "#addOneTimeJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler OneTimeJob #addOneTimeJob should add a job",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "4652256d-74b1-4927-96e2-e8bfac924edf",
                                    "parentUUID": "6a0c8f04-8023-46b5-a614-c8cef583608d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4652256d-74b1-4927-96e2-e8bfac924edf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d40fb243-9bf5-4750-9bcd-c37c623052a0",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "7a21d5d1-7b2d-4909-ab75-39d5d6c17940",
                                    "parentUUID": "d40fb243-9bf5-4750-9bcd-c37c623052a0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "b38a62a7-001d-4832-86b8-3524a198546b",
                                    "parentUUID": "d40fb243-9bf5-4750-9bcd-c37c623052a0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7a21d5d1-7b2d-4909-ab75-39d5d6c17940",
                                "b38a62a7-001d-4832-86b8-3524a198546b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e694d540-2d18-4875-8b8a-a2d17cde9f59",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler OneTimeJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "72dc1cfc-dccb-46f0-abce-63b8dfab1e66",
                                    "parentUUID": "e694d540-2d18-4875-8b8a-a2d17cde9f59",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "72dc1cfc-dccb-46f0-abce-63b8dfab1e66"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "5f18eb42-0fef-4be4-a6da-aca1c7043042",
                            "title": "#runJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should run the job",
                                    "fullTitle": "Scheduler OneTimeJob #runJob should run the job",
                                    "timedOut": false,
                                    "duration": 15001,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\nlet c = await delay(15000);\nexpect(j.triggeredJobs()).to.equal(1);",
                                    "err": {},
                                    "uuid": "7c7a1668-8abc-4bf9-9abf-e7e3a8ec1069",
                                    "parentUUID": "5f18eb42-0fef-4be4-a6da-aca1c7043042",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7c7a1668-8abc-4bf9-9abf-e7e3a8ec1069"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15001,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 20000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2833cd2f-a813-461d-9a04-9889f0301f81",
                    "title": "Scheduler PubSubHandler",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                    "file": "/test/pubsub.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"before all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 31,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\njobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");\ndbJobWithId = await jobCtrl.save(dbJob);\nservice = require(\"../scheduler.js\");\nintegrify_redis = require(\"../lib/redis/integrify-redis.js\");\npubSubClient = integrify_redis.getRedisPubSubClient();",
                            "err": {},
                            "uuid": "08b63059-77b4-468d-87f6-cd6186600a33",
                            "parentUUID": "2833cd2f-a813-461d-9a04-9889f0301f81",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"after all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "return await jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString());",
                            "err": {},
                            "uuid": "23348222-7205-42d8-91e0-d4a0a69cd228",
                            "parentUUID": "2833cd2f-a813-461d-9a04-9889f0301f81",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bb5f717d-42b9-427a-a563-4423aec16c80",
                            "title": "#addJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add a new job based on a message",
                                    "fullTitle": "Scheduler PubSubHandler #addJob add a new job based on a message",
                                    "timedOut": false,
                                    "duration": 3006,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:add`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    function(err, ok) {\n        setTimeout(\n            function() {\n                let j = scheduler.getJobById(dbJobWithId._id);\n                expect(j).to.exist;\n                done();\n            },\n            3000\n        );\n    }\n);",
                                    "err": {},
                                    "uuid": "95704e36-268e-4ed1-b291-45443bbe4e32",
                                    "parentUUID": "bb5f717d-42b9-427a-a563-4423aec16c80",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "95704e36-268e-4ed1-b291-45443bbe4e32"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3006,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "8facfd5b-5341-4f98-b1ba-919e655db33d",
                            "title": "#cancel",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler PubSubHandler #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:delete`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    async function(err, ok) {\n        delay(500);\n        let jobs = scheduler.listJobs();\n        expect(jobs[dbJobWithId._id]).to.not.exist;\n                        }\n);",
                                    "err": {},
                                    "uuid": "659dce20-0faf-48d3-b775-9c8dc1b845aa",
                                    "parentUUID": "8facfd5b-5341-4f98-b1ba-919e655db33d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "659dce20-0faf-48d3-b775-9c8dc1b845aa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "48b2d81d-540f-4528-badc-8568f2b4710b",
                    "title": "Scheduler RecurringJob",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                    "file": "/test/recur.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler RecurringJob\"",
                            "fullTitle": "Scheduler RecurringJob \"before all\" hook in \"Scheduler RecurringJob\"",
                            "timedOut": false,
                            "duration": 18,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "12c8d114-054e-4670-8a08-f40779c50e59",
                            "parentUUID": "48b2d81d-540f-4528-badc-8568f2b4710b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0c944490-892a-42b5-85b8-c3720ba6aa63",
                            "title": "#addRecurringJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler RecurringJob #addRecurringJob should add a job",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);5\nexpect(job.recur).to.exist;",
                                    "err": {},
                                    "uuid": "4693a5c6-4eb4-46ac-b0e1-1809b0b787ed",
                                    "parentUUID": "0c944490-892a-42b5-85b8-c3720ba6aa63",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4693a5c6-4eb4-46ac-b0e1-1809b0b787ed"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "518ce170-be08-45fb-afd2-c17352d31c1d",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "3892e0b8-fe43-4da4-b928-c1c54c6e6932",
                                    "parentUUID": "518ce170-be08-45fb-afd2-c17352d31c1d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "c40d3d2f-8f97-4578-9941-d431dc5bad4e",
                                    "parentUUID": "518ce170-be08-45fb-afd2-c17352d31c1d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3892e0b8-fe43-4da4-b928-c1c54c6e6932",
                                "c40d3d2f-8f97-4578-9941-d431dc5bad4e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "92e5654e-c2a1-478f-b861-23750a510c28",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler RecurringJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "99687c08-df6f-47d2-88ab-f1159d3190ec",
                                    "parentUUID": "92e5654e-c2a1-478f-b861-23750a510c28",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "99687c08-df6f-47d2-88ab-f1159d3190ec"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "af53f92f-84cc-44c0-ab22-e2aa7df2ef9a",
                    "title": "Scheduler Scheduled Jobs",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                    "file": "/test/schedule.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "fullTitle": "Scheduler Scheduled Jobs \"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "timedOut": false,
                            "duration": 15,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": ";\n        testConfig = await serverConfig.setProcessServerConfig()\n        scheduler = require(\"../lib/scheduler/index.js\");\n        jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "3d0fb1f6-d94c-42f7-8aa6-2755445e0153",
                            "parentUUID": "af53f92f-84cc-44c0-ab22-e2aa7df2ef9a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f69271b9-2d7c-45ef-9612-628f87b33fbb",
                            "title": "#addJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler Scheduled Jobs #addJob should add a job",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "79b7085b-75b2-4f8f-b4f8-af21470d643d",
                                    "parentUUID": "f69271b9-2d7c-45ef-9612-628f87b33fbb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "79b7085b-75b2-4f8f-b4f8-af21470d643d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "522cb052-ba7a-42c5-974d-0706ee690bc0",
                            "title": "#loadAllJobsFromMongo",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// runs before all tests in this block\nreturn jobCtrl.save(dbJob).then(j => {\n    dbJobWithId = j;\n});",
                                    "err": {},
                                    "uuid": "116c1e2f-d8a5-4ec8-8c9d-a66ffcb62e54",
                                    "parentUUID": "522cb052-ba7a-42c5-974d-0706ee690bc0",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [
                                {
                                    "title": "\"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//return jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString())",
                                    "err": {},
                                    "uuid": "ce068f43-fc14-4cfa-b5df-da0c80f61fbb",
                                    "parentUUID": "522cb052-ba7a-42c5-974d-0706ee690bc0",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "tests": [
                                {
                                    "title": "should load the jobs from mongo",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo should load the jobs from mongo",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return scheduler.loadJobsFromMongo().then(loadedJobs => {\n    expect(loadedJobs.length).to.be.greaterThan(0);\n    expect(scheduler.listJobs()[dbJobWithId.id]).to.exist;\n});",
                                    "err": {},
                                    "uuid": "bdfbf6c3-3abc-4f6e-8746-587f9f40f6de",
                                    "parentUUID": "522cb052-ba7a-42c5-974d-0706ee690bc0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bdfbf6c3-3abc-4f6e-8746-587f9f40f6de"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "d4a44891-a1cb-47ab-8d8f-b7e6196a0b56",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "5254044f-ca6a-4dff-93fb-30bfb70f7a2f",
                                    "parentUUID": "d4a44891-a1cb-47ab-8d8f-b7e6196a0b56",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "c6bdcdd3-2b7a-4781-8518-d3a5d53d0210",
                                    "parentUUID": "d4a44891-a1cb-47ab-8d8f-b7e6196a0b56",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5254044f-ca6a-4dff-93fb-30bfb70f7a2f",
                                "c6bdcdd3-2b7a-4781-8518-d3a5d53d0210"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "fba985b3-462f-4dd5-9a69-2c61f699366a",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler Scheduled Jobs #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "916e8ba1-3b9c-412e-9080-3020d893fd32",
                                    "parentUUID": "fba985b3-462f-4dd5-9a69-2c61f699366a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "916e8ba1-3b9c-412e-9080-3020d893fd32"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "9a0ac24c-6402-443b-996c-5e18d365888b",
                            "title": "#reschedule",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should reschedule the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #reschedule should reschedule the job",
                                    "timedOut": false,
                                    "duration": 305,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let oldStart = job.start;\n            job.start =  new Date(job.start.getTime() + 100);\n            job.end =   new Date(job.end.getTime() + 10000);\n            let rj = scheduler.rescheduleJob(job);\n            await delay(300);\n            let j = scheduler.getJobById(job._id);\n            expect(new Date(j.nextInvocation()).getTime()).to.be.greaterThan(oldStart.getTime());",
                                    "err": {},
                                    "uuid": "7123d224-066d-4be6-8a06-62a842211ac8",
                                    "parentUUID": "9a0ac24c-6402-443b-996c-5e18d365888b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7123d224-066d-4be6-8a06-62a842211ac8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 305,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "c4846f99-2881-4807-a2a2-82b76dfbd0e8",
                            "title": "#cancel",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let cj = scheduler.cancelJob(job._id);\nlet jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.not.exist;",
                                    "err": {},
                                    "uuid": "c677139d-fd32-4cf4-bdda-da3f5685a7f1",
                                    "parentUUID": "c4846f99-2881-4807-a2a2-82b76dfbd0e8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c677139d-fd32-4cf4-bdda-da3f5685a7f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "64c2d256-3d9b-49fd-ad65-43e462c1c090",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "1fd41865-e635-43a7-999d-87452f4c29b5",
                    "title": "Session Processor Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                    "file": "/test/integration/sessionEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Session Processor Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5077,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let testConfig = await testLib.getTestConfig();\n       \nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"login\", {\n  token: \"abcd234\",\n  user:  {jwt_token: 'xxxxx', tenantId: testConfig.tenantOne.tenantId, sid: testConfig.tenantOne.adminUser.sid}\n})\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {\n        token: \"abcd234\",\n        user: {\n            sid: testConfig.tenantOne.adminUser.sid,\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\n\nforkedProcessor = await sessionStreamConsumer.forkStreamProcessor(tenant)\nawait delay(5000);",
                            "err": {},
                            "uuid": "3da7d337-306b-41ba-be5d-9761b190075d",
                            "parentUUID": "1fd41865-e635-43a7-999d-87452f4c29b5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Session Processor Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "1ccbac67-a5e1-47ed-b075-601229a02b9f",
                            "parentUUID": "1fd41865-e635-43a7-999d-87452f4c29b5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e7873149-9040-4acd-befd-ca11f50691fc",
                            "title": "stream processor",
                            "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                            "file": "/test/integration/sessionEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "32402233-7eee-45cf-8dc5-ca7c0dddaff5",
                                    "title": "reads from session stream",
                                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Session Processor Tests stream processor reads from session stream should process events",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "7daa1864-329b-4a6f-8a91-307bcd694bd2",
                                            "parentUUID": "32402233-7eee-45cf-8dc5-ca7c0dddaff5",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "7daa1864-329b-4a6f-8a91-307bcd694bd2"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "4374c911-987a-4464-b293-65e54197644e",
                                    "title": "handles events",
                                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should push events into REDIS activeSession set",
                                            "fullTitle": "Session Processor Tests stream processor handles events should push events into REDIS activeSession set",
                                            "timedOut": false,
                                            "duration": 4,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions = await redis.zrangebyscoreAsync(`${tenant}.activeSessions`, \"-inf\", \"+inf\");\nconsole.log(sessions)\nexpect(sessions).to.exist;",
                                            "err": {},
                                            "uuid": "be819af4-c71c-4a20-b004-999237e3f99a",
                                            "parentUUID": "4374c911-987a-4464-b293-65e54197644e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "be819af4-c71c-4a20-b004-999237e3f99a"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 4,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "a5bcc72a-d7af-4763-b29e-05b2d2551924",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "769325fd-1030-426a-96b6-d9ae112de505",
                    "title": "adminCategoryConfig.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminCategoryConfig.vue should render correctly",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=btn_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_editCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_deleteCategory]').exists()).to.equal(true);",
                            "err": {},
                            "uuid": "a6c09c53-a13d-429e-ab97-57922511344b",
                            "parentUUID": "769325fd-1030-426a-96b6-d9ae112de505",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a6c09c53-a13d-429e-ab97-57922511344b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "932522c8-757e-4cd1-a82b-9a36ab9d73e9",
                    "title": "adminTreeAddObjectButton.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeAddObjectButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_addObject.exists()).to.be.true;",
                            "err": {},
                            "uuid": "39f41a51-11e0-4785-8c3a-9b3921ba44be",
                            "parentUUID": "932522c8-757e-4cd1-a82b-9a36ab9d73e9",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "39f41a51-11e0-4785-8c3a-9b3921ba44be"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b684b6c6-48e8-4409-95ab-4638ed0710eb",
                    "title": "adminTreePermsButton.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreePermsButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_permsButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "4a1d0acb-8ac8-4da4-a182-b47b102bb467",
                            "parentUUID": "b684b6c6-48e8-4409-95ab-4638ed0710eb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4a1d0acb-8ac8-4da4-a182-b47b102bb467"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1ae19bc8-275b-4712-af74-6af229220f17",
                    "title": "adminTreeViewButton.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeViewButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_viewButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "f716b5ce-fd12-4558-954c-1d3300b09866",
                            "parentUUID": "1ae19bc8-275b-4712-af74-6af229220f17",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f716b5ce-fd12-4558-954c-1d3300b09866"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4f69f3fe-09f6-41a1-9da6-b8e788fe9ebd",
                    "title": "AddGroupDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "AddGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 93,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_AddGroupDialog.default);",
                            "err": {},
                            "uuid": "00529624-a76c-4ab3-ad8b-b292d92db5e6",
                            "parentUUID": "4f69f3fe-09f6-41a1-9da6-b8e788fe9ebd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "de862875-ee8c-4850-9acb-62d89ea155ed",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "AddGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]')).to.exist;\nexpect(wrapper.find('[data-test=descField]')).to.exist;\nexpect(wrapper.find('[data-test=dynamicField]')).to.exist;\nexpect(wrapper.find('[data-test=sqlField]')).to.exist;",
                                    "err": {},
                                    "uuid": "db7b05a2-275a-4c36-8e84-c9f33e7c74f7",
                                    "parentUUID": "de862875-ee8c-4850-9acb-62d89ea155ed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save button disabled",
                                    "fullTitle": "AddGroupDialog.vue inital state save button disabled",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=saveButton]').element.disabled).to.equal(true);",
                                    "err": {},
                                    "uuid": "f0a14932-04f9-4d02-bb4b-7cd3a9f3c6d4",
                                    "parentUUID": "de862875-ee8c-4850-9acb-62d89ea155ed",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "db7b05a2-275a-4c36-8e84-c9f33e7c74f7",
                                "f0a14932-04f9-4d02-bb4b-7cd3a9f3c6d4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "89c108e1-c375-456d-932a-f7e04586daa1",
                    "title": "EditGroupDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "EditGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 73,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\"\n};\nwrapper = (0, _mocks.initWrapper)(_EditGroupDialog.default, {\n  propsData: {\n    group\n  },\n  data() {\n    return {\n      activeTab: 0\n    };\n  },\n  store\n});",
                            "err": {},
                            "uuid": "62a4a00d-7dde-4f82-ab43-ba4d4d74fa01",
                            "parentUUID": "89c108e1-c375-456d-932a-f7e04586daa1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ee6947dd-2dba-4e82-970d-5b25c87b3df1",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=descField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dynamicField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=sqlField]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "071f861f-cc27-4cfb-9655-e34771e63fbd",
                                    "parentUUID": "ee6947dd-2dba-4e82-970d-5b25c87b3df1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "populates group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state populates group fields",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').element.value).to.equal(group.groupName);\nexpect(wrapper.find('[data-test=descField]').element.value).to.equal(group.groupDesc);\nexpect(wrapper.find('[data-test=sqlField]').element.value).to.equal(group.groupSql);",
                                    "err": {},
                                    "uuid": "86d1dcd9-e676-431c-8691-3107ec6a07e3",
                                    "parentUUID": "ee6947dd-2dba-4e82-970d-5b25c87b3df1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "071f861f-cc27-4cfb-9655-e34771e63fbd",
                                "86d1dcd9-e676-431c-8691-3107ec6a07e3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "48b8bd50-c3fb-4d37-88ad-34ae0abead07",
                    "title": "GroupList.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 123,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_GroupList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "645b1d68-3f23-40c4-a905-b41ed91a010a",
                            "parentUUID": "48b8bd50-c3fb-4d37-88ad-34ae0abead07",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ba8ff50f-9cc5-4583-b252-9fd4c8292e2d",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "GroupList.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const toolbar = wrapper.find('[data-test=buttonBar]');\nexpect(toolbar.exists()).to.equal(true);\nconst buttons = toolbar.findAll('button');\nexpect(buttons.at(0).text()).to.equal('Add Group');\nexpect(buttons.at(1).text()).to.equal('Delete Group');\nexpect(buttons.at(1).props().disabled).to.equal(true);\nexpect(buttons.at(2).text()).to.equal('Set Roles & Permissions');",
                                    "err": {},
                                    "uuid": "3972c100-94cf-44e8-89dc-eb21fc969ad0",
                                    "parentUUID": "ba8ff50f-9cc5-4583-b252-9fd4c8292e2d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays list of groups",
                                    "fullTitle": "GroupList.vue inital state displays list of groups",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const table = wrapper.find('div.v-data-table');\nexpect(table.exists()).to.equal(true);\nconst rows = table.findAll('table > tbody > tr');\nconst adminRow = rows.at(0).findAll('td');\nconst userRow = rows.at(1).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(adminRow.at(3).text()).to.equal('Administrators'); // group name column\nexpect(userRow.at(3).text()).to.equal('Users');\nexpect(adminRow.at(5).text()).to.equal('No'); // dynamic column\nexpect(userRow.at(5).text()).to.equal('Yes');",
                                    "err": {},
                                    "uuid": "7221db37-dada-49a3-80e9-0f67d44ad556",
                                    "parentUUID": "ba8ff50f-9cc5-4583-b252-9fd4c8292e2d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3972c100-94cf-44e8-89dc-eb21fc969ad0",
                                "7221db37-dada-49a3-80e9-0f67d44ad556"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f0b7ec22-55b5-4449-8320-6d98f48e73f3",
                    "title": "GroupMembershipDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupMembershipDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 146,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\",\n  canManage: true,\n  canEdit: true\n};\nwrapper = (0, _mocks.initWrapper)(_GroupMembershipDialog.default, {\n  propsData: {\n    group\n  },\n  store\n});",
                            "err": {},
                            "uuid": "8b775ee2-49eb-432b-9f0d-b0fae6742210",
                            "parentUUID": "f0b7ec22-55b5-4449-8320-6d98f48e73f3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cd650877-00ed-4a45-ba8b-30e56cbaca2b",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "membership tables",
                                    "fullTitle": "GroupMembershipDialog.vue inital state membership tables",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const nonMembersTable = wrapper.find('[data-test=nonMembersTable]');\nconst membersTable = wrapper.find('[data-test=membersTable]');\nexpect(nonMembersTable.exists()).to.equal(true);\nexpect(membersTable.exists()).to.equal(true); // Non members table\nlet rows = nonMembersTable.findAll('table > tbody > tr');\nlet firstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(3);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-plus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('97'); // member id\nexpect(firstRow.at(4).text()).to.equal('Joe User'); // member name\nexpect(rows.at(2).find('i.mdi-account-multiple').exists()).to.equal(true); // check a group member row renders with the group icon\n// Members table\nrows = membersTable.findAll('table > tbody > tr');\nexpect(rows.length).to.equal(2);\nfirstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-minus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('98'); // member id\nexpect(firstRow.at(4).text()).to.equal('Integrify Services'); // member name",
                                    "err": {},
                                    "uuid": "2ce22921-4dd1-4505-901a-60a207476145",
                                    "parentUUID": "cd650877-00ed-4a45-ba8b-30e56cbaca2b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2ce22921-4dd1-4505-901a-60a207476145"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e985f47f-7640-4154-a34a-3c6cbc6ada94",
                    "title": "UserCreate.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserCreate.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 116,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserCreate.default, {\n  store\n});",
                            "err": {},
                            "uuid": "d41b803c-2b9b-4da7-9d10-a0b93254a01a",
                            "parentUUID": "e985f47f-7640-4154-a34a-3c6cbc6ada94",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all necessary fields",
                            "fullTitle": "UserCreate.vue should display all necessary fields",
                            "timedOut": false,
                            "duration": 23,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['firstName', 'middleName', 'lastName', 'username', 'email', 'locale', 'timezone', 'language', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.text()).to.be.empty;\n});",
                            "err": {},
                            "uuid": "ea5fb462-646a-4a41-91e9-4ff95e408383",
                            "parentUUID": "e985f47f-7640-4154-a34a-3c6cbc6ada94",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display cancel and save btns",
                            "fullTitle": "UserCreate.vue should display cancel and save btns",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "b56ae6da-52fb-4460-819b-11092287a161",
                            "parentUUID": "e985f47f-7640-4154-a34a-3c6cbc6ada94",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ea5fb462-646a-4a41-91e9-4ff95e408383",
                        "b56ae6da-52fb-4460-819b-11092287a161"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 27,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e4cdfb6d-157c-45e6-bcd1-047c48c11d7a",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 29,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// store = new Vuex.Store({modules: mockStore().modules})\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    },\n    actions: {\n      getUser: function () {\n        console.log('--- getUser()');\n        return { ..._mockedData.mockedUser\n        };\n      }\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEdit.default, {\n  store,\n  propsData: {\n    id: _mockedData.mockedUser.contactGuid\n  }\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "b7781a66-d80c-4587-8099-cb2a01073a64",
                            "parentUUID": "e4cdfb6d-157c-45e6-bcd1-047c48c11d7a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should always display page title",
                            "fullTitle": "UserEdit.vue should always display page title",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.text()).to.eq('Edit User');",
                            "err": {},
                            "uuid": "ebba2198-a028-47e2-87cf-5f5274be5d9e",
                            "parentUUID": "e4cdfb6d-157c-45e6-bcd1-047c48c11d7a",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not display form if loading",
                            "fullTitle": "UserEdit.vue should not display form if loading",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.false;",
                            "err": {},
                            "uuid": "698ea975-5123-49ad-927b-29fda3f87284",
                            "parentUUID": "e4cdfb6d-157c-45e6-bcd1-047c48c11d7a",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display form and btns if user information present",
                            "fullTitle": "UserEdit.vue should display form and btns if user information present",
                            "timedOut": false,
                            "duration": 404,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.userLoading = false;\nawait wrapper.vm.$nextTick();\nconst form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.true;\n[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "6a98d199-9c2b-4900-aa57-2004d972b1ab",
                            "parentUUID": "e4cdfb6d-157c-45e6-bcd1-047c48c11d7a",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ebba2198-a028-47e2-87cf-5f5274be5d9e",
                        "698ea975-5123-49ad-927b-29fda3f87284",
                        "6a98d199-9c2b-4900-aa57-2004d972b1ab"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 405,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "05dd6400-fabb-49d6-96f7-b443bf56dcea",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 66,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditDelegation.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "5aea52d8-23c9-45b5-aee7-47bce92140cc",
                            "parentUUID": "05dd6400-fabb-49d6-96f7-b443bf56dcea",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEdit.vue should display all fields",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['delegate', 'processes'] // 'startDate', 'startTime', 'endDate', 'endTime'\n.forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n});",
                            "err": {},
                            "uuid": "963e5512-1fd6-497c-8687-5cacd4cdb24b",
                            "parentUUID": "05dd6400-fabb-49d6-96f7-b443bf56dcea",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "963e5512-1fd6-497c-8687-5cacd4cdb24b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 20,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fb699275-00f5-4e0a-b2a3-c81a71d04d4c",
                    "title": "UserEditOrganizationalDetails.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditOrganizationalDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 59,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditOrganizationalDetails.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "06ade2ee-42cb-4d2b-8926-11e315cb3994",
                            "parentUUID": "fb699275-00f5-4e0a-b2a3-c81a71d04d4c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditOrganizationalDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 43,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['title', 'division', 'department', 'costCenter', 'location', 'phone', 'manager'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value || !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value).to.eq(_mockedData.mockedUser[fieldName]);\n  }\n});",
                            "err": {},
                            "uuid": "563e05f8-5a0a-4e17-94f4-d8c2a73a35d3",
                            "parentUUID": "fb699275-00f5-4e0a-b2a3-c81a71d04d4c",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "563e05f8-5a0a-4e17-94f4-d8c2a73a35d3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 43,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "36284b4c-4197-4989-bc8c-3dd3f90c7fa7",
                    "title": "UserEditUserDetails.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditUserDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 123,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditUserDetails.default, {\n  store\n});",
                            "err": {},
                            "uuid": "9bb0df0e-36b8-4d5c-a81c-cd9c0db92968",
                            "parentUUID": "36284b4c-4197-4989-bc8c-3dd3f90c7fa7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display card title",
                            "fullTitle": "UserEditUserDetails.vue should display card title",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title');\nexpect(title.exists()).to.be.true;\nexpect(title.text()).contains('User Details');",
                            "err": {},
                            "uuid": "dcf1f1a7-54d1-47a0-b252-9dafb42f47eb",
                            "parentUUID": "36284b4c-4197-4989-bc8c-3dd3f90c7fa7",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditUserDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 90,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['firstName', 'middleName', 'lastName', 'contactId', 'userName', 'email', 'address1', 'address2', 'city', 'state', 'zip', 'country', 'language', 'timezone', 'locale', 'cField1', 'cField2', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value && !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value.toString()).to.eq(_mockedData.mockedUser[fieldName].toString());\n  }\n});",
                            "err": {},
                            "uuid": "5ad57b2a-6ecb-4a8d-87b0-ef997941cd3d",
                            "parentUUID": "36284b4c-4197-4989-bc8c-3dd3f90c7fa7",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "dcf1f1a7-54d1-47a0-b252-9dafb42f47eb",
                        "5ad57b2a-6ecb-4a8d-87b0-ef997941cd3d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 94,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8e0f4507-cc6e-45e3-970e-0a7e21432fc6",
                    "title": "UserFilterDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserFilterDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 69,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserFilterDialog.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "82399229-ed44-4bad-b93e-617255981d55",
                            "parentUUID": "8e0f4507-cc6e-45e3-970e-0a7e21432fc6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "UserFilterDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 47,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title .headline');\nexpect(title.text()).to.eq('User Filters');\n['lastName', 'firstName', 'username', 'email', 'title', 'managerName', 'costCenter', 'country', 'department'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.element.value).to.be.empty;\n});",
                            "err": {},
                            "uuid": "a5968558-a665-45ad-8512-5996960741f0",
                            "parentUUID": "8e0f4507-cc6e-45e3-970e-0a7e21432fc6",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog on clicking Close btn",
                            "fullTitle": "UserFilterDialog.vue should close dialog on clicking Close btn",
                            "timedOut": false,
                            "duration": 39,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.vm.showDialog).to.be.false;\nwrapper.vm.$store.state.users.showDialog = true;\nawait wrapper.vm.$nextTick();\nexpect(wrapper.vm.showDialog).to.be.true;\nconst closeBtn = wrapper.find('[data-test=closeBtn]');\nexpect(closeBtn.exists()).to.be.true;\nawait closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.actions.getUsers).to.have.been.called;",
                            "err": {},
                            "uuid": "f030f6db-6390-4898-ab62-112c019213b9",
                            "parentUUID": "8e0f4507-cc6e-45e3-970e-0a7e21432fc6",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a5968558-a665-45ad-8512-5996960741f0",
                        "f030f6db-6390-4898-ab62-112c019213b9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 86,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d1c047a0-d885-400c-8efc-803dbc081b5a",
                    "title": "UserList.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 103,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "8368417a-f404-437f-bed4-64dc6216d0ee",
                            "parentUUID": "d1c047a0-d885-400c-8efc-803dbc081b5a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should contain pageTitle and search input",
                            "fullTitle": "UserList.vue should contain pageTitle and search input",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nconst pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Users'); // searchInput\nconst searchInput = wrapper.get('input#searchText');\nexpect(searchInput.exists()).to.be.true;\nexpect(searchInput.text()).to.be.empty;",
                            "err": {},
                            "uuid": "7daac20c-0e45-472c-afb1-336ffc72b1c1",
                            "parentUUID": "d1c047a0-d885-400c-8efc-803dbc081b5a",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display toolbar buttons",
                            "fullTitle": "UserList.vue should display toolbar buttons",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'addUserBtn',\n  value: 'Add User'\n}, {\n  key: 'replaceUserBtn',\n  value: 'Replace User'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "d718d380-5e73-49ed-a26c-f04ea4d3d64a",
                            "parentUUID": "d1c047a0-d885-400c-8efc-803dbc081b5a",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display list of users",
                            "fullTitle": "UserList.vue should display list of users",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const table = wrapper.find('[data-test=usersTable]');\nexpect(table.exists()).to.be.true;\nconst header = table.find('table > thead');\n['Last Name', 'First Name', 'Username', 'Email', 'Created', 'Last Updated', 'Active'].forEach(colName => {\n  expect(header.text()).contains(colName);\n});",
                            "err": {},
                            "uuid": "453b36d8-dffb-4124-8e27-b0de32aa2e4d",
                            "parentUUID": "d1c047a0-d885-400c-8efc-803dbc081b5a",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7daac20c-0e45-472c-afb1-336ffc72b1c1",
                        "d718d380-5e73-49ed-a26c-f04ea4d3d64a",
                        "453b36d8-dffb-4124-8e27-b0de32aa2e4d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                    "title": "users store actions",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "users store actions \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = { ..._users.default.state\n};",
                            "err": {},
                            "uuid": "c3c2664b-1ef3-4644-a5f7-afd9bb051c1c",
                            "parentUUID": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook",
                            "fullTitle": "users store actions \"after each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "8050e8d9-6ab0-48b9-b4da-9aeb6eec30e2",
                            "parentUUID": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getUsers",
                            "fullTitle": "users store actions should getUsers",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getUsers({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS', [..._mockedData.mockedUsers]]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS_TOTAL', _mockedData.mockedUsers.length]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', false]);",
                            "err": {},
                            "uuid": "ed8f5278-6f05-4dbb-aafa-cd413101a42f",
                            "parentUUID": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should getUser",
                            "fullTitle": "users store actions should getUser",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser\n};\nawait _actions.default.getUser({\n  commit,\n  state\n}, {\n  userGuid: user.contactGuid,\n  $commonLib: _commonLib.default\n});\nuser.active = !user.deletedDate;\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', user]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', false]);",
                            "err": {},
                            "uuid": "d3675cbe-edde-4185-9bbd-63fbcc9571bf",
                            "parentUUID": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insertUser",
                            "fullTitle": "users store actions should insertUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.insertUser({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', _mockedData.mockedUser]);",
                            "err": {},
                            "uuid": "0e52c1d4-b02f-408b-91e4-00360006c214",
                            "parentUUID": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should clearFiltersAndOptions",
                            "fullTitle": "users store actions should clearFiltersAndOptions",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_actions.default.clearFiltersAndOptions({\n  commit,\n  state\n});\n(0, _chai.expect)(commit.args).to.deep.eq([['CLEAR_FILTERS'], ['SET_LIST_OPTIONS']]);",
                            "err": {},
                            "uuid": "1f3bea11-fc58-4d2f-9846-89748a7c7cae",
                            "parentUUID": "e3b048cc-997e-444b-9b59-d2d6c4409610",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ed8f5278-6f05-4dbb-aafa-cd413101a42f",
                        "d3675cbe-edde-4185-9bbd-63fbcc9571bf",
                        "0e52c1d4-b02f-408b-91e4-00360006c214",
                        "1f3bea11-fc58-4d2f-9846-89748a7c7cae"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "75ada6ef-20ff-461d-80c5-821f5b3e5153",
                    "title": "users store getters",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get users",
                            "fullTitle": "users store getters should get users",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.users = [..._mockedData.mockedUsers];\nconst users = _getters.default.users(state);\n(0, _chai.expect)(users).to.deep.equal(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "4288f5f8-6ead-424f-a6b2-5790b60ce675",
                            "parentUUID": "75ada6ef-20ff-461d-80c5-821f5b3e5153",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get filterCount",
                            "fullTitle": "users store getters should get filterCount",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(0);\nstate.filters.lastName = 'foo';\nstate.filters.firstName = 'bar';\nstate.filters.costCenter = 'costCenter';\nstate.filters.country = '';\nstate.filters.activeOnly = true;\n(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(4);",
                            "err": {},
                            "uuid": "ca626565-c2b7-424b-a248-8da97749a30e",
                            "parentUUID": "75ada6ef-20ff-461d-80c5-821f5b3e5153",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4288f5f8-6ead-424f-a6b2-5790b60ce675",
                        "ca626565-c2b7-424b-a248-8da97749a30e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "248e9eea-bc25-4272-92c8-60832f521fbb",
                    "title": "users store mutations",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_USERS",
                            "fullTitle": "users store mutations should SET_USERS",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS(state, [..._mockedData.mockedUsers]);\n(0, _chai.expect)(state.users).to.deep.eq(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "923d2599-d65a-479a-b2ea-80d62bc9290e",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USERS_TOTAL",
                            "fullTitle": "users store mutations should SET_USERS_TOTAL",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS_TOTAL(state, _mockedData.mockedUsers.length);\n(0, _chai.expect)(state.total).to.eq(_mockedData.mockedUsers.length);",
                            "err": {},
                            "uuid": "a60783c7-163a-42b2-bf89-5bcc4c22385d",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SEARCH",
                            "fullTitle": "users store mutations should SET_SEARCH",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const searchTxt = 'searching for something';\nSET_SEARCH(state, searchTxt);\n(0, _chai.expect)(state.search).to.eq(searchTxt);",
                            "err": {},
                            "uuid": "d9c5caa4-4c42-472f-831f-181afc47ee8c",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_LOADING",
                            "fullTitle": "users store mutations should SET_LIST_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LIST_LOADING(state, true);\n(0, _chai.expect)(state.listLoading).to.eq(true);",
                            "err": {},
                            "uuid": "f3a67bad-5b7d-408a-95fc-d7d6097a51c2",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should CLEAR_FILTERS",
                            "fullTitle": "users store mutations should CLEAR_FILTERS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.filters = {\n  lastName: 'test last name',\n  firstName: 'first name',\n  userName: 'fooBar',\n  email: 'foo@bar.com',\n  title: 'my title',\n  managerName: 'manager name',\n  managerGuid: 123,\n  costCenter: 'cost center',\n  country: 'USM',\n  department: 'manager of managers',\n  activeOnly: true\n};\nCLEAR_FILTERS(state);\n(0, _chai.expect)(state.filters).to.deep.eq({\n  lastName: null,\n  firstName: null,\n  userName: null,\n  email: null,\n  title: null,\n  managerName: null,\n  managerGuid: null,\n  costCenter: null,\n  country: null,\n  department: null,\n  activeOnly: false\n});",
                            "err": {},
                            "uuid": "d149f536-f0df-4c3c-9988-5b93e207515b",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_OPTIONS",
                            "fullTitle": "users store mutations should SET_LIST_OPTIONS",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const listOptions = {\n  sortBy: ['firstName'],\n  sortDesc: [true],\n  page: 2\n};\nSET_LIST_OPTIONS(state, listOptions);\n(0, _chai.expect)(state.listOptions).to.deep.eq(listOptions); // clear listOptions\nSET_LIST_OPTIONS(state);\n(0, _chai.expect)(state.listOptions).to.deep.eq({\n  sortBy: [],\n  sortDesc: [],\n  page: 1\n});",
                            "err": {},
                            "uuid": "8869f9c0-6933-4996-8021-86811900a336",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "users store mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.eq(true);",
                            "err": {},
                            "uuid": "5479d8bd-0726-4792-acbf-75405a672c8f",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USER_LOADING",
                            "fullTitle": "users store mutations should SET_USER_LOADING",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USER_LOADING(state, false);\n(0, _chai.expect)(state.userLoading).to.be.false;",
                            "err": {},
                            "uuid": "34670f69-00af-425c-80c4-d9ca769c5819",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_IS_CHECKING_USERNAME",
                            "fullTitle": "users store mutations should SET_IS_CHECKING_USERNAME",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_IS_CHECKING_USERNAME(state, true);\n(0, _chai.expect)(state.isCheckingUsername).to.be.true;",
                            "err": {},
                            "uuid": "4dd950a8-a357-4b2f-a578-14b78d376e29",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_USER",
                            "fullTitle": "users store mutations should SET_SELECTED_USER",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser,\n  password: 'testPwd',\n  confirmPassword: 'testPwd'\n};\nSET_SELECTED_USER(state, user);\n(0, _chai.expect)(state.selectedUser).to.deep.eq(user); // when no user specified\nSET_SELECTED_USER(state);\n(0, _chai.expect)(state.selectedUser).to.deep.eq({\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  userName: '',\n  email: '',\n  locale: 'en-US',\n  timezone: '',\n  languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460',\n  // US English\n  password: '',\n  confirmPassword: ''\n});",
                            "err": {},
                            "uuid": "53e0672d-7a05-4f64-842f-f697695fd2f1",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LOCALES",
                            "fullTitle": "users store mutations should SET_LOCALES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LOCALES(state, [..._mockedData.mockedLocales]);\n(0, _chai.expect)(state.locales).to.deep.eq(_mockedData.mockedLocales);\nSET_LOCALES(state);\n(0, _chai.expect)(state.locales).to.deep.eq([]);\nSET_LOCALES(state, []);\n(0, _chai.expect)(state.locales).to.deep.eq([]);",
                            "err": {},
                            "uuid": "4e9e717f-8b6e-4cc5-a837-e172753ecb72",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_DELEGATION_START_DATE",
                            "fullTitle": "users store mutations should SET_DELEGATION_START_DATE",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const date = '2020-01-12';\nSET_SELECTED_USER(state, { ..._mockedData.mockedUser\n});\nSET_DELEGATION_START_DATE(state, date);\n(0, _chai.expect)(state.selectedUser.delegate.startDate).to.eq(date);",
                            "err": {},
                            "uuid": "abf14d14-a840-4df1-9eb0-b9c51a0cb57c",
                            "parentUUID": "248e9eea-bc25-4272-92c8-60832f521fbb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "923d2599-d65a-479a-b2ea-80d62bc9290e",
                        "a60783c7-163a-42b2-bf89-5bcc4c22385d",
                        "d9c5caa4-4c42-472f-831f-181afc47ee8c",
                        "f3a67bad-5b7d-408a-95fc-d7d6097a51c2",
                        "d149f536-f0df-4c3c-9988-5b93e207515b",
                        "8869f9c0-6933-4996-8021-86811900a336",
                        "5479d8bd-0726-4792-acbf-75405a672c8f",
                        "34670f69-00af-425c-80c4-d9ca769c5819",
                        "4dd950a8-a357-4b2f-a578-14b78d376e29",
                        "53e0672d-7a05-4f64-842f-f697695fd2f1",
                        "4e9e717f-8b6e-4cc5-a837-e172753ecb72",
                        "abf14d14-a840-4df1-9eb0-b9c51a0cb57c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "41a97f8d-2062-456c-a795-cd9b683f30ff",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "cb6dccd0-d846-4fc4-a543-75c8b17a09b8",
                    "title": "recentlyVisited",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/commonLib/tests/unit/bookmarks.spec.js",
                    "file": "/tests/unit/bookmarks.spec.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"recentlyVisited\"",
                            "fullTitle": "recentlyVisited \"before each\" hook in \"recentlyVisited\"",
                            "timedOut": false,
                            "duration": 26,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const dom = new JSDOM(\"<html>\\n       <body>\\n          <div class=\\\"v-toolbar__title hidden-sm-and-down\\\">Holidays</div>\\n       </body>\\n     </html>\");\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.location = {\n  hostname: hostname\n};",
                            "err": {},
                            "uuid": "82613faf-8146-470b-ab85-555843ee4976",
                            "parentUUID": "cb6dccd0-d846-4fc4-a543-75c8b17a09b8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "adds to recently visted history",
                            "fullTitle": "recentlyVisited adds to recently visted history",
                            "timedOut": false,
                            "duration": 29,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const bookmarks = require('./mocks/bookmarks');\nexpect(bookmarks.recentlyVisited).to.be.empty;\nawait bookmarks.addRecentlyVisited();\nexpect(bookmarks.recentlyVisited.length).to.equal(1);\nexpect(bookmarks.recentlyVisited[0].label).to.equal('Holidays');\nexpect(bookmarks.recentlyVisited[0].icon).to.equal('mdi-calendar-month');",
                            "err": {},
                            "uuid": "81a3f013-f856-44ac-a9af-658e0f6f135d",
                            "parentUUID": "cb6dccd0-d846-4fc4-a543-75c8b17a09b8",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "81a3f013-f856-44ac-a9af-658e0f6f135d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 29,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "825f5bf9-f7dc-4ab6-993a-b8d9e7aaff8e",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "87998ea3-e729-416a-ad6d-b4c896ec43fd",
                    "title": "CategorySelect.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelect.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 192,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelect.CategorySelect, {\n  showDialog: false\n});",
                            "err": {},
                            "uuid": "ecf6aadd-e483-485a-84ee-ab1a2492df8a",
                            "parentUUID": "87998ea3-e729-416a-ad6d-b4c896ec43fd",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4e1197af-8b30-448d-baed-d0b9786a3444",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelect.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=input_categorySelect]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_categorySelect]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "ffa40230-d31a-4e70-99be-ec4427803e55",
                                    "parentUUID": "4e1197af-8b30-448d-baed-d0b9786a3444",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ffa40230-d31a-4e70-99be-ec4427803e55"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d81fe301-af40-4ab9-ac91-3755dd4ef803",
                    "title": "CategorySelectDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelectDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 68,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelectDialog.default, {\n  items: _mockedCategoryResponse.default\n});",
                            "err": {},
                            "uuid": "684c71ca-c7fd-41cb-a780-2b1327753395",
                            "parentUUID": "d81fe301-af40-4ab9-ac91-3755dd4ef803",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "feca68da-1707-4500-a4a3-5eb6a1e380ef",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelectDialog.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "44330b5f-a291-4434-a8e1-bab3569ceb0c",
                                    "parentUUID": "feca68da-1707-4500-a4a3-5eb6a1e380ef",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "44330b5f-a291-4434-a8e1-bab3569ceb0c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "73224585-4821-4e77-a933-975b85c230d8",
                    "title": "CategoryTreeTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategoryTreeTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 42,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategoryTreeTable.CategoryTreeTable, {\n  objectType: 'forms',\n  objectData: _mockedData.mockedObjectData,\n  items: _mockedCategoryResponse.mockedCategoryResponse\n});",
                            "err": {},
                            "uuid": "2e1e2b65-4ade-4a36-8b17-a0bcccbe0c5d",
                            "parentUUID": "73224585-4821-4e77-a933-975b85c230d8",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8c118c4b-da2b-44cc-81a9-26006c475365",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategoryTreeTable.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=objectCatTree_permsButtonComponent]').exists()).to.equal(false);\nexpect(wrapper.find('[data-test=objectCatTree_datatable]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "6fefb5ea-d467-49f0-a7e6-a2697dc39ff3",
                                    "parentUUID": "8c118c4b-da2b-44cc-81a9-26006c475365",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6fefb5ea-d467-49f0-a7e6-a2697dc39ff3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "de45a7d3-7ef2-4800-88fd-553e9811e536",
                    "title": "Report.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "Report.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 91,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.Report);\ndocument.body.setAttribute('data-app', true);",
                            "err": {},
                            "uuid": "aebbbe22-400a-40ed-96d9-7b62b9c874ea",
                            "parentUUID": "de45a7d3-7ef2-4800-88fd-553e9811e536",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1c5c239e-4c65-497f-b799-7326d5465388",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "Report.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button i.mdi-refresh').exists()).to.equal(true);\nexpect(wrapper.find('button i.mdi-filter-plus-outline').exists()).to.equal(true);\nexpect(wrapper.find('button.mdi-export').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "6a7b2162-15f3-4fd2-8ec6-b312aa9d6e52",
                                    "parentUUID": "1c5c239e-4c65-497f-b799-7326d5465388",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays report name",
                                    "fullTitle": "Report.vue inital state displays report name",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('.v-toolbar__title').text()).to.equal('Report - Update profile tasks');",
                                    "err": {},
                                    "uuid": "d47e08e0-6bc3-4bb8-9988-0083df739b3e",
                                    "parentUUID": "1c5c239e-4c65-497f-b799-7326d5465388",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6a7b2162-15f3-4fd2-8ec6-b312aa9d6e52",
                                "d47e08e0-6bc3-4bb8-9988-0083df739b3e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "077262ef-b3a3-4194-92fe-2463e4947dc7",
                    "title": "ReportTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "ReportTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 112,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.ReportTable, {\n  propsData: {\n    report: _mockedData.mockedFormattedReport\n  }\n});",
                            "err": {},
                            "uuid": "a3042650-26ce-4004-8780-08a0cf9efff2",
                            "parentUUID": "077262ef-b3a3-4194-92fe-2463e4947dc7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f6549905-98cc-4155-ae3f-b0c04b792a56",
                            "title": "inital state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders column headers",
                                    "fullTitle": "ReportTable.vue inital state renders column headers",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const headers = wrapper.findAll('th');\nconst expectedHeaders = [\"Request Link\", \"Username\", \"ID For Manage Task\", \"Status\", \"Time from Start to Complete\", \"Date Completed\", \"Manager ID\", \"System ID\", \"Name\"];\nexpectedHeaders.forEach((title, i) => expect(headers.at(i).text()).to.equal(title));",
                                    "err": {},
                                    "uuid": "3f040cd2-3793-482c-8c92-690b7f65ad9d",
                                    "parentUUID": "f6549905-98cc-4155-ae3f-b0c04b792a56",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "renders links with the correct icons",
                                    "fullTitle": "ReportTable.vue inital state renders links with the correct icons",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const firstRow = wrapper.find('tbody > tr').findAll('td');\nexpect(firstRow.length).to.equal(9);\nexpect(firstRow.at(0).find('button.mdi-magnify').exists()).to.equal(true); // Request link\nexpect(firstRow.at(1).text()).to.equal('juser'); // Username\nexpect(firstRow.at(2).find('.mdi-menu-open').exists()).to.equal(true); // Manage Task menu icon\nexpect(firstRow.at(2).find('.v-menu').exists()).to.equal(true); // manage task menu\nexpect(firstRow.at(3).text()).to.equal('Completed'); // status\nexpect(firstRow.at(5).text()).to.equal('2/24/2021'); // date completed\nexpect(firstRow.at(6).text()).to.equal('1'); // manager id\nexpect(firstRow.at(7).find('button.mdi-magnify').exists()).to.equal(true); // link to Task\nexpect(firstRow.at(8).text()).to.equal('System Task - Update Profile'); // task name",
                                    "err": {},
                                    "uuid": "ff0cf3b6-a4b6-4a90-8c11-16e41c414419",
                                    "parentUUID": "f6549905-98cc-4155-ae3f-b0c04b792a56",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3f040cd2-3793-482c-8c92-690b7f65ad9d",
                                "ff0cf3b6-a4b6-4a90-8c11-16e41c414419"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "392c8d4d-1cf5-4513-ae33-a1658d17f88f",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
                {
                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                    "fullTitle": "commits SET_SELECTED_FOR_EDIT mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                    "err": {},
                    "uuid": "05f31ba4-21ea-4fc5-be05-44583a0142a5",
                    "parentUUID": "392c8d4d-1cf5-4513-ae33-a1658d17f88f",
                    "isHook": false,
                    "skipped": true
                },
                {
                    "title": "commits SET_SHOW_DIALOG mutation",
                    "fullTitle": "commits SET_SHOW_DIALOG mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                    "err": {},
                    "uuid": "41353cf5-66f9-40d3-ba62-8d51f644d164",
                    "parentUUID": "392c8d4d-1cf5-4513-ae33-a1658d17f88f",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "80a66218-ca43-42a5-8d47-2f8b21fdede0",
                    "title": "PasswordSettings.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "renders correctly",
                            "fullTitle": "PasswordSettings.vue renders correctly",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(pwdSettingsApi.listPasswordSettings).to.have.been.called;\nexpect(pwdExpirationActiveCheckBox).to.be.exist;\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(false);\nexpect(pwdExpirationTextBox).to.be.exist;\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal('disabled');\nexpect(pwdExpirationTextBox.element.value).to.equal('7');\nexpect(pwdStrengthActiveCheckBox).to.be.exist;\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(false);\nexpect(minPwdLengthTextBox).to.be.exist;\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(minPwdLengthTextBox.element.value).to.equal('3');\nexpect(maxPwdLengthTextBox).to.be.exist;\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(maxPwdLengthTextBox.element.value).to.equal('10');\nexpect(pwdStrengthExpressionTextBox).to.be.exist;\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal('disabled'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton).to.be.exist;\nexpect(restoreButton.attributes('disabled')).to.equal('disabled');\nexpect(wrapper.find('button#save')).to.be.exist;",
                            "err": {},
                            "uuid": "b1da1974-36b8-4ca1-a582-6f0552657980",
                            "parentUUID": "80a66218-ca43-42a5-8d47-2f8b21fdede0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [
                        {
                            "uuid": "a12d7408-46ce-424c-8ab1-a514ed03a8a9",
                            "title": "checkboxes enabling textboxes",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "timedOut": false,
                                    "duration": 37,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdExpirationActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(true);\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "6507ae76-ac51-4d9f-a1f4-36330cfe2469",
                                    "parentUUID": "a12d7408-46ce-424c-8ab1-a514ed03a8a9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "timedOut": false,
                                    "duration": 42,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(true);\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal(undefined);\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "63ff274b-66d2-42ba-8e85-ccef3fadef2d",
                                    "parentUUID": "a12d7408-46ce-424c-8ab1-a514ed03a8a9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6507ae76-ac51-4d9f-a1f4-36330cfe2469",
                                "63ff274b-66d2-42ba-8e85-ccef3fadef2d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 79,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d28ac423-1724-4f5f-b3ed-185d4b3234dc",
                            "title": "password length change effects on strength regular expression",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "correctly adjusts strength expression when min pwd length changes",
                                    "fullTitle": "PasswordSettings.vue password length change effects on strength regular expression correctly adjusts strength expression when min pwd length changes",
                                    "timedOut": false,
                                    "duration": 42,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nminPwdLengthTextBox.element.value = '4';\nminPwdLengthTextBox.trigger('input');\nmaxPwdLengthTextBox.element.value = '11';\nmaxPwdLengthTextBox.trigger('input');\nawait wrapper.vm.$nextTick(); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "cb2fb9c7-41e7-446e-ae73-dd63987bdfd0",
                                    "parentUUID": "d28ac423-1724-4f5f-b3ed-185d4b3234dc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cb2fb9c7-41e7-446e-ae73-dd63987bdfd0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 42,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c0b0c582-8bd1-4416-82de-3a91c6aa883a",
                            "title": "restore default password strength",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "restores default password strength values when restore button is clicked",
                                    "fullTitle": "PasswordSettings.vue restore default password strength restores default password strength values when restore button is clicked",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nawait wrapper.find('button#restoreDefaultPwdStrengthExpression').trigger('click'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');",
                                    "err": {},
                                    "uuid": "339f3213-453f-4f35-abf9-92d375b072ac",
                                    "parentUUID": "c0b0c582-8bd1-4416-82de-3a91c6aa883a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "339f3213-453f-4f35-abf9-92d375b072ac"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 46,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "040e6f1d-4933-476b-a7a4-43650f6cfdb3",
                            "title": "save password settings",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "calls updatePasswordSettings with correct params when Save button is clicked",
                                    "fullTitle": "PasswordSettings.vue save password settings calls updatePasswordSettings with correct params when Save button is clicked",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(pwdExpirationActiveCheckBox.element.checked).to.equal(true); // change some settings in ui. make sure api call has correct params when saved\npwdExpirationTextBox.setValue('10');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nwrapper.find('button#save').trigger('click');\nexpect(pwdSettingsApi.updatePasswordSettings).to.have.been.called;\nconst requestBody = pwdSettingsApi.updatePasswordSettings.args[0][1].requestBody;\nexpect(requestBody).to.be.ok;\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('10');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH').settingsValue).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "d20ebde1-0091-48ad-8ec1-eeeacc97be28",
                                    "parentUUID": "040e6f1d-4933-476b-a7a4-43650f6cfdb3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d20ebde1-0091-48ad-8ec1-eeeacc97be28"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 62,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [
                        "b1da1974-36b8-4ca1-a582-6f0552657980"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8907458e-67c9-4d8c-8798-2708e5a3670f",
                    "title": "BiztimeDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimeDialog.vue\"",
                            "fullTitle": "BiztimeDialog.vue \"before each\" hook in \"BiztimeDialog.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "dff8ec47-6340-4e37-bb3d-ad28e027b311",
                            "parentUUID": "8907458e-67c9-4d8c-8798-2708e5a3670f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimeDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// console.log('-- dd:', wrapper.vm.$store.state.biztimes.selectedForEdit);\n// headline\nconst headline = wrapper.find('span.headline');\nexpect(headline.exists()).to.be.true;\nexpect(headline.text()).to.eq(`Edit Business Hours for ${biztime.dayOfWeek}`); // inputs\nexpect(startTimeRef.value).to.deep.equal(biztime.startTime);\nexpect(endTimeRef.value).to.deep.equal(biztime.endTime);\nexpect(activeRef.inputValue).to.equal(biztime.active); // btns\nexpect(saveBtn.exists()).to.be.true;\nexpect(closeBtn.exists()).to.be.true;",
                            "err": {},
                            "uuid": "7603a870-d6c8-4f8e-a762-52bb1a9b8935",
                            "parentUUID": "8907458e-67c9-4d8c-8798-2708e5a3670f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save biztime",
                            "fullTitle": "BiztimeDialog.vue should save biztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await saveBtn.trigger('click');\nexpect(mockstore.actions.saveBiztime).to.have.been.called;",
                            "err": {},
                            "uuid": "29db5f10-b1cf-4d23-b6e2-744558376c18",
                            "parentUUID": "8907458e-67c9-4d8c-8798-2708e5a3670f",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog",
                            "fullTitle": "BiztimeDialog.vue should close dialog",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.calledWith(store.state.biztimes, {});",
                            "err": {},
                            "uuid": "14ae4c9e-7ce1-4b5e-b81e-0791b172bedc",
                            "parentUUID": "8907458e-67c9-4d8c-8798-2708e5a3670f",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7603a870-d6c8-4f8e-a762-52bb1a9b8935",
                        "29db5f10-b1cf-4d23-b6e2-744558376c18",
                        "14ae4c9e-7ce1-4b5e-b81e-0791b172bedc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0d536a6f-9807-4e26-9247-dbc8001f60a7",
                    "title": "BiztimesTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimesTable.vue\"",
                            "fullTitle": "BiztimesTable.vue \"before each\" hook in \"BiztimesTable.vue\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "0b8ff029-0f4d-46f7-a951-b4b998558e92",
                            "parentUUID": "0d536a6f-9807-4e26-9247-dbc8001f60a7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimesTable.vue should render correctly",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Business Hours'); // link to set permissions\nexpect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true); // getBiztimes\nexpect(mockstore.actions.getBiztimes).to.have.been.called;",
                            "err": {},
                            "uuid": "35429aa4-3e8e-486d-8d4a-a53b0ecad28b",
                            "parentUUID": "0d536a6f-9807-4e26-9247-dbc8001f60a7",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "35429aa4-3e8e-486d-8d4a-a53b0ecad28b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9c2c0273-8c9d-4fdc-9d1b-faba77ddca42",
                    "title": "HolidaysTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2938667b-5c5c-4cd5-99c6-e797f00c5968",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook",
                                    "fullTitle": "HolidaysTable.vue initial state \"before each\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_HolidaysTable.default, {\n  store\n});",
                                    "err": {},
                                    "uuid": "2a6b525b-4f04-4c2b-bbb5-801517164a93",
                                    "parentUUID": null,
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "eaec0cfe-4f45-4cf2-a25e-eab1f9d3b5d5",
                    "title": "Menu.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Menu.vue\"",
                            "fullTitle": "Menu.vue \"before each\" hook in \"Menu.vue\"",
                            "timedOut": false,
                            "duration": 46,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n}); // data-app prevents warning during test: [Vuetify] Unable to locate target [data-app]\n// https://forum.vuejs.org/t/vuetify-data-app-true-and-problems-rendering-v-dialog-in-unit-tests/27495\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");",
                            "err": {},
                            "uuid": "10b6e101-64b9-4c8c-8310-9c21094cdeca",
                            "parentUUID": "eaec0cfe-4f45-4cf2-a25e-eab1f9d3b5d5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "06c40dff-698e-4c43-bf4a-07b9d8054209",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Menu.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 97,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "97a422a9-b80c-4b95-a359-8a838aedae83",
                                    "parentUUID": "06c40dff-698e-4c43-bf4a-07b9d8054209",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Menu.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 82,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('[data-test=\"setPermissionsMobile\"').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "37ebaee2-3aaa-4a8e-b931-870ea70ec7a4",
                                    "parentUUID": "06c40dff-698e-4c43-bf4a-07b9d8054209",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Menu.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 78,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.exists()).to.equal(true);\n  expect(deleteButton.attributes('disabled')).to.not.be.undefined;\n  done();\n});",
                                    "err": {},
                                    "uuid": "f6c9b646-1005-4a46-9235-122dbe4bdb9d",
                                    "parentUUID": "06c40dff-698e-4c43-bf4a-07b9d8054209",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "97a422a9-b80c-4b95-a359-8a838aedae83",
                                "37ebaee2-3aaa-4a8e-b931-870ea70ec7a4",
                                "f6c9b646-1005-4a46-9235-122dbe4bdb9d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 257,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "89dd3a1c-6c39-4583-84c9-99eb5275addf",
                            "title": "Menu item clicks",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add holiday button click",
                                    "fullTitle": "Menu.vue Menu item clicks add holiday button click",
                                    "timedOut": false,
                                    "duration": 84,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  wrapper.find('button#addHolidayMobile').trigger('click');\n  it('commits SET_SELECTED_FOR_EDIT mutation', () => {\n    expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;\n  });\n  it('commits SET_SHOW_DIALOG mutation', () => {\n    expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\n  });\n  done();\n});",
                                    "err": {},
                                    "uuid": "7b159980-7ed1-4b2f-9da2-830faede5fa0",
                                    "parentUUID": "89dd3a1c-6c39-4583-84c9-99eb5275addf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Menu.vue Menu item clicks enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 115,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n});\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");\nmenuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.attributes('disabled')).to.equal(undefined);\n  done();\n});",
                                    "err": {},
                                    "uuid": "0af9d1d1-1bc7-46d8-b767-b6afc61c32f8",
                                    "parentUUID": "89dd3a1c-6c39-4583-84c9-99eb5275addf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7b159980-7ed1-4b2f-9da2-830faede5fa0",
                                "0af9d1d1-1bc7-46d8-b767-b6afc61c32f8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 199,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "aea51ee1-4dfc-43ac-9af2-9afd824c0b10",
                    "title": "Toolbar.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6005c827-f686-4c40-803b-d336519b9db9",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"initial state\"",
                                    "fullTitle": "Toolbar.vue initial state \"before each\" hook in \"initial state\"",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "32dfdcf3-2160-48ca-80ad-94214ba93526",
                                    "parentUUID": "6005c827-f686-4c40-803b-d336519b9db9",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Toolbar.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button#addHoliday').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "c817cd8d-62fd-4986-8773-e391d5499005",
                                    "parentUUID": "6005c827-f686-4c40-803b-d336519b9db9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Toolbar.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "1bbd0c28-ee8d-473f-91fe-861e017be6c7",
                                    "parentUUID": "6005c827-f686-4c40-803b-d336519b9db9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Toolbar.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.exists()).to.equal(true);\nexpect(deleteButton.attributes('disabled')).to.equal('disabled');",
                                    "err": {},
                                    "uuid": "b5c84b4a-9ac1-4a24-bd76-22bc9fabdbe8",
                                    "parentUUID": "6005c827-f686-4c40-803b-d336519b9db9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c817cd8d-62fd-4986-8773-e391d5499005",
                                "1bbd0c28-ee8d-473f-91fe-861e017be6c7",
                                "b5c84b4a-9ac1-4a24-bd76-22bc9fabdbe8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e590deb2-9959-41f2-ad4a-29826e5dba73",
                            "title": "add holiday button click",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"add holiday button click\"",
                                    "fullTitle": "Toolbar.vue add holiday button click \"before each\" hook in \"add holiday button click\"",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "mockstore = (0, _store.mockStore)();\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\nwrapper.find('button#addHoliday').trigger('click');",
                                    "err": {},
                                    "uuid": "91aa2474-ddb6-4b68-98cd-d0126d84bb43",
                                    "parentUUID": "e590deb2-9959-41f2-ad4a-29826e5dba73",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SELECTED_FOR_EDIT mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                                    "err": {},
                                    "uuid": "6c038d77-62db-49ac-84e2-08378be70f17",
                                    "parentUUID": "e590deb2-9959-41f2-ad4a-29826e5dba73",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "commits SET_SHOW_DIALOG mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SHOW_DIALOG mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                                    "err": {},
                                    "uuid": "47d08bb3-3e49-430f-92cd-6e06decab12a",
                                    "parentUUID": "e590deb2-9959-41f2-ad4a-29826e5dba73",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6c038d77-62db-49ac-84e2-08378be70f17",
                                "47d08bb3-3e49-430f-92cd-6e06decab12a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "591763fb-2624-4883-bcef-abfd7339a572",
                            "title": "holidays have been selected for deletion",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"holidays have been selected for deletion\"",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion \"before each\" hook in \"holidays have been selected for deletion\"",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nmockstore = (0, _store.mockStore)({\n  state\n});\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "9eeeefdf-134b-43f1-9839-1814d21333ca",
                                    "parentUUID": "591763fb-2624-4883-bcef-abfd7339a572",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "20fbc4e1-c192-4580-b961-5275744ee78a",
                                    "parentUUID": "591763fb-2624-4883-bcef-abfd7339a572",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "dispatches delete_holidays action when delete holidays button is clicked",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion dispatches delete_holidays action when delete holidays button is clicked",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "deleteButton.trigger('click');\nexpect(mockstore.actions.delete_holidays).to.have.been.called;",
                                    "err": {},
                                    "uuid": "1a6fea07-777a-47e9-8dea-affd56e3a434",
                                    "parentUUID": "591763fb-2624-4883-bcef-abfd7339a572",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "20fbc4e1-c192-4580-b961-5275744ee78a",
                                "1a6fea07-777a-47e9-8dea-affd56e3a434"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c5b4fa38-15cb-4be8-842a-a13942326671",
                    "title": "biztime actions",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"before each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = {};",
                            "err": {},
                            "uuid": "6a94f561-647b-4ff0-9bd4-e092a92426a4",
                            "parentUUID": "c5b4fa38-15cb-4be8-842a-a13942326671",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"after each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "2177a793-fc9a-4752-b293-e5336def01c5",
                            "parentUUID": "c5b4fa38-15cb-4be8-842a-a13942326671",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getBiztimes",
                            "fullTitle": "biztime actions should getBiztimes",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getBiztimes({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]]]);",
                            "err": {},
                            "uuid": "c07fa229-6ccd-414c-909e-7979cf47076e",
                            "parentUUID": "c5b4fa38-15cb-4be8-842a-a13942326671",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should saveBiztime",
                            "fullTitle": "biztime actions should saveBiztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.saveBiztime({\n  commit,\n  state\n}, { ..._list.default[0],\n  $commonLib: _commonLib.default\n});\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]], ['SET_SELECTED_FOR_EDIT', {}], ['SET_SHOW_DIALOG', false]]);",
                            "err": {},
                            "uuid": "61cfa053-fdd7-445b-a980-ae7a8c6af43d",
                            "parentUUID": "c5b4fa38-15cb-4be8-842a-a13942326671",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c07fa229-6ccd-414c-909e-7979cf47076e",
                        "61cfa053-fdd7-445b-a980-ae7a8c6af43d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2f520101-1d5a-43bd-82f5-c8db28514589",
                    "title": "biztime getters",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get biztimes",
                            "fullTitle": "biztime getters should get biztimes",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const state = {\n  biztimes: JSON.parse(JSON.stringify(_list.default))\n};\nconst biztimes = _getters.default.biztimes(state);\n(0, _chai.expect)(biztimes).not.to.deep.equal(_list.default);\nbiztimes.forEach(biztime => {\n  const startTime = {\n    hour: biztime.startHour,\n    minute: biztime.startMinute\n  };\n  const endTime = {\n    hour: biztime.endHour,\n    minute: biztime.endMinute\n  };\n  (0, _chai.expect)(biztime.startTime).to.deep.equal(startTime);\n  (0, _chai.expect)(biztime.endTime).to.deep.equal(endTime);\n});",
                            "err": {},
                            "uuid": "e833a191-c375-444a-9d97-477d28c4c022",
                            "parentUUID": "2f520101-1d5a-43bd-82f5-c8db28514589",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e833a191-c375-444a-9d97-477d28c4c022"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cef54841-46fc-4063-8869-2aafca6ebfb3",
                    "title": "biztime mutations",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_BIZTIMES",
                            "fullTitle": "biztime mutations should SET_BIZTIMES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_BIZTIMES(state, [..._list.default]);\n(0, _chai.expect)(state.biztimes).to.deep.equal(_list.default);",
                            "err": {},
                            "uuid": "94488500-f56b-41ed-9cdf-e119861919e0",
                            "parentUUID": "cef54841-46fc-4063-8869-2aafca6ebfb3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_FOR_EDIT",
                            "fullTitle": "biztime mutations should SET_SELECTED_FOR_EDIT",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SELECTED_FOR_EDIT(state, _list.default[0]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[0]);\nSET_SELECTED_FOR_EDIT(state, _list.default[3]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[3]);",
                            "err": {},
                            "uuid": "34535f4c-007b-492b-b34e-d17f5ca3eddf",
                            "parentUUID": "cef54841-46fc-4063-8869-2aafca6ebfb3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "biztime mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.equal(true);\nSET_SHOW_DIALOG(state, false);\n(0, _chai.expect)(state.showDialog).to.equal(false);",
                            "err": {},
                            "uuid": "b5fc3534-32ae-4b87-8fb6-8016d227e811",
                            "parentUUID": "cef54841-46fc-4063-8869-2aafca6ebfb3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "94488500-f56b-41ed-9cdf-e119861919e0",
                        "34535f4c-007b-492b-b34e-d17f5ca3eddf",
                        "b5fc3534-32ae-4b87-8fb6-8016d227e811"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "05f31ba4-21ea-4fc5-be05-44583a0142a5",
                "41353cf5-66f9-40d3-ba62-8d51f644d164"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        }
    ],
    "meta": {
        "mocha": {
            "version": "8.1.1"
        },
        "mochawesome": {
            "options": {
                "quiet": false,
                "reportFilename": "mochawesome",
                "saveHtml": true,
                "saveJson": true,
                "consoleReporter": "spec",
                "useInlineDiffs": false,
                "code": true
            },
            "version": "6.1.1"
        },
        "marge": {
            "options": null,
            "version": "5.1.0"
        }
    }
}