{
    "stats": {
        "suites": 17,
        "tests": 362,
        "passes": 357,
        "pending": 0,
        "failures": 2,
        "start": "2020-12-18T16:56:44.163Z",
        "end": "2020-12-18T16:56:44.163Z",
        "duration": 91385,
        "testsRegistered": 362,
        "passPercent": 98.61878453038673,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 3,
        "hasSkipped": true
    },
    "results": [
        {
            "uuid": "f9a57d40-11b4-4f19-b002-a4c387788efa",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [
                {
                    "title": "\"before all\" hook",
                    "fullTitle": "\"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "// insert known tokens into redis (normally these are created by emailPasswordReset)\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait redisClient.setexAsync(`pwReset:${accountGuid}`, 3600, securityToken);\nawait redisClient.setexAsync(`pwReset:${securityToken}`, 3600, accountGuid);",
                    "err": {},
                    "uuid": "f27d13da-7168-4412-ba27-833e5ef3163e",
                    "parentUUID": "f9a57d40-11b4-4f19-b002-a4c387788efa",
                    "isHook": true,
                    "skipped": false
                }
            ],
            "afterHooks": [],
            "tests": [
                {
                    "title": "should create a new password",
                    "fullTitle": "should create a new password",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "const mockReq = mocks.createNewPassword(securityToken);\nconst mockRes = mocks.mockResponse();\nawait resetPassword.createNewPassword(mockReq, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\n// ensure createNewPassword cleans up redis\nexpect(await redisClient.getAsync(`pwReset:${accountGuid}`)).to.be.null;\nexpect(await redisClient.getAsync(`pwReset:${securityToken}`)).to.be.null;",
                    "err": {},
                    "uuid": "66003007-cc90-4aef-b4a6-deeeedbf0f96",
                    "parentUUID": "f9a57d40-11b4-4f19-b002-a4c387788efa",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "e805234e-2584-4e79-88dc-b50dd18c9782",
                    "title": "Auth API API Key Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/apiKey.test.js",
                    "file": "/test/integration/functions/apiKey.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"before all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "9be812b1-c009-46b0-a25c-98e345fa0ca9",
                            "parentUUID": "e805234e-2584-4e79-88dc-b50dd18c9782",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"after all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await apiKey.deleteTestKeys(testConfig.tenantOne.tenantId);",
                            "err": {},
                            "uuid": "61a751ae-46fc-466a-ba3d-4dbe245612ce",
                            "parentUUID": "e805234e-2584-4e79-88dc-b50dd18c9782",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                            "title": "api key crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/apiKey.test.js",
                            "file": "/test/integration/functions/apiKey.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should insert an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 243,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = {expires: new Date(new Date().getTime() + 60000), testOnly: true, description: \"this is a test\"}\nawait apiKey.createApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nkey = inserted.key;\nid = inserted._id;\nexpect(inserted).to.exist;",
                                    "err": {},
                                    "uuid": "889632a2-5252-49b3-8166-92e42b29400a",
                                    "parentUUID": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list an apiKeys",
                                    "fullTitle": "Auth API API Key Tests api key crud  should list an apiKeys",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nawait apiKey.listApiKeys(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst keyList = mockRes.body;\nexpect(keyList).to.exist;\nexpect(keyList.length).to.be.gt(0);\nexpect(keyList[0].hashedKey).to.exist",
                                    "err": {},
                                    "uuid": "65b076f0-9357-4241-973c-ace7a0032c9d",
                                    "parentUUID": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should verify an apiKey",
                                    "fullTitle": "Auth API API Key Tests api key crud  should verify an apiKey",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait apiKey.verifyApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"api key valid\");",
                                    "err": {},
                                    "uuid": "dc5018fa-9447-4c36-a1c9-d4ac6fbc1186",
                                    "parentUUID": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid api key and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid api key and return a JWT",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonate(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "76efffc6-65e7-4fbd-9d7c-8ed24029c42b",
                                    "parentUUID": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and return a JWT",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "26424228-7040-448e-891b-2858ee177d56",
                                    "parentUUID": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should delete an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = id;\nawait apiKey.deleteApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "2ecc7661-d945-4b37-b9d7-e97137ea6266",
                                    "parentUUID": "26b2607b-dbe0-4b82-a59f-f37c5cba0f87",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "889632a2-5252-49b3-8166-92e42b29400a",
                                "65b076f0-9357-4241-973c-ace7a0032c9d",
                                "dc5018fa-9447-4c36-a1c9-d4ac6fbc1186",
                                "76efffc6-65e7-4fbd-9d7c-8ed24029c42b",
                                "26424228-7040-448e-891b-2858ee177d56",
                                "2ecc7661-d945-4b37-b9d7-e97137ea6266"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 357,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "229c2e7a-4458-425b-8214-bdada5737cf3",
                    "title": "Auth API Auth Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                    "file": "/test/integration/functions/auth.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Auth Tests\"",
                            "fullTitle": "Auth API Auth Tests \"before all\" hook in \"Auth API Auth Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "0bf3d552-1541-4ad7-9ca1-9520f35bd0e5",
                            "parentUUID": "229c2e7a-4458-425b-8214-bdada5737cf3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d2e61c87-7372-42af-9556-d9f1f79327fb",
                            "title": "login",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a contact with a token",
                                    "fullTitle": "Auth API Auth Tests login should return a contact with a token",
                                    "timedOut": false,
                                    "duration": 116,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet loginEvent = await mocks.loginEvent()\n\t\t\tlet results = await dbauth.login(loginEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst contactInfo = mockRes.body;\n\t\t\texpect(contactInfo.userName).equal(loginEvent.body.username);\n\t\t\texpect(contactInfo.token).to.exist;",
                                    "err": {},
                                    "uuid": "00f8cac5-691a-447a-bd9d-596702fd75dd",
                                    "parentUUID": "d2e61c87-7372-42af-9556-d9f1f79327fb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "00f8cac5-691a-447a-bd9d-596702fd75dd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 116,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "891b5a2a-679c-4cf7-ae7d-8efcf6d004c9",
                            "title": "refreshJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests refreshJwt refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 103,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\nlet loginEvent = await mocks.loginEvent()\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.login(loginEvent, mockRes);\nconst contactInfo = mockRes.body;\nlogoutEvent.cookies = {\"integrifyRefreshToken\": contactInfo.refreshToken };\nlogoutEvent.body = {token: contactInfo.token, refreshToken: contactInfo.refreshToken }\nawait jwtFuncs.refreshJwt(logoutEvent, await mocks.mockResponse());\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "a4ecaac7-d855-4950-85c0-b23c4c6c56e6",
                                    "parentUUID": "891b5a2a-679c-4cf7-ae7d-8efcf6d004c9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a4ecaac7-d855-4950-85c0-b23c4c6c56e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 103,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "97e8f964-958a-485d-86fd-23d7a945ac3f",
                            "title": "isAuthenticated",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests isAuthenticated refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\n\nawait jwtFuncs.isAuthenticated({cookies: {integrifyToken: \"fake\"}}, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "1768dadb-48ff-445c-a237-408328c898fb",
                                    "parentUUID": "97e8f964-958a-485d-86fd-23d7a945ac3f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1768dadb-48ff-445c-a237-408328c898fb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "fed54e59-57d0-4b62-bdbc-860e31073d59",
                            "title": "logout",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should log a user out",
                                    "fullTitle": "Auth API Auth Tests logout should log a user out",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.logout(logoutEvent, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body).to.deep.equal({message: 'OK'});",
                                    "err": {},
                                    "uuid": "3e256133-7c63-41c9-8989-0c4750efaadc",
                                    "parentUUID": "fed54e59-57d0-4b62-bdbc-860e31073d59",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3e256133-7c63-41c9-8989-0c4750efaadc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "47152753-b563-4170-a271-83a39905c21e",
                    "title": "Auth API Reset Password Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                    "file": "/test/integration/functions/resetPassword.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Reset Password Tests\"",
                            "fullTitle": "Auth API Reset Password Tests \"before all\" hook in \"Auth API Reset Password Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000);\nprocess.env.TESTING = true;\nresetRewired.__set__('nodemailer', nodemailerMock);",
                            "err": {},
                            "uuid": "79a367dc-5128-454d-a250-ec31ecd58ef1",
                            "parentUUID": "47152753-b563-4170-a271-83a39905c21e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2110b01e-6b58-41d0-885c-e680978e6a30",
                            "title": "emailUsernames",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should send an email of accounts for existing email",
                                    "fullTitle": "Auth API Reset Password Tests emailUsernames should send an email of accounts for existing email",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\n      const accountGuid = config.tenantOne.adminUser.sid;\n      const mockRes = mocks.mockResponse();\n      const mockReq = await mocks.emailUsernames();\n      await resetRewired.emailUsernames(mockReq, mockRes);\n      expect(mockRes.statusCode).equal(200);\n      expect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "c58a6d7f-25cc-4d13-ba86-3df3ce53383f",
                                    "parentUUID": "2110b01e-6b58-41d0-885c-e680978e6a30",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c58a6d7f-25cc-4d13-ba86-3df3ce53383f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e7a9f533-a677-42d8-b236-f3c530a4cce6",
                            "title": "passwordReset",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"passwordReset\"",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset \"before all\" hook in \"passwordReset\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "resetRewired.__set__('nodemailer', nodemailerMock);",
                                    "err": {},
                                    "uuid": "e00da304-4749-41d6-bc87-3699972b5e09",
                                    "parentUUID": "e7a9f533-a677-42d8-b236-f3c530a4cce6",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "emailPassworReset",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset emailPassworReset",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\nconst accountGuid = config.tenantOne.adminUser.sid;\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nconsole.log(\"accountguid: \" + accountGuid);\nawait resetRewired.emailPasswordReset(mockReq, mockRes);\n// check if security token was added to redis\nconst securityToken = await redisClient.getAsync(`pwReset:${accountGuid}`);\nconst accountEntry = await redisClient.getAsync(`pwReset:${securityToken}`);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(securityToken).to.exist;\nexpect(accountEntry).to.exist;\n// clean up entries leftover from calling emailPasswordReset\nawait redisClient.del(`pwReset:${accountGuid}`);\nawait redisClient.del(`pwReset:${securityToken}`);",
                                    "err": {},
                                    "uuid": "1f47b2c4-9152-4070-9652-f816784ed1b9",
                                    "parentUUID": "e7a9f533-a677-42d8-b236-f3c530a4cce6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1f47b2c4-9152-4070-9652-f816784ed1b9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c00a35ae-ec59-413f-a5d2-bee52116b211",
                    "title": "Auth SAML Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/samlSettings.test.js",
                    "file": "/test/integration/functions/samlSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth SAML Settings Tests\"",
                            "fullTitle": "Auth SAML Settings Tests \"before all\" hook in \"Auth SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "ca7f1537-4cc5-426a-bcd3-d99c174cf086",
                            "parentUUID": "c00a35ae-ec59-413f-a5d2-bee52116b211",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth SAML Settings Tests\"",
                            "fullTitle": "Auth SAML Settings Tests \"after all\" hook in \"Auth SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await samlSettings.deleteSamlSettingsByName(testConfig.tenantOne.tenantId, 'unitTestIDP')",
                            "err": {},
                            "uuid": "aec6eb1e-de5d-4583-8b84-24efbc84ffee",
                            "parentUUID": "c00a35ae-ec59-413f-a5d2-bee52116b211",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                            "title": "SAML Settings crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-auth/test/integration/functions/samlSettings.test.js",
                            "file": "/test/integration/functions/samlSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert saml settings and return a doc",
                                    "fullTitle": "Auth SAML Settings Tests SAML Settings crud  should insert saml settings and return a doc",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n           \nreq.body = data;\nawait samlSettings.createSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\n\nsamlId = inserted._id;\nexpect(inserted).to.exist;\nexpect(inserted.idpMetaData).to.equal(data.idpMetaData);\nexpect(inserted.idpName).to.equal(data.idpName);\nexpect(inserted.idpDescription).to.equal(data.idpDescription);\nexpect(inserted.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "8140ea44-ccf6-405d-88c5-c6adbeb3d195",
                                    "parentUUID": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings without an id",
                                    "fullTitle": "Auth SAML Settings Tests SAML Settings crud  should get saml settings without an id",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.idpName).to.exist;",
                                    "err": {},
                                    "uuid": "34b8a9e6-ed08-46c1-969c-abbc65755c35",
                                    "parentUUID": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings with an id",
                                    "fullTitle": "Auth SAML Settings Tests SAML Settings crud  should get saml settings with an id",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result._id.toString()).to.equal(samlId.toString());",
                                    "err": {},
                                    "uuid": "5789b475-7b09-4394-a262-490e79b6cd4d",
                                    "parentUUID": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update saml settings",
                                    "fullTitle": "Auth SAML Settings Tests SAML Settings crud  should update saml settings",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\n\nreq.body = data;\n\nawait samlSettings.updateSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.exist;",
                                    "err": {},
                                    "uuid": "fb2195a8-eb2d-4c1d-8965-fd3540e491c9",
                                    "parentUUID": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return sp metadata",
                                    "fullTitle": "Auth SAML Settings Tests SAML Settings crud  should return sp metadata",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait samlSettings.getMetaData(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst metadata = mockRes.body;\nexpect(metadata).to.exist;",
                                    "err": {},
                                    "uuid": "59fb2cb1-f904-4238-976a-086a3f69a05d",
                                    "parentUUID": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete saml settings",
                                    "fullTitle": "Auth SAML Settings Tests SAML Settings crud  should delete saml settings",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.deleteSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "ec52c802-4b5b-4469-84bc-64ac4e2591fb",
                                    "parentUUID": "f6a8f5a6-450d-4176-bd8d-65a71f756002",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8140ea44-ccf6-405d-88c5-c6adbeb3d195",
                                "34b8a9e6-ed08-46c1-969c-abbc65755c35",
                                "5789b475-7b09-4394-a262-490e79b6cd4d",
                                "fb2195a8-eb2d-4c1d-8965-fd3540e491c9",
                                "59fb2cb1-f904-4238-976a-086a3f69a05d",
                                "ec52c802-4b5b-4469-84bc-64ac4e2591fb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 49,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "66003007-cc90-4aef-b4a6-deeeedbf0f96"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        },
        {
            "uuid": "10896857-21f0-463f-8976-8ddca2a3193b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "df2d2653-4db9-4e1c-9ed8-59a5eef92eb2",
                    "title": "Dashboard controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.controller.test.js",
                    "file": "/test/dashboard.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "f5229c02-b572-41cf-9cc1-c684ce099519",
                            "parentUUID": "df2d2653-4db9-4e1c-9ed8-59a5eef92eb2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "2590aa6e-e83c-4179-9ef8-cbcd3bcb80e7",
                            "parentUUID": "df2d2653-4db9-4e1c-9ed8-59a5eef92eb2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "84e715f4-ab52-4cb2-8386-5ea4339fff4e",
                            "title": "dashboard crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.controller.test.js",
                            "file": "/test/dashboard.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.createDashboard(tenant, dashboardObj);\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "e760c1a4-ee1e-4ef3-a909-5e314dc8cfa8",
                                    "parentUUID": "84e715f4-ab52-4cb2-8386-5ea4339fff4e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboards = await dashboardController.listDashboards(tenant);\n         expect(dashboards.length).to.be.gt(0);  \n         let createdDashord  = dashboards.find((d) => {\n             return d.sid === sid;\n         })\n         expect\n         (createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "5624af31-db68-44a1-a3c3-87d5865ecea6",
                                    "parentUUID": "84e715f4-ab52-4cb2-8386-5ea4339fff4e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard = await dashboardController.getDashboard(tenant,sid);\n            expect(dashboard).to.exist         \n            expect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "a3bc430c-cdf0-4cd5-a7cf-cd93d6e3b218",
                                    "parentUUID": "84e715f4-ab52-4cb2-8386-5ea4339fff4e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard.banner = 'test-updated';\n            const updatedDashboard = await dashboardController.updateDashboard(tenant,dashboard.toObject());\n            expect(updatedDashboard).to.exist         \n            expect(updatedDashboard.sid).to.equal(sid)\n            expect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "f4090d06-fe60-449a-a2ba-cf229248f3ab",
                                    "parentUUID": "84e715f4-ab52-4cb2-8386-5ea4339fff4e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  delete a a dashboard",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await dashboardController.deleteDashboard(tenant,sid);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "2d0961a4-807d-4193-bebf-c7a94d6ab1e6",
                                    "parentUUID": "84e715f4-ab52-4cb2-8386-5ea4339fff4e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e760c1a4-ee1e-4ef3-a909-5e314dc8cfa8",
                                "5624af31-db68-44a1-a3c3-87d5865ecea6",
                                "a3bc430c-cdf0-4cd5-a7cf-cd93d6e3b218",
                                "f4090d06-fe60-449a-a2ba-cf229248f3ab",
                                "2d0961a4-807d-4193-bebf-c7a94d6ab1e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 59,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b07db4a5-be27-4665-bb05-85c935221f10",
                    "title": "Dashboard route handler tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.handlers.test.js",
                    "file": "/test/dashboard.handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "9b758448-f6f1-4200-957e-37494c841b76",
                            "parentUUID": "b07db4a5-be27-4665-bb05-85c935221f10",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard route handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "e5132168-8635-466c-a6d2-f8ae4d9ef1e1",
                            "parentUUID": "b07db4a5-be27-4665-bb05-85c935221f10",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "38bb1595-dc04-466b-9e70-28017bf56962",
                            "title": "dashboard crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/dashboard.handlers.test.js",
                            "file": "/test/dashboard.handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = dashboardObj;\nawait handlers.createDashboard(req,mockRes);\nconst dashboard = req.body;\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "c5363a91-b454-4769-aca4-2a999d99714a",
                                    "parentUUID": "38bb1595-dc04-466b-9e70-28017bf56962",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashord  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "cc7a397c-758a-467d-82ac-dce79ee8b22e",
                                    "parentUUID": "38bb1595-dc04-466b-9e70-28017bf56962",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for admins",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for admins",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.admin = true;\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashord  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "54b56690-1406-4dac-acb6-8e57da569c2e",
                                    "parentUUID": "38bb1595-dc04-466b-9e70-28017bf56962",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.getDashboard(req,mockRes);\ndashboard = mockRes.body;\nexpect(dashboard).to.exist         \nexpect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "497b1898-e3fe-422f-ade7-60c683c33470",
                                    "parentUUID": "38bb1595-dc04-466b-9e70-28017bf56962",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.updateDashboard(req,mockRes);\nconst updatedDashboard = mockRes.body;\nexpect(updatedDashboard).to.exist         \nexpect(updatedDashboard.sid).to.equal(sid)\nexpect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "16b6b9d8-18fc-4a8b-aad8-e0ab792ce30c",
                                    "parentUUID": "38bb1595-dc04-466b-9e70-28017bf56962",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should delete a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.deleteDashboard(req,mockRes);\nlet deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "a5e25bf7-0b9f-422b-aa00-5f5016478bbb",
                                    "parentUUID": "38bb1595-dc04-466b-9e70-28017bf56962",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c5363a91-b454-4769-aca4-2a999d99714a",
                                "cc7a397c-758a-467d-82ac-dce79ee8b22e",
                                "54b56690-1406-4dac-acb6-8e57da569c2e",
                                "497b1898-e3fe-422f-ade7-60c683c33470",
                                "16b6b9d8-18fc-4a8b-aad8-e0ab792ce30c",
                                "a5e25bf7-0b9f-422b-aa00-5f5016478bbb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "043e5fd5-e2f4-4b44-9531-f86c092bb194",
                    "title": "Legacy tab mongo tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/tab.test.js",
                    "file": "/test/tab.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 12,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()\ntenant = testConfig.tenantOne.tenantId;;\ntab = await dashboardController.createTestTab(tenant)\nexpect(tab.SID).to.exist",
                            "err": {},
                            "uuid": "59f8fd03-c727-4431-bf9c-cba0cdc8594f",
                            "parentUUID": "043e5fd5-e2f4-4b44-9531-f86c092bb194",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteTestTabs(tenant, {Title: 'created-by-mocha-test'});\nconsole.log(deleted);\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "47af2054-8240-4914-b082-8e85f1a6bb96",
                            "parentUUID": "043e5fd5-e2f4-4b44-9531-f86c092bb194",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "57cd6d05-5f01-41ce-816e-9b1d1923e0c7",
                            "title": "tab crud ",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-dashboards/test/tab.test.js",
                            "file": "/test/tab.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list legacy tabs",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should list legacy tabs",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tabs = await dashboardController.listTabs(tenant);\n expect(tabs.length).to.be.gt(0);  \n tabSid = tabs[0].SID;\n expect(tabSid).to.exist",
                                    "err": {},
                                    "uuid": "9b510001-ca79-4708-9148-23f4c40c3aef",
                                    "parentUUID": "57cd6d05-5f01-41ce-816e-9b1d1923e0c7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should get a legacy tab",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "tab = await dashboardController.getTab(tenant,tabSid);\n            expect(tab).to.exist         \n            expect(tab.SID).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "559c8c50-c4cc-41ce-bc89-195b922790e7",
                                    "parentUUID": "57cd6d05-5f01-41ce-816e-9b1d1923e0c7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should convert a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should convert a legacy tab",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.converTabToDashboard(tab);\n            expect(dashboard).to.exist         \n            expect(dashboard.layouts).to.exist;\n            expect(dashboard.sid).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "3abaa234-336d-46e3-90ce-2ac371110d32",
                                    "parentUUID": "57cd6d05-5f01-41ce-816e-9b1d1923e0c7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should migrate legacy tabs to dashboards",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should migrate legacy tabs to dashboards",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  success = await dashboardController.migrateTabsToDashboards(tenant);\n            expect(success).to.equal(true);",
                                    "err": {},
                                    "uuid": "159c961d-61e5-450f-b4ab-641f8ac36e0e",
                                    "parentUUID": "57cd6d05-5f01-41ce-816e-9b1d1923e0c7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9b510001-ca79-4708-9148-23f4c40c3aef",
                                "559c8c50-c4cc-41ce-bc89-195b922790e7",
                                "3abaa234-336d-46e3-90ce-2ac371110d32",
                                "159c961d-61e5-450f-b4ab-641f8ac36e0e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "2f595a04-8520-4cbb-afa8-4c8c2159e4f8",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "61037d3d-159f-488d-bac0-52266193c2b0",
                    "title": "Files API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-files/test/functions.test.js",
                    "file": "/test/functions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Files API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "c7ac3ddb-909d-4bc7-b8b0-02779234f195",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "writes a file (non file upload)",
                            "fullTitle": "Files API Tests writes a file (non file upload)",
                            "timedOut": false,
                            "duration": 28,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .post(`/api/files/${parentFolder}/${encodeURIComponent('testDir/writeTextFile.txt')}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .set('content-type', 'text/plain')\n  .send('text from writes a file (non file upload)')\n  \nexpect(res.status).to.equal(200);",
                            "err": {},
                            "uuid": "93a3f6a1-f7fb-4cb6-a185-f54f23ab2de0",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "checks if a file exists",
                            "fullTitle": "Files API Tests checks if a file exists",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent('testDir/writeTextFile.txt')}/exists`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n   \nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(true);",
                            "err": {},
                            "uuid": "f7f19c1b-9440-46ef-bf0e-8df4fd9f1d4a",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "uploads a file in multipart form",
                            "fullTitle": "Files API Tests uploads a file in multipart form",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .post(`/api/files/${parentFolder}/${path}/upload`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .attach('files', './test/mocks/helloWorld.txt', 'helloWorld.txt')\n  \nexpect(res.status).to.equal(200);",
                            "err": {},
                            "uuid": "a0c18f1b-8239-4189-9735-4d6c0083e3b4",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "uploads a file in octet stream",
                            "fullTitle": "Files API Tests uploads a file in octet stream",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .post(`/api/files/${parentFolder}/${filePath}/uploadStream`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .set('Content-Type', 'application/octet-stream')\n  .attach('files', './test/mocks/helloWorld.txt', 'helloWorld.txt')\n  \nexpect(res.status).to.equal(200);",
                            "err": {},
                            "uuid": "adb71a11-a768-41a1-8d89-42450022165e",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "sends the contents of a file when read call is made with attachment param = false",
                            "fullTitle": "Files API Tests sends the contents of a file when read call is made with attachment param = false",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${filePath}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(res).to.have.status(200);\nexpect(res).to.have.header('content-type', 'text/plain; charset=utf-8');\nexpect(res).to.be.text;\nexpect(res.text).to.include('Hello World!');",
                            "err": {},
                            "uuid": "51c5d902-4062-49a5-acac-5cff6e82d468",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "sends a file as an attachment read call is made with attachment param = true",
                            "fullTitle": "Files API Tests sends a file as an attachment read call is made with attachment param = true",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${filePath}`)\n  .query({attachment: 'true'})\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(res.statusCode).to.equal(200)\nexpect(res).to.have.header('content-disposition', 'attachment; filename=\"helloWorld.txt\"');",
                            "err": {},
                            "uuid": "a6756e24-d770-49c1-9d07-1d17b80c9494",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "downloads a file",
                            "fullTitle": "Files API Tests downloads a file",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let downloadRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${filePath}/download`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n\nexpect(downloadRes).to.have.status(200);\nexpect(downloadRes).to.have.header('content-type', 'application/octet-stream')\nexpect(downloadRes).to.have.header('content-disposition', 'attachment; filename=\"helloWorld.txt\"')",
                            "err": {},
                            "uuid": "79d2ad53-5566-4a29-a38b-2583049cb2e1",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "copies a file",
                            "fullTitle": "Files API Tests copies a file",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let copyRes = await chai.request(baseUrl)\n  .put(`/api/files/${parentFolder}/${filePath}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .send({\n    targetParentFolder: \"temp\",\n    targetFilePath: \"testDir/helloWorld2.txt\"\n  })\nexpect(copyRes.statusCode).to.equal(200)\nexpect(copyRes.text).to.equal('1');\n// verify that original and copy have same contents\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${filePath}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.text).to.include('Hello World!');",
                            "err": {},
                            "uuid": "392f1e0c-f584-47dd-8c21-0847bc27fa58",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "moves a file",
                            "fullTitle": "Files API Tests moves a file",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let moveRes = await chai.request(baseUrl)\n  .patch(`/api/files/${parentFolder}/${filePath}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\n  .send({\n    targetParentFolder: \"temp\",\n    targetFilePath: \"testDir/helloWorld3.txt\"\n  })\nexpect(moveRes.statusCode).to.equal(200)\nexpect(moveRes.text).to.equal('1');\n// verify that original file \"helloWorld.txt\" no longer exists\n\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${filePath}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.statusCode).to.equal(404)",
                            "err": {},
                            "uuid": "9ad19623-6bac-4b9c-ba18-c10f96f15682",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "deletes a file",
                            "fullTitle": "Files API Tests deletes a file",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// for some reason, this errors with s3 filestore if you run all tests in mocha explorer at the same time\n// but works correctly if you run them one by one\nlet delRes = await chai.request(baseUrl)\n  .delete(`/api/files/${parentFolder}/${encodeURIComponent(\"testDir/helloWorld2.txt\")}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(delRes.statusCode).to.equal(200)\nexpect(delRes.text).to.equal('1');\n// verify that file \"helloWorld2.txt\" no longer exists\nlet readRes = await chai.request(baseUrl)\n  .get(`/api/files/${parentFolder}/${encodeURIComponent(\"testDir/helloWorld2.txt\")}`)\n  .set('integrify-env-token', process.env.INTEGRIFY_ENV_TOKEN)\nexpect(readRes.statusCode).to.equal(404)",
                            "err": {},
                            "uuid": "009ca949-42f0-495e-ba09-9d95ee6daab3",
                            "parentUUID": "61037d3d-159f-488d-bac0-52266193c2b0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "93a3f6a1-f7fb-4cb6-a185-f54f23ab2de0",
                        "f7f19c1b-9440-46ef-bf0e-8df4fd9f1d4a",
                        "a0c18f1b-8239-4189-9735-4d6c0083e3b4",
                        "adb71a11-a768-41a1-8d89-42450022165e",
                        "51c5d902-4062-49a5-acac-5cff6e82d468",
                        "a6756e24-d770-49c1-9d07-1d17b80c9494",
                        "79d2ad53-5566-4a29-a38b-2583049cb2e1",
                        "392f1e0c-f584-47dd-8c21-0847bc27fa58",
                        "9ad19623-6bac-4b9c-ba18-c10f96f15682",
                        "009ca949-42f0-495e-ba09-9d95ee6daab3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 84,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "62f25816-d166-4e89-b8fe-a03b9dfaef19",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "58039913-1de3-4cb8-a84b-5cb36e9c3b04",
                    "title": "Instance API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                    "file": "/test/db/instanceController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\n// session = {tenant: config.tenantOne.tenantId, user_sid: '1e660111-de6f-4318-8f51-6e59cb33d8d7'} //process level\n// session = {tenant: config.tenantOne.tenantId, user_sid:'521a92c8-e77c-4537-811b-dea6e533d800'} //category level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "d7b16fb3-4b3d-49bf-a1be-77d2ce650a7c",
                            "parentUUID": "58039913-1de3-4cb8-a84b-5cb36e9c3b04",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "get a full instance",
                                    "fullTitle": "Instance API Controller Tests list tests get a full instance",
                                    "timedOut": false,
                                    "duration": 224,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst fullInstance = await instanceController.getFullInstance(\n  sampleInstanceGuid\n);\nexpect(fullInstance).to.exist;\nexpect(fullInstance.instanceTasks.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "f0e097ef-3183-4c52-b7f7-700024ab1518",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance recipient tasks data by instanceSid",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance recipient tasks data by instanceSid",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(config.tenantOne);\nconst instanceSid = '6D4785AE-57A2-46C5-9141-DE2B134ED8EF'\nconst instanceTasks = await instanceController.getInstanceRecipientTasksData(instanceSid);\n\nexpect(instanceTasks).to.exist;\nexpect(instanceTasks.length).to.be.gt(0);\nconst maintenanceReqFormTask = instanceTasks[2]\nexpect(maintenanceReqFormTask.taskName).to.equal('Maintenance Request Form')\nexpect(maintenanceReqFormTask.recipientTasks.length).to.be.gt(0)\nconst recipientTask = maintenanceReqFormTask.recipientTasks[0]\nexpect(recipientTask.recipientGuid).to.equal('4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF');\nexpect(recipientTask.taskData.length).to.be.gt(0)\nexpect(recipientTask.taskData.find(x => x.dataLabel == 'Location of Problem').dataValue).to.equal('Inside the building');",
                                    "err": {},
                                    "uuid": "f401159f-1ecc-40bf-8293-5b65436f7bd4",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests columns",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests columns",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getMyRequests();\n        \nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "7c1df5d0-dd01-42aa-9902-1afdb5214f72",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - ID",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - ID",
                                    "timedOut": false,
                                    "duration": 178,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processId\",\n          data: {\n            comparison: \"eq\",\n            value: sampleInstance.processId,\n          },\n        },\n      ],\n      count: 5,\n    });\n        \n    expect(result.results[0].processId).to.equal(sampleInstance.processId);\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"gt\",\n            value: 500,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"asc\",\n      count: 5,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.length.should.equal(5); \n        \n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.gt(500);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"lt\",\n            value: 505,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"desc\",\n      count: 2,\n    });\n        \n    expect(result.results.length).to.equal(2);\n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.lt(505);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "d5553c23-d4fd-4e08-a788-ebc4bc749d52",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - date",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - date",
                                    "timedOut": false,
                                    "duration": 148,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let d = moment().day(-90);\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"90\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n      expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().year(-30);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"30\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n        expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().day(-7);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"7\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-3);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"3\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-1);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"1\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    const startDate = moment(\"2018-10-11\");\n    const endDate = moment(\"2018-11-23\");\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"gt\", value: \"2018-10-11\" },\n        },\n        {\n          field: \"StartDate\",\n          data: { comparison: \"lt\", value: \"2018-11-23\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length) {\n        expect(result.results[0].startDate).to.be.gt(startDate.toDate());\n        expect(result.results[0].startDate).to.be.lt(endDate.toDate());\n    }\n  })\n);",
                                    "err": {},
                                    "uuid": "6ef20bff-de3f-487f-936f-4abc3aa51241",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - name",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - name",
                                    "timedOut": false,
                                    "duration": 174,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.instanceName.toLowerCase()).to.contain(\"test\");\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.forEach((instance) => {\n    //   instance.processName.should.contain(\"test\");\n    // });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requester\",\n          data: { comparison: \"contains\", value: \"system system\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid.toLowerCase());\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "987c2eb9-8141-47df-9e52-8582171d2802",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - guid",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - guid",
                                    "timedOut": false,
                                    "duration": 151,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processGuid\",\n          data: { comparison: \"contains\", value: sampleInstance.processGuid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.processName.indexOf(sampleInstance.processName)).to.be.gt(-1);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requesterGuid\",\n          data: { comparison: \"contains\", value: session.user_sid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "d72e8455-9fdb-4972-9ac8-7e984c8ae02c",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - count",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - count",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, { count: 2 });\n        \n    expect(result.results).to.exist;\n    expect(result.results.length).to.equal(2);\n  })\n);",
                                    "err": {},
                                    "uuid": "bde49ae1-0d5c-4632-aba2-3dfb439a3d4e",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests params - sort, dir",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests params - sort, dir",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      count: 2,\n      dir: \"asc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.lt(\n      result.results[1].createdDate\n    );\n        \n    result = await f.call(instanceController, {\n      count: 2,\n      dir: \"desc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.gt(\n      result.results[1].createdDate\n    );\n  })\n);",
                                    "err": {},
                                    "uuid": "4df8edff-c9d2-490d-b126-91e597b50a82",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests param - start",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests param - start",
                                    "timedOut": false,
                                    "duration": 84,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      start: 0,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startZeroId = result.results[0].instanceId;\n        \n    result = await f.call(instanceController, {\n      start: 1,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startOneId = result.results[0].instanceId;\n        \n    expect(startZeroId).to.be.lessThan(startOneId);\n  })\n);",
                                    "err": {},
                                    "uuid": "6560844b-7cc7-49fb-bad3-3ecda16af0cd",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "87d8b939-a8a5-4f67-a7f3-b2b173c0550a",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with search term against procssName, instanceName and requester",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with search term against procssName, instanceName and requester",
                                    "timedOut": false,
                                    "duration": 54,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.processName, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "cb260b0b-c29d-493b-9f78-8bb39be255dc",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with a numeric term against instanceId",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with a numeric term against instanceId",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.instanceId, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "e087ca46-381b-4b92-8259-5214ceb9bc8b",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get manage requests",
                                    "fullTitle": "Instance API Controller Tests list tests get manage requests",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'manage'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "096bf5b0-0a35-49d2-bb89-43b778bfd535",
                                    "parentUUID": "1d4643e2-2f45-4121-9643-9f7d307d57ff",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f0e097ef-3183-4c52-b7f7-700024ab1518",
                                "f401159f-1ecc-40bf-8293-5b65436f7bd4",
                                "7c1df5d0-dd01-42aa-9902-1afdb5214f72",
                                "d5553c23-d4fd-4e08-a788-ebc4bc749d52",
                                "6ef20bff-de3f-487f-936f-4abc3aa51241",
                                "987c2eb9-8141-47df-9e52-8582171d2802",
                                "d72e8455-9fdb-4972-9ac8-7e984c8ae02c",
                                "bde49ae1-0d5c-4632-aba2-3dfb439a3d4e",
                                "4df8edff-c9d2-490d-b126-91e597b50a82",
                                "6560844b-7cc7-49fb-bad3-3ecda16af0cd",
                                "87d8b939-a8a5-4f67-a7f3-b2b173c0550a",
                                "cb260b0b-c29d-493b-9f78-8bb39be255dc",
                                "e087ca46-381b-4b92-8259-5214ceb9bc8b",
                                "096bf5b0-0a35-49d2-bb89-43b778bfd535"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1289,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9808b0a9-7118-4664-869f-afd0f6aa0b32",
                            "title": "delete/undelete tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "deletes a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a request",
                                    "timedOut": false,
                                    "duration": 108,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nsampleInstances = result.results;\n    \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\nsampleInstanceGuid = firstInstance.instanceGuid;\n      \nlet deleted = await instanceController.deleteInstance(sampleInstanceGuid);\n\nexpect(sampleInstanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.deletedDate).not.be.null\nconst Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet excludeDeleted = await Instance.query().where({instanceGuid: sampleInstanceGuid})\nexpect(excludeDeleted.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "e878b544-ffc9-4f12-aff3-0616c4807415",
                                    "parentUUID": "9808b0a9-7118-4664-869f-afd0f6aa0b32",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retores a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests retores a request",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet undeleted = await instanceController.restoreInstance(sampleInstanceGuid);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(sampleInstanceGuid).to.equal(undeleted.instanceGuid)\nexpect(undeleted.deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "fab7fea6-3c25-43f1-9396-f43484a8f178",
                                    "parentUUID": "9808b0a9-7118-4664-869f-afd0f6aa0b32",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "deletes a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a batch of requests",
                                    "timedOut": false,
                                    "duration": 108,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.deleteInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\n//expect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).not.to.be.null;",
                                    "err": {},
                                    "uuid": "695d5784-0ff7-4bcc-93de-9fb2dcfd1d09",
                                    "parentUUID": "9808b0a9-7118-4664-869f-afd0f6aa0b32",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores a batch of requests",
                                    "timedOut": false,
                                    "duration": 89,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.restoreInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\nexpect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "eef4c35b-3266-4203-b3bb-0444d08cef8f",
                                    "parentUUID": "9808b0a9-7118-4664-869f-afd0f6aa0b32",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores all",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores all",
                                    "timedOut": false,
                                    "duration": 322,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet restored = await instanceController.restoreAllInstances();\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(restored.length).to.gt(0);",
                                    "err": {},
                                    "uuid": "8fb8ea77-e6b8-43e9-9477-9558220448f7",
                                    "parentUUID": "9808b0a9-7118-4664-869f-afd0f6aa0b32",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e878b544-ffc9-4f12-aff3-0616c4807415",
                                "fab7fea6-3c25-43f1-9396-f43484a8f178",
                                "695d5784-0ff7-4bcc-93de-9fb2dcfd1d09",
                                "eef4c35b-3266-4203-b3bb-0444d08cef8f",
                                "8fb8ea77-e6b8-43e9-9477-9558220448f7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 661,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c3bd3c5d-42ba-41f9-a01d-915c75874e9c",
                            "title": "insert tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts an instance data",
                                    "fullTitle": "Instance API Controller Tests insert tests inserts an instance data",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceDataRow = {\n  itaskRecipientGuid: '8ad1a6f2-9f6f-4667-9750-d961044ed817',\n  itaskGuid: '5bde578f-615f-4494-86b2-ca61044ed883',\n  taskGuid: '6386f905-7fac-41c6-9b6b-86d53f14d61c',\n  objectGuid: null,\n  objectType: null,\n  objectId: null,\n  dataProperty: '1491430190541',\n  dataType: 'String',\n  dataSid: '14777392-ac81-44f0-b1f2-87d53f14d65d',\n  dataId: null,\n  dataClientId: '1491430190541',\n  dataLabel: 'Enter Details:',\n  dataValue: 'Need a background check',\n  META_1: 'TEST_INSERT_INSTANCE_DATA',\n  META_2: null,\n  dataHide: null,\n  instanceContactGuid: null,\n  roleGuid: null,\n  dataValueExt: null,\n  questionType: 'LongText',\n  deletedDate: new Date().toISOString() // so that it doesnt interfere with its instance\n}\nconst instanceController = new InstanceController(session)\nlet instanceDataGuid = await instanceController.insertInstanceData(instanceDataRow)\nexpect(instanceDataGuid).to.be.a.uuid()",
                                    "err": {},
                                    "uuid": "9a8635e7-448d-4d56-a436-c5386ed516c1",
                                    "parentUUID": "c3bd3c5d-42ba-41f9-a01d-915c75874e9c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9a8635e7-448d-4d56-a436-c5386ed516c1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "925a3dce-57f9-4d05-9644-108ea763aec5",
                            "title": "update tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates an instance task recipient task state",
                                    "fullTitle": "Instance API Controller Tests update tests updates an instance task recipient task state",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session)\nconst recipTaskSid = 'b3fef53a-7742-46d1-9faf-be573c14d6fa'\nlet taskState = 'Cancelled'\nlet updated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)\n// change it back to Completed\ntaskState = 'Completed'\nupdated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)",
                                    "err": {},
                                    "uuid": "e2bd1296-90fc-47c5-9bf9-91b5e4f9eb29",
                                    "parentUUID": "925a3dce-57f9-4d05-9644-108ea763aec5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e2bd1296-90fc-47c5-9bf9-91b5e4f9eb29"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e8156eea-3d48-47b9-b541-49ee58bb59b5",
                    "title": "Instance API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceModel.test.js",
                    "file": "/test/db/instanceModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3fbd52f4-86c2-4cde-a765-49f4b0c368fc",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/instanceModel.test.js",
                            "file": "/test/db/instanceModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Instance API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "6bf91d0e-e2ef-49ce-9ae5-0d394b19d3bc",
                                    "parentUUID": "3fbd52f4-86c2-4cde-a765-49f4b0c368fc",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Instance API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = await sqldb.models.bindModel(config.tenantOne.tenantId, instanceModels.Instance)\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "f84d65a2-5f63-45e3-b6fa-ebe3094bc86c",
                                    "parentUUID": "3fbd52f4-86c2-4cde-a765-49f4b0c368fc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Instance API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = (await models.getModels(config.tenantOne.tenantId)).Instance;\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "3b813121-52aa-408f-ab8a-e1ba4ec183af",
                                    "parentUUID": "3fbd52f4-86c2-4cde-a765-49f4b0c368fc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Instance API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\n          let results = await models._tenantModels[config.tenantOne.tenantId].Instance.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "6f0d27de-470c-4575-b55c-1ecc446b2032",
                                    "parentUUID": "3fbd52f4-86c2-4cde-a765-49f4b0c368fc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f84d65a2-5f63-45e3-b6fa-ebe3094bc86c",
                                "3b813121-52aa-408f-ab8a-e1ba4ec183af",
                                "6f0d27de-470c-4575-b55c-1ecc446b2032"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1b61fb0a-8e82-46eb-a8ad-3d2ce1fe041e",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskController.test.js",
                    "file": "/test/db/myTaskController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "31841a4c-be1d-4a38-ade5-7eb1c42b9632",
                            "parentUUID": "1b61fb0a-8e82-46eb-a8ad-3d2ce1fe041e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskController.test.js",
                            "file": "/test/db/myTaskController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 199,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "14fefa1d-c194-4e71-8cfc-dbd3edc94dc5",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 244,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\nexpect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "6f80a6bd-1091-465e-98d3-d26d315b1a80",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 231,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "fcf83bb5-4983-4c17-88ab-d527e82dcf7a",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 215,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "41704faf-c200-4e87-aafa-f8070f015ccc",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 222,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "c2c79591-2a9d-4346-bce5-5370e737bcd5",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 214,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "1f89d569-b5fa-436b-adbf-fd97d82f1221",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 214,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "eb38a064-f647-4117-b50b-99660a23b6c7",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 112,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "d00808da-2b42-4c58-bae5-565e38b1213e",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 224,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "cf255c7c-6bad-48fb-a290-9d0cd6a54461",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: createdDate",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: createdDate",
                                    "timedOut": false,
                                    "duration": 159,
                                    "state": "failed",
                                    "speed": null,
                                    "pass": false,
                                    "fail": true,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet d = moment().day(-90);\nlet options = generateOptions('createdDate', 'range', '90', 1, 'asc');\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(d.toDate());\nd = moment().year(-7);\noptions = generateOptions('createdDate', 'range', '7', 1, 'asc');\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(d.toDate());\nconst count = 100000;\nresult = await taskController.getMyTasks({count});\nconst resultsLength = result.results.length;\nconst endDate = result.results[0].createdDate;\nconst startDate = result.results[result.results.length - 1].createdDate;\noptions = {\n  filters: [\n    {\n      field: 'createdDate',\n      data: {\n        comparison: 'gteq',\n        value: startDate,\n      }\n    },\n    {\n      field: 'createdDate',\n      data: {\n        comparison: 'lteq',\n        value: endDate\n      }\n    },\n  ],\n  count,\n};\nresult = await taskController.getMyTasks(options);\nexpect(result.results.length).to.equal(resultsLength);",
                                    "err": {
                                        "message": "AssertionError: expected { Mon, 31 Aug 2020 21:39:35 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] } to be above { Mon, 14 Sep 2020 15:54:34 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] }",
                                        "estack": "AssertionError: expected { Mon, 31 Aug 2020 21:39:35 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] } to be above { Mon, 14 Sep 2020 15:54:34 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] }\n    at Context.<anonymous> (test/db/myTaskController.test.js:124:51)",
                                        "diff": "- [Date: 2020-08-31T21:39:35.790Z]\n+ [Date: 2020-09-14T15:54:34.258Z]\n"
                                    },
                                    "uuid": "207e83c3-ea17-432d-85ac-a1a8cf30906e",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 894,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "9de7b7fe-1fe2-4dec-a1e6-15e6bc585a9d",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 358,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "cb1395a6-8d8f-4452-accb-3ba35742d974",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 229,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "88b60a2e-21e3-4f71-a9a8-ac6f6c02e08c",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 122,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "62c0f439-f9d5-4961-9161-aff54707fcdc",
                                    "parentUUID": "c8752e6a-0ed0-4192-a88b-ef9cf6a7f803",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "14fefa1d-c194-4e71-8cfc-dbd3edc94dc5",
                                "6f80a6bd-1091-465e-98d3-d26d315b1a80",
                                "fcf83bb5-4983-4c17-88ab-d527e82dcf7a",
                                "41704faf-c200-4e87-aafa-f8070f015ccc",
                                "c2c79591-2a9d-4346-bce5-5370e737bcd5",
                                "1f89d569-b5fa-436b-adbf-fd97d82f1221",
                                "eb38a064-f647-4117-b50b-99660a23b6c7",
                                "d00808da-2b42-4c58-bae5-565e38b1213e",
                                "cf255c7c-6bad-48fb-a290-9d0cd6a54461",
                                "9de7b7fe-1fe2-4dec-a1e6-15e6bc585a9d",
                                "cb1395a6-8d8f-4452-accb-3ba35742d974",
                                "88b60a2e-21e3-4f71-a9a8-ac6f6c02e08c",
                                "62c0f439-f9d5-4961-9161-aff54707fcdc"
                            ],
                            "failures": [
                                "207e83c3-ea17-432d-85ac-a1a8cf30906e"
                            ],
                            "pending": [],
                            "skipped": [],
                            "duration": 3637,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cdac002f-f304-4177-a6a7-849fcdae940f",
                    "title": "My Task API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskModel.test.js",
                    "file": "/test/db/myTaskModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3f82139e-5c79-410f-b9b7-d9a9cce81630",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/db/myTaskModel.test.js",
                            "file": "/test/db/myTaskModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "My Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "b2c33ccb-d65b-4764-9177-02a48b87de05",
                                    "parentUUID": "3f82139e-5c79-410f-b9b7-d9a9cce81630",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "My Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "28c15352-b67f-47d0-905f-8807cc2689ee",
                                    "parentUUID": "3f82139e-5c79-410f-b9b7-d9a9cce81630",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "My Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "ebff9625-bb3a-4a9b-b661-8f17ad3a0b9b",
                                    "parentUUID": "3f82139e-5c79-410f-b9b7-d9a9cce81630",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "My Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "ed0485fa-8e22-46d2-880b-41759e30f4b9",
                                    "parentUUID": "3f82139e-5c79-410f-b9b7-d9a9cce81630",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "28c15352-b67f-47d0-905f-8807cc2689ee",
                                "ebff9625-bb3a-4a9b-b661-8f17ad3a0b9b",
                                "ed0485fa-8e22-46d2-880b-41759e30f4b9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "344ee4dc-c570-4e94-a6e8-22d09fefacb9",
                    "title": "Instance API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                    "file": "/test/integration/instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 9,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken()\nthis.timeout(105000); \nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "6b6dfa5a-e710-4330-a186-d55a3cec6dc1",
                            "parentUUID": "344ee4dc-c570-4e94-a6e8-22d09fefacb9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e5a920fa-d532-46e6-91fe-04d85f747439",
                            "title": "getInstancesByPermission",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of instances for a user with monitor permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with monitor permissions",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "db735b20-826c-4dc3-bc78-3262597e0877",
                                    "parentUUID": "e5a920fa-d532-46e6-91fe-04d85f747439",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances for a user with manage permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with manage permissions",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "815a4055-0e1d-40be-b961-8141740e113f",
                                    "parentUUID": "e5a920fa-d532-46e6-91fe-04d85f747439",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances started by the user calling the endpoint",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances started by the user calling the endpoint",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "23a18371-84d1-49f3-b380-829b497fc37c",
                                    "parentUUID": "e5a920fa-d532-46e6-91fe-04d85f747439",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"monitor\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"monitor\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"gteq\",\"type\":\"date\",\"value\":'2010-01-01'}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"lteq\",\"type\":\"date\",\"value\":'2030-01-01'}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "d4643ff4-4bb2-4918-b48e-4eac0ef9178a",
                                    "parentUUID": "e5a920fa-d532-46e6-91fe-04d85f747439",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"mine\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"mine\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 152,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "33be3f78-1fbd-4e52-a58a-1dc140e756f4",
                                    "parentUUID": "e5a920fa-d532-46e6-91fe-04d85f747439",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "db735b20-826c-4dc3-bc78-3262597e0877",
                                "815a4055-0e1d-40be-b961-8141740e113f",
                                "23a18371-84d1-49f3-b380-829b497fc37c",
                                "d4643ff4-4bb2-4918-b48e-4eac0ef9178a",
                                "33be3f78-1fbd-4e52-a58a-1dc140e756f4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 219,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "03b10d97-ad29-4239-af39-a5f17169f827",
                            "title": "deleteInstances",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a batch of instances",
                                    "fullTitle": "Instance API Tests deleteInstances should delete a batch of instances",
                                    "timedOut": false,
                                    "duration": 207,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n            let result = await instanceController.getMyRequests()\n            let instanceGuids= result.results.map((i) => {\n                return i.instanceGuid;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.body = JSON.stringify(instanceGuids);\n           \n\t\t\tawait handlers.deleteInstances(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n            expect(mockRes.body).to.exist;\n\t\t\tlet deleted = mockRes.body;\n            expect(deleted.instancesDeleted).to.exist;\n            expect(deleted.instancesDeleted).to.equal(instanceGuids.length);\n            \n            //retore them\n            \n            let restored = await instanceController.restoreInstances(instanceGuids);\n            //expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\n            expect(restored.length).to.equal(instanceGuids.length);",
                                    "err": {},
                                    "uuid": "e8ce0604-fc65-4e04-842f-148945b29ef2",
                                    "parentUUID": "03b10d97-ad29-4239-af39-a5f17169f827",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e8ce0604-fc65-4e04-842f-148945b29ef2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 207,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e12904f6-e0af-4c9f-822d-c1193f1047f3",
                    "title": "MyTask API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-instance/test/integration/myTask.test.js",
                    "file": "/test/integration/myTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "MyTask API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "161c523c-971e-45eb-848e-8156470f30f6",
                            "parentUUID": "e12904f6-e0af-4c9f-822d-c1193f1047f3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "MyTask API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 115,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "3ce01a1a-5f2c-4176-9d1e-7da7d482133d",
                            "parentUUID": "e12904f6-e0af-4c9f-822d-c1193f1047f3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return my tasks based on filters",
                            "fullTitle": "MyTask API Tests should return my tasks based on filters",
                            "timedOut": false,
                            "duration": 269,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\n    let req = await mocks.req(jwt);\n    req.query.filters = [\n      {field: 'taskName', data: {comparison: 'contains', type: 'string', value: sampleTask.taskName}},\n      {field: 'taskTypeName', data: {comparison: 'contains', type: 'string', value: sampleTask.taskTypeName}},\n      {field: 'instanceName', data: {comparison: 'contains', type: 'string', value: sampleTask.instanceName}},\n      {field: 'instanceId', data: {comparison: 'contains', type: 'string', value: sampleTask.instanceId}},\n      {field: 'taskState', data: {comparison: 'contains', type: 'string', value: sampleTask.taskState}},\n      {field: 'requester', data: {comparison: 'contains', type: 'string', value: sampleTask.requester}},\n      {field: 'createdDate', data: {comparison: 'gteq', type: 'date', value: sampleTask.createdDate}},\n      {field: 'createdDate', data: {comparison: 'lteq', type: 'date', value: sampleTask.createdDate}},\n    ];\n    await handlers.getMyTasks(req, mockRes);\n    expect(mockRes.statusCode).equal(200);\n    expect(mockRes.body).to.exist;\n    const result = mockRes.body;\n    expect(result.total).to.exist;\n    expect(result.total).to.be.gt(0);\n    expect(result.results).to.be.array();",
                            "err": {},
                            "uuid": "a87d59cb-03d0-4605-90f3-90c668ff8b79",
                            "parentUUID": "e12904f6-e0af-4c9f-822d-c1193f1047f3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3ce01a1a-5f2c-4176-9d1e-7da7d482133d",
                        "a87d59cb-03d0-4605-90f3-90c668ff8b79"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 384,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "f94fb559-3536-49d6-b3e8-98912c617844",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "8fcd7db6-8a35-4ea4-8fb2-1061e322a864",
                    "title": "Permission/User Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/user.test.js",
                    "file": "/test/integration/user.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Permission/User Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nconst user  = config.tenantOne.adminUser;\nconst session = {tenant: config.tenantOne.tenantId, user_sid: user.sid.toLowerCase()}\nthis.timeout(105000); \nlet deletes = await redis.delAsync([`{$session.tenant}.permissions.${session.user_sid}.`]);",
                            "err": {},
                            "uuid": "d4f862a0-6cc1-46ce-8222-244fa63c13a6",
                            "parentUUID": "8fcd7db6-8a35-4ea4-8fb2-1061e322a864",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Permission/User Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "",
                            "err": {},
                            "uuid": "e1c0e5ce-1238-400c-9ee6-5fac7a50e711",
                            "parentUUID": "8fcd7db6-8a35-4ea4-8fb2-1061e322a864",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d543ca28-16bb-4509-8c6e-3a6ac2d3db5a",
                            "title": "isSysAdminHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/user.test.js",
                            "file": "/test/integration/user.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return {isSysAdmin: true} for an admin user",
                                    "fullTitle": "Permission/User Tests isSysAdminHandler should return {isSysAdmin: true} for an admin user",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n        let req = await mocks.req();\n        let isSysAdmin  = await userFunctions.isSysAdminHandler(req, mockRes);\n        expect(mockRes.statusCode).equal(200);\n        expect(mockRes.body).to.exist;\n        const info = mockRes.body;\n        expect(info.isSysAdmin).to.be.true",
                                    "err": {},
                                    "uuid": "1b173c14-d6dc-4a85-8361-c846025ce7e4",
                                    "parentUUID": "d543ca28-16bb-4509-8c6e-3a6ac2d3db5a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1b173c14-d6dc-4a85-8361-c846025ce7e4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d67371b4-5b2d-46a8-a5a2-010121a17166",
                    "title": "Permission/Workflow Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/workflow.test.js",
                    "file": "/test/integration/workflow.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Permission/Workflow Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig()\nuser  = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: user.sid.toLowerCase()}\nthis.timeout(105000);\nlet deletes = await redis.delAsync([`{$session.tenant}.${session.user_name}.permissions`]);",
                            "err": {},
                            "uuid": "1c621650-db6c-4f46-80ce-ecbe7e6b3947",
                            "parentUUID": "d67371b4-5b2d-46a8-a5a2-010121a17166",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Permission/Workflow Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "",
                            "err": {},
                            "uuid": "eff2a9c0-343a-4b1b-a90a-57d8e43f5a7e",
                            "parentUUID": "d67371b4-5b2d-46a8-a5a2-010121a17166",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9ddce681-5aee-40d0-82b7-c9549243c3e0",
                            "title": "currentUserPermissionssHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-permissions/test/integration/workflow.test.js",
                            "file": "/test/integration/workflow.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return permissions",
                                    "fullTitle": "Permission/Workflow Tests currentUserPermissionssHandler should cache and return permissions",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n        let req = await mocks.req();\n        let isSysAdmin  = await workflow.currentUserPermissionsHandler(req, mockRes);\n        expect(mockRes.statusCode).equal(200);\n        expect(mockRes.body).to.exist;\n        const info = mockRes.body;\n        expect(info.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "a871e3cc-eb51-478c-9b93-9a856ca46ee5",
                                    "parentUUID": "9ddce681-5aee-40d0-82b7-c9549243c3e0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a871e3cc-eb51-478c-9b93-9a856ca46ee5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "eb03fab2-1326-4a4b-95c9-50d2a923a6e3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "d8cf6dfb-86d7-432e-a3de-a591c2702b1a",
                    "title": "Settings API Holiday Controller tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/holidays.controller.test.js",
                    "file": "/test/integration/db/holidays.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Holiday Controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenantId: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}\ntenantId = config.tenantOne.tenantId;\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "70a8d62a-e086-4d49-a577-cfd7e9104f19",
                            "parentUUID": "d8cf6dfb-86d7-432e-a3de-a591c2702b1a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should insert, select, delete and list holidays",
                            "fullTitle": "Settings API Holiday Controller tests should insert, select, delete and list holidays",
                            "timedOut": false,
                            "duration": 238,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let holiday = {\n  holidayName: \"O Day\",\n  startDate: \"2019-10-10T00:00:00.000Z\",\n  endDate: \"2019-10-11T00:00:00.000Z\",\n  country: \"USA\"\n};\nlet holidayController = new HolidayController(oauth);\n// insert\nconst inserted = await holidayController.insertHoliday(holiday);\nvalidateHoliday(holiday, inserted);\n// select\nlet gotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n// update\nholiday.holidayGuid = inserted.holidayGuid;\nholiday.holidayName = \"Easter Monday\";\nholiday.country = \"Papa New Guinea\";\nawait holidayController.updateHoliday(holiday);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n//list\nconst holidays = await holidayController.listHolidays();\nexpect(holidays.length).to.be.gt(0);\nholiday = holidays[0];\nexpect(holiday.holidayGuid).to.exist;\nexpect(holiday.holidayName).to.exist;\nexpect(holiday.startDate).to.exist;\nexpect(holiday.endDate).to.exist;\nexpect(holiday.country).to.exist;\n// delete\nconst holidayGuids = [inserted.holidayGuid];\nawait holidayController.deleteHolidays(holidayGuids);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nexpect(gotOne).to.not.exist;",
                            "err": {},
                            "uuid": "f7720228-5441-4dff-b623-793584afe313",
                            "parentUUID": "d8cf6dfb-86d7-432e-a3de-a591c2702b1a",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "f7720228-5441-4dff-b623-793584afe313"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 238,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2d8d71e9-f650-4503-afd7-e7c699ccef94",
                    "title": "Settings API System Setting Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                    "file": "/test/integration/db/systemsetting.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API System Setting Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} \nthis.timeout(105000);",
                            "err": {},
                            "uuid": "2540770f-4499-4a15-8d0c-9d58a5c7f30c",
                            "parentUUID": "2d8d71e9-f650-4503-afd7-e7c699ccef94",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c85743eb-2249-49a2-a603-71d5c44c3847",
                            "title": "Model Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a system setting model",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should get a system setting model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nexpect(SystemSettingsModel).to.exist;",
                                    "err": {},
                                    "uuid": "ffab57de-a888-4aab-8ab4-8b4931abfb1d",
                                    "parentUUID": "c85743eb-2249-49a2-a603-71d5c44c3847",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should return system settings",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nlet results = await SystemSettingsModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "725752e6-761a-45ab-a906-16921a68125d",
                                    "parentUUID": "c85743eb-2249-49a2-a603-71d5c44c3847",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ffab57de-a888-4aab-8ab4-8b4931abfb1d",
                                "725752e6-761a-45ab-a906-16921a68125d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d5fea2fa-4dae-4483-a2c2-10a00eac07e8",
                            "title": "Controller Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list system settings",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listSystemSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\nexpect(systemSettings[0].masterSettings.settingsGuid).to.exist;",
                                    "err": {},
                                    "uuid": "8e7e99fb-8615-417e-a634-fd1527bcd8e2",
                                    "parentUUID": "d5fea2fa-4dae-4483-a2c2-10a00eac07e8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list password settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list password settings",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\n// only system settings listed should be the ones related to passwords   \nexpect(systemSettings.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(systemSettings.length);",
                                    "err": {},
                                    "uuid": "c6d2770b-0358-4850-952a-40ec2ddd3186",
                                    "parentUUID": "d5fea2fa-4dae-4483-a2c2-10a00eac07e8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should update system settings",
                                    "timedOut": false,
                                    "duration": 174,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let pwdSettings = [{\n  \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION\",\n  \"settingsValue\":\"14\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n    \"settingsKey\":\"PWD_EXPIRATION\",\n    \"keyDefault\":\"7\",\n    \"keyOptions\":null,\n    \"description\":\"Length in days before a user is prompted to change his or her password.\"\n  }\n}, {\n  \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n  \"settingsValue\":\"1\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n    \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n    \"keyDefault\":\"0\",\n    \"keyOptions\":\"1|0\",\n    \"description\":\"Flag to turn enforcement of password expiration.  1 = On, 0 = Off\"\n  }\n}]\n// save the changes above, query to verify changes, set them back to the defaults\nlet systemSettingController = new SystemSettingController(session)\nawait systemSettingController.updateSystemSettings(pwdSettings)\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('14')\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1')\npwdSettings.forEach(setting => {\n  setting.settingsValue = setting.masterSettings.keyDefault\n})\nawait systemSettingController.updateSystemSettings(pwdSettings)\nsystemSettings = await systemSettingController.listPasswordSettings();\nlet pwdExpiration = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION')\nlet pwdExpirationActive = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE')\nexpect(pwdExpiration.settingsValue).to.equal(pwdExpiration.masterSettings.keyDefault)\nexpect(pwdExpirationActive.settingsValue).to.equal(pwdExpirationActive.masterSettings.keyDefault)",
                                    "err": {},
                                    "uuid": "653d2a52-9a01-493a-bf2b-06b43fc60acf",
                                    "parentUUID": "d5fea2fa-4dae-4483-a2c2-10a00eac07e8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8e7e99fb-8615-417e-a634-fd1527bcd8e2",
                                "c6d2770b-0358-4850-952a-40ec2ddd3186",
                                "653d2a52-9a01-493a-bf2b-06b43fc60acf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 244,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "bffe54b3-5040-47ca-b185-7c20c88a8bf0",
                    "title": "Biztime API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/biztimes.test.js",
                    "file": "/test/integration/functions/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Biztime API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nmockRes = await mocks.mockResponse();\nreq = await mocks.req(jwt);",
                            "err": {},
                            "uuid": "411e7ea2-831d-46bf-b738-77a74652a1ba",
                            "parentUUID": "bffe54b3-5040-47ca-b185-7c20c88a8bf0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of biztimes",
                            "fullTitle": "Biztime API Tests should return a list of biztimes",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.listBiztimes(req, mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body.length).to.be.gt(0);\nvalidateBiztime(mockRes.body[0]);",
                            "err": {},
                            "uuid": "8a1c285f-7b92-490c-967f-ee3ae0d34156",
                            "parentUUID": "bffe54b3-5040-47ca-b185-7c20c88a8bf0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert a biztime",
                            "fullTitle": "Biztime API Tests should insert a biztime",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.insertBiztime(\n  {...req, body: {...biztimeToInsert}},\n  mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\ninsertedBiztime = mockRes.body;\nvalidateBiztime(biztimeToInsert, insertedBiztime);",
                            "err": {},
                            "uuid": "eb33c4e6-31fd-4b50-aee5-34a02486ef90",
                            "parentUUID": "bffe54b3-5040-47ca-b185-7c20c88a8bf0",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update a biztime",
                            "fullTitle": "Biztime API Tests should update a biztime",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.updateBiztime(\n  {\n    ...req,\n    params: {bizTimeGuid: insertedBiztime.bizTimeGuid},\n    body: {...biztimeToUpdate}},\n  mockRes\n  );\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nvalidateBiztime(biztimeToUpdate, mockRes.body);",
                            "err": {},
                            "uuid": "e0288cef-cc0b-44e5-af59-3ff0f2498ab0",
                            "parentUUID": "bffe54b3-5040-47ca-b185-7c20c88a8bf0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "8a1c285f-7b92-490c-967f-ee3ae0d34156",
                        "eb33c4e6-31fd-4b50-aee5-34a02486ef90",
                        "e0288cef-cc0b-44e5-af59-3ff0f2498ab0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 33,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "307a7919-a8d9-47a7-873f-c3a143e73318",
                    "title": "Settings API Holiday Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/holidays.test.js",
                    "file": "/test/integration/functions/holidays.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "insert, list, get, delete holiday",
                            "fullTitle": "Settings API Holiday Tests insert, list, get, delete holiday",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nlet listHolidaysEvent = await mocks.listHolidaysEvent()\nlet insertHolidayEvent = await mocks.insertHolidayEvent();\nlet getHolidayEvent = await mocks.getHolidayEvent();\n\n// insert\nawait holidays.insert(insertHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nvalidateHoliday(insertHolidayEvent.body, inserted);\n//list\nawait holidays.list(listHolidaysEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nexpect(mockRes.body.length).to.be.greaterThan(0);\nexpectDefinedHoliday(mockRes.body[0]);\n// get\ngetHolidayEvent.params.holidayGuid = inserted.holidayGuid;\nawait holidays.get(getHolidayEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst got = mockRes.body;\nvalidateHoliday(inserted, got);\n// delete\nlet deleteEvent = Object.assign({}, listHolidaysEvent);\ndeleteEvent.body = [inserted.holidayGuid];\nawait holidays.remove(deleteEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\ngetHolidayEvent.params = {\n  holidayGuid: inserted.holidayGuid\n};\nawait holidays.get(getHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(404);",
                            "err": {},
                            "uuid": "5e1400fa-a808-41a8-9656-aa0eac24e280",
                            "parentUUID": "307a7919-a8d9-47a7-873f-c3a143e73318",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "5e1400fa-a808-41a8-9656-aa0eac24e280"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "582f9cf2-ae27-462d-bafe-19ecb94b9b3c",
                    "title": "Settings API Password Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/passwordSettings.test.js",
                    "file": "/test/integration/functions/passwordSettings.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the password settings",
                            "fullTitle": "Settings API Password Settings Tests lists the password settings",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait passwordSettings.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\n// only system settings listed should be the ones related to passwords\nexpect(result.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(result.length);",
                            "err": {},
                            "uuid": "c4d519e5-dbf2-4e07-bb82-cb6b996dbd6b",
                            "parentUUID": "582f9cf2-ae27-462d-bafe-19ecb94b9b3c",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c4d519e5-dbf2-4e07-bb82-cb6b996dbd6b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 18,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "dda1dfc0-ae08-4d0a-be1d-ec373d3843dc",
                    "title": "Settings API System Config Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/systemConfig.test.js",
                    "file": "/test/integration/functions/systemConfig.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the system config settings",
                            "fullTitle": "Settings API System Config Tests lists the system config settings",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait systemConfig.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(40);\nexpect(result[0].settingsGuid).to.exist\nexpect(result[0].settingsKey).to.exist\nexpect(result[0].settingsValue).to.exist\nexpect(result[0].masterSettings.description).to.exist\nexpect(result[0].masterSettings.keyDefault).to.exist\nexpect(result[0].masterSettings.keyOptions).to.exist",
                            "err": {},
                            "uuid": "19d87ce6-b6f5-4822-9e41-41856ba23a5a",
                            "parentUUID": "dda1dfc0-ae08-4d0a-be1d-ec373d3843dc",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates system config settings",
                            "fullTitle": "Settings API System Config Tests updates system config settings",
                            "timedOut": false,
                            "duration": 135,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"true\"\n}]\nawait systemConfig.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nlet result = mockRes.body\nexpect(result).to.equal('1');\n// verify that change was made\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nlet allowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('true')\n// revert the change\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"false\"\n}]\nawait systemConfig.update(mockReq, mockRes);\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nallowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('false')",
                            "err": {},
                            "uuid": "b0193fba-cba0-4f7c-ad87-a18423293a16",
                            "parentUUID": "dda1dfc0-ae08-4d0a-be1d-ec373d3843dc",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "19d87ce6-b6f5-4822-9e41-41856ba23a5a",
                        "b0193fba-cba0-4f7c-ad87-a18423293a16"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 157,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "caf6b366-17a9-45dc-b9af-4534997d21df",
                    "title": "Settings API Utilities Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                    "file": "/test/integration/functions/utilities.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bfe2d460-4850-4ccb-8c70-b3c43b4d8692",
                            "title": "locales",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "lists locales",
                                    "fullTitle": "Settings API Utilities Tests locales lists locales",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\nawait utils.listLocales(mocks.req(), mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "6a6f8204-620b-417e-abeb-6105deea2152",
                                    "parentUUID": "bfe2d460-4850-4ccb-8c70-b3c43b4d8692",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6a6f8204-620b-417e-abeb-6105deea2152"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "e98aaaad-ebbd-4b79-99d3-cdb5f361fc15",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "40d7d2f2-5f8e-4561-8bd5-9f0fbcf51169",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task/test/db/controller.test.js",
                    "file": "/test/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "465b8fd6-2d17-4a35-911f-d62fb50d336b",
                            "parentUUID": "40d7d2f2-5f8e-4561-8bd5-9f0fbcf51169",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                            "title": "list tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task/test/db/controller.test.js",
                            "file": "/test/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 290,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "84c545ea-8ca6-4686-9e98-e29df204a166",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 172,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\nexpect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "416f666a-1c43-4d80-9915-8d99d86728dd",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 139,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "bec26623-0e4f-4f68-ba2f-7f9dbf2fb79a",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 137,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "fc628185-df03-4516-93e7-c7a3101d5d52",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 130,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "7a3d2990-21e8-4f48-8c23-71661899e0e8",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 119,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "b80e709f-4f39-4aa7-8260-0220c1c158a5",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 119,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "4cfca410-b229-430b-b831-ae7f822482c6",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 132,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "1d1d1c4a-3212-4c6d-98b1-1a3bba5a8708",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 148,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "6fa3995a-e601-453c-8a54-c9d6e1b42d4d",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: createdDate",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: createdDate",
                                    "timedOut": false,
                                    "duration": 118,
                                    "state": "failed",
                                    "speed": null,
                                    "pass": false,
                                    "fail": true,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet d = moment().day(-90);\nlet options = generateOptions('createdDate', 'range', '90', 1, 'asc');\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(d.toDate());\nd = moment().year(-7);\noptions = generateOptions('createdDate', 'range', '7', 1, 'asc');\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(d.toDate());\nconst count = 100000;\nresult = await taskController.getMyTasks({count});\nconst resultsLength = result.results.length;\nconst endDate = result.results[0].createdDate;\nconst startDate = result.results[result.results.length - 1].createdDate;\noptions = {\n  filters: [\n    {\n      field: 'createdDate',\n      data: {\n        comparison: 'gteq',\n        value: startDate,\n      }\n    },\n    {\n      field: 'createdDate',\n      data: {\n        comparison: 'lteq',\n        value: endDate\n      }\n    },\n  ],\n  count,\n};\nresult = await taskController.getMyTasks(options);\nexpect(result.results.length).to.equal(resultsLength);",
                                    "err": {
                                        "message": "AssertionError: expected { Mon, 31 Aug 2020 21:39:35 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] } to be above { Mon, 14 Sep 2020 15:54:42 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] }",
                                        "estack": "AssertionError: expected { Mon, 31 Aug 2020 21:39:35 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] } to be above { Mon, 14 Sep 2020 15:54:42 GMT\n  getMonthAbbr: [Function],\n  getMonthName: [Function],\n  getLastMonthName: [Function],\n  getUTCOffset: [Function],\n  toCLFString: [Function],\n  toYMD: [Function],\n  toDBString: [Function],\n  clearTime: [Function],\n  clearUTCTime: [Function],\n  add: [Function],\n  addMilliseconds: [Function],\n  addSeconds: [Function],\n  addMinutes: [Function],\n  addHours: [Function],\n  addDays: [Function],\n  addWeeks: [Function],\n  addMonths: [Function],\n  addYears: [Function],\n  remove: [Function],\n  removeMilliseconds: [Function],\n  removeSeconds: [Function],\n  removeMinutes: [Function],\n  removeHours: [Function],\n  removeDays: [Function],\n  removeWeeks: [Function],\n  removeMonths: [Function],\n  removeYears: [Function],\n  addWeekdays: [Function],\n  setTimeToNow: [Function],\n  clone: [Function],\n  between: [Function],\n  compareTo: [Function],\n  equals: [Function],\n  equalsDay: [Function],\n  isToday: [Function],\n  isAfter: [Function],\n  isBefore: [Function],\n  isWeekend: [Function],\n  getDaysBetween: [Function],\n  getHoursBetween: [Function],\n  getMinutesBetween: [Function],\n  getSecondsBetween: [Function],\n  getMillisecondsBetween: [Function],\n  getMonthsBetween: [Function],\n  getOrdinalNumber: [Function],\n  toFormat: [Function],\n  toUTCFormat: [Function],\n  getWeekNumber: [Function],\n  getFullWeekNumber: [Function] }\n    at Context.<anonymous> (test/db/controller.test.js:124:51)",
                                        "diff": "- [Date: 2020-08-31T21:39:35.790Z]\n+ [Date: 2020-09-14T15:54:42.851Z]\n"
                                    },
                                    "uuid": "b1b3f8b4-1c83-4652-9fe3-0a6f476e1368",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 508,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "cf66d5fe-a790-47d0-8ebe-70c7a06054e5",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 244,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "5a40c2fe-1a9a-44eb-acbb-910c539059f1",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 244,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "597e7128-dde8-423c-bd66-c390bf1056e2",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 127,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "8cd110e8-2565-47f6-a27b-24f655230688",
                                    "parentUUID": "0d52d492-67f7-4b54-a6e9-00b45ba02ef5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "84c545ea-8ca6-4686-9e98-e29df204a166",
                                "416f666a-1c43-4d80-9915-8d99d86728dd",
                                "bec26623-0e4f-4f68-ba2f-7f9dbf2fb79a",
                                "fc628185-df03-4516-93e7-c7a3101d5d52",
                                "7a3d2990-21e8-4f48-8c23-71661899e0e8",
                                "b80e709f-4f39-4aa7-8260-0220c1c158a5",
                                "4cfca410-b229-430b-b831-ae7f822482c6",
                                "1d1d1c4a-3212-4c6d-98b1-1a3bba5a8708",
                                "6fa3995a-e601-453c-8a54-c9d6e1b42d4d",
                                "cf66d5fe-a790-47d0-8ebe-70c7a06054e5",
                                "5a40c2fe-1a9a-44eb-acbb-910c539059f1",
                                "597e7128-dde8-423c-bd66-c390bf1056e2",
                                "8cd110e8-2565-47f6-a27b-24f655230688"
                            ],
                            "failures": [
                                "b1b3f8b4-1c83-4652-9fe3-0a6f476e1368"
                            ],
                            "pending": [],
                            "skipped": [],
                            "duration": 2627,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "23a7b256-f9ca-4475-8462-4a0658c601ec",
                    "title": "Task API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task/test/db/model.test.js",
                    "file": "/test/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d6876158-e498-44ac-8e48-e848e0e8f925",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task/test/db/model.test.js",
                            "file": "/test/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "abd1d781-97b9-4038-8a1d-958a4923c179",
                                    "parentUUID": "d6876158-e498-44ac-8e48-e848e0e8f925",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "45bcdc87-e164-4bea-b1e8-1c9ce8e9983d",
                                    "parentUUID": "d6876158-e498-44ac-8e48-e848e0e8f925",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "4aafbdff-5a28-411b-a7f7-210205392b43",
                                    "parentUUID": "d6876158-e498-44ac-8e48-e848e0e8f925",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "7c3fc83e-f047-4c66-84b2-d336b6352798",
                                    "parentUUID": "d6876158-e498-44ac-8e48-e848e0e8f925",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "45bcdc87-e164-4bea-b1e8-1c9ce8e9983d",
                                "4aafbdff-5a28-411b-a7f7-210205392b43",
                                "7c3fc83e-f047-4c66-84b2-d336b6352798"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 50,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d6ec4042-30e9-4f83-81ef-f6e2a7ee1e10",
                    "title": "Task API Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task/test/integration/task.test.js",
                    "file": "/test/integration/task.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "09363f18-15ce-467f-b76d-418cdfa44e16",
                            "parentUUID": "d6ec4042-30e9-4f83-81ef-f6e2a7ee1e10",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "Task API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 119,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "0e099e15-d943-43e7-8162-5569da30d7a4",
                            "parentUUID": "d6ec4042-30e9-4f83-81ef-f6e2a7ee1e10",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return my tasks based on filters",
                            "fullTitle": "Task API Tests should return my tasks based on filters",
                            "timedOut": false,
                            "duration": 266,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\n    let req = await mocks.req(jwt);\n    req.query.filters = [\n      {field: 'taskName', data: {comparison: 'contains', type: 'string', value: sampleTask.taskName}},\n      {field: 'taskTypeName', data: {comparison: 'contains', type: 'string', value: sampleTask.taskTypeName}},\n      {field: 'instanceName', data: {comparison: 'contains', type: 'string', value: sampleTask.instanceName}},\n      {field: 'instanceId', data: {comparison: 'contains', type: 'string', value: sampleTask.instanceId}},\n      {field: 'taskState', data: {comparison: 'contains', type: 'string', value: sampleTask.taskState}},\n      {field: 'requester', data: {comparison: 'contains', type: 'string', value: sampleTask.requester}},\n      {field: 'createdDate', data: {comparison: 'gteq', type: 'date', value: sampleTask.createdDate}},\n      {field: 'createdDate', data: {comparison: 'lteq', type: 'date', value: sampleTask.createdDate}},\n    ];\n    await handlers.getMyTasks(req, mockRes);\n    expect(mockRes.statusCode).equal(200);\n    expect(mockRes.body).to.exist;\n    const result = mockRes.body;\n    expect(result.total).to.exist;\n    expect(result.total).to.be.gt(0);\n    expect(result.results).to.be.array();",
                            "err": {},
                            "uuid": "d1de075a-cc71-4887-bc17-0b69bb4a0891",
                            "parentUUID": "d6ec4042-30e9-4f83-81ef-f6e2a7ee1e10",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "0e099e15-d943-43e7-8162-5569da30d7a4",
                        "d1de075a-cc71-4887-bc17-0b69bb4a0891"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 385,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "8ac6f8a9-b843-4c6d-9571-29f12b0802e0",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "f693df29-fafd-445a-a773-6e507f849c75",
                    "title": "Task Dispatcher API Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                    "file": "/test/integration/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "fullTitle": "Task Dispatcher API Controller Tests \"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}",
                            "err": {},
                            "uuid": "faefa123-618a-4b88-b701-8eb3f5414111",
                            "parentUUID": "f693df29-fafd-445a-a773-6e507f849c75",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6ea288ee-790b-4d48-bd7d-7ebbfa88bb02",
                            "title": "ProcessTaskController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get process tasks",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskController should get process tasks",
                                    "timedOut": false,
                                    "duration": 185,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskController = new controllers.ProcessTaskController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nlet processTasks = await processTaskController.getProcessTasks(updateMyProfileProcessSid)\nexpect(processTasks).to.exist;\nexpect(processTasks.length).to.be.gt(0);\nexpect(processTasks[0].processTaskGuid).to.exist;",
                                    "err": {},
                                    "uuid": "1beb0e91-c3e2-4fac-b949-59a6b9fe0fad",
                                    "parentUUID": "6ea288ee-790b-4d48-bd7d-7ebbfa88bb02",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1beb0e91-c3e2-4fac-b949-59a6b9fe0fad"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 185,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a0111f1f-eeea-4311-8b87-13ba7528c435",
                            "title": "ProcessTaskAttributeController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task attributes",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should list process task attributes",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet includeExt = false\nlet processTaskAttributes = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributes[6].extendedAtt).to.not.exist;\nincludeExt = true\nlet processTaskAttributesIncExt = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributesIncExt).to.exist;\nexpect(processTaskAttributesIncExt.length).to.be.gt(0);\nexpect(processTaskAttributesIncExt[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributesIncExt[6].extendedAtt.extAttribute).to.exist;",
                                    "err": {},
                                    "uuid": "49966e89-39b6-4be1-80af-41fd405494ec",
                                    "parentUUID": "a0111f1f-eeea-4311-8b87-13ba7528c435",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get and update a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get and update a process task attribute",
                                    "timedOut": false,
                                    "duration": 56,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeGuid = '7cece0ab-bda6-4b13-a8fb-3f5c467371e6'  \nlet processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nlet processTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\n// console.log(processTaskAttribute)\nexpect(processTaskAttribute.attributeValue).to.equal('0')\nlet numberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: 'TEST'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('TEST')\n// must set it back to original value so that we don't break anything\nnumberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: '0'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('0')",
                                    "err": {},
                                    "uuid": "56d615f8-aa08-4f5d-a31c-99fb282321ea",
                                    "parentUUID": "a0111f1f-eeea-4311-8b87-13ba7528c435",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should insert a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should insert a process task attribute",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// pick any process task and insert a process task attribute\n// then delete it\nconst processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// give \"Update my profile - Start task\" a test process task att\nconst processTaskGuid = '27cb04ea-b19d-4327-8b3a-e82cc538d44d'\nconst attributeKey = 'TEST_KEY'\nconst attributeValue = 'TEST_VALUE'\nconst ordinal = 1\nconst processTaskAttribute = await processTaskAttributeController.insert({\n  processTaskGuid,\n  attributeKey,\n  attributeValue,\n  ordinal\n})\nexpect(processTaskAttribute.processTaskAttributeGuid).to.be.a.uuid()\nexpect(processTaskAttribute.processTaskGuid).to.equal(processTaskGuid)\nexpect(processTaskAttribute.attributeKey).to.equal(attributeKey)\nexpect(processTaskAttribute.attributeValue).to.equal(attributeValue)\nexpect(processTaskAttribute.ordinal).to.equal(ordinal)\n// cleanup\n// const numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nconst numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nexpect(numberOfAffectedRows).to.equal(1)",
                                    "err": {},
                                    "uuid": "ef2cc518-84ee-44a0-aac1-9eba9eeabf3a",
                                    "parentUUID": "a0111f1f-eeea-4311-8b87-13ba7528c435",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get the process task attribute max ordinal value for a process task",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get the process task attribute max ordinal value for a process task",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// \"Update my profile - Start task\" a test process task att\nlet processTaskGuid = \"27cb04ea-b19d-4327-8b3a-e82cc538d44d\";\n// that process task has no atts so its max ordinal should be null\nlet maxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(null);\n// \"Update my profile - User Profile\" task does have atts.  seed db goes up to 12\nprocessTaskGuid = \"28d88aa5-fc4c-4e16-b32d-2964c738d49b\";\nmaxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(12);",
                                    "err": {},
                                    "uuid": "875ca4f3-10ae-4dd3-8f9f-1e4ca4702085",
                                    "parentUUID": "a0111f1f-eeea-4311-8b87-13ba7528c435",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "49966e89-39b6-4be1-80af-41fd405494ec",
                                "56d615f8-aa08-4f5d-a31c-99fb282321ea",
                                "ef2cc518-84ee-44a0-aac1-9eba9eeabf3a",
                                "875ca4f3-10ae-4dd3-8f9f-1e4ca4702085"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "35edce65-6be7-4fb1-9d41-fc8e501a197d",
                            "title": "ProcessTaskMappingController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task mappings",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskMappingController should list process task mappings",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskMappingController = new controllers.ProcessTaskMappingController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet processTaskAttributes = await processTaskMappingController.list(profileFormProcessTaskSid)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[0].processTaskMappingGuid).to.exist;",
                                    "err": {},
                                    "uuid": "6d46ccc8-38ab-4f3e-8694-760a45c4a400",
                                    "parentUUID": "35edce65-6be7-4fb1-9d41-fc8e501a197d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6d46ccc8-38ab-4f3e-8694-760a45c4a400"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9e134cea-0011-458d-ba34-ca6cd216a9f7",
                            "title": "ProcessController",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should update a process's modified by and date fields",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessController should update a process's modified by and date fields",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processController = new controllers.ProcessController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nconst systemUserGuid = 'D8C469C3-F781-4179-A09C-6D148885FB30'\nlet process = await processController.get(updateMyProfileProcessSid)\nexpect(process).to.exist;\nexpect(process.processGuid.toLowerCase()).to.equal(updateMyProfileProcessSid);\nconst oldModifiedDate = process.modifiedDate\nconst numberOfAffectedRows = await processController.updateModifiedByAndDate(updateMyProfileProcessSid)\nexpect(numberOfAffectedRows).to.equal(1)\nprocess = await processController.get(updateMyProfileProcessSid) \nexpect(process.modifiedDate).to.be.greaterThan(oldModifiedDate)\n// for some reason when executed in a test the db record's modifiedBy is set to \n// the systemUserGuid instead of the contact sid specified in the session (4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF)\nexpect(process.modifiedBy).to.equal(systemUserGuid)",
                                    "err": {},
                                    "uuid": "f6a54213-b3b4-44ad-a361-8f92dfe37cc2",
                                    "parentUUID": "9e134cea-0011-458d-ba34-ca6cd216a9f7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f6a54213-b3b4-44ad-a361-8f92dfe37cc2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c7f5c463-d95f-43de-814b-cf1edf50ed07",
                    "title": "Task Dispatcher API Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/model.test.js",
                    "file": "/test/integration/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7a8cf733-bf6b-4c42-8faa-476ad725f69b",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/db/model.test.js",
                            "file": "/test/integration/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Task Dispatcher API Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "95303bd9-2d33-4182-ad84-6915f5245da1",
                                    "parentUUID": "7a8cf733-bf6b-4c42-8faa-476ad725f69b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 82,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = await sqldb.models.bindModel(\n  config.tenantOne.tenantId,\n  vwProcessTasksModels.vwProcessTasks\n);\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "22a3f786-ea62-4bb7-902c-0f291c63a3e7",
                                    "parentUUID": "7a8cf733-bf6b-4c42-8faa-476ad725f69b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = (await models.getModels(config.tenantOne.tenantId))\n  .vwProcessTasks;\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "f031646e-3442-4dc0-8750-95fe90b47cd0",
                                    "parentUUID": "7a8cf733-bf6b-4c42-8faa-476ad725f69b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tentantModels[config.tenantOne.tenantId]).to.exist;\nlet results = await models._tentantModels[\n  config.tenantOne.tenantId\n].vwProcessTasks.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "70ceefe2-a568-4bc2-b151-128f83a5cb9a",
                                    "parentUUID": "7a8cf733-bf6b-4c42-8faa-476ad725f69b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "22a3f786-ea62-4bb7-902c-0f291c63a3e7",
                                "f031646e-3442-4dc0-8750-95fe90b47cd0",
                                "70ceefe2-a568-4bc2-b151-128f83a5cb9a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 133,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "133762d5-bd05-47fd-be37-997df468b11e",
                    "title": "Task Dispatcher API PDF Merge Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-task-dispatcher/test/integration/functions/pdfMerge.test.js",
                    "file": "/test/integration/functions/pdfMerge.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task settings",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets task settings",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_gettasksettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\n// vue output\n// expect(result.length).to.be.greaterThan(1);\n// expect(result[0].attributeKey).to.exist;\n// expect(result[0].attributeValue).to.exist;\n// expect(result.find(x => x.attributeKey == 'GeneratedFileName')).to.exist\n// expect(result.find(x => x.attributeKey == 'FirstPDF')).to.exist\n// angular output\nexpect(result.Data.GeneratedFileName).to.exist;\nexpect(result.Data.FirstPDF).to.exist;\nexpect(result.Data.SecondPDF).to.exist;",
                            "err": {},
                            "uuid": "c567e8db-a921-4e00-b294-61642ae5b129",
                            "parentUUID": "133762d5-bd05-47fd-be37-997df468b11e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF options",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getpdfoptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.length).to.be.greaterThan(1);\n// vue output\n// expect(result[0].displayName).to.exist;\n// expect(result[0].processTaskGuid).to.exist;\n// expect(result[0].taskTypeGuid).to.exist;\n// angular output\nexpect(result[0].length).to.be.greaterThan(1);\nexpect(result[0][0]).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e;52407ad7-bd98-4023-8d88-91ef4464cd98');\nexpect(result[0][1]).to.equal('second PDF Merge Form : File Attachment (Task Output)');\nexpect(result[0][2]).to.equal('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "500e96a2-78c9-4abb-a57e-0eaad69acb68",
                            "parentUUID": "133762d5-bd05-47fd-be37-997df468b11e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF fields",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF fields",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\n// vue output\n// expect(result.length).to.equal(1)\n// expect(result[0]).to.equal('FILE_NAME')\n// angular output\nexpect(result.Data.length).to.equal(1)\nexpect(result.Data[0][0]).to.equal('FILE_NAME')\nexpect(result.Data[0][1]).to.equal('FILE_NAME')",
                            "err": {},
                            "uuid": "3c4923ab-3038-4be6-b772-94aaa8cf31fa",
                            "parentUUID": "133762d5-bd05-47fd-be37-997df468b11e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - form prefill",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - form prefill",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_Input')\nexpect(result[0].PrefillField).to.equal('1601919933647')\nexpect(result[0].Description).to.equal('Data - second PDF Merge Form - Merged PDF Filename:')\nexpect(result[0].TaskSID).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e')",
                            "err": {},
                            "uuid": "6b98f7b6-1a83-4c03-8e4c-23da90694ba6",
                            "parentUUID": "133762d5-bd05-47fd-be37-997df468b11e",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c567e8db-a921-4e00-b294-61642ae5b129",
                        "500e96a2-78c9-4abb-a57e-0eaad69acb68",
                        "3c4923ab-3038-4be6-b772-94aaa8cf31fa",
                        "6b98f7b6-1a83-4c03-8e4c-23da90694ba6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 35,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "cbef74e3-fb9c-47f5-bffd-85eb7bd75ab3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "a65d62ee-ca32-45a0-8ec5-4c9a78517412",
                    "title": "Tenant API Sessions Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                    "file": "/test/integration/activeSessions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \ntestConfig = await testLib.getTestConfig();\n    \ntenant = testConfig.tenantOne.tenantId;\ngroup = \"sessionServiceGroup\"\ntestEventType = 'extendSession'\nfullStreamName = tenant + '.stream.' + testStreamName\neventProcessedName = fullStreamName + \".\" + group + \".processed\";\neventHistoryName = fullStreamName + \".history\"",
                            "err": {},
                            "uuid": "aa4fd748-4ea1-4b50-b9ca-1bd9d0f2dc66",
                            "parentUUID": "a65d62ee-ca32-45a0-8ec5-4c9a78517412",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "09f28ef7-c9e3-42f2-b1c7-2054e2eba851",
                            "parentUUID": "a65d62ee-ca32-45a0-8ec5-4c9a78517412",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "92a49309-18ec-4c06-8f8a-1dbff920f65e",
                            "title": "Active Sessions",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                            "file": "/test/integration/activeSessions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "020dabd0-91f9-45b7-a43e-f4d00b4831c0",
                                    "title": "count active sessions",
                                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/activeSessions.test.js",
                                    "file": "/test/integration/activeSessions.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return activeSessions",
                                            "fullTitle": "Tenant API Sessions Tests Active Sessions count active sessions should return activeSessions",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions  = await getActiveSessions(tenant);\n//console.log(sessions)\nexpect(sessions).to.exist;\nexpect(sessions).to.have.property(\"activeSessions\")\nexpect(sessions).to.have.property(\"activeUsers\")",
                                            "err": {},
                                            "uuid": "a8455c0d-6d71-48af-a023-bafed028ed6e",
                                            "parentUUID": "020dabd0-91f9-45b7-a43e-f4d00b4831c0",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a8455c0d-6d71-48af-a023-bafed028ed6e"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ad83d5cc-bbae-4af2-b961-0ce8152b861b",
                    "title": "Tenant API licsense stats",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/licenseStats.test.js",
                    "file": "/test/integration/licenseStats.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API licsense stats \"before all\" hook",
                            "timedOut": false,
                            "duration": 3003,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \nconfig = await testLib.getTestConfig();\nlet sp = new stream.StreamPublisher('sessions',config.tenantOne.tenantId);\nawait sp.sendEvent(\"extendSession\", {\n    token: \"abcd234\",\n    user: {\n        sid:\"11111\", \n        user_name: \"iapprove\", \n        email: \"iapprove@integrify.com\", \n        name: \"System System\"\n    }\n})\n    \nawait delay(3000);",
                            "err": {},
                            "uuid": "220dc431-af66-4663-a089-c792ad4b7a53",
                            "parentUUID": "ad83d5cc-bbae-4af2-b961-0ce8152b861b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API licsense stats \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "29b7ac8e-c98d-4d2d-8ad0-463198987f5e",
                            "parentUUID": "ad83d5cc-bbae-4af2-b961-0ce8152b861b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a6e65dd2-1295-41a5-b4cc-fd6e446ceca9",
                            "title": "Post all stats",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/licenseStats.test.js",
                            "file": "/test/integration/licenseStats.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return ok",
                                    "fullTitle": "Tenant API licsense stats Post all stats should return ok",
                                    "timedOut": false,
                                    "duration": 717,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let result = await postAllStats();\nexpect(result).to.eq(\"ok\");",
                                    "err": {},
                                    "uuid": "b45f2bef-4ed7-4d47-92dc-9e3bc414d2e4",
                                    "parentUUID": "a6e65dd2-1295-41a5-b4cc-fd6e446ceca9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b45f2bef-4ed7-4d47-92dc-9e3bc414d2e4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 717,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "627dd6cc-cba9-4c95-9fc8-4c75a30105fb",
                    "title": "Tenant API Stream-Manager Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                    "file": "/test/integration/monitor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "104a677c-1f56-4044-8029-e0de5b4b372e",
                            "title": "listTenantStreams",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of the streams for a tenant",
                                    "fullTitle": "Tenant API Stream-Manager Tests listTenantStreams should return a list of the streams for a tenant",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\tlet results = await streamMonitor.listTenantStreams(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\tstreamName = apps[0]\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "968f5563-9b43-4c74-bc98-6ef610b859ae",
                                    "parentUUID": "104a677c-1f56-4044-8029-e0de5b4b372e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "968f5563-9b43-4c74-bc98-6ef610b859ae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f0acfcea-271e-4048-a32c-82e4de51efea",
                            "title": "streamInfoReqHandler",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests streamInfoReqHandler should return info for the stream",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.streamInfoReqHandler(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.exist",
                                    "err": {},
                                    "uuid": "416177d9-8eb0-4cf0-8541-906b992e6ee6",
                                    "parentUUID": "f0acfcea-271e-4048-a32c-82e4de51efea",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "416177d9-8eb0-4cf0-8541-906b992e6ee6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cf83ad48-3eea-4d09-977e-0eabe385ff03",
                            "title": "getGroupInfo",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return group info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests getGroupInfo should return group info for the stream",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.getGroupInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "273c3531-4035-4e39-bb88-8e1d4f7dccf9",
                                    "parentUUID": "cf83ad48-3eea-4d09-977e-0eabe385ff03",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "273c3531-4035-4e39-bb88-8e1d4f7dccf9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1d07edb3-e537-4d7b-a3c2-0b1779c0e221",
                            "title": "getConsumerInfo",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return consumer info for the group",
                                    "fullTitle": "Tenant API Stream-Manager Tests getConsumerInfo should return consumer info for the group",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\treq.params.groupName = \"sessionServiceGroup\" \n\t\t\tlet results = await streamMonitor.getConsumerInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "92a21769-6558-463a-9c52-fc6bfa337e74",
                                    "parentUUID": "1d07edb3-e537-4d7b-a3c2-0b1779c0e221",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92a21769-6558-463a-9c52-fc6bfa337e74"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "704c0e26-66fb-494c-af05-4b8dc632edb4",
                    "title": "Tenant API License, Apps and Settings Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                    "file": "/test/integration/tenant.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b1ba7854-f3fc-44d0-9997-25a87e3adfbd",
                            "title": "getTenantLicense",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a license for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicense should return a license for a tenant",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req()\n\t\t\tlet results = await getTenantLicense(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseInfo = mockRes.body;\n\t\t\texpect(licenseInfo.instanceId).equal(req.oauth.tenant);",
                                    "err": {},
                                    "uuid": "6b0fceee-8067-4a89-b2cf-3fa2e3169237",
                                    "parentUUID": "b1ba7854-f3fc-44d0-9997-25a87e3adfbd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6b0fceee-8067-4a89-b2cf-3fa2e3169237"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e3292d2f-3a29-460c-90c3-9af3d9746817",
                            "title": "getTenantApps",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return apps for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantApps should return apps for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantApps(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "f7a87214-5c99-4869-9fe4-6c6d2b20f9e4",
                                    "parentUUID": "e3292d2f-3a29-460c-90c3-9af3d9746817",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f7a87214-5c99-4869-9fe4-6c6d2b20f9e4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6b7bd6c3-0281-41f1-985d-4104c8055b15",
                            "title": "getTenantLicenseLocation",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return license location for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicenseLocation should return license location for a tenant",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantLicenseLocation(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseLocation = mockRes.body;\n      expect(licenseLocation).to.satisfy(function(val) { return val === 'onpremise' || val.toLowerCase().includes('cloud'); });",
                                    "err": {},
                                    "uuid": "6c9e6910-10b1-472b-b3b4-a76bda896bd3",
                                    "parentUUID": "6b7bd6c3-0281-41f1-985d-4104c8055b15",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6c9e6910-10b1-472b-b3b4-a76bda896bd3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "fe5930d4-664b-4f0d-9d66-4100043dd2bf",
                            "title": "getTenantLoginSettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should login settings for a tenant based on a tenant id",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a tenant id",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {tenant: req.config.tenantOne.tenantId}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "17e259a2-d0ca-40ca-a2e7-35fe5cbaece2",
                                    "parentUUID": "fe5930d4-664b-4f0d-9d66-4100043dd2bf",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should login settings for a tenant based on a host header",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a host header",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {hostHeader: req.config.tenantOne.hostHeader}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "81bea02a-08ad-41d5-8fda-082050cda2c0",
                                    "parentUUID": "fe5930d4-664b-4f0d-9d66-4100043dd2bf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "17e259a2-d0ca-40ca-a2e7-35fe5cbaece2",
                                "81bea02a-08ad-41d5-8fda-082050cda2c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "f02203a2-7e1c-4289-b35e-76a056ef21f9",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "ec8ece8f-7504-4ce0-97ba-0dd0c46ebaff",
                    "title": "api-user Group Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                    "file": "/test/db/groupController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 255,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\ntenantId = config.tenantOne.tenantId;\nfor (i = 1; i<=10; i++) {\n  const groupController = new GroupController(session);\n  const result = await groupController.addGroup({ groupName: `Test Automation Group ${i}` });\n  testGroups.push(result)\n}",
                            "err": {},
                            "uuid": "9fbf3709-669d-46d3-b2d0-f66ba198c3a0",
                            "parentUUID": "ec8ece8f-7504-4ce0-97ba-0dd0c46ebaff",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 53,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// clean up our test data\nconst Group = await models.getModel(config.tenantOne.tenantId, \"Group\");\nconst ContactGroup = await models.getModel(config.tenantOne.tenantId, \"ContactGroup\");\nawait Promise.all( testGroups.map( async (group) => {\n  await Group.query().hardDelete(group)\n  await ContactGroup.query()\n    .where('groupGuid', group.groupGuid)\n    .delete()\n}))",
                            "err": {},
                            "uuid": "96983216-9b66-427f-b9ab-90c3f23641a9",
                            "parentUUID": "ec8ece8f-7504-4ce0-97ba-0dd0c46ebaff",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d6de3969-4d94-4cb2-9fa9-304912ba9b2f",
                            "title": "get tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "retrieves a group",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves a group",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, \"Group\");\nlet groups = await Group.query().where('group_name', '=', 'Administrators')\nexpect(groups.length).to.equal(1);\nadminGroupGuid = groups[0].groupGuid;\nconst groupController = new GroupController(config.tenantOne);\nconst adminGroup = await groupController.getGroup(adminGroupGuid);\nexpect(adminGroup).to.exist;\nexpect(adminGroup.groupName).to.equal('Administrators');\nexpect(adminGroup.groupDesc).to.equal('System administrators');\n// expect(adminGroup.groupSql).to.be.undefined;",
                                    "err": {},
                                    "uuid": "4b884864-c194-4a6a-85e8-7f1916181d5f",
                                    "parentUUID": "d6de3969-4d94-4cb2-9fa9-304912ba9b2f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves filtered list of groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves filtered list of groups",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, \"Group\");\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups({search: 'Test Automation Group', count: 4});\nconst groups = response.results;\nexpect(groups.length).to.equal(4);",
                                    "err": {},
                                    "uuid": "c58ae48f-1247-411c-a59b-23b5f7578256",
                                    "parentUUID": "d6de3969-4d94-4cb2-9fa9-304912ba9b2f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all possible members for adding to groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all possible members for adding to groups",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, \"Group\");\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getAvailableMembers({});\n//       console.log(JSON.stringify(response, null,2));\n// console.log(\"====================================================================================================\");\n// console.log(\"response length: \" + response.length)",
                                    "err": {},
                                    "uuid": "cddeb371-4cbb-46e5-9b23-4d3b59c54578",
                                    "parentUUID": "d6de3969-4d94-4cb2-9fa9-304912ba9b2f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b884864-c194-4a6a-85e8-7f1916181d5f",
                                "c58ae48f-1247-411c-a59b-23b5f7578256",
                                "cddeb371-4cbb-46e5-9b23-4d3b59c54578"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 37,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "45ed71a9-5155-4b57-a985-d348ad31a78f",
                            "title": "insert tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts a non-dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a non-dynamic group",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName: groupName,\n  groupDesc: groupDesc,\n}\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.dynamic).to.equal('No'); // ensure defaulting to \"No\" rather than null\nexpect(result.createdBy).to.equal(session.user_sid)\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "48adfcc2-4b5d-40d3-8fe2-7265112ac94f",
                                    "parentUUID": "45ed71a9-5155-4b57-a985-d348ad31a78f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "inserts a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a dynamic group",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName: groupName,\n  groupDesc: groupDesc,\n  dynamic: \"Yes\",\n  groupSql: \"name = 'Admin'\"\n}\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.createdBy).to.equal(session.user_sid)\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "759a84f9-860a-4f5b-aab9-73986c8b49df",
                                    "parentUUID": "45ed71a9-5155-4b57-a985-d348ad31a78f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a group with no name",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a group with no name",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nawait expect(groupController.addGroup({groupDesc: 'Test Group'})).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "77c813e3-b7f9-4018-a339-0479d115549d",
                                    "parentUUID": "45ed71a9-5155-4b57-a985-d348ad31a78f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with no SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with no SQL",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupData = {\n  groupName: 'Dynamic Test Group',\n  dynamic: 'Yes' }\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "10029e76-e8a3-4f31-91e5-c92c087def0d",
                                    "parentUUID": "45ed71a9-5155-4b57-a985-d348ad31a78f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "48adfcc2-4b5d-40d3-8fe2-7265112ac94f",
                                "759a84f9-860a-4f5b-aab9-73986c8b49df",
                                "77c813e3-b7f9-4018-a339-0479d115549d",
                                "10029e76-e8a3-4f31-91e5-c92c087def0d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4c177af9-74f6-4da3-a252-52ec38d01a5f",
                            "title": "update tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates a group",
                                    "fullTitle": "api-user Group Controller Tests update tests updates a group",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session)\nconst group = testGroups[0];\nconst result = await groupController.updateGroup({ groupGuid: group.groupGuid,\n                                                   groupName: 'Updated Test Automation Group',\n                                                   dynamic: 'Yes',\n                                                   groupSql: \"name = 'Admin'\" });\nexpect(result).to.equal(1)",
                                    "err": {},
                                    "uuid": "dcd12c75-3b00-45a8-b523-6a3b0fc41ab6",
                                    "parentUUID": "4c177af9-74f6-4da3-a252-52ec38d01a5f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update with no group name",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update with no group name",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session)\nconst group = testGroups[0];\nawait expect(groupController\n             .updateGroup({ groupGuid: group.groupGuid,\n                            groupName: '' }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "d3f645ac-cebd-4d32-ab99-eaa1137e17da",
                                    "parentUUID": "4c177af9-74f6-4da3-a252-52ec38d01a5f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic without sql",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic without sql",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session)\nconst group = testGroups[0];\nawait expect(groupController\n             .updateGroup({ groupGuid: group.groupGuid,\n                            groupName: 'Validation test',\n                            dynamic: 'Yes',\n                            groupSql: '' }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "6b7fbe6a-dda4-4cee-a4b0-2c0832733d89",
                                    "parentUUID": "4c177af9-74f6-4da3-a252-52ec38d01a5f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic other than Yes/No",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic other than Yes/No",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session)\nconst group = testGroups[0];\nawait expect(groupController\n             .updateGroup({ groupGuid: group.groupGuid,\n                            groupName: 'Validation test',\n                            dynamic: true,\n                            groupSql: \"name = 'Admin'\" }))\n  .to.be.rejectedWith(Error);\nawait expect(groupController\n             .updateGroup({ groupGuid: group.groupGuid,\n                            groupName: 'Validation test',\n                            dynamic: 'yes',\n                            groupSql: \"name = 'Admin'\" }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "67ac844b-4ac6-40d7-9325-067f6bafa5aa",
                                    "parentUUID": "4c177af9-74f6-4da3-a252-52ec38d01a5f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dcd12c75-3b00-45a8-b523-6a3b0fc41ab6",
                                "d3f645ac-cebd-4d32-ab99-eaa1137e17da",
                                "6b7fbe6a-dda4-4cee-a4b0-2c0832733d89",
                                "67ac844b-4ac6-40d7-9325-067f6bafa5aa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "46be78a5-2db8-4a33-ab3b-bf83980a2d76",
                            "title": "delete tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "soft deletes a list of groups",
                                    "fullTitle": "api-user Group Controller Tests delete tests soft deletes a list of groups",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst timeBeforeDelete = Date.now();\nconst firstGroup = testGroups[0];\nconst response = await groupController.deleteGroups(testGroups.slice(0,5).map(group => group.groupGuid));\nexpect(response).to.eql([1,1,1,1,1]);\nlet deletedGroup = groupController.getGroup(firstGroup.groupGuid);\nexpect(deletedGroup).to.be.empty",
                                    "err": {},
                                    "uuid": "d45a013e-7872-4df7-9886-7cd1aa17a0a9",
                                    "parentUUID": "46be78a5-2db8-4a33-ab3b-bf83980a2d76",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d45a013e-7872-4df7-9886-7cd1aa17a0a9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "00402a73-1ba4-419a-98ef-237333d7c6fa",
                            "title": "membership test",
                            "fullFile": "/home/rich/integrify/1_PLUS/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "adds a user to a group",
                                    "fullTitle": "api-user Group Controller Tests membership test adds a user to a group",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9]; //0-4 get deleted in a previous test\nlet result = await groupController.addMember({groupGuid: group.groupGuid,\n                                              memberGuid: session.user_sid,\n                                              memberType: 'User'})\nexpect(result.memberGuid).to.equal(session.user_sid)\nexpect(result.groupGuid).to.equal(group.groupGuid)\nresult = await groupController.getMembers(group.groupGuid)\nexpect(result.length).to.equal(1)\nexpect(result[0].memberGuid.toLowerCase()).to.equal(session.user_sid)\nexpect(result[0].groupGuid.toLowerCase()).to.equal(group.groupGuid)\nexpect(result[0].memberType).to.equal('User')",
                                    "err": {},
                                    "uuid": "5b82e7cc-c666-4711-9eae-d4736c79aeb6",
                                    "parentUUID": "00402a73-1ba4-419a-98ef-237333d7c6fa",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a group",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f'\nconst result = await groupController.getMembers(usersGroupGuid);\nexpect(result.length).to.be.at.least(2);",
                                    "err": {},
                                    "uuid": "5794226e-8baf-4cc1-a26b-a131a6cfd175",
                                    "parentUUID": "00402a73-1ba4-419a-98ef-237333d7c6fa",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5b82e7cc-c666-4711-9eae-d4736c79aeb6",
                                "5794226e-8baf-4cc1-a26b-a131a6cfd175"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "303c06c5-479c-4982-8afd-65e3d211adc1",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "30708f4b-d804-43e5-b210-ddd531152533",
                    "title": "Config Processor ENV.CONFIG tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                    "file": "/test/integration/config.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor ENV.CONFIG tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 34,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nprocess.env.TESTING = true;\n\nconfigHelper = require(\"../../src/helpers/config\")\nredis = require(\"integrify-libs\").redisClient\npubSubClient = redis.makeCopy();\npubSubClient.subscribe('updateEnvConfig')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n//let deletes = await redis.delAsync(['ENV.CONFIG']);\n//console.log(deletes)",
                            "err": {},
                            "uuid": "8d0d6a87-4f1f-4793-80e3-b79fe80d6b34",
                            "parentUUID": "30708f4b-d804-43e5-b210-ddd531152533",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ec1c2533-3b2c-40aa-b37d-ea6c1c33ab1e",
                            "title": "config helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                            "file": "/test/integration/config.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "ce04172d-ff63-4117-90f1-b9e05543ed88",
                                    "title": "setConfig",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/config.test.js",
                                    "file": "/test/integration/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a local config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a local config file",
                                            "timedOut": false,
                                            "duration": 330,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nconsole.log(\"wow\",storedConfig)\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\n//expect(storedConfig.cacheTime).to.exist;\nawait delay(300)",
                                            "err": {},
                                            "uuid": "ea34d8bd-cda8-4c96-9d1e-68bcfe0750bd",
                                            "parentUUID": "ce04172d-ff63-4117-90f1-b9e05543ed88",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateEnvConfig pub/sub channel",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should get a message on the updateEnvConfig pub/sub channel",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(pubSubMessage.channel).to.equal('updateEnvConfig');",
                                            "err": {},
                                            "uuid": "d734569d-1fda-4693-a7ac-27a262b1aeb5",
                                            "parentUUID": "ce04172d-ff63-4117-90f1-b9e05543ed88",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a S3 config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a S3 config file",
                                            "timedOut": false,
                                            "duration": 19,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.USE_S3_FILES=\"true\"\nawait configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\nexpect(storedConfig.cacheTime).to.exist;",
                                            "err": {},
                                            "uuid": "5d8caf5f-fb4b-4fde-a39c-7dfbfebae814",
                                            "parentUUID": "ce04172d-ff63-4117-90f1-b9e05543ed88",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "ea34d8bd-cda8-4c96-9d1e-68bcfe0750bd",
                                        "d734569d-1fda-4693-a7ac-27a262b1aeb5",
                                        "5d8caf5f-fb4b-4fde-a39c-7dfbfebae814"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 349,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9390fc48-5aaf-4392-bdc5-9ed28ea099cc",
                    "title": "Config Processor Event Handler Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                    "file": "/test/integration/configEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5064,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName]);\n\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"updateEnvConfig\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateDataInstances\", {\n  update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n  update: new Date().toISOString(),\n  tenantId: 'integrifydev'\n      });\n\n\nforkedProcessor = await configStreamConsumer.monitorStream(tenant);\nawait delay(5000);",
                            "err": {},
                            "uuid": "b81091f0-c952-48c1-ab6f-8d2956d526fa",
                            "parentUUID": "9390fc48-5aaf-4392-bdc5-9ed28ea099cc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "b21c5524-96df-4779-81cb-4c0d5288b19c",
                            "parentUUID": "9390fc48-5aaf-4392-bdc5-9ed28ea099cc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "744e91a3-1b0b-4ac1-a181-109b6bce13c2",
                            "title": "config stream processor",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                            "file": "/test/integration/configEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "0991780a-3c6d-49fc-8cbf-085fafbc2b88",
                                    "title": "reads from config stream",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/configEventHandler.test.js",
                                    "file": "/test/integration/configEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Config Processor Event Handler Tests config stream processor reads from config stream should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "315ee96e-b700-4c82-adf1-57fd166e3fa3",
                                            "parentUUID": "0991780a-3c6d-49fc-8cbf-085fafbc2b88",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "315ee96e-b700-4c82-adf1-57fd166e3fa3"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cbfb6060-58cc-429f-9657-da693a8ad238",
                    "title": "Config data instance tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                    "file": "/test/integration/dataInstance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config data instance tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateDataInstances')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n  \nlet deletes = await redis.delAsync(['data_instances']);",
                            "err": {},
                            "uuid": "6497d591-32fe-4307-a812-6b67ca66a29b",
                            "parentUUID": "cbfb6060-58cc-429f-9657-da693a8ad238",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "edfe7039-475f-4f7f-b86f-6a2923c807a5",
                            "title": "dataInstasnce helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                            "file": "/test/integration/dataInstance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "1f3812da-cfc7-4ca3-88bc-afe584640f9f",
                                    "title": "updateDataInstances",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/dataInstance.test.js",
                                    "file": "/test/integration/dataInstance.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set data_instances in redis",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should set data_instances in redis",
                                            "timedOut": false,
                                            "duration": 203,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await dataInstanceHelper.updateDataInstances();\nlet storedDataInstances = await redis.getAsync('data_instances')\nexpect(storedDataInstances).to.exist;\nstoredDataInstances = JSON.parse(storedDataInstances);\nexpect(Object.keys(storedDataInstances).length).to.be.gt(0);",
                                            "err": {},
                                            "uuid": "9097c1b7-a4c4-42b8-9cf5-63165b4b66ba",
                                            "parentUUID": "1f3812da-cfc7-4ca3-88bc-afe584640f9f",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateDataInstances pub/sub channel",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should get a message on the updateDataInstances pub/sub channel",
                                            "timedOut": false,
                                            "duration": 300,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateDataInstances');",
                                            "err": {},
                                            "uuid": "74c37beb-7558-44b2-be20-a012663845ee",
                                            "parentUUID": "1f3812da-cfc7-4ca3-88bc-afe584640f9f",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "9097c1b7-a4c4-42b8-9cf5-63165b4b66ba",
                                        "74c37beb-7558-44b2-be20-a012663845ee"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 503,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0f363c27-bff0-4a39-ad20-b686e70a9b2f",
                    "title": "Config license tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                    "file": "/test/integration/license.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config license tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateLicenses')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});",
                            "err": {},
                            "uuid": "edb4ec24-8339-4499-9115-85c0ff63719d",
                            "parentUUID": "0f363c27-bff0-4a39-ad20-b686e70a9b2f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0b71e97d-a0de-4a08-9fa9-f79651fb8761",
                            "title": "license helper",
                            "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                            "file": "/test/integration/license.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "4634e2af-230d-4956-83b0-7737cbbcff5b",
                                    "title": "updateLicenses",
                                    "fullFile": "/home/rich/integrify/1_PLUS/config-processor/test/integration/license.test.js",
                                    "file": "/test/integration/license.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set licenses and x.license in redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set licenses and x.license in redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 400,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses()\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "88760315-38fc-4eaa-9e6b-2b6f350dfcce",
                                            "parentUUID": "4634e2af-230d-4956-83b0-7737cbbcff5b",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateLicenses pub/sub channel",
                                            "fullTitle": "Config license tests license helper updateLicenses should get a message on the updateLicenses pub/sub channel",
                                            "timedOut": false,
                                            "duration": 302,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateLicenses');",
                                            "err": {},
                                            "uuid": "4c40e445-9b8e-4881-a3f0-f4a585e22161",
                                            "parentUUID": "4634e2af-230d-4956-83b0-7737cbbcff5b",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set license redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set license redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 154,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses('integrifydev')\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "042011af-ed3e-4d5a-b9e1-751df261d48f",
                                            "parentUUID": "4634e2af-230d-4956-83b0-7737cbbcff5b",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "88760315-38fc-4eaa-9e6b-2b6f350dfcce",
                                        "4c40e445-9b8e-4881-a3f0-f4a585e22161",
                                        "042011af-ed3e-4d5a-b9e1-751df261d48f"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 856,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "c0b34ec9-4dd5-444b-b2c0-90be6edc8d72",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "2eedba03-55af-4367-96a6-31f6a6e42753",
                    "title": "Core Service biztimes",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                    "file": "/test/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service biztimes \"before all\" hook",
                            "timedOut": false,
                            "duration": 11,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nbiz = { \"Active\": false, \"EndHour\": 17, \"EndMinute\": 0, \"SID\": test_data.biz_sid, \"StartHour\": 9, \"StartMinute\": 15, \"Weekday\": 0 }",
                            "err": {},
                            "uuid": "1b54958c-c024-4fbb-ab84-1eacf4507989",
                            "parentUUID": "2eedba03-55af-4367-96a6-31f6a6e42753",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cdc98603-f9e0-42c2-824a-27c48fb01a49",
                            "title": "GET /biztimes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets biztimes",
                                    "fullTitle": "Core Service biztimes GET /biztimes gets biztimes",
                                    "timedOut": false,
                                    "duration": 497,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/biztimes')\n    .set('Authorization', 'Bearer ' + token)\n// biz = res.body.Items[0];\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "470745c0-05ce-4d11-933c-53394b0495cb",
                                    "parentUUID": "cdc98603-f9e0-42c2-824a-27c48fb01a49",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "470745c0-05ce-4d11-933c-53394b0495cb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 497,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7d2cd38a-381d-4254-92fe-dc7d52ea8544",
                            "title": "POST /biztimes/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "if (biz.EndHour < 24)\n    biz.EndHour = biz.EndHour + 1\nelse\n    biz.EndHour = biz.EndHour - 23",
                                    "err": {},
                                    "uuid": "d155b3aa-e516-4a81-a94e-24820370ebc9",
                                    "parentUUID": "7d2cd38a-381d-4254-92fe-dc7d52ea8544",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves biztimes",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save saves biztimes",
                                    "timedOut": false,
                                    "duration": 76,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/biztimes/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(biz)\n//console.log(res.body)\nexpect(res.status).to.equal(200);\nexpect(res.body.EndHour).to.exist;",
                                    "err": {},
                                    "uuid": "b5f99c0a-6e3b-46bc-b2b3-ee801dff9579",
                                    "parentUUID": "7d2cd38a-381d-4254-92fe-dc7d52ea8544",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b5f99c0a-6e3b-46bc-b2b3-ee801dff9579"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 76,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "f065ed5d-97ed-46e7-b372-9eecf69213fe",
                    "title": "Core Service category",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                    "file": "/test/category.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service category \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "f964f2af-d8d7-4f7f-9a9c-496df4ccdeef",
                            "parentUUID": "f065ed5d-97ed-46e7-b372-9eecf69213fe",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "5614bb9f-cbdb-4d4d-9727-cc4912238fde",
                            "title": "GET tree/{object_type}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET tree/{object_type} core-service",
                                    "timedOut": false,
                                    "duration": 46,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = res.body[0]\n            coreResult = res.body;\n            //console.log(res.body)\n            expect(res.status).to.equal(200);\n            // expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "d0530e5a-9e07-44d8-a1ec-ae54e58bad8d",
                                    "parentUUID": "5614bb9f-cbdb-4d4d-9727-cc4912238fde",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d0530e5a-9e07-44d8-a1ec-ae54e58bad8d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 46,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1ceacc29-baf2-4419-b2c6-80f810bc3297",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/category/' + category.id)\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "3aa3a95f-9611-49aa-9076-ffc4888a51bb",
                                    "parentUUID": "1ceacc29-baf2-4419-b2c6-80f810bc3297",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3aa3a95f-9611-49aa-9076-ffc4888a51bb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c5d40f8c-5d9c-4776-91f0-42f18d3d15b0",
                            "title": "POST save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category POST save core-service",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/category/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(category_save)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.CreatedDate).to.exist;\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "21a88c51-6150-4b9a-86b3-154ed0166130",
                                    "parentUUID": "c5d40f8c-5d9c-4776-91f0-42f18d3d15b0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "21a88c51-6150-4b9a-86b3-154ed0166130"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c11e39e2-9d9a-4a2b-9b84-aa62c14a9309",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service category GET {sid}/delete \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//Fetch category sid to delete\n            let resp = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = resp.body;\n            category.forEach(element => {\n                //console.log(element.Name);\n                if (element.Name == 'Qa Auto')\n                    cate_delete = element;\n            });",
                                    "err": {},
                                    "uuid": "6cebe0b1-3c54-4270-b05d-34d1b7c48b9f",
                                    "parentUUID": "c11e39e2-9d9a-4a2b-9b84-aa62c14a9309",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid}/delete core-service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/category/' + cate_delete.id + '/delete')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(0);\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "0020589e-97d1-469a-ac19-b74921f7909a",
                                    "parentUUID": "c11e39e2-9d9a-4a2b-9b84-aa62c14a9309",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0020589e-97d1-469a-ac19-b74921f7909a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "509adb82-b102-48f6-a359-510b70592847",
                    "title": "Core Service contacts",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                    "file": "/test/contact.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service contacts \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "2a01c10e-a16a-442d-aa56-00742c028afa",
                            "parentUUID": "509adb82-b102-48f6-a359-510b70592847",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "22aa2c67-8214-4607-a1f2-ef78bc707565",
                            "title": "GET /contacts/current",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/current core service",
                                    "timedOut": false,
                                    "duration": 73,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/current/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;\n                  currentUser_sid = res.body.SID",
                                    "err": {},
                                    "uuid": "035adfbe-ea48-4a40-bb16-26549f835014",
                                    "parentUUID": "22aa2c67-8214-4607-a1f2-ef78bc707565",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "035adfbe-ea48-4a40-bb16-26549f835014"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 73,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f2e24c32-74ac-4663-a6f3-3dc67a313c50",
                            "title": "GET detail/{contact_sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET detail/{contact_sid} core-service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/detail/' + currentUser_sid)\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;",
                                    "err": {},
                                    "uuid": "8ed03546-45e5-4974-98f8-27cfc4f9322e",
                                    "parentUUID": "f2e24c32-74ac-4663-a6f3-3dc67a313c50",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8ed03546-45e5-4974-98f8-27cfc4f9322e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "215a379d-3ada-4ea4-b343-894786999be4",
                            "title": "GET {contact_sid}/attributes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/attributes core-service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/attributes')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \nexpect(res.body[0]).to.exist;\nexpect(res.body[1]).to.exist;\nexpect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "2f20ce19-e79a-4def-9bcc-6adf750c1480",
                                    "parentUUID": "215a379d-3ada-4ea4-b343-894786999be4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2f20ce19-e79a-4def-9bcc-6adf750c1480"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "be2e0d1d-b3af-4d8b-bacf-4dec2e11da44",
                            "title": "GET {contact_sid}/delegations",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/delegations core-service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/delegations')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\n// //console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ffae2129-3e9b-45d6-ac7b-de4aa008ff0f",
                                    "parentUUID": "be2e0d1d-b3af-4d8b-bacf-4dec2e11da44",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ffae2129-3e9b-45d6-ac7b-de4aa008ff0f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6f5ee20e-91fa-4611-82c1-4ff898b91149",
                            "title": "GET byuserid/{user_id}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET byuserid/{user_id} core-service",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/byuserid/iApprove')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\n//console.log(res.body)\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \n// expect(res.body[0]).to.exist;\n// expect(res.body[1]).to.exist;\n// expect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "8271fdf2-4a7c-46c6-96f9-906ff58ca859",
                                    "parentUUID": "6f5ee20e-91fa-4611-82c1-4ff898b91149",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8271fdf2-4a7c-46c6-96f9-906ff58ca859"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6c6c99dd-56fe-497b-8955-f0df0302fa80",
                            "title": "GET /contacts/search",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET /contacts/search core-service",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search?search=System')\n      .set('Authorization', 'Bearer ' + token);\n// //console.log(res.body)\ncoreResult = res.body;\n//console.log(res.body);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b0749458-446e-4fbc-908e-d983e0ee26b7",
                                    "parentUUID": "6c6c99dd-56fe-497b-8955-f0df0302fa80",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b0749458-446e-4fbc-908e-d983e0ee26b7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "465420b8-ea40-4df0-b7ff-6ca7dc41aaf5",
                            "title": "GET /contact/search/quick/name",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contact/search/quick/name core service",
                                    "timedOut": false,
                                    "duration": 101,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search/quick/name/script/?start=0&count=20&sort=Name&dir=ASC&filter=System')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2c338366-869a-4327-addb-cec1e522854c",
                                    "parentUUID": "465420b8-ea40-4df0-b7ff-6ca7dc41aaf5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2c338366-869a-4327-addb-cec1e522854c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 101,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4e3224f4-7b4b-4aa1-8d42-f5587690906e",
                            "title": "GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/contactdetailsearch/0/10/LAST_NAME/ASC/script/')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\nexpect(res.status).to.equal(200);\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "24c9b4e2-db79-406c-b479-963682ef0f35",
                                    "parentUUID": "4e3224f4-7b4b-4aa1-8d42-f5587690906e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "24c9b4e2-db79-406c-b479-963682ef0f35"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3620cfb9-5acb-4fb8-8072-01b8ac600105",
                            "title": "POST /contacts/save | update",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service",
                                    "timedOut": false,
                                    "duration": 360,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/contacts/save')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\ninsertedSid = res.text\n//console.log(res.text)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "60ebf157-ca58-4460-82a3-73008b6de8ca",
                                    "parentUUID": "3620cfb9-5acb-4fb8-8072-01b8ac600105",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service update",
                                    "timedOut": false,
                                    "duration": 352,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/update')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "59a921c9-a064-4e1c-b018-3762b78092ae",
                                    "parentUUID": "3620cfb9-5acb-4fb8-8072-01b8ac600105",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "60ebf157-ca58-4460-82a3-73008b6de8ca",
                                "59a921c9-a064-4e1c-b018-3762b78092ae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 712,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a8a52ee1-fcae-4c1f-9c4c-65fe93ed93f1",
                            "title": "POST /contacts/replace POST",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "replace_user = [[\"OldContactSid\", insertedSid], [\"ReplacementContactSid\", insertedSid2], [\"RecipientReplace\", \"No\"], [\"OpenTaskReplace\", \"No\"], [\"GroupReplace\", \"No\"], [\"RoleReplace\", \"No\"], [\"DelegationReplace\", \"No\"]]",
                                    "err": {},
                                    "uuid": "b12dd5b2-c4f3-4d50-b403-287f7d52215e",
                                    "parentUUID": "a8a52ee1-fcae-4c1f-9c4c-65fe93ed93f1",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST core service update",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/replace ')\n      .set('Authorization', 'Bearer ' + token)\n      .send(replace_user);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "9ee98bd2-610c-494a-92b4-6d067871e930",
                                    "parentUUID": "a8a52ee1-fcae-4c1f-9c4c-65fe93ed93f1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ee98bd2-610c-494a-92b4-6d067871e930"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5c99a69f-9db0-473d-98f0-fcc476e83318",
                    "title": "Core service dbconns",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/dbconn.test.js",
                    "file": "/test/dbconn.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core service dbconns \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "3b7f3f5e-72ac-4b73-94dd-4f4dc4ed4d6e",
                            "parentUUID": "5c99a69f-9db0-473d-98f0-fcc476e83318",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "it should GET all dbconns",
                            "fullTitle": "Core service dbconns it should GET all dbconns",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                            "err": {},
                            "uuid": "35027f67-980c-466d-b0e4-8dff38bfe818",
                            "parentUUID": "5c99a69f-9db0-473d-98f0-fcc476e83318",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should add a test dbconn",
                            "fullTitle": "Core service dbconns it should add a test dbconn",
                            "timedOut": false,
                            "duration": 26,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/save/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\n  .send(testDbConn)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.be.a.guid()\ntestDbConnSid = res.text\n// verify testDbConn comes back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.be.greaterThan(-1);",
                            "err": {},
                            "uuid": "4de9e6df-107e-45e3-94a8-b939758b8bd8",
                            "parentUUID": "5c99a69f-9db0-473d-98f0-fcc476e83318",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should delete the test dbconn",
                            "fullTitle": "Core service dbconns it should delete the test dbconn",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/delete/script/')\n  .set('Authorization', 'Bearer ' + token)\n  .send([testDbConnSid])\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n// verify testDbConn does not come back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.equal(-1);",
                            "err": {},
                            "uuid": "83d77895-0aab-4f08-91ef-af6db2e5490a",
                            "parentUUID": "5c99a69f-9db0-473d-98f0-fcc476e83318",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "35027f67-980c-466d-b0e4-8dff38bfe818",
                        "4de9e6df-107e-45e3-94a8-b939758b8bd8",
                        "83d77895-0aab-4f08-91ef-af6db2e5490a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 61,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "81371148-471d-4542-9d5e-96805c1caca7",
                    "title": "Core Service groups",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                    "file": "/test/group.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service groups \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "8f351cd7-bd64-4d70-ae28-4c39f04b3f05",
                            "parentUUID": "81371148-471d-4542-9d5e-96805c1caca7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8dc6335c-0a6d-482c-b784-d68794b78efe",
                            "title": "POST /group/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /group/save core service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .post('/groups/save/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                        .send({ \"Name\": \"Qa Auto\", \"Description\": \"This is an automation\", \"Dynamic\": 0 })\n                  new_groupSid = res.text;\n                  expect(res.status).to.equal(200);\n                  expect(res.text).to.exist;\n                  expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "c428ff9a-df54-485f-b5cd-86e6ebd3eca4",
                                    "parentUUID": "8dc6335c-0a6d-482c-b784-d68794b78efe",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c428ff9a-df54-485f-b5cd-86e6ebd3eca4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "be2ec925-6040-4465-90fe-e1c42c0515bc",
                            "title": "POST /groups/members/{groupSid}/add",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/add core service",
                                    "timedOut": false,
                                    "duration": 42,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/add') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "2863ca58-f2e1-4611-8c8a-695033a087c6",
                                    "parentUUID": "be2ec925-6040-4465-90fe-e1c42c0515bc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2863ca58-f2e1-4611-8c8a-695033a087c6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 42,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "29174d0e-4689-4c16-b961-96bc736a0e76",
                            "title": "POST /groups/members/{groupSid}/remove",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/remove core service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/remove') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a2cca62e-4f48-4a00-af88-1eef5095397a",
                                    "parentUUID": "29174d0e-4689-4c16-b961-96bc736a0e76",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a2cca62e-4f48-4a00-af88-1eef5095397a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a7b8995a-5073-4efb-83e9-6b7e9c235496",
                            "title": "GET /groups​/{sid}​/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service groups GET /groups​/{sid}​/delete core-service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + new_groupSid + '/delete')\n      .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('true')",
                                    "err": {},
                                    "uuid": "b412818d-e973-4b20-b7f2-6c165c42ae0d",
                                    "parentUUID": "a7b8995a-5073-4efb-83e9-6b7e9c235496",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b412818d-e973-4b20-b7f2-6c165c42ae0d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5a016c6b-9cf6-46b5-989c-3191a1766d65",
                            "title": "GET /groups/list/simple",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/list/simple core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/simple')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Administrators');",
                                    "err": {},
                                    "uuid": "1ecc60a2-92bd-4feb-9b3c-dbd43f1ef4d4",
                                    "parentUUID": "5a016c6b-9cf6-46b5-989c-3191a1766d65",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1ecc60a2-92bd-4feb-9b3c-dbd43f1ef4d4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "73769832-6a3a-44c6-b2e7-57c8d84a7ba9",
                            "title": "GET /groups/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/{sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.SID).to.exist\nexpect(res.body.SID).to.be.guid\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "5fbc5b2c-65c1-49a3-b6e1-a3f508820243",
                                    "parentUUID": "73769832-6a3a-44c6-b2e7-57c8d84a7ba9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5fbc5b2c-65c1-49a3-b6e1-a3f508820243"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6b5027f6-e2ca-4a6c-9745-b7f3bc9f2fc1",
                            "title": "GET /groups/listroleassociation/{groupSid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listroleassociation/{groupSid} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listroleassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('System Administrators');\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "6168b4ab-98c6-4797-8531-fa4570941caf",
                                    "parentUUID": "6b5027f6-e2ca-4a6c-9745-b7f3bc9f2fc1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6168b4ab-98c6-4797-8531-fa4570941caf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "452faefe-8413-4466-aeb6-fa41850b0f3b",
                            "title": "GET /groups/select/{contact_sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/select/{contact_sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/select/' + system_user)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "567b8021-a276-4c4f-9c52-8932bbd0d25c",
                                    "parentUUID": "452faefe-8413-4466-aeb6-fa41850b0f3b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "567b8021-a276-4c4f-9c52-8932bbd0d25c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "89d75e32-f274-4bb0-b059-477564687340",
                            "title": "GET /groups​/nondynamic​/list​/simple",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups​/nondynamic​/list​/simple core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/nondynamic/list/simple')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "62f62527-deb4-4046-a557-df8c0420b8ab",
                                    "parentUUID": "89d75e32-f274-4bb0-b059-477564687340",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "62f62527-deb4-4046-a557-df8c0420b8ab"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b8819f93-546c-4f36-b743-8b904e4c808b",
                            "title": "​GET /groups​/listmembers​/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/listmembers​/{sid} core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listmembers/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "2f071ba8-465e-484a-9346-0819dad76af6",
                                    "parentUUID": "b8819f93-546c-4f36-b743-8b904e4c808b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2f071ba8-465e-484a-9346-0819dad76af6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e6d571bd-4645-45fe-b37d-3d14a82c797c",
                            "title": "​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir} core service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "c835ffd4-5bbf-45b0-8c3e-0b45f0a1ee88",
                                    "parentUUID": "e6d571bd-4645-45fe-b37d-3d14a82c797c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c835ffd4-5bbf-45b0-8c3e-0b45f0a1ee88"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "1b05578d-3369-481c-8482-4da935d97d6f",
                            "title": "GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listbypage/' + groupSid + '/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "d7d5dc3e-41ad-4d72-9882-49a20572d1a5",
                                    "parentUUID": "1b05578d-3369-481c-8482-4da935d97d6f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d7d5dc3e-41ad-4d72-9882-49a20572d1a5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ffbda770-6637-4055-b8ba-0830e4f16b27",
                            "title": "GET /groups/listprocessassociation/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listprocessassociation/{sid} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listprocessassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "843f0ac4-0742-440f-9a48-281834b186a3",
                                    "parentUUID": "ffbda770-6637-4055-b8ba-0830e4f16b27",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "843f0ac4-0742-440f-9a48-281834b186a3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5b94f4d7-6be0-4d98-8d1a-f1dd524e4090",
                    "title": "Core Service Members",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/member.test.js",
                    "file": "/test/member.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Members \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "5a74aa10-4dd2-4010-86d3-3598be3c06fd",
                            "parentUUID": "5b94f4d7-6be0-4d98-8d1a-f1dd524e4090",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "871f7320-00d0-4dd1-8f8f-3b447959bf66",
                            "title": "{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/member.test.js",
                            "file": "/test/member.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Members {page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/member/0/10/Name/Asc/script/?filter=&include=3')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "9f6538c5-b9c9-40b4-92fa-5fb8abc3550a",
                                    "parentUUID": "871f7320-00d0-4dd1-8f8f-3b447959bf66",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9f6538c5-b9c9-40b4-92fa-5fb8abc3550a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 36,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "73eda809-1d9f-4dd7-83f7-c4c235a8bf1f",
                    "title": "Core Service myTasks",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/myTasks.test.js",
                    "file": "/test/myTasks.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service myTasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "2c807d90-eaaa-4234-a9d1-6a6afacf28db",
                            "parentUUID": "73eda809-1d9f-4dd7-83f7-c4c235a8bf1f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "44d6b756-0a5a-4afc-b5e8-640010c051e8",
                            "title": "GEt {status}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/myTasks.test.js",
                            "file": "/test/myTasks.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service myTasks GEt {status}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 114,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/myTasks/status/0/10/Name/Asc')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;",
                                    "err": {},
                                    "uuid": "84551a51-46c7-41cd-af05-60c2c5097a46",
                                    "parentUUID": "44d6b756-0a5a-4afc-b5e8-640010c051e8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "84551a51-46c7-41cd-af05-60c2c5097a46"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "981aba17-a41c-4034-b547-89dc96e9d0ac",
                    "title": "Core Service powerForm",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                    "file": "/test/powerform.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service powerForm \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\n// //console.log(test_data);\nnew_role = '{ \"Name\": \"Qatest\", \"ExtendedDescription\": \"qa automated\", \"OwnerSID\":' + test_data.object_sid + ', \"OwnerType\": 2 }'\npowerform = {\n    CategorySID: test_data.category_sid,\n    Name: \"test\",\n    PowerFormType: \"0\",\n    Version: 1\n}\n// { \"ID\": 9999, \"Mode\": 2, \"ObjectType\": 1, \"RoleSID\": test_data.role_sid, \"SID\": \"90645d40-9de6-48b1-b689-0a610ef1d716\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 3, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"4711a8f4-68be-4772-b389-0a610ef1d7fe\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 4, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"b1e03457-e202-4a99-a389-0a610ef1d79d\", \"Permissions\": 0 }, { \"ID\": 0, \"Mode\": 5, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"f221751c-ba9f-4b19-9708-1f22372dffde\", \"Permissions\": 1023 }",
                            "err": {},
                            "uuid": "99046f37-c570-4be6-b31e-a80ef592a751",
                            "parentUUID": "981aba17-a41c-4034-b547-89dc96e9d0ac",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4e0a695d-b51f-4703-8bf7-e96fa47df808",
                            "title": "POST /Powerform/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm POST /Powerform/save core service",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/powerform/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(powerform)\nexpect(res.status).to.equal(200);\nsid = res.body.SID\n//console.log(sid)",
                                    "err": {},
                                    "uuid": "42700693-da60-459a-8b4a-378a1a1ce20f",
                                    "parentUUID": "4e0a695d-b51f-4703-8bf7-e96fa47df808",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "42700693-da60-459a-8b4a-378a1a1ce20f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c0316954-6593-4ea6-8614-733d3cb4a223",
                            "title": "GET /Powerform/{sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid} core service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid)\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "89bc4410-dee4-4b81-b02b-2388db06f7f6",
                                    "parentUUID": "c0316954-6593-4ea6-8614-733d3cb4a223",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "89bc4410-dee4-4b81-b02b-2388db06f7f6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "c87fac71-38b6-415f-ba0b-80877fa22508",
                            "title": "GET /Powerform/{sid}/detail",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a4ded8f3-003e-4c76-afea-9114cf36055c",
                                    "parentUUID": "c87fac71-38b6-415f-ba0b-80877fa22508",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a4ded8f3-003e-4c76-afea-9114cf36055c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7b647e5b-94aa-4d99-8e6f-05e7454e9c8b",
                            "title": "GET /Powerform/{sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/delete core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "4c388c8b-b691-4119-8634-d9f24b2fee12",
                                    "parentUUID": "7b647e5b-94aa-4d99-8e6f-05e7454e9c8b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4c388c8b-b691-4119-8634-d9f24b2fee12"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "8e134c3e-20f5-458d-b000-87b99d335a8a",
                    "title": "Core Service Process",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                    "file": "/test/process.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken();\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nprc = { Name: new Date().toISOString(), Description: \"Qa Automation\", CategorySID: test_data.category_sid }",
                            "err": {},
                            "uuid": "3977e4eb-c982-4b74-87fa-20ad4a7d1567",
                            "parentUUID": "8e134c3e-20f5-458d-b000-87b99d335a8a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "171cebea-0c81-4d18-8510-372e667b1874",
                            "title": "POST /process​/create|delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service",
                                    "timedOut": false,
                                    "duration": 117,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/process/create')\n    .set('Authorization', 'Bearer ' + token)\n    .send(prc)\np1 = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "0d60665d-9298-4c9a-ad9e-4d798b979ae9",
                                    "parentUUID": "171cebea-0c81-4d18-8510-372e667b1874",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | Delete",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service | Delete",
                                    "timedOut": false,
                                    "duration": 220,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/process/' + p1 + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nconsole.log(res);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5d6641cd-2ced-439f-8f96-d41cb82bb429",
                                    "parentUUID": "171cebea-0c81-4d18-8510-372e667b1874",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0d60665d-9298-4c9a-ad9e-4d798b979ae9",
                                "5d6641cd-2ced-439f-8f96-d41cb82bb429"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 337,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b31ddfb3-d27a-4ee0-98c3-49de91c5017a",
                            "title": "GET /process/{sid}/copy",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /process/{sid}/copy core service",
                                    "timedOut": false,
                                    "duration": 921,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/' + test_data.process_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            expect(res.status).to.equal(200);\n            //delete copied process\n            let del = await chai.request(newUrlBase)\n                .get('/process/' + res.text + '/delete')\n                .set('Authorization', 'Bearer ' + token)\n            expect(del.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "d5925f00-753f-46f9-aa25-108d9f8937c0",
                                    "parentUUID": "b31ddfb3-d27a-4ee0-98c3-49de91c5017a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d5925f00-753f-46f9-aa25-108d9f8937c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 921,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "cce5cf4f-fe5d-4c62-bb8a-66e9a2e28948",
                            "title": "GET /processes",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes core service",
                                    "timedOut": false,
                                    "duration": 93,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "023e54ec-ea5c-4ba4-94e2-bdd412bfe47b",
                                    "parentUUID": "cce5cf4f-fe5d-4c62-bb8a-66e9a2e28948",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "023e54ec-ea5c-4ba4-94e2-bdd412bfe47b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 93,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "57290b99-adfc-408f-b08b-b7ebb4622d67",
                            "title": "GET /processes/{SID}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{SID} core service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a55fbc22-8f04-468e-9c62-1cc0b9e89fa3",
                                    "parentUUID": "57290b99-adfc-408f-b08b-b7ebb4622d67",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a55fbc22-8f04-468e-9c62-1cc0b9e89fa3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "53837f9b-12ea-4aae-8271-6f1984842885",
                            "title": "GET /processes/{sid}/detail",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "41bf9461-301e-453f-8147-8db6cd22bf8c",
                                    "parentUUID": "53837f9b-12ea-4aae-8271-6f1984842885",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "41bf9461-301e-453f-8147-8db6cd22bf8c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "33f9338a-3b35-4d57-a924-099e5dec9d49",
                            "title": "GET /processes/{sid}/name",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/name core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/name')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b2e67e17-9be1-4b3d-b02b-978b680cb765",
                                    "parentUUID": "33f9338a-3b35-4d57-a924-099e5dec9d49",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b2e67e17-9be1-4b3d-b02b-978b680cb765"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0440b04c-00f6-43a3-83a8-245fc5719d8e",
                            "title": "GET ​/processes​/{sid}​/summary",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET ​/processes​/{sid}​/summary core service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/summary')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "cda0330f-279b-4b43-b193-cdcc9f77316b",
                                    "parentUUID": "0440b04c-00f6-43a3-83a8-245fc5719d8e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cda0330f-279b-4b43-b193-cdcc9f77316b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3007b94e-eeed-4033-b790-c47b2b6c6581",
                            "title": "​GET /processes​/{process_sid}​/tasks",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process ​GET /processes​/{process_sid}​/tasks core service",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "dff106e2-b89b-4e7c-8d51-af069aa1708d",
                                    "parentUUID": "3007b94e-eeed-4033-b790-c47b2b6c6581",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dff106e2-b89b-4e7c-8d51-af069aa1708d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e5f4a008-545e-40a1-9cfe-ec74c3bf4c4f",
                            "title": "GET /processes/{process_sid}/tasks/{task_sid}/rules",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{process_sid}/tasks/{task_sid}/rules core service",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "e24d1ab5-9136-4a2f-a299-7f6e4e81550c",
                                    "parentUUID": "e5f4a008-545e-40a1-9cfe-ec74c3bf4c4f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e24d1ab5-9136-4a2f-a299-7f6e4e81550c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f061c1d7-e14f-465b-8878-2b3891b6d8da",
                            "title": "POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete ",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/update/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(rule)\nsids.one = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b9e90375-3f4c-4db5-bdcc-e586a12a1eb2",
                                    "parentUUID": "f061c1d7-e14f-465b-8878-2b3891b6d8da",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | reorder",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service | reorder",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let reorder = { \"SID\": sids.two, \"Ordinal\": 2, \"ConditionType\": 1, \"MatchGuid\": \"\", \"RecipientSID\": null, \"DestinationAction\": \"0\" }\nlet res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/reorder/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(reorder)\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "e46e5d45-c47d-4264-9ae5-741d660ba245",
                                    "parentUUID": "f061c1d7-e14f-465b-8878-2b3891b6d8da",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b9e90375-3f4c-4db5-bdcc-e586a12a1eb2",
                                "e46e5d45-c47d-4264-9ae5-741d660ba245"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 54,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "8584953e-2515-4d12-b1f8-13e501a5c3da",
                    "title": "Core Service processes/tasks",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                    "file": "/test/processTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service processes/tasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nrecipient = [{ \"BaseObjectSID\": \"\", \"ContactType\": 2, \"ReferenceObjectSID\": \"\", \"SID\": test_data.contact_sid }]",
                            "err": {},
                            "uuid": "a2cd3734-dacb-46c1-9b1f-c7cfd54b92f9",
                            "parentUUID": "8584953e-2515-4d12-b1f8-13e501a5c3da",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d2b0a675-c051-4368-9ed6-b17c5a4d090b",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.task_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "b26e27c8-82e0-4810-9c6d-0620939f48ca",
                                    "parentUUID": "d2b0a675-c051-4368-9ed6-b17c5a4d090b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b26e27c8-82e0-4810-9c6d-0620939f48ca"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7ccd16c5-e599-484a-9969-2c2957ab0951",
                            "title": "GET {task_sid}/copy",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/copy core-service",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/tasks/' + test_data.task_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            //console.log(res.body);\n            expect(res.status).to.equal(200);\n            expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "a84f369f-d2cb-4a3d-9237-e7c2bf14da80",
                                    "parentUUID": "7ccd16c5-e599-484a-9969-2c2957ab0951",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a84f369f-d2cb-4a3d-9237-e7c2bf14da80"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 59,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b8a75b89-29b7-4a60-b959-259bf3d90e92",
                            "title": "GET {task_sid}/notification",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification core-service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "ca1debac-69e5-439e-8dd3-3444a0807b80",
                                    "parentUUID": "b8a75b89-29b7-4a60-b959-259bf3d90e92",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ca1debac-69e5-439e-8dd3-3444a0807b80"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "48444aaf-7df2-4d0e-85ac-870515c67a9a",
                            "title": "GET {task_sid}/notification/restore",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/restore core-service",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/restore')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "0627e0af-a3ff-40b2-bfa9-dfcabc2d52bc",
                                    "parentUUID": "48444aaf-7df2-4d0e-85ac-870515c67a9a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0627e0af-a3ff-40b2-bfa9-dfcabc2d52bc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "10827c8f-fd71-4d82-a60a-cc8207ad2762",
                            "title": "GET {task_sid}/notification/{enabledisable}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/{enabledisable} core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/enabled')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "b8b804c4-2531-4564-96e7-7ea7b59c368a",
                                    "parentUUID": "10827c8f-fd71-4d82-a60a-cc8207ad2762",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b8b804c4-2531-4564-96e7-7ea7b59c368a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f95e7646-d45b-4b2f-b8f0-c3b7e92b21e8",
                            "title": "POST notification/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST notification/save core-service",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/notification/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(notification)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "b3ef41ce-42a3-445e-a766-f7f88b851726",
                                    "parentUUID": "f95e7646-d45b-4b2f-b8f0-c3b7e92b21e8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b3ef41ce-42a3-445e-a766-f7f88b851726"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5f8ee1e3-1082-4aa3-9756-3a291433c414",
                            "title": "GET {task_sid}/notification/advancedsettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/advancedsettings core-service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/advancesettings')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "60639f3b-efe5-497b-8873-d46f5a461fa7",
                                    "parentUUID": "5f8ee1e3-1082-4aa3-9756-3a291433c414",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "60639f3b-efe5-497b-8873-d46f5a461fa7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b125e15d-9305-44f4-b7fe-da1ad428ea2f",
                            "title": "GET {task_sid}/recipients",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipients core-service",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "5de037b0-69db-48d2-b42b-092256967f72",
                                    "parentUUID": "b125e15d-9305-44f4-b7fe-da1ad428ea2f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5de037b0-69db-48d2-b42b-092256967f72"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "94fc2a52-accb-4bd7-b15b-5c83a1ac5ecf",
                            "title": "POST {task_sid}/recipients/add",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/add core-service",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/add')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "d72ddecb-e83b-4df5-b578-9c7c5f5a407c",
                                    "parentUUID": "94fc2a52-accb-4bd7-b15b-5c83a1ac5ecf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d72ddecb-e83b-4df5-b578-9c7c5f5a407c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fc5ff594-de21-446d-b7cc-b94af7367799",
                            "title": "POST {task_sid}/recipients/remove",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/remove core-service",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/remove')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "d7e1871c-39aa-4a57-a448-a54ccda6f050",
                                    "parentUUID": "fc5ff594-de21-446d-b7cc-b94af7367799",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d7e1871c-39aa-4a57-a448-a54ccda6f050"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b2e9ed00-7f87-462d-8a12-94d156f56426",
                            "title": "GET {task_sid}/recipsettings",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipsettings core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipsettings/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n// expect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "edfc9515-f9ba-4155-beb2-6ec1773dfed5",
                                    "parentUUID": "b2e9ed00-7f87-462d-8a12-94d156f56426",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "edfc9515-f9ba-4155-beb2-6ec1773dfed5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4ebe85e6-2c01-431e-a7ae-06ecc9347151",
                            "title": "GET task_sid}/recipients/dynamic",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET task_sid}/recipients/dynamic core-service",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/dynamic/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body.TotalItemCnt).to.exist;",
                                    "err": {},
                                    "uuid": "d7118f77-36eb-4276-a8cf-86796eccde00",
                                    "parentUUID": "4ebe85e6-2c01-431e-a7ae-06ecc9347151",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d7118f77-36eb-4276-a8cf-86796eccde00"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "2285fca4-ff71-4e21-bf98-5848dfe8425c",
                    "title": "Core Service systemmessages",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                    "file": "/test/systemmessage.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service systemmessages \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "1fedcb2f-a7bd-4a7c-9410-561949e893f0",
                            "parentUUID": "2285fca4-ff71-4e21-bf98-5848dfe8425c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cd14cbfb-781a-4f74-8319-90e1cbfe66c7",
                            "title": "POST /systemmessages/save",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service systemmessages POST /systemmessages/save it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/systemmessages/save/script/')\n      .set('Authorization', 'Bearer ' + token)\n      .send(testMsg)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\n\n// verify systemMessage is in the list\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.MessageBody == testMsg.MessageBody);\nexpect(idx).to.be.greaterThan(-1);",
                                    "err": {},
                                    "uuid": "128160ae-66cd-4719-b2d8-ccfc64448b1d",
                                    "parentUUID": "cd14cbfb-781a-4f74-8319-90e1cbfe66c7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "128160ae-66cd-4719-b2d8-ccfc64448b1d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 59,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "013acaba-d321-4304-9f41-bda4d9e5607c",
                            "title": "GET /systemmessages/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET all systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/list it should GET all systemmessages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "35c4498e-d66b-4714-b953-4929089236c5",
                                    "parentUUID": "013acaba-d321-4304-9f41-bda4d9e5607c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "35c4498e-d66b-4714-b953-4929089236c5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "18fa75bc-2a44-45ff-adb3-e0c47842f0a6",
                            "title": "GET /systemmessages/active/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET active systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/active/list it should GET active systemmessages",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/active/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "cf8b85c9-171d-4fd0-a2f3-e60a5547ceef",
                                    "parentUUID": "18fa75bc-2a44-45ff-adb3-e0c47842f0a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cf8b85c9-171d-4fd0-a2f3-e60a5547ceef"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0ac14905-08a6-4f20-babc-3b24cc41a97a",
                            "title": "/systemmessages/{sid}}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET system message by SID",
                                    "fullTitle": "Core Service systemmessages /systemmessages/{sid}} it should GET system message by SID",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n             .get('/systemmessages/list/script/')\n             .set('Authorization', 'Bearer ' + token);\n       \n             expect(res.status).to.equal(200);\n             expect(res.body.Items).to.exist;\n             const testSystemMsgSID = res.body.Items[0].SID;\n             res = await chai.request(newUrlBase)\n             .get(`/systemmessages/${testSystemMsgSID}/script/`)\n             .set('Authorization', 'Bearer ' + token);\n             expect(res.status).to.equal(200);\n             expect(res.body.SID).to.equal(testSystemMsgSID);",
                                    "err": {},
                                    "uuid": "52d9bc7d-7fff-45b7-b745-d8b2f358d0ed",
                                    "parentUUID": "0ac14905-08a6-4f20-babc-3b24cc41a97a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "52d9bc7d-7fff-45b7-b745-d8b2f358d0ed"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "36bef871-d8d2-482e-ad5a-f1b6a12fe0dd",
                            "title": "GET /systemmessages/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should DELETE system message",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/delete it should DELETE system message",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n      \nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst testSystemMsgSID = res.body.Items[0].SID;\nres = await chai.request(newUrlBase)\n  .post('/systemmessages/delete/script/') \n  .set('Authorization', 'Bearer ' + token)\n  .send([testSystemMsgSID])\n        \nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n        \n// verify that system message is not in the list anymore\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testSystemMsgSID);\nexpect(idx).to.equal(-1);",
                                    "err": {},
                                    "uuid": "5cb51f02-6b25-4dbc-a283-9c48fc0e4e68",
                                    "parentUUID": "36bef871-d8d2-482e-ad5a-f1b6a12fe0dd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5cb51f02-6b25-4dbc-a283-9c48fc0e4e68"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 23,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "d11ab36e-edc5-41ec-a48f-c9e029462ae1",
                    "title": "Core Service System Process",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemProcess.test.js",
                    "file": "/test/systemProcess.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service System Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "7b844db2-aa12-40c1-a0e4-a44c26a40ef6",
                            "parentUUID": "d11ab36e-edc5-41ec-a48f-c9e029462ae1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2a8f07bf-47cf-4dd9-be14-dd3fcd4b8cf0",
                            "title": "GET S/SystemProcess/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemProcess.test.js",
                            "file": "/test/systemProcess.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service System Process GET S/SystemProcess/list it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/SystemProcess/list')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "049ef557-580f-4961-a2cf-f45afe727519",
                                    "parentUUID": "2a8f07bf-47cf-4dd9-be14-dd3fcd4b8cf0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "049ef557-580f-4961-a2cf-f45afe727519"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "8995a873-9c0e-4af1-8fcd-cc844fb3c3a2",
                    "title": "Core Service system Settings",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemSettings.test.js",
                    "file": "/test/systemSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service system Settings \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "541edae8-3af5-4903-95e7-54aadae3d9c7",
                            "parentUUID": "8995a873-9c0e-4af1-8fcd-cc844fb3c3a2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d4fa496c-f0d5-4bd8-9c8c-c58cb281ad8c",
                            "title": "GET /systemsettings/list",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/systemSettings.test.js",
                            "file": "/test/systemSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service system Settings GET /systemsettings/list core-service",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/systemsettings/list/script/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n// expect(res.body.InstanceSID).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "8c5b3fb3-a73d-4cac-93ff-319cc0c1600e",
                                    "parentUUID": "d4fa496c-f0d5-4bd8-9c8c-c58cb281ad8c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8c5b3fb3-a73d-4cac-93ff-319cc0c1600e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 57,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "3d5bcacc-dc73-4be9-9fed-4bf4032faceb",
                    "title": "Core Service Tabs",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                    "file": "/test/tabs.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Tabs \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "d91bbe7f-c043-4e6d-8db5-8621aa845423",
                            "parentUUID": "3d5bcacc-dc73-4be9-9fed-4bf4032faceb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "73c1e5a4-131f-4a6a-ad87-2603991be063",
                            "title": "GET {sid}",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service Tabs GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "a9f982ff-8792-42b9-ae40-1f75a636f054",
                                    "parentUUID": "73c1e5a4-131f-4a6a-ad87-2603991be063",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a9f982ff-8792-42b9-ae40-1f75a636f054"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 53,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4e774e16-a3bf-43c8-8510-cc148014324c",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service ",
                                    "fullTitle": "Core Service Tabs GET {sid}/delete core-service ",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "3adf13f1-e4f1-4b14-b73a-8d85e2603828",
                                    "parentUUID": "4e774e16-a3bf-43c8-8510-cc148014324c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3adf13f1-e4f1-4b14-b73a-8d85e2603828"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "34f4642a-7148-42a5-9385-1c979b9932d5",
                    "title": "Core Service Utilities",
                    "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                    "file": "/test/utilities.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Utilities \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "9fc77da2-a50d-4008-b49e-d32dea3d4ce1",
                            "parentUUID": "34f4642a-7148-42a5-9385-1c979b9932d5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e49962ca-3b4f-498e-826a-f17f90fad57d",
                            "title": "locale",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities locale core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/Utilities/locales/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            // expect(res.text).to.exist;\n            // expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "ea0074a7-3277-4027-b759-3cac2113606d",
                                    "parentUUID": "e49962ca-3b4f-498e-826a-f17f90fad57d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ea0074a7-3277-4027-b759-3cac2113606d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "8a074bc9-0ff4-468d-b692-b5dfef1d645c",
                            "title": "GET /Utilities/timezone",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/timezone core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/timezone')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Etc/GMT+12');",
                                    "err": {},
                                    "uuid": "0a282cdf-2827-497f-bedb-9899056c5e94",
                                    "parentUUID": "8a074bc9-0ff4-468d-b692-b5dfef1d645c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0a282cdf-2827-497f-bedb-9899056c5e94"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4c76d6a0-62c6-4019-9bd4-e6e14daa9049",
                            "title": "GET /Utilities/languages",
                            "fullFile": "/home/rich/integrify/1_PLUS/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/languages core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/languages/script/')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0].indexOf('US English')).not.to.equal(-1);",
                                    "err": {},
                                    "uuid": "c8ae17cf-928c-42b0-b5d2-8ea6060bb692",
                                    "parentUUID": "4c76d6a0-62c6-4019-9bd4-e6e14daa9049",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c8ae17cf-928c-42b0-b5d2-8ea6060bb692"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 100000
        },
        {
            "uuid": "6bc52542-68bc-46b4-9bfd-83ffc5711c5a",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "3c8698d8-c0fa-40bb-9ea9-c246c5a1ca73",
                    "title": "Integrify Libs JWT Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                    "file": "/test/integration/auth/jwt.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "107a64dc-2959-4c25-ac40-63d33a9a8205",
                            "parentUUID": "3c8698d8-c0fa-40bb-9ea9-c246c5a1ca73",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6bcc3f53-5770-41bf-a66d-a8f1cb3acce5",
                            "title": "getSystemToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a system token",
                                    "fullTitle": "Integrify Libs JWT Tests getSystemToken should return a system token",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet token = await jwt.getSystemToken(process.env.INTEGRIFY_ENV_TOKEN, tenant)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "be5a970e-3684-41ad-b1fe-97a4b6b05f0f",
                                    "parentUUID": "6bcc3f53-5770-41bf-a66d-a8f1cb3acce5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "be5a970e-3684-41ad-b1fe-97a4b6b05f0f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ae3d1e66-79f2-452d-9722-fd1c00e37d23",
                            "title": "createRefreshToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests createRefreshToken should return a refresh token",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(refreshToken).to.exist;\nexpect(exists !== null).to.be.true",
                                    "err": {},
                                    "uuid": "d5b39a18-11d6-4dff-b1c3-a21609c4b533",
                                    "parentUUID": "ae3d1e66-79f2-452d-9722-fd1c00e37d23",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d5b39a18-11d6-4dff-b1c3-a21609c4b533"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e9c0b53d-fed7-4d63-8915-5f856d554a8e",
                            "title": "verifyRefreshToken",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for the non-expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return true for the non-expired token",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.exist",
                                    "err": {},
                                    "uuid": "2008c648-9d8d-4414-bc0b-d4d7043c8385",
                                    "parentUUID": "e9c0b53d-fed7-4d63-8915-5f856d554a8e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for the expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return false for the expired token",
                                    "timedOut": false,
                                    "duration": 5005,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, options)\nawait delay(5000);\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.be.false\nexists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(exists === null).to.be.true",
                                    "err": {},
                                    "uuid": "e7c175ca-f051-4260-aebd-9c7aeb1b398b",
                                    "parentUUID": "e9c0b53d-fed7-4d63-8915-5f856d554a8e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2008c648-9d8d-4414-bc0b-d4d7043c8385",
                                "e7c175ca-f051-4260-aebd-9c7aeb1b398b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5007,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4f154b65-aec6-4f6b-81fb-fe641d7e71ea",
                            "title": "issueJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests issueJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 15\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\n//let exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\noptions.expiresInAmount = 5\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "d6ad55db-2e05-40ab-9261-b4273244944a",
                                    "parentUUID": "4f154b65-aec6-4f6b-81fb-fe641d7e71ea",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d6ad55db-2e05-40ab-9261-b4273244944a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4d96d4f7-ad2f-4128-9ff7-94f6da98c22f",
                            "title": "verifyJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nlet verified = jwt.verifyJwt(token, options);\nexpect(verified).to.exist",
                                    "err": {},
                                    "uuid": "9b565a7a-0991-49c4-a002-eb65868efe01",
                                    "parentUUID": "4d96d4f7-ad2f-4128-9ff7-94f6da98c22f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail for an expired JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should fail for an expired JWT",
                                    "timedOut": false,
                                    "duration": 5005,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000);\nlet verified, error;\ntry {\n   verified = await jwt.verifyJwt(token, options)\n} catch(e) {\n    error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\nexpect(verified).to.not.exist",
                                    "err": {},
                                    "uuid": "18e32aaa-746f-48a5-ae0e-8ce3f7a9fac1",
                                    "parentUUID": "4d96d4f7-ad2f-4128-9ff7-94f6da98c22f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9b565a7a-0991-49c4-a002-eb65868efe01",
                                "18e32aaa-746f-48a5-ae0e-8ce3f7a9fac1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5007,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "1c523757-7af3-45f5-a842-13b6be80b24d",
                            "title": "renewJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an expired token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should return a new JWT using a valid refresh token and an expired token",
                                    "timedOut": false,
                                    "duration": 3011,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(3000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntoken = await jwt.renewJwt(token,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "fd2f0f69-c3ed-4cc2-b1a6-c9ac1b13d8ba",
                                    "parentUUID": "1c523757-7af3-45f5-a842-13b6be80b24d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail to return a new JWT using a invalid refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should fail to return a new JWT using a invalid refresh token",
                                    "timedOut": false,
                                    "duration": 5011,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 2;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntry {\n    token = await jwt.renewJwt(token,refreshToken, options)\n} catch(e) {\n    error = e\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")",
                                    "err": {},
                                    "uuid": "19c54bb6-7418-4e0e-aac2-c0c62e6ce8c5",
                                    "parentUUID": "1c523757-7af3-45f5-a842-13b6be80b24d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fd2f0f69-c3ed-4cc2-b1a6-c9ac1b13d8ba",
                                "19c54bb6-7418-4e0e-aac2-c0c62e6ce8c5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8022,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "082d792e-8650-4ad3-b1a8-c0aa4d4abc90",
                            "title": "reIssueJwt",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an Contact",
                                    "fullTitle": "Integrify Libs JWT Tests reIssueJwt should return a new JWT using a valid refresh token and an Contact",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\ntoken = await jwt.reIssueJwt(Contact,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "488d7af7-4e40-461f-ae65-359cacc0cbc0",
                                    "parentUUID": "082d792e-8650-4ad3-b1a8-c0aa4d4abc90",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "488d7af7-4e40-461f-ae65-359cacc0cbc0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f6adec9b-5601-4e34-bde6-47ee8f358cf7",
                    "title": "Integrify Libs Config Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                    "file": "/test/integration/config/config.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "eb452329-f939-47b4-be3c-e1ad47faac4e",
                            "title": "Config",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                            "file": "/test/integration/config/config.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Config Tests Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "74412e09-0489-4366-84ad-005a386f7ad5",
                                    "parentUUID": "eb452329-f939-47b4-be3c-e1ad47faac4e",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "c83b45db-b610-4cf2-be51-1667e98447e8",
                                    "title": "get a config from redis",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Config Tests Config get a config from redis should have config.mongo",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(config.mongo).to.exist;\n                //expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "d4b9d7fa-c0de-48d8-ad7c-4d5da2baf9d8",
                                            "parentUUID": "c83b45db-b610-4cf2-be51-1667e98447e8",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "d4b9d7fa-c0de-48d8-ad7c-4d5da2baf9d8"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 0,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a1ebca7b-64f5-4026-8508-d7e2f78d6850",
                    "title": "Integrify Libs Logger Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                    "file": "/test/integration/logger/logger.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bae8d7f4-67e1-45c8-9bc8-59dcadf5ecda",
                            "title": "Logger",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                            "file": "/test/integration/logger/logger.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Logger Tests Logger \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "4808bcc7-7ab1-456d-a32b-8c5562fdb119",
                                    "parentUUID": "bae8d7f4-67e1-45c8-9bc8-59dcadf5ecda",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "26954267-a2b0-4fe4-83d2-8cea41789e23",
                                    "title": "info",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/logger/logger.test.js",
                                    "file": "/test/integration/logger/logger.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect log a message",
                                            "fullTitle": "Integrify Libs Logger Tests Logger info should connect log a message",
                                            "timedOut": false,
                                            "duration": 5,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "logger.info(config.tenantOne.tenantId);\n  \nexpect(logger).to.exist;\n              \n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "6d4fdead-87f2-48f4-88fd-c903182357a0",
                                            "parentUUID": "26954267-a2b0-4fe4-83d2-8cea41789e23",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "6d4fdead-87f2-48f4-88fd-c903182357a0"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 5,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d5ef0b7c-2060-422d-85ac-d8294d9895ff",
                    "title": "Integrify Libs Parse JWT Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                    "file": "/test/integration/middleware/parseJWT.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Parse JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);        config = await Config.getConfig()\nContact = {\n    contactSid: \"1234\",\n    userName: \"testuser\",\n    tenant: config.test.tenantOne.tenantId,\n    email: \"test@test.com\",\n    name: \"Test User\"\n}\nrefreshTokenPayload = {userName: Contact.userName, contactSid: Contact.contactSid}",
                            "err": {},
                            "uuid": "564d29d5-e145-40f5-9f19-c9eb4e695bb6",
                            "parentUUID": "d5ef0b7c-2060-422d-85ac-d8294d9895ff",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f03eed4e-edee-48d6-97e1-7a79afbce1f9",
                            "title": "parse token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": config.test.tenantOne.tenantId});\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "8452f8c5-c406-43d9-8ec7-2ed104a78e39",
                                    "parentUUID": "f03eed4e-edee-48d6-97e1-7a79afbce1f9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8452f8c5-c406-43d9-8ec7-2ed104a78e39"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "084539e7-136a-4f2c-8b91-335f76010f2a",
                            "title": "auto refresh and parse token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests auto refresh and parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 20028,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(Contact.tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": Contact.tenant, expiresIn:1});\n           \nawait delay(20000)\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\n          \nlet mockRes = await mocks.mockResponse();\n\nawait parseJWT(req, mockRes, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "d0d668a7-e5b8-442d-b54c-80a69bc248d6",
                                    "parentUUID": "084539e7-136a-4f2c-8b91-335f76010f2a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d0d668a7-e5b8-442d-b54c-80a69bc248d6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20028,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "6e24299b-3ee8-4952-85e5-bdb63a013d96",
                            "title": "use system token",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests use system token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let req = {headers: {\"integrify-system-token\": config.test.tenantOne.tenantId + \" \" +  process.env.INTEGRIFY_ENV_TOKEN}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"d8c469c3-f781-4179-a09c-6d148885fb30\");\nexpect(req.oauth.profile.user_name).to.equal(\"Integrify\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "4868c3f1-2b90-4c07-b682-3c651c3382a3",
                                    "parentUUID": "6e24299b-3ee8-4952-85e5-bdb63a013d96",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4868c3f1-2b90-4c07-b682-3c651c3382a3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "7ce16afa-c26c-48f4-aedb-ec67358a277c",
                    "title": "Integrify Libs Mongeese Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                    "file": "/test/integration/mongeese/db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "56d3c560-ce3c-401b-b883-03c532f51ec3",
                            "title": "Mongeese",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                            "file": "/test/integration/mongeese/db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Mongeese Tests Mongeese \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconsole.log(config)\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "45f34698-8007-44ac-90ac-ea05108ce383",
                                    "parentUUID": "56d3c560-ce3c-401b-b883-03c532f51ec3",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "b823fa5d-8621-4f10-8fa3-a067a8f0f653",
                                    "title": "mongoConn",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/mongeese/db.test.js",
                                    "file": "/test/integration/mongeese/db.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect to mongo based on a tenant id",
                                            "fullTitle": "Integrify Libs Mongeese Tests Mongeese mongoConn should connect to mongo based on a tenant id",
                                            "timedOut": false,
                                            "duration": 8,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const tenantId = await config.tenantOne.tenantId;\nvar db = await mongeese.getConn(tenantId);\n    \nexpect(db).to.exist;\nexpect(db.name).to.equal(tenantId);\nexpect(db.readyState).to.equal(2);\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "a20614c9-a0ec-4261-b790-dec74a97108f",
                                            "parentUUID": "b823fa5d-8621-4f10-8fa3-a067a8f0f653",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a20614c9-a0ec-4261-b790-dec74a97108f"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 8,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0bcf3c19-13b8-4d1b-9f98-bed73af4e6f1",
                    "title": "Integrify Libs Permissions Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                    "file": "/test/integration/permissions/permissions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet config = await Config.getConfig();\nconfig = config.test;\nsession = {user_sid: config.tenantOne.adminUser.sid.toLowerCase(), user_name: config.tenantOne.adminUser.userName, tenant: config.tenantOne.tenantId }\nlet deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\nconsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                            "err": {},
                            "uuid": "af7da99b-2056-409c-95e0-14d4d37cf898",
                            "parentUUID": "0bcf3c19-13b8-4d1b-9f98-bed73af4e6f1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);",
                            "err": {},
                            "uuid": "9d7000f7-46b8-4b7f-9e02-f20f5b95aab6",
                            "parentUUID": "0bcf3c19-13b8-4d1b-9f98-bed73af4e6f1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bb6280c3-0e5a-4f44-bdb3-48d4c7a88315",
                            "title": "currentUserPermssions",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests currentUserPermssions should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 240,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.currentUserPermissions(session);\nlet cached =  await redis.getAsync([`${session.tenant}.permissions.${session.user_sid}`]);\ncached = JSON.parse(cached)\nexpect(perms).length.to.be.gt(0);\nexpect(cached.length).to.equal(perms.length)",
                                    "err": {},
                                    "uuid": "5b263fdc-ec47-40b4-acb9-b85970f294fb",
                                    "parentUUID": "bb6280c3-0e5a-4f44-bdb3-48d4c7a88315",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5b263fdc-ec47-40b4-acb9-b85970f294fb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 240,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "224f6825-0259-4ef3-b167-d2ef794b3520",
                            "title": "isSysAdmin",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests isSysAdmin should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.exist",
                                    "err": {},
                                    "uuid": "25471ba1-0bc3-4a3e-bf28-cb5af236ce8b",
                                    "parentUUID": "224f6825-0259-4ef3-b167-d2ef794b3520",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "25471ba1-0bc3-4a3e-bf28-cb5af236ce8b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a597bdbb-100d-4929-9481-890f5e55821b",
                            "title": "hasPermissions",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for sysAdmin permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for sysAdmin permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.sysAdmin);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\", \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "9aa7c3fb-11b0-4cc3-9812-48bb3ff94699",
                                    "parentUUID": "a597bdbb-100d-4929-9481-890f5e55821b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for System scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for System scoped permissions",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.systemScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\",\n    \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.be.undefined",
                                    "err": {},
                                    "uuid": "ef55ad87-c108-4e43-9a96-f0c9cfe45109",
                                    "parentUUID": "a597bdbb-100d-4929-9481-890f5e55821b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for category scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for category scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.categoryScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    mocks.categoryScoped[0].ownerSid,\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "706e37ee-7daf-4b34-ac24-fc5e03bae48c",
                                    "parentUUID": "a597bdbb-100d-4929-9481-890f5e55821b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for Object scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for Object scoped permissions",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "fbf1f381-bf5c-4f4c-9f10-54de7e7f7df5",
                                    "parentUUID": "a597bdbb-100d-4929-9481-890f5e55821b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for Object scoped permissions with wrong publish status",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for Object scoped permissions with wrong publish status",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    \"production\");\nexpect(hasPerms).to.be.false;",
                                    "err": {},
                                    "uuid": "d75a8147-49b9-47e2-8665-4cef0abee848",
                                    "parentUUID": "a597bdbb-100d-4929-9481-890f5e55821b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for bogus permission type",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for bogus permission type",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edizt',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.false;\nhasPerms = await permissions.hasPermissions(session,\n    'holiday',\n    'viewconfig');\nexpect(hasPerms).to.be.false",
                                    "err": {},
                                    "uuid": "c51f343a-f7a9-4ac4-8181-78b3f0139937",
                                    "parentUUID": "a597bdbb-100d-4929-9481-890f5e55821b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9aa7c3fb-11b0-4cc3-9812-48bb3ff94699",
                                "ef55ad87-c108-4e43-9a96-f0c9cfe45109",
                                "706e37ee-7daf-4b34-ac24-fc5e03bae48c",
                                "fbf1f381-bf5c-4f4c-9f10-54de7e7f7df5",
                                "d75a8147-49b9-47e2-8665-4cef0abee848",
                                "c51f343a-f7a9-4ac4-8181-78b3f0139937"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f728626b-c366-4c86-bda3-b03e40ee0e7d",
                    "title": "Integrify Libs Contact Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/contacts.test.js",
                    "file": "/test/integration/sqldb/contacts.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/contacts.test.js",
                            "file": "/test/integration/sqldb/contacts.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "51627e29-e18a-43bf-8088-a43de3dc2920",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContact",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ContactModel = await model.getModel(config.test.tenantOne.tenantId, 'Contact')\n//console.dir(ContactModel)\nlet results = await ContactModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleContactGuid = results[0].contactGuid\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContact(sampleContactGuid);\nexpect(Contact).to.exist;\nexpect(Contact.contactGuid).equal(sampleContactGuid)",
                                    "err": {},
                                    "uuid": "deedc8e5-11ca-45b3-9a5d-dddce89eed9e",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getContactByUserName",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContactByUserName",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nlet sampleUserName = user.userName\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContactByUserName(sampleUserName);\nexpect(Contact).to.exist;\nexpect(Contact.userName).equal(sampleUserName)",
                                    "err": {},
                                    "uuid": "8f8c5ff7-a78c-4b49-bd14-aeb9d66098fa",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should searchContacts",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should searchContacts",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne)\n            let Contacts = await contactController.searchContacts({'auth.userName': 'iApprov', firstName: 'Sys', lastName: 'S'});\n            expect(Contacts[0]).to.exist;\n            expect(Contacts[0].userName).equal('iApprove')\n            Contacts = await contactController.searchContacts({'auth.userName': 'iApprove'});\n            let Contact = Contacts[0]\n            expect(Contact).to.exist;\n            expect(Contact.userName).equal('iApprove')",
                                    "err": {},
                                    "uuid": "30b4e7ec-48e6-41dc-a8b1-3d8992c067aa",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should dbAuthContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should dbAuthContact",
                                    "timedOut": false,
                                    "duration": 117,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            expect(Contact.token).to.exist;\n            expect(Contact.refreshToken).to.exist;\n            expect(Contact.userName).equal(user.userName);",
                                    "err": {},
                                    "uuid": "7789353b-efd9-40ca-a457-34244c46e207",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getGroupSids",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getGroupSids",
                                    "timedOut": false,
                                    "duration": 101,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            let groupSids = await contactController.getGroupSids(Contact.contactSid)\n            expect(groupSids.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "0f3f6205-6a9b-45bc-b7ee-0e64d633efcb",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getAccountsByEmail",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getAccountsByEmail",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contacts = await contactController.getAccountsByEmail(config.test.tenantOne.adminUser.email);\nexpect(Contacts.length).to.be.gt(0);\nContacts.forEach(contact => {\n  expect(contact).to.have.all.keys('contactGuid', 'ntId', 'email');\n  expect(contact.email).to.equal(config.test.tenantOne.adminUser.email);\n});",
                                    "err": {},
                                    "uuid": "329be712-2456-46fe-be93-e010d3453555",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should updatePassword",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should updatePassword",
                                    "timedOut": false,
                                    "duration": 135,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contact = await contactController.updatePassword(\n  config.test.tenantOne.adminUser.sid,\n  bcrypt.hashSync(config.test.tenantOne.adminUser.password)\n);\nexpect(Contact).to.exist\n  .and.to.equal(1)",
                                    "err": {},
                                    "uuid": "1b50e001-0538-4a69-a024-1f3d9fe118a1",
                                    "parentUUID": "739298a1-ec62-4ee3-ad5d-ba71300fa67f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "deedc8e5-11ca-45b3-9a5d-dddce89eed9e",
                                "8f8c5ff7-a78c-4b49-bd14-aeb9d66098fa",
                                "30b4e7ec-48e6-41dc-a8b1-3d8992c067aa",
                                "7789353b-efd9-40ca-a457-34244c46e207",
                                "0f3f6205-6a9b-45bc-b7ee-0e64d633efcb",
                                "329be712-2456-46fe-be93-e010d3453555",
                                "1b50e001-0538-4a69-a024-1f3d9fe118a1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 422,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5942ee8c-a05d-4461-be2b-d6950af30130",
                    "title": "Integrify Libs Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/controller.test.js",
                    "file": "/test/integration/sqldb/controller.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1a623993-4a86-4b57-bcce-1146f55be37e",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/controller.test.js",
                            "file": "/test/integration/sqldb/controller.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "80b1a8b2-48f7-4128-b891-f786799838c9",
                                    "parentUUID": "1a623993-4a86-4b57-bcce-1146f55be37e",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Controller Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(controllers.BaseController).to.exist;\nclass TestController extends controllers.BaseController {}            \nconst testController = new TestController(config.test.tenantOne)\nlet tenantDb =  await testController.getTenantDb()\n\nexpect(tenantDb).to.exist",
                                    "err": {},
                                    "uuid": "a108ad22-4b2e-49a7-b4bf-944275800b64",
                                    "parentUUID": "1a623993-4a86-4b57-bcce-1146f55be37e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a108ad22-4b2e-49a7-b4bf-944275800b64"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b82f24c3-4ac3-4506-9fd7-fcfb73dc4319",
                    "title": "Integrify Libs Data Instance Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                    "file": "/test/integration/sqldb/data-instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Data Instance Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await Config.getConfig();\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "719f11c9-1f8d-42e0-b9dc-fcf3a4bb07d6",
                            "parentUUID": "b82f24c3-4ac3-4506-9fd7-fcfb73dc4319",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "05b94668-fee5-41dd-986f-b337b163894b",
                            "title": "Model Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a consumer model",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should get a consumer model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;",
                                    "err": {},
                                    "uuid": "a00cd5d7-2bfd-4949-8e53-241c3ff8b44c",
                                    "parentUUID": "05b94668-fee5-41dd-986f-b337b163894b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query()\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "ebb80c0d-abd5-49fb-ab69-42423dda8ab0",
                                    "parentUUID": "05b94668-fee5-41dd-986f-b337b163894b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances with settings",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances with settings",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query().eager('[dataInstanceSettings]')\nconsole.dir(results)\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "91e68956-c322-4157-95e3-3c9b1109de72",
                                    "parentUUID": "05b94668-fee5-41dd-986f-b337b163894b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a00cd5d7-2bfd-4949-8e53-241c3ff8b44c",
                                "ebb80c0d-abd5-49fb-ab69-42423dda8ab0",
                                "91e68956-c322-4157-95e3-3c9b1109de72"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "978d6f86-6546-4aa2-8787-0bdaca4181e9",
                            "title": "Controller Tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list datainstances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should list datainstances",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstances = await dataInstanceController.listDataInstances()\nexpect(dataInstances).to.exist;\nexpect(dataInstances.length).to.be.gt(0)\nexpect(dataInstances[0].dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "5ae35d62-bd9e-42e4-8b5d-64ba909087fc",
                                    "parentUUID": "978d6f86-6546-4aa2-8787-0bdaca4181e9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstance",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nexpect(dataInstance).to.exist;\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "7ee0e2ba-d689-4aa9-a27d-052478d3ba7c",
                                    "parentUUID": "978d6f86-6546-4aa2-8787-0bdaca4181e9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstances hash",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstances hash",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstanceHt = await dataInstanceController.GetDataInstancesHash()\nexpect(dataInstanceHt).to.exist;\nexpect(dataInstanceHt[config.test.tenantOne.tenantId]).to.exist;",
                                    "err": {},
                                    "uuid": "75472292-bcd4-4e54-b90e-9c0358c4f21a",
                                    "parentUUID": "978d6f86-6546-4aa2-8787-0bdaca4181e9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should update a datainstance",
                                    "timedOut": false,
                                    "duration": 54,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let settingVal = new Date().toISOString()\nlet dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nlet settingIdx  = dataInstance.dataInstanceSettings.findIndex((s => s.settingsKey === 'HelpURL'));\ndataInstance.dataInstanceSettings[settingIdx].settingsValue = settingVal\ndataInstance  = await dataInstanceController.updateDataInstance(dataInstance)\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)\nlet setting  = dataInstance.dataInstanceSettings.find((s => s.settingsKey === 'HelpURL'));\nexpect(setting).to.exist\nexpect(setting.settingsValue).to.equal(settingVal)",
                                    "err": {},
                                    "uuid": "803cb1d1-40f4-4d95-9fb0-619e4cd66f82",
                                    "parentUUID": "978d6f86-6546-4aa2-8787-0bdaca4181e9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5ae35d62-bd9e-42e4-8b5d-64ba909087fc",
                                "7ee0e2ba-d689-4aa9-a27d-052478d3ba7c",
                                "75472292-bcd4-4e54-b90e-9c0358c4f21a",
                                "803cb1d1-40f4-4d95-9fb0-619e4cd66f82"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "06bfe314-02fe-41d9-a591-b4fcced74759",
                    "title": "Integrify Libs Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/model.test.js",
                    "file": "/test/integration/sqldb/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b2ad55df-0aee-4f01-b732-2ee0756e83c2",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/model.test.js",
                            "file": "/test/integration/sqldb/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "86c24b99-7662-4d0a-8bdb-09f186223173",
                                    "parentUUID": "b2ad55df-0aee-4f01-b732-2ee0756e83c2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nthis.timeout(105000);\nconst ContactModel = await model.bindModel(config.test.tenantOne.tenantId, models.Contact)\n//console.dir(ContactModel)\n//ContactModel.setOptions({excludeDeleted:false})\n//let results = await ContactModel.query().where('contactId', '>', 0)\n//console.log(results)\nlet results;\nresults = await ContactModel.query().setOptions({excludeDeleted:false}).where('contactId', '>', 0)\nresults = await ContactModel.query().where('contactId', '>', 0)\nlet c = await ContactModel.query().findOne({userName: 'iApprove'}).joinRelated('auth').select('contact.*', 'contact.contactGuid as contactSid','auth.userName as userName')\nconsole.log(c)\nlet patched = await c.$query().patch({middleName: \"bob\"})\nconsole.log(patched)\n\n\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "f807cf8b-a952-4d16-9534-c0a27897d6e9",
                                    "parentUUID": "b2ad55df-0aee-4f01-b732-2ee0756e83c2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f807cf8b-a952-4d16-9534-c0a27897d6e9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "5bd44e97-a631-4ad5-944a-9b2d1e9a7234",
                    "title": "Integrify Libs Permissions Controller Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/permissions.test.js",
                    "file": "/test/integration/sqldb/permissions.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "bf825ec3-898d-47f6-8819-efd00e9a7e8f",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/permissions.test.js",
                            "file": "/test/integration/sqldb/permissions.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "8c8e82d3-76bf-462a-80d0-5e49aae79cc3",
                                    "parentUUID": "bf825ec3-898d-47f6-8819-efd00e9a7e8f",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getUserPermissionsFromDb",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests should getUserPermissionsFromDb",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst session = {tenantId: config.test.tenantOne.tenantId, user_sid: user.sid}\nlet permissionsController = new PermissionsController(session)\nlet permissions = await permissionsController.getWorkflowPermissionsFromDb(session);\nconsole.log(permissions)\nexpect(permissions[0]).to.exist;",
                                    "err": {},
                                    "uuid": "a05d785c-0847-4461-b81a-fe6653abfa72",
                                    "parentUUID": "bf825ec3-898d-47f6-8819-efd00e9a7e8f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a05d785c-0847-4461-b81a-fe6653abfa72"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "01a46c3e-b06c-48d7-9112-eeec1acb6455",
                    "title": "Integrify Libs Process Model Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/process.test.js",
                    "file": "/test/integration/sqldb/process.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "726c6fc3-ab79-49a4-a7af-7c37538130ed",
                            "title": "tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/process.test.js",
                            "file": "/test/integration/sqldb/process.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Process Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "73da50a4-44e9-43a0-b561-0e5579f0c96f",
                                    "parentUUID": "726c6fc3-ab79-49a4-a7af-7c37538130ed",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a process from sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should get a process from sql",
                                    "timedOut": false,
                                    "duration": 102,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n\n\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nconst Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nconsole.log([Process])\nexpect(Process.processGuid).equal(sampleProcesstGuid)",
                                    "err": {},
                                    "uuid": "6ce990d0-d13d-479b-aea1-a47e57fc154e",
                                    "parentUUID": "726c6fc3-ab79-49a4-a7af-7c37538130ed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should upsert a process in sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should upsert a process in sql",
                                    "timedOut": false,
                                    "duration": 279,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n//console.dir(ContactModel)\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nlet Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nexpect(Process.processGuid).equal(sampleProcesstGuid)\nlet newName = 'Updated ' + new Date().toISOString()\nclonedProcess = JSON.parse(JSON.stringify(Process));\n           \nProcess.objective = newName;\nProcess.tasks[0].internalNotes = newName;\nProcess.processCategory.ordinal = 1;\nawait processController.upsertFullProcess(Process);\nProcess = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process.objective).to.equal(newName);\nexpect(Process.tasks[0].internalNotes).to.equal(newName);\nexpect(Process.processCategory.ordinal).equal(1)",
                                    "err": {},
                                    "uuid": "f77172b5-1d9b-48a5-bb7e-e522da4bf3c2",
                                    "parentUUID": "726c6fc3-ab79-49a4-a7af-7c37538130ed",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6ce990d0-d13d-479b-aea1-a47e57fc154e",
                                "f77172b5-1d9b-48a5-bb7e-e522da4bf3c2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 381,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cedc06a0-abf8-492c-b75c-4c43131eae37",
                    "title": "Integrify Libs Tenant tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                    "file": "/test/integration/sqldb/sqldb-db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0288d898-49b3-4921-8c10-aa47a564b363",
                            "title": "tentantSql tests",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                            "file": "/test/integration/sqldb/sqldb-db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// let configClass = await require('../../../config')\n            // await configClass.setConfigs();\n            // config = await configClass.getConfig();\n            config = await Config.getConfig();\n            this.timeout(100000);",
                                    "err": {},
                                    "uuid": "c38eb53d-7c02-442a-ad40-466694c936cc",
                                    "parentUUID": "0288d898-49b3-4921-8c10-aa47a564b363",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get the consumer Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests should get the consumer Db",
                                    "timedOut": false,
                                    "duration": 52,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getConsumersDb(config.consumersConn)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`SELECT * FROM sys.tables WHERE name = 'data_instance'`)\nexpect(queyResults.length).equal(1)\n//console.log(queyResults)",
                                    "err": {},
                                    "uuid": "d4136bc2-81a4-4ed1-a0cf-95e111c4e018",
                                    "parentUUID": "0288d898-49b3-4921-8c10-aa47a564b363",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "shoulld get the tenant Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests shoulld get the tenant Db",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getTenantDb(config.test.tenantOne.tenantId)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`select * from contact`)\nexpect(queyResults.length).to.be.gt(0)\nqueyResults = await db.raw(\"select * from contact_auth where user_name = :uname\", {uname: 'iApprove'})\nexpect(queyResults.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "492896ad-d938-4aea-9be0-8cc21417fb53",
                                    "parentUUID": "0288d898-49b3-4921-8c10-aa47a564b363",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d4136bc2-81a4-4ed1-a0cf-95e111c4e018",
                                "492896ad-d938-4aea-9be0-8cc21417fb53"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 58,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "96f1a553-268b-4af5-81f7-c3e99650f29b",
                    "title": "Integrify Libs StreamConsumer Load Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3107,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\n/*\nRedis stream stuff:\nYou can scale up by running additional processors in the group. This creates a new Node process and runs a new consumer\nin the existing stream group. The consumer name for each processor will have an incremental suffix so it will be unique\nensuring that each consumer processes a unique set of events.\nWith 3 processors, it handeld a loadSize of a million events as they came in with no backlog build up in the group.\n */\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nforkedProcessor2 = await streamConsumer.forkStreamProcessor()\nforkedProcessor3 = await streamConsumer.forkStreamProcessor()\nfor (let index = 0; index < loadSize; index++) {\n\n    await sp.sendEvent(\"extendSession\",{\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\", \n            user_name: \"iapprove\", \n            email: \"iapprove@integrify.com\", \n            name: \"System System\"\n        }\n    })\n\n}\n       \nawait delay(1000);",
                            "err": {},
                            "uuid": "c8cba3ba-3833-447d-88c1-fb5f0c032c02",
                            "parentUUID": "96f1a553-268b-4af5-81f7-c3e99650f29b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill()\nforkedProcessor2.kill()\nforkedProcessor3.kill()",
                            "err": {},
                            "uuid": "ef8c3fbd-5da9-4720-bf70-60696bc9dda9",
                            "parentUUID": "96f1a553-268b-4af5-81f7-c3e99650f29b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "acf160b6-ee42-47b3-9580-70aaabe25bc3",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                            "file": "/test/integration/stream/streamConsumer.load.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "1daaee51-a7d5-4da2-8367-4bbabb931a5c",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Load Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "f15b232b-a139-4791-8a7c-b2fb9af1fcb8",
                                            "parentUUID": "1daaee51-a7d5-4da2-8367-4bbabb931a5c",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "f15b232b-a139-4791-8a7c-b2fb9af1fcb8"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e8107c90-7018-4f43-b261-3204aec53545",
                    "title": "Integrify Libs StreamConsumer Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                    "file": "/test/integration/stream/streamConsumer.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5024,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\",\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nawait delay(5000);",
                            "err": {},
                            "uuid": "488f0abf-49ca-4555-aa65-7561fbc7dc57",
                            "parentUUID": "e8107c90-7018-4f43-b261-3204aec53545",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "0bfdeee8-a29b-4c71-80ac-8319c504c803",
                            "parentUUID": "e8107c90-7018-4f43-b261-3204aec53545",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1114be02-c1e9-4862-bec0-5499e399e391",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                            "file": "/test/integration/stream/streamConsumer.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "bfe09a94-4443-47ac-9ac7-8cdc2c01f72e",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamConsumer.test.js",
                                    "file": "/test/integration/stream/streamConsumer.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "21b7e953-8fa0-46df-812a-c5a319225415",
                                            "parentUUID": "bfe09a94-4443-47ac-9ac7-8cdc2c01f72e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "21b7e953-8fa0-46df-812a-c5a319225415"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fd41f6b9-6a51-42b5-901e-99d2ec923b06",
                    "title": "Integrify Libs Stream Publisher Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamPublisher.test.js",
                    "file": "/test/integration/stream/streamPublisher.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7af24bb2-fbed-4980-b97e-51ce6f0b9529",
                            "title": "stream publisher",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/stream/streamPublisher.test.js",
                            "file": "/test/integration/stream/streamPublisher.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(100000)\nprocess.env.jest = \"true\";\nawait redis.delAsync([fullStreamName, eventHistoryName])",
                                    "err": {},
                                    "uuid": "fd8ea55b-0ac0-420d-b2b3-b1374dc5ccce",
                                    "parentUUID": "7af24bb2-fbed-4980-b97e-51ce6f0b9529",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should handle the constructor",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should handle the constructor",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant);\nexpect(sp.streamName).equal(fullStreamName)\nexpect(sp.baseStreamName).equal(testStreamName)",
                                    "err": {},
                                    "uuid": "a24669f4-ebfd-41db-be9a-e76ad4fbeb6e",
                                    "parentUUID": "7af24bb2-fbed-4980-b97e-51ce6f0b9529",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should an sendEvent",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should an sendEvent",
                                    "timedOut": false,
                                    "duration": 102,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant,1000);\nexpect(sp.streamName).equal(fullStreamName)\n//sendEvent(eventType, data) data will get stringified\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}})   \nexpect(id).to.exist;\nexpect (id.indexOf(\"-\")).to.be.gt(-1)  \nawait delay(100);\nlet id2 = await sp.sendEvent(testEventType, {foo:\"bar2\", biz:\"buzz2\", beep:{bop:\"bam2\"}})   \nexpect (Number(id2.split(\"-\")[0])).to.be.gt(Number(id.split(\"-\")[0]))",
                                    "err": {},
                                    "uuid": "78823967-2d3d-481c-ac5c-b5237afc360a",
                                    "parentUUID": "7af24bb2-fbed-4980-b97e-51ce6f0b9529",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should append to eventhistory",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should append to eventhistory",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant, 1000); \n\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}}) \n           \n//console.log(historySet)\nlet historyCount = await redis.zcardAsync(eventHistoryName)\nexpect(historyCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "7e7c3d41-66b5-4847-9cc5-a3fe16224134",
                                    "parentUUID": "7af24bb2-fbed-4980-b97e-51ce6f0b9529",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a24669f4-ebfd-41db-be9a-e76ad4fbeb6e",
                                "78823967-2d3d-481c-ac5c-b5237afc360a",
                                "7e7c3d41-66b5-4847-9cc5-a3fe16224134"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 104,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1a0bdc6f-5dd2-4bc9-9354-eaf197a78084",
                    "title": "Integrify Libs Tes-lib Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                    "file": "/test/integration/test-lib/test-lib.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e614b281-ce89-4d96-8a55-a70f470f7e37",
                            "title": "Test Config",
                            "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                            "file": "/test/integration/test-lib/test-lib.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tes-lib Tests Test Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "7b853c36-0cb7-4646-ba0f-57f0e065b86f",
                                    "parentUUID": "e614b281-ce89-4d96-8a55-a70f470f7e37",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "f671092d-1058-49f0-8f84-7676bb83379b",
                                    "title": "get a test config",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get a test config should have config.mongo",
                                            "timedOut": false,
                                            "duration": 8,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const testConfig = await testLib.getTestConfig();\nconsole.log(testConfig)\nexpect(testConfig).to.exist;",
                                            "err": {},
                                            "uuid": "42c67001-80ce-4919-b061-6ceef122a3f4",
                                            "parentUUID": "f671092d-1058-49f0-8f84-7676bb83379b",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "42c67001-80ce-4919-b061-6ceef122a3f4"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 8,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "9148674d-7bb7-49ee-9332-9cc0856e7a32",
                                    "title": "get an auth Token ",
                                    "fullFile": "/home/rich/integrify/1_PLUS/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have a auth token",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get an auth Token  should have a auth token",
                                            "timedOut": false,
                                            "duration": 5,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const authToken = await testLib.getAuthToken();\nconsole.log(authToken)\nexpect(authToken).to.exist;",
                                            "err": {},
                                            "uuid": "6374c3c9-1345-48f4-bcfd-fb8bf594709b",
                                            "parentUUID": "9148674d-7bb7-49ee-9332-9cc0856e7a32",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "6374c3c9-1345-48f4-bcfd-fb8bf594709b"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 5,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "434f058a-6cdb-4cfe-8142-9fc068a61bc5",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "7aec79c8-2c58-46a1-8dc6-cb1e5439edeb",
                    "title": "Scheduler CRUD tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                    "file": "/test/crud.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler CRUD tests\"",
                            "fullTitle": "Scheduler CRUD tests \"before all\" hook in \"Scheduler CRUD tests\"",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await serverConfig.setProcessServerConfig()\njobCtrl = require(\"../lib/scheduler/mongo/jobCtrl.js\");",
                            "err": {},
                            "uuid": "7625dc6e-4659-4819-9a94-968785da2f79",
                            "parentUUID": "7aec79c8-2c58-46a1-8dc6-cb1e5439edeb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8676c03d-493d-44e2-b5eb-4a826db3b537",
                            "title": ".save",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves the job",
                                    "fullTitle": "Scheduler CRUD tests .save saves the job",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let sDate = new Date();\nlet startThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() - 5)\n);\nlet endThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() + 5)\n);\nlet job = {\n    dbName: config.dbName,\n    status: \"Scheduled\",\n    name: config.name,\n    initData: config.initData,\n    runAs: config.runAs,\n    frequency: \"Recurring\",\n    rminutes: 1,\n    state: \"ended\",\n    startDate: startThis,\n    startHour: startThis.getHours(),\n    startMinute: startThis.getMinutes(),\n    startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n    endDate: endThis,\n    endHour: endThis.getHours(),\n    endMinute: endThis.getMinutes(),\n    endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\",\n    jobType: config.jobType\n};\nreturn jobCtrl.save(job).then(saved => {\n    expect(saved).to.exist;\n    dbJob = saved;\n});",
                                    "err": {},
                                    "uuid": "233ea93f-1139-41f6-b5c6-5b75f661246f",
                                    "parentUUID": "8676c03d-493d-44e2-b5eb-4a826db3b537",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "233ea93f-1139-41f6-b5c6-5b75f661246f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 51,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "91f58f24-98cd-4ae7-b08b-78aeac184ba0",
                            "title": ".upate",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates the job",
                                    "fullTitle": "Scheduler CRUD tests .upate updates the job",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.update(dbJob).then(updated => {\n    expect(updated).to.exist;\n    expect(updated.modifiedDate.getTime()).to.be.greaterThan(\n        updated.createdDate.getTime()\n    );\n});",
                                    "err": {},
                                    "uuid": "47027e2f-0da4-40a3-a4d1-71389824cbb2",
                                    "parentUUID": "91f58f24-98cd-4ae7-b08b-78aeac184ba0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "47027e2f-0da4-40a3-a4d1-71389824cbb2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "45c5523d-92f4-4056-a932-a915f4f4c7c1",
                            "title": ".getOne",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler CRUD tests .getOne should get a job by id",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.getOne(config.dbName, dbJob._id).then(job => {\n    expect(job).to.exist;\n    expect(job._id.toString()).to.equal(dbJob._id.toString());\n});",
                                    "err": {},
                                    "uuid": "ce7bdbb2-a96a-4bb3-9973-f38149de8b99",
                                    "parentUUID": "45c5523d-92f4-4056-a932-a915f4f4c7c1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ce7bdbb2-a96a-4bb3-9973-f38149de8b99"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "fa4371ab-fd0b-4929-a080-37d340834f3c",
                            "title": ".getAll",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs",
                                    "fullTitle": "Scheduler CRUD tests .getAll should get all jobs",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName).then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "1d6df4f9-67a6-4391-8d22-47be5db9647b",
                                    "parentUUID": "fa4371ab-fd0b-4929-a080-37d340834f3c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1d6df4f9-67a6-4391-8d22-47be5db9647b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "db317b16-60db-4b94-855a-c0fdf715174b",
                            "title": ".getAll(filter)",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs of type testToConsole",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter) should get all jobs of type testToConsole",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"testToConsole\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "7c2aa192-2ab1-40d3-9c89-0845d982d090",
                                    "parentUUID": "db317b16-60db-4b94-855a-c0fdf715174b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7c2aa192-2ab1-40d3-9c89-0845d982d090"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ffc1ca26-bce4-43d4-b60b-a617a793776d",
                            "title": ".getAll(filter-bad)",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should not have any jobs of type fakeJob",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter-bad) should not have any jobs of type fakeJob",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"fakeJob\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.empty;\n});",
                                    "err": {},
                                    "uuid": "6d5b02f6-acac-455d-8e22-7e28f324fc76",
                                    "parentUUID": "ffc1ca26-bce4-43d4-b60b-a617a793776d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6d5b02f6-acac-455d-8e22-7e28f324fc76"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a50b6b18-a38b-4d93-9dd3-5eb17dbef1b2",
                            "title": ".delete",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a job",
                                    "fullTitle": "Scheduler CRUD tests .delete should delete a job",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.delete(config.dbName, dbJob._id).then(deleted => {\n    expect(deleted).to.be.true;\n});",
                                    "err": {},
                                    "uuid": "b4507f84-21b4-4e1f-b7cf-f2ca902e449f",
                                    "parentUUID": "a50b6b18-a38b-4d93-9dd3-5eb17dbef1b2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b4507f84-21b4-4e1f-b7cf-f2ca902e449f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b72f67ac-96c0-4a8f-9c55-8add077b1c5c",
                    "title": "Scheduler OneTimeJob",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                    "file": "/test/onetime.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler OneTimeJob\"",
                            "fullTitle": "Scheduler OneTimeJob \"before all\" hook in \"Scheduler OneTimeJob\"",
                            "timedOut": false,
                            "duration": 50,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "fe0286ef-2213-497b-91b7-d697f2b97e8e",
                            "parentUUID": "b72f67ac-96c0-4a8f-9c55-8add077b1c5c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "77fc01f5-f5c0-4973-8491-1956ea915b25",
                            "title": "#addOneTimeJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler OneTimeJob #addOneTimeJob should add a job",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "a82a5f6b-3c36-4b08-a8d8-a72e816a0544",
                                    "parentUUID": "77fc01f5-f5c0-4973-8491-1956ea915b25",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a82a5f6b-3c36-4b08-a8d8-a72e816a0544"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2dbb2676-33d8-4b68-804b-8e20696df9c5",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "db5ccb54-1796-45e3-b5dc-3e556cff6578",
                                    "parentUUID": "2dbb2676-33d8-4b68-804b-8e20696df9c5",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "0cce3016-8ff8-40da-9aeb-f56616ed4330",
                                    "parentUUID": "2dbb2676-33d8-4b68-804b-8e20696df9c5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "db5ccb54-1796-45e3-b5dc-3e556cff6578",
                                "0cce3016-8ff8-40da-9aeb-f56616ed4330"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4c9a14d4-12ad-445d-a849-7c8119e82981",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler OneTimeJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "a2817548-549a-4967-9708-6a77288108fa",
                                    "parentUUID": "4c9a14d4-12ad-445d-a849-7c8119e82981",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a2817548-549a-4967-9708-6a77288108fa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "82593cde-d73f-4fa6-be66-b0d083ee01cb",
                            "title": "#runJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should run the job",
                                    "fullTitle": "Scheduler OneTimeJob #runJob should run the job",
                                    "timedOut": false,
                                    "duration": 15001,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\nlet c = await delay(15000);\nexpect(j.triggeredJobs()).to.equal(1);",
                                    "err": {},
                                    "uuid": "92682734-625b-43d0-8edb-ac8941d9c65b",
                                    "parentUUID": "82593cde-d73f-4fa6-be66-b0d083ee01cb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92682734-625b-43d0-8edb-ac8941d9c65b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15001,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 20000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cc970c6c-9304-4a71-be71-c635775ee639",
                    "title": "Scheduler PubSubHandler",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                    "file": "/test/pubsub.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"before all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 11,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\njobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");\ndbJobWithId = await jobCtrl.save(dbJob);\nservice = require(\"../scheduler.js\");\nintegrify_redis = require(\"../lib/redis/integrify-redis.js\");\npubSubClient = integrify_redis.getRedisPubSubClient();",
                            "err": {},
                            "uuid": "7c1d8d74-66eb-4ba2-9fd3-8a4810c0ff0b",
                            "parentUUID": "cc970c6c-9304-4a71-be71-c635775ee639",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"after all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "return await jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString());",
                            "err": {},
                            "uuid": "5017f1fe-5d70-49c6-89c5-4b8cdb86a2da",
                            "parentUUID": "cc970c6c-9304-4a71-be71-c635775ee639",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2f23b6b6-de2a-4f09-aad9-d614ba798f05",
                            "title": "#addJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add a new job based on a message",
                                    "fullTitle": "Scheduler PubSubHandler #addJob add a new job based on a message",
                                    "timedOut": false,
                                    "duration": 3004,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:add`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    function(err, ok) {\n        setTimeout(\n            function() {\n                let j = scheduler.getJobById(dbJobWithId._id);\n                expect(j).to.exist;\n                done();\n            },\n            3000\n        );\n    }\n);",
                                    "err": {},
                                    "uuid": "b442a2b1-4d4a-4168-9617-974879ea9312",
                                    "parentUUID": "2f23b6b6-de2a-4f09-aad9-d614ba798f05",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b442a2b1-4d4a-4168-9617-974879ea9312"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3004,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "ee4c5160-39ed-4d63-9b9a-346eca21bc7f",
                            "title": "#cancel",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler PubSubHandler #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:delete`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    async function(err, ok) {\n        delay(500);\n        let jobs = scheduler.listJobs();\n        expect(jobs[dbJobWithId._id]).to.not.exist;\n                        }\n);",
                                    "err": {},
                                    "uuid": "675a1a1b-4c10-4994-9d7b-3ea892d42619",
                                    "parentUUID": "ee4c5160-39ed-4d63-9b9a-346eca21bc7f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "675a1a1b-4c10-4994-9d7b-3ea892d42619"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "22b01d97-899a-4a81-b98a-8657a134be2e",
                    "title": "Scheduler RecurringJob",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                    "file": "/test/recur.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler RecurringJob\"",
                            "fullTitle": "Scheduler RecurringJob \"before all\" hook in \"Scheduler RecurringJob\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "37d8a398-e571-4e99-a0e8-3d0e8406fb78",
                            "parentUUID": "22b01d97-899a-4a81-b98a-8657a134be2e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e7d4e44d-f932-41bd-b076-65d7953eebef",
                            "title": "#addRecurringJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler RecurringJob #addRecurringJob should add a job",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);5\nexpect(job.recur).to.exist;",
                                    "err": {},
                                    "uuid": "3a0a5789-920f-4eb4-a3f2-b446f8269ac9",
                                    "parentUUID": "e7d4e44d-f932-41bd-b076-65d7953eebef",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3a0a5789-920f-4eb4-a3f2-b446f8269ac9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "98238d8d-deb8-4009-a020-38e471a05c9c",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "864287fd-97a5-4d3a-810a-75a48ded6c03",
                                    "parentUUID": "98238d8d-deb8-4009-a020-38e471a05c9c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "bd9b7c32-0034-4fcd-912e-0d2c1bbd3ef3",
                                    "parentUUID": "98238d8d-deb8-4009-a020-38e471a05c9c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "864287fd-97a5-4d3a-810a-75a48ded6c03",
                                "bd9b7c32-0034-4fcd-912e-0d2c1bbd3ef3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "6dba62d9-4152-4f0a-a52c-509c2d8dd61f",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler RecurringJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "586640b0-ddf6-426c-8479-e7a5119f03b1",
                                    "parentUUID": "6dba62d9-4152-4f0a-a52c-509c2d8dd61f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "586640b0-ddf6-426c-8479-e7a5119f03b1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cdb04233-4b8c-451f-900f-886113db0f4c",
                            "title": "#runJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should run the job",
                                    "fullTitle": "Scheduler RecurringJob #runJob should run the job",
                                    "timedOut": false,
                                    "duration": 15001,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\nlet c = await delay(15000);\nexpect(j.triggeredJobs()).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "7300e977-b44b-478a-abc2-9a273e4d5023",
                                    "parentUUID": "cdb04233-4b8c-451f-900f-886113db0f4c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7300e977-b44b-478a-abc2-9a273e4d5023"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15001,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 20000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8a55d1c6-4cfa-4559-a80f-ee422f740d68",
                    "title": "Scheduler Scheduled Jobs",
                    "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                    "file": "/test/schedule.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "fullTitle": "Scheduler Scheduled Jobs \"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": ";\n        testConfig = await serverConfig.setProcessServerConfig()\n        scheduler = require(\"../lib/scheduler/index.js\");\n        jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "da3f503e-e2ae-430d-bc51-3e925988e28f",
                            "parentUUID": "8a55d1c6-4cfa-4559-a80f-ee422f740d68",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f37f7696-aefe-4d41-8ad0-6619fa55fffd",
                            "title": "#addJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler Scheduled Jobs #addJob should add a job",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "6640dee1-80bb-4507-99cb-9d18f4104706",
                                    "parentUUID": "f37f7696-aefe-4d41-8ad0-6619fa55fffd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6640dee1-80bb-4507-99cb-9d18f4104706"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "bd331a07-baca-491e-8657-40e41c50cf03",
                            "title": "#loadAllJobsFromMongo",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// runs before all tests in this block\nreturn jobCtrl.save(dbJob).then(j => {\n    dbJobWithId = j;\n});",
                                    "err": {},
                                    "uuid": "89da1bae-8046-451d-9688-2977f0012a91",
                                    "parentUUID": "bd331a07-baca-491e-8657-40e41c50cf03",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [
                                {
                                    "title": "\"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//return jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString())",
                                    "err": {},
                                    "uuid": "4ca49e57-c2a5-4234-bc4e-2389c2990a93",
                                    "parentUUID": "bd331a07-baca-491e-8657-40e41c50cf03",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "tests": [
                                {
                                    "title": "should load the jobs from mongo",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo should load the jobs from mongo",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return scheduler.loadJobsFromMongo().then(loadedJobs => {\n    expect(loadedJobs.length).to.be.greaterThan(0);\n    expect(scheduler.listJobs()[dbJobWithId.id]).to.exist;\n});",
                                    "err": {},
                                    "uuid": "e2bf6dd8-7bdf-4b54-b676-a460693bbcd7",
                                    "parentUUID": "bd331a07-baca-491e-8657-40e41c50cf03",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e2bf6dd8-7bdf-4b54-b676-a460693bbcd7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "21837ec7-968c-424c-ae42-7172ad7c9680",
                            "title": "#listJobs",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "33a20e8d-e99a-47e9-b2f5-524d18f73c6d",
                                    "parentUUID": "21837ec7-968c-424c-ae42-7172ad7c9680",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "3ef21faa-393b-4132-bae6-9c0fb4de48c0",
                                    "parentUUID": "21837ec7-968c-424c-ae42-7172ad7c9680",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "33a20e8d-e99a-47e9-b2f5-524d18f73c6d",
                                "3ef21faa-393b-4132-bae6-9c0fb4de48c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "9a02d105-8e09-4e26-b0de-4c9789204702",
                            "title": "#getJob",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler Scheduled Jobs #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "aed1bb27-2768-41f1-97a9-7b40d5f886ef",
                                    "parentUUID": "9a02d105-8e09-4e26-b0de-4c9789204702",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "aed1bb27-2768-41f1-97a9-7b40d5f886ef"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "3286f120-e45a-49ca-9cf5-20be8a19beae",
                            "title": "#reschedule",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should reschedule the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #reschedule should reschedule the job",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let oldStart = job.start;\n            job.start =  new Date(job.start.getTime() + 100);\n            job.end =   new Date(job.end.getTime() + 10000);\n            let rj = scheduler.rescheduleJob(job);\n            expect(new Date(rj.nextInvocation()).getTime()).to.be.greaterThan(oldStart.getTime());",
                                    "err": {},
                                    "uuid": "60ea81fc-f119-48bb-bbd3-764aaa16927c",
                                    "parentUUID": "3286f120-e45a-49ca-9cf5-20be8a19beae",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "60ea81fc-f119-48bb-bbd3-764aaa16927c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "32a761c2-6655-4257-a998-4953a4dbeb54",
                            "title": "#cancel",
                            "fullFile": "/home/rich/integrify/1_PLUS/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let cj = scheduler.cancelJob(job._id);\nlet jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.not.exist;",
                                    "err": {},
                                    "uuid": "34e2c8bd-a2a4-4729-b30d-1ac888fc0d4c",
                                    "parentUUID": "32a761c2-6655-4257-a998-4953a4dbeb54",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "34e2c8bd-a2a4-4729-b30d-1ac888fc0d4c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "aec102ad-3006-4512-b107-ab90944ffd12",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "126f872a-59bb-4089-bf0b-fd26c817047e",
                    "title": "Session Processor Tests",
                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                    "file": "/test/integration/sessionEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Session Processor Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5042,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let testConfig = await testLib.getTestConfig();\n       \nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"login\", {\n  token: \"abcd234\",\n  user:  {jwt_token: 'xxxxx', tenantId: testConfig.tenantOne.tenantId, sid: testConfig.tenantOne.adminUser.sid}\n})\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {\n        token: \"abcd234\",\n        user: {\n            sid: testConfig.tenantOne.adminUser.sid,\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\n\nforkedProcessor = await sessionStreamConsumer.forkStreamProcessor(tenant)\nawait delay(5000);",
                            "err": {},
                            "uuid": "6fc39a19-33dc-4a8f-86ae-8bf99731a1c3",
                            "parentUUID": "126f872a-59bb-4089-bf0b-fd26c817047e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Session Processor Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "0fcb092c-9398-419c-90e9-04961eb8a3e5",
                            "parentUUID": "126f872a-59bb-4089-bf0b-fd26c817047e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "74f847b5-6a50-4b8f-bae6-604c95912c10",
                            "title": "stream processor",
                            "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                            "file": "/test/integration/sessionEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "f16ca094-3a23-4799-9b75-e248fdb48039",
                                    "title": "reads from session stream",
                                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Session Processor Tests stream processor reads from session stream should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "24ca27ad-7778-48ee-a98c-9fca80a83243",
                                            "parentUUID": "f16ca094-3a23-4799-9b75-e248fdb48039",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "24ca27ad-7778-48ee-a98c-9fca80a83243"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "b8c02dfd-3594-48da-8a41-a8ff8342f6f0",
                                    "title": "handles events",
                                    "fullFile": "/home/rich/integrify/1_PLUS/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should push events into REDIS activeSession set",
                                            "fullTitle": "Session Processor Tests stream processor handles events should push events into REDIS activeSession set",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions = await redis.zrangebyscoreAsync(`${tenant}.activeSessions`, \"-inf\", \"+inf\");\nconsole.log(sessions)\nexpect(sessions).to.exist;",
                                            "err": {},
                                            "uuid": "947887be-35f7-491d-9af6-1b8dc3fe0fa8",
                                            "parentUUID": "b8c02dfd-3594-48da-8a41-a8ff8342f6f0",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "947887be-35f7-491d-9af6-1b8dc3fe0fa8"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "7b21ac88-8ed1-475a-9147-91f5cf6c406f",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "db23521e-9526-48e8-934b-0fab41f00747",
                    "title": "user",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/libs/commonLib/tests/unit/user.spec.js",
                    "file": "/tests/unit/user.spec.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "hasPermission",
                            "fullTitle": "user hasPermission",
                            "timedOut": false,
                            "duration": 33,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); });",
                            "err": {},
                            "uuid": "d9d7396f-94c0-4963-8076-725cc15dce98",
                            "parentUUID": "db23521e-9526-48e8-934b-0fab41f00747",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "d9d7396f-94c0-4963-8076-725cc15dce98"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 33,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "97b4557c-550e-4554-954c-5333fdf6ba8a",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
                {
                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                    "fullTitle": "commits SET_SELECTED_FOR_EDIT mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                    "err": {},
                    "uuid": "ecc884aa-662b-4c73-bc75-7a4f005e2088",
                    "parentUUID": "97b4557c-550e-4554-954c-5333fdf6ba8a",
                    "isHook": false,
                    "skipped": true
                },
                {
                    "title": "commits SET_SHOW_DIALOG mutation",
                    "fullTitle": "commits SET_SHOW_DIALOG mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                    "err": {},
                    "uuid": "a24ff7e2-68a9-4159-8b28-e25e3034a51a",
                    "parentUUID": "97b4557c-550e-4554-954c-5333fdf6ba8a",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "69324243-12d1-4aae-b3df-d61e7902ad47",
                    "title": "PasswordSettings.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "renders correctly",
                            "fullTitle": "PasswordSettings.vue renders correctly",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(pwdSettingsApi.listPasswordSettings).to.have.been.called;\nexpect(pwdExpirationActiveCheckBox).to.be.exist;\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(false);\nexpect(pwdExpirationTextBox).to.be.exist;\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal('disabled');\nexpect(pwdExpirationTextBox.element.value).to.equal('7');\nexpect(pwdStrengthActiveCheckBox).to.be.exist;\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(false);\nexpect(minPwdLengthTextBox).to.be.exist;\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(minPwdLengthTextBox.element.value).to.equal('3');\nexpect(maxPwdLengthTextBox).to.be.exist;\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(maxPwdLengthTextBox.element.value).to.equal('10');\nexpect(pwdStrengthExpressionTextBox).to.be.exist;\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal('disabled'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton).to.be.exist;\nexpect(restoreButton.attributes('disabled')).to.equal('disabled');\nexpect(wrapper.find('button#save')).to.be.exist;",
                            "err": {},
                            "uuid": "99148314-bf3c-44d7-8484-5cbbc15a6471",
                            "parentUUID": "69324243-12d1-4aae-b3df-d61e7902ad47",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [
                        {
                            "uuid": "a1be6abe-966a-4744-96f5-e05542e94656",
                            "title": "checkboxes enabling textboxes",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdExpirationActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(true);\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "9937d2e5-1cfe-439f-9fdc-67b47cf66755",
                                    "parentUUID": "a1be6abe-966a-4744-96f5-e05542e94656",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(true);\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal(undefined);\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "a14daeab-987d-4b34-8b14-614e4cfef565",
                                    "parentUUID": "a1be6abe-966a-4744-96f5-e05542e94656",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9937d2e5-1cfe-439f-9fdc-67b47cf66755",
                                "a14daeab-987d-4b34-8b14-614e4cfef565"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "0bed0281-72ca-4ef3-b678-978fcc36f2c5",
                            "title": "password length change effects on strength regular expression",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "correctly adjusts strength expression when min pwd length changes",
                                    "fullTitle": "PasswordSettings.vue password length change effects on strength regular expression correctly adjusts strength expression when min pwd length changes",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nminPwdLengthTextBox.element.value = '4';\nminPwdLengthTextBox.trigger('input');\nmaxPwdLengthTextBox.element.value = '11';\nmaxPwdLengthTextBox.trigger('input');\nawait wrapper.vm.$nextTick(); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "a2e2db2a-23c2-45b5-a4b7-5c57fb27c57b",
                                    "parentUUID": "0bed0281-72ca-4ef3-b678-978fcc36f2c5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a2e2db2a-23c2-45b5-a4b7-5c57fb27c57b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cf254cb2-ce93-462b-a6ca-7b2e2bcc338b",
                            "title": "restore default password strength",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "restores default password strength values when restore button is clicked",
                                    "fullTitle": "PasswordSettings.vue restore default password strength restores default password strength values when restore button is clicked",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nawait wrapper.find('button#restoreDefaultPwdStrengthExpression').trigger('click'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');",
                                    "err": {},
                                    "uuid": "7a004967-dbb8-4088-bb27-35dcf212ad8b",
                                    "parentUUID": "cf254cb2-ce93-462b-a6ca-7b2e2bcc338b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7a004967-dbb8-4088-bb27-35dcf212ad8b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e3f73d24-ce25-4a13-87fe-e5defb0e0719",
                            "title": "save password settings",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "calls updatePasswordSettings with correct params when Save button is clicked",
                                    "fullTitle": "PasswordSettings.vue save password settings calls updatePasswordSettings with correct params when Save button is clicked",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(pwdExpirationActiveCheckBox.element.checked).to.equal(true); // change some settings in ui. make sure api call has correct params when saved\npwdExpirationTextBox.setValue('10');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nwrapper.find('button#save').trigger('click');\nexpect(pwdSettingsApi.updatePasswordSettings).to.have.been.called;\nconst requestBody = pwdSettingsApi.updatePasswordSettings.args[0][1].requestBody;\nexpect(requestBody).to.be.ok;\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('10');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH').settingsValue).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "3f374ace-8108-4a8c-af10-d8512806ad8f",
                                    "parentUUID": "e3f73d24-ce25-4a13-87fe-e5defb0e0719",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3f374ace-8108-4a8c-af10-d8512806ad8f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [
                        "99148314-bf3c-44d7-8484-5cbbc15a6471"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "357f7f8b-9e75-48d2-9427-d230cf3a2c7b",
                    "title": "BiztimeDialog.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimeDialog.vue\"",
                            "fullTitle": "BiztimeDialog.vue \"before each\" hook in \"BiztimeDialog.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "bec229a4-7bc7-434a-ab09-ea9fb863c897",
                            "parentUUID": "357f7f8b-9e75-48d2-9427-d230cf3a2c7b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimeDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// console.log('-- dd:', wrapper.vm.$store.state.biztimes.selectedForEdit);\n// headline\nconst headline = wrapper.find('span.headline');\nexpect(headline.exists()).to.be.true;\nexpect(headline.text()).to.eq(`Edit Business Hours for ${biztime.dayOfWeek}`); // inputs\nexpect(startTimeRef.value).to.deep.equal(biztime.startTime);\nexpect(endTimeRef.value).to.deep.equal(biztime.endTime);\nexpect(activeRef.inputValue).to.equal(biztime.active); // btns\nexpect(saveBtn.exists()).to.be.true;\nexpect(closeBtn.exists()).to.be.true;",
                            "err": {},
                            "uuid": "dc614cf1-d04a-4f12-817c-4f8a864d683d",
                            "parentUUID": "357f7f8b-9e75-48d2-9427-d230cf3a2c7b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save biztime",
                            "fullTitle": "BiztimeDialog.vue should save biztime",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await saveBtn.trigger('click');\nexpect(mockstore.actions.saveBiztime).to.have.been.called;",
                            "err": {},
                            "uuid": "ec4d0ff8-2285-4f65-a47d-88e0ec62c510",
                            "parentUUID": "357f7f8b-9e75-48d2-9427-d230cf3a2c7b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog",
                            "fullTitle": "BiztimeDialog.vue should close dialog",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.calledWith(store.state.biztimes, {});",
                            "err": {},
                            "uuid": "18784f15-7940-4d89-9789-f2ed12990732",
                            "parentUUID": "357f7f8b-9e75-48d2-9427-d230cf3a2c7b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "dc614cf1-d04a-4f12-817c-4f8a864d683d",
                        "ec4d0ff8-2285-4f65-a47d-88e0ec62c510",
                        "18784f15-7940-4d89-9789-f2ed12990732"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "00dc8609-f200-40f9-a10c-f554ec9f07f3",
                    "title": "BiztimesTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimesTable.vue\"",
                            "fullTitle": "BiztimesTable.vue \"before each\" hook in \"BiztimesTable.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "df606b7f-4dd6-4ac3-a02c-fa136863afce",
                            "parentUUID": "00dc8609-f200-40f9-a10c-f554ec9f07f3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimesTable.vue should render correctly",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Business Hours'); // link to set permissions\nexpect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true); // getBiztimes\nexpect(mockstore.actions.getBiztimes).to.have.been.called;",
                            "err": {},
                            "uuid": "e8346153-a7f7-40f6-9e57-3dffa76ba715",
                            "parentUUID": "00dc8609-f200-40f9-a10c-f554ec9f07f3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e8346153-a7f7-40f6-9e57-3dffa76ba715"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "732b74e4-e3ad-4d9b-af20-392f70a3eb1b",
                    "title": "HolidaysTable.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f5eaf9ad-e519-45dc-a5f7-7dc343db49dc",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook",
                                    "fullTitle": "HolidaysTable.vue initial state \"before each\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_HolidaysTable.default, {\n  store\n});",
                                    "err": {},
                                    "uuid": "2ee5d4dc-d615-4081-b514-4859bf30d6cb",
                                    "parentUUID": null,
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7dab7487-1beb-4fe2-94e8-47256a495517",
                    "title": "Menu.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Menu.vue\"",
                            "fullTitle": "Menu.vue \"before each\" hook in \"Menu.vue\"",
                            "timedOut": false,
                            "duration": 13,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n}); // data-app prevents warning during test: [Vuetify] Unable to locate target [data-app]\n// https://forum.vuejs.org/t/vuetify-data-app-true-and-problems-rendering-v-dialog-in-unit-tests/27495\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");",
                            "err": {},
                            "uuid": "1a62d082-c102-4405-99de-509d0494f0ea",
                            "parentUUID": "7dab7487-1beb-4fe2-94e8-47256a495517",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "84f07bef-3c15-44f6-9bee-adfde4b54978",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Menu.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "28812987-e5e1-45af-be35-6a040262d7ea",
                                    "parentUUID": "84f07bef-3c15-44f6-9bee-adfde4b54978",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Menu.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('[data-test=\"setPermissionsMobile\"').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "3914a02a-883c-4d9f-9d20-7d9b926c06d7",
                                    "parentUUID": "84f07bef-3c15-44f6-9bee-adfde4b54978",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Menu.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.exists()).to.equal(true);\n  expect(deleteButton.attributes('disabled')).to.not.be.undefined;\n  done();\n});",
                                    "err": {},
                                    "uuid": "67a01afe-494e-4dd9-b3e3-47cc7506785f",
                                    "parentUUID": "84f07bef-3c15-44f6-9bee-adfde4b54978",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "28812987-e5e1-45af-be35-6a040262d7ea",
                                "3914a02a-883c-4d9f-9d20-7d9b926c06d7",
                                "67a01afe-494e-4dd9-b3e3-47cc7506785f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 139,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "97e5a9be-763e-4c21-9b37-6569edf9d646",
                            "title": "Menu item clicks",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add holiday button click",
                                    "fullTitle": "Menu.vue Menu item clicks add holiday button click",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  wrapper.find('button#addHolidayMobile').trigger('click');\n  it('commits SET_SELECTED_FOR_EDIT mutation', () => {\n    expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;\n  });\n  it('commits SET_SHOW_DIALOG mutation', () => {\n    expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\n  });\n  done();\n});",
                                    "err": {},
                                    "uuid": "28b98c04-8ef4-442f-bb6f-285fc5749399",
                                    "parentUUID": "97e5a9be-763e-4c21-9b37-6569edf9d646",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Menu.vue Menu item clicks enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 66,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n});\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");\nmenuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.attributes('disabled')).to.equal(undefined);\n  done();\n});",
                                    "err": {},
                                    "uuid": "cdfde44f-6e5e-4ff5-b578-86f8fca2ab55",
                                    "parentUUID": "97e5a9be-763e-4c21-9b37-6569edf9d646",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "28b98c04-8ef4-442f-bb6f-285fc5749399",
                                "cdfde44f-6e5e-4ff5-b578-86f8fca2ab55"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "49f3e273-bccf-49e9-b89f-44362d5ffc81",
                    "title": "Toolbar.vue",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2f67acdb-a3af-4a2e-8af1-dda491de2dc6",
                            "title": "initial state",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"initial state\"",
                                    "fullTitle": "Toolbar.vue initial state \"before each\" hook in \"initial state\"",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "a692a8f1-acab-4027-92af-9be4a907b576",
                                    "parentUUID": "2f67acdb-a3af-4a2e-8af1-dda491de2dc6",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Toolbar.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button#addHoliday').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "856f3946-29a1-4283-b0a4-9e7123ccf09a",
                                    "parentUUID": "2f67acdb-a3af-4a2e-8af1-dda491de2dc6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Toolbar.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "d31c4a3f-b333-4692-a361-2df2d66b8d64",
                                    "parentUUID": "2f67acdb-a3af-4a2e-8af1-dda491de2dc6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Toolbar.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.exists()).to.equal(true);\nexpect(deleteButton.attributes('disabled')).to.equal('disabled');",
                                    "err": {},
                                    "uuid": "76b58c47-beb9-4e57-ae8f-304738c03024",
                                    "parentUUID": "2f67acdb-a3af-4a2e-8af1-dda491de2dc6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "856f3946-29a1-4283-b0a4-9e7123ccf09a",
                                "d31c4a3f-b333-4692-a361-2df2d66b8d64",
                                "76b58c47-beb9-4e57-ae8f-304738c03024"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3db79b1a-2bf4-4eb0-8456-95a7d77054d4",
                            "title": "add holiday button click",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"add holiday button click\"",
                                    "fullTitle": "Toolbar.vue add holiday button click \"before each\" hook in \"add holiday button click\"",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "mockstore = (0, _store.mockStore)();\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\nwrapper.find('button#addHoliday').trigger('click');",
                                    "err": {},
                                    "uuid": "6efde178-a653-4a68-8e72-66152b4803c0",
                                    "parentUUID": "3db79b1a-2bf4-4eb0-8456-95a7d77054d4",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SELECTED_FOR_EDIT mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                                    "err": {},
                                    "uuid": "2b2c3fb5-fd5f-4252-80a8-a1a179e9bd07",
                                    "parentUUID": "3db79b1a-2bf4-4eb0-8456-95a7d77054d4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "commits SET_SHOW_DIALOG mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SHOW_DIALOG mutation",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                                    "err": {},
                                    "uuid": "08db6562-7213-45aa-b9b8-ed957a2f0de5",
                                    "parentUUID": "3db79b1a-2bf4-4eb0-8456-95a7d77054d4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2b2c3fb5-fd5f-4252-80a8-a1a179e9bd07",
                                "08db6562-7213-45aa-b9b8-ed957a2f0de5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f87e2d03-771e-41f8-8bca-9b068cfc5ea0",
                            "title": "holidays have been selected for deletion",
                            "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"holidays have been selected for deletion\"",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion \"before each\" hook in \"holidays have been selected for deletion\"",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nmockstore = (0, _store.mockStore)({\n  state\n});\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "38a55ce9-6bca-412f-bde7-22a96c93704c",
                                    "parentUUID": "f87e2d03-771e-41f8-8bca-9b068cfc5ea0",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "732b9ec0-69e3-4a4f-8e59-57589b72097b",
                                    "parentUUID": "f87e2d03-771e-41f8-8bca-9b068cfc5ea0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "dispatches delete_holidays action when delete holidays button is clicked",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion dispatches delete_holidays action when delete holidays button is clicked",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "deleteButton.trigger('click');\nexpect(mockstore.actions.delete_holidays).to.have.been.called;",
                                    "err": {},
                                    "uuid": "aced3200-ffc3-4623-b3ab-eefcda7ca16b",
                                    "parentUUID": "f87e2d03-771e-41f8-8bca-9b068cfc5ea0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "732b9ec0-69e3-4a4f-8e59-57589b72097b",
                                "aced3200-ffc3-4623-b3ab-eefcda7ca16b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "12123c36-4a09-4722-a872-21c0b4db3ec1",
                    "title": "biztime actions",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"before each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = {};",
                            "err": {},
                            "uuid": "a6c1cd6d-2933-496b-b7b4-bda5e599927c",
                            "parentUUID": "12123c36-4a09-4722-a872-21c0b4db3ec1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"after each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "7a88a3a3-a7d8-42fe-8e52-580978ff6efb",
                            "parentUUID": "12123c36-4a09-4722-a872-21c0b4db3ec1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getBiztimes",
                            "fullTitle": "biztime actions should getBiztimes",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getBiztimes({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]]]);",
                            "err": {},
                            "uuid": "06cf10ac-6ac8-4879-b5fe-47000b5f18f2",
                            "parentUUID": "12123c36-4a09-4722-a872-21c0b4db3ec1",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should saveBiztime",
                            "fullTitle": "biztime actions should saveBiztime",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.saveBiztime({\n  commit,\n  state\n}, { ..._list.default[0],\n  $commonLib: _commonLib.default\n});\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]], ['SET_SELECTED_FOR_EDIT', {}], ['SET_SHOW_DIALOG', false]]);",
                            "err": {},
                            "uuid": "4bcb171b-beca-4942-ae9d-616e49f49e9b",
                            "parentUUID": "12123c36-4a09-4722-a872-21c0b4db3ec1",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "06cf10ac-6ac8-4879-b5fe-47000b5f18f2",
                        "4bcb171b-beca-4942-ae9d-616e49f49e9b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1400ffaa-4868-4053-8a88-466adc8830c0",
                    "title": "biztime getters",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get biztimes",
                            "fullTitle": "biztime getters should get biztimes",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const state = {\n  biztimes: JSON.parse(JSON.stringify(_list.default))\n};\nconst biztimes = _getters.default.biztimes(state);\n(0, _chai.expect)(biztimes).not.to.deep.equal(_list.default);\nbiztimes.forEach(biztime => {\n  const startTime = {\n    hour: biztime.startHour,\n    minute: biztime.startMinute\n  };\n  const endTime = {\n    hour: biztime.endHour,\n    minute: biztime.endMinute\n  };\n  (0, _chai.expect)(biztime.startTime).to.deep.equal(startTime);\n  (0, _chai.expect)(biztime.endTime).to.deep.equal(endTime);\n});",
                            "err": {},
                            "uuid": "650103b8-abb1-4305-8c96-5e3b83364896",
                            "parentUUID": "1400ffaa-4868-4053-8a88-466adc8830c0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "650103b8-abb1-4305-8c96-5e3b83364896"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3aa2b8f5-e74a-4687-8bdf-47ba6c216974",
                    "title": "biztime mutations",
                    "fullFile": "/home/rich/integrify/1_PLUS/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_BIZTIMES",
                            "fullTitle": "biztime mutations should SET_BIZTIMES",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_BIZTIMES(state, [..._list.default]);\n(0, _chai.expect)(state.biztimes).to.deep.equal(_list.default);",
                            "err": {},
                            "uuid": "0f8b0318-b6d3-40c0-9141-19e3ec480435",
                            "parentUUID": "3aa2b8f5-e74a-4687-8bdf-47ba6c216974",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_FOR_EDIT",
                            "fullTitle": "biztime mutations should SET_SELECTED_FOR_EDIT",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SELECTED_FOR_EDIT(state, _list.default[0]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[0]);\nSET_SELECTED_FOR_EDIT(state, _list.default[3]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[3]);",
                            "err": {},
                            "uuid": "3dc29d84-0b37-4951-b89a-a02ddc432027",
                            "parentUUID": "3aa2b8f5-e74a-4687-8bdf-47ba6c216974",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "biztime mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.equal(true);\nSET_SHOW_DIALOG(state, false);\n(0, _chai.expect)(state.showDialog).to.equal(false);",
                            "err": {},
                            "uuid": "d86d11de-00e8-44ef-b0e5-b809fa870387",
                            "parentUUID": "3aa2b8f5-e74a-4687-8bdf-47ba6c216974",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "0f8b0318-b6d3-40c0-9141-19e3ec480435",
                        "3dc29d84-0b37-4951-b89a-a02ddc432027",
                        "d86d11de-00e8-44ef-b0e5-b809fa870387"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "ecc884aa-662b-4c73-bc75-7a4f005e2088",
                "a24ff7e2-68a9-4159-8b28-e25e3034a51a"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        }
    ],
    "meta": {
        "mocha": {
            "version": "8.1.1"
        },
        "mochawesome": {
            "options": {
                "quiet": false,
                "reportFilename": "mochawesome",
                "saveHtml": true,
                "saveJson": true,
                "consoleReporter": "spec",
                "useInlineDiffs": false,
                "code": true
            },
            "version": "6.1.1"
        },
        "marge": {
            "options": null,
            "version": "5.1.0"
        }
    }
}