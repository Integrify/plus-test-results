{
    "stats": {
        "suites": 20,
        "tests": 496,
        "passes": 493,
        "pending": 0,
        "failures": 0,
        "start": "2021-05-19T13:44:30.218Z",
        "end": "2021-05-19T13:44:30.218Z",
        "duration": 83727,
        "testsRegistered": 496,
        "passPercent": 99.39516129032258,
        "pendingPercent": 0,
        "other": 0,
        "hasOther": false,
        "skipped": 3,
        "hasSkipped": true
    },
    "results": [
        {
            "uuid": "0a94ae7b-e627-447b-88ec-0915f371922b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [
                {
                    "title": "\"before all\" hook",
                    "fullTitle": "\"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "// insert known tokens into redis (normally these are created by emailPasswordReset)\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait redisClient.setexAsync(`pwReset:${accountGuid}`, 3600, securityToken);\nawait redisClient.setexAsync(`pwReset:${securityToken}`, 3600, accountGuid);",
                    "err": {},
                    "uuid": "2a489514-c6d6-4512-8823-257a2455d375",
                    "parentUUID": "0a94ae7b-e627-447b-88ec-0915f371922b",
                    "isHook": true,
                    "skipped": false
                }
            ],
            "afterHooks": [],
            "tests": [
                {
                    "title": "should create a new password",
                    "fullTitle": "should create a new password",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "const mockReq = mocks.createNewPassword(securityToken);\nconst mockRes = mocks.mockResponse();\nawait resetPassword.createNewPassword(mockReq, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\n// ensure createNewPassword cleans up redis\nexpect(await redisClient.getAsync(`pwReset:${accountGuid}`)).to.be.null;\nexpect(await redisClient.getAsync(`pwReset:${securityToken}`)).to.be.null;",
                    "err": {},
                    "uuid": "a898e648-178e-47d0-bbdc-3ae95d35cbd2",
                    "parentUUID": "0a94ae7b-e627-447b-88ec-0915f371922b",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "ae223c1d-5ca5-4974-9504-e45f9515b616",
                    "title": "Auth API API Key Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/apiKey.test.js",
                    "file": "/test/integration/functions/apiKey.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"before all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "59a32b35-dfb8-4780-8cf6-199d768b9755",
                            "parentUUID": "ae223c1d-5ca5-4974-9504-e45f9515b616",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API API Key Tests\"",
                            "fullTitle": "Auth API API Key Tests \"after all\" hook in \"Auth API API Key Tests\"",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await apiKey.deleteTestKeys(testConfig.tenantOne.tenantId);",
                            "err": {},
                            "uuid": "32196bf2-e8f3-4944-bebb-34554c2669e4",
                            "parentUUID": "ae223c1d-5ca5-4974-9504-e45f9515b616",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                            "title": "api key crud ",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/apiKey.test.js",
                            "file": "/test/integration/functions/apiKey.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert an apiKey and return a doc",
                                    "fullTitle": "Auth API API Key Tests api key crud  should insert an apiKey and return a doc",
                                    "timedOut": false,
                                    "duration": 222,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = {expires: new Date(new Date().getTime() + 60000), testOnly: true, description: \"this is a test\"}\nawait apiKey.createApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nkey = inserted.key;\nid = inserted._id;\nexpect(inserted).to.exist;",
                                    "err": {},
                                    "uuid": "c21863c5-fbbc-4c84-8e2b-8d5ec9efcd9b",
                                    "parentUUID": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list an apiKeys",
                                    "fullTitle": "Auth API API Key Tests api key crud  should list an apiKeys",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nawait apiKey.listApiKeys(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst keyList = mockRes.body;\nexpect(keyList).to.exist;\nexpect(keyList.length).to.be.gt(0);\nexpect(keyList[0].hashedKey).to.exist",
                                    "err": {},
                                    "uuid": "93eddc49-ab6b-44ef-ba8a-a0919b5616bf",
                                    "parentUUID": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should verify an apiKey",
                                    "fullTitle": "Auth API API Key Tests api key crud  should verify an apiKey",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait apiKey.verifyApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"api key valid\");",
                                    "err": {},
                                    "uuid": "5e756ed7-c7f7-4843-ad4c-cc32b73b3e83",
                                    "parentUUID": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid api key and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid api key and return a JWT",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.key = key;\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonate(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "664513d9-cea5-4352-9009-bbd5501f6169",
                                    "parentUUID": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userName and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userName and return a JWT",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userName = testConfig.tenantOne.adminUser.userName;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);\ncontact = impersonated;",
                                    "err": {},
                                    "uuid": "6ff4089d-6a06-4306-b592-53284061e640",
                                    "parentUUID": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should  impersonate using a valid env token and userSid and return a JWT",
                                    "fullTitle": "Auth API API Key Tests api key crud  should  impersonate using a valid env token and userSid and return a JWT",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n\n\nreq.params.tenant = testConfig.tenantOne.tenantId;\nreq.params.userSid = contact.contactGuid;\nawait apiKey.impersonateWithSystemApiKey(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst impersonated = mockRes.body;\nexpect(impersonated).to.exist;\nexpect(impersonated.token).to.exist;\nexpect(impersonated.userName).to.equal(testConfig.tenantOne.adminUser.userName);",
                                    "err": {},
                                    "uuid": "6fe2da03-5b7e-4c1e-9acf-54ce8423a65e",
                                    "parentUUID": "e8cb5b30-095e-49a7-9d83-2288670f8398",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c21863c5-fbbc-4c84-8e2b-8d5ec9efcd9b",
                                "93eddc49-ab6b-44ef-ba8a-a0919b5616bf",
                                "5e756ed7-c7f7-4843-ad4c-cc32b73b3e83",
                                "664513d9-cea5-4352-9009-bbd5501f6169",
                                "6ff4089d-6a06-4306-b592-53284061e640",
                                "6fe2da03-5b7e-4c1e-9acf-54ce8423a65e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 307,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2dc5f579-3b34-44dd-9701-9f057f1b8c00",
                    "title": "Auth API Auth Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                    "file": "/test/integration/functions/auth.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Auth Tests\"",
                            "fullTitle": "Auth API Auth Tests \"before all\" hook in \"Auth API Auth Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "4d5d8d92-fde0-4e96-862e-c37e88d08a1e",
                            "parentUUID": "2dc5f579-3b34-44dd-9701-9f057f1b8c00",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "52a03b74-8af8-4774-b7f1-1300a26b7e55",
                            "title": "getGuestToken",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return guest auth token",
                                    "fullTitle": "Auth API Auth Tests getGuestToken should return guest auth token",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet getGuestTokenEvent = await mocks.getGuestTokenEvent()\n\t\t\tlet results = await dbauth.getGuestToken(getGuestTokenEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n      expect(mockRes.body.length).to.be.greaterThan(1000);",
                                    "err": {},
                                    "uuid": "86f75c97-f3c6-4cb6-9141-ca348dc19bcc",
                                    "parentUUID": "52a03b74-8af8-4774-b7f1-1300a26b7e55",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "86f75c97-f3c6-4cb6-9141-ca348dc19bcc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 43,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d02786ff-e4a5-4fd5-9363-7ae9b52db43f",
                            "title": "login",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a contact with a token",
                                    "fullTitle": "Auth API Auth Tests login should return a contact with a token",
                                    "timedOut": false,
                                    "duration": 134,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet loginEvent = await mocks.loginEvent()\n\t\t\tlet results = await dbauth.login(loginEvent, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst contactInfo = mockRes.body;\n\t\t\texpect(contactInfo.userName).equal(loginEvent.body.username);\n\t\t\texpect(contactInfo.token).to.exist;",
                                    "err": {},
                                    "uuid": "af90a63e-7aad-41a3-a82e-d2621393b3f0",
                                    "parentUUID": "d02786ff-e4a5-4fd5-9363-7ae9b52db43f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "af90a63e-7aad-41a3-a82e-d2621393b3f0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 134,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "22c03303-f251-4989-98e3-38783f202ffd",
                            "title": "refreshJwt",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests refreshJwt refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 130,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\nlet loginEvent = await mocks.loginEvent()\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.login(loginEvent, mockRes);\nconst contactInfo = mockRes.body;\nlogoutEvent.cookies = {\"integrifyRefreshToken\": contactInfo.refreshToken };\nlogoutEvent.body = {token: contactInfo.token, refreshToken: contactInfo.refreshToken }\nawait jwtFuncs.refreshJwt(logoutEvent, await mocks.mockResponse());\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "c0e57975-f19b-4695-a99c-b08c1e118c56",
                                    "parentUUID": "22c03303-f251-4989-98e3-38783f202ffd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c0e57975-f19b-4695-a99c-b08c1e118c56"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 130,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "98eba3db-1008-4911-a4df-e44401568ed4",
                            "title": "isAuthenticated",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "refresh a token a user out",
                                    "fullTitle": "Auth API Auth Tests isAuthenticated refresh a token a user out",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let mockRes = await mocks.mockResponse();\n\nawait jwtFuncs.isAuthenticated({cookies: {integrifyToken: \"fake\"}}, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "c9799f6a-1d67-4721-9810-1fe21e099280",
                                    "parentUUID": "98eba3db-1008-4911-a4df-e44401568ed4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c9799f6a-1d67-4721-9810-1fe21e099280"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9fe6e984-57b0-49d1-9f50-55086ea360f6",
                            "title": "logout",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/auth.test.js",
                            "file": "/test/integration/functions/auth.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should log a user out",
                                    "fullTitle": "Auth API Auth Tests logout should log a user out",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nlet logoutEvent = await mocks.logoutEvent()\nawait dbauth.logout(logoutEvent, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body).to.deep.equal({message: 'OK'});",
                                    "err": {},
                                    "uuid": "0f073b5a-d647-480f-94b7-6a030875775c",
                                    "parentUUID": "9fe6e984-57b0-49d1-9f50-55086ea360f6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0f073b5a-d647-480f-94b7-6a030875775c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "ccc5a1b7-bc34-45ab-ab32-2cb4014aba44",
                    "title": "Auth API Reset Password Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                    "file": "/test/integration/functions/resetPassword.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API Reset Password Tests\"",
                            "fullTitle": "Auth API Reset Password Tests \"before all\" hook in \"Auth API Reset Password Tests\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000);\nprocess.env.TESTING = true;\nresetRewired.__set__('nodemailer', nodemailerMock);",
                            "err": {},
                            "uuid": "fac44198-827a-404b-8ca1-1e91fbdf61e2",
                            "parentUUID": "ccc5a1b7-bc34-45ab-ab32-2cb4014aba44",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cbf6a825-3ff6-4d8b-8bff-e0a2bc778d5c",
                            "title": "emailUsernames",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should send an email of accounts for existing email",
                                    "fullTitle": "Auth API Reset Password Tests emailUsernames should send an email of accounts for existing email",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\n      const accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\n      const mockRes = mocks.mockResponse();\n      const mockReq = await mocks.emailUsernames();\n      await resetRewired.emailUsernames(mockReq, mockRes);\n      expect(mockRes.statusCode).equal(200);\n      expect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "7996b797-f86b-4407-89a1-ce37726eac48",
                                    "parentUUID": "cbf6a825-3ff6-4d8b-8bff-e0a2bc778d5c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7996b797-f86b-4407-89a1-ce37726eac48"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "353f4f06-a0a1-4b23-a57d-edda5c78ed56",
                            "title": "passwordReset",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/resetPassword.test.js",
                            "file": "/test/integration/functions/resetPassword.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"passwordReset\"",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset \"before all\" hook in \"passwordReset\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "resetRewired.__set__('nodemailer', nodemailerMock);",
                                    "err": {},
                                    "uuid": "bad907f1-75b0-46f0-beff-826c74983e0e",
                                    "parentUUID": "353f4f06-a0a1-4b23-a57d-edda5c78ed56",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "emailPassworReset",
                                    "fullTitle": "Auth API Reset Password Tests passwordReset emailPassworReset",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let config = (await Config.getConfig()).test;\nconst accountGuid = config.tenantOne.adminUser.sid.toLowerCase();\nconst mockRes = mocks.mockResponse();\nconst mockReq = await mocks.emailPasswordReset();\nawait resetRewired.emailPasswordReset(mockReq, mockRes);\n// check if security token was added to redis\nconst securityToken = await redisClient.getAsync(`pwReset:${accountGuid}`);\nconst accountEntry = await redisClient.getAsync(`pwReset:${securityToken}`);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nexpect(securityToken).to.exist;\nexpect(accountEntry).to.exist;\n// clean up entries leftover from calling emailPasswordReset\nawait redisClient.del(`pwReset:${accountGuid}`);\nawait redisClient.del(`pwReset:${securityToken}`);",
                                    "err": {},
                                    "uuid": "eaeb0ba8-17a5-4127-befb-5567b8ab2049",
                                    "parentUUID": "353f4f06-a0a1-4b23-a57d-edda5c78ed56",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "eaeb0ba8-17a5-4127-befb-5567b8ab2049"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "679f97a2-f0f8-45bc-89d7-3acbf4b671b4",
                    "title": "Auth API SAML Settings Tests",
                    "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/samlSettings.test.js",
                    "file": "/test/integration/functions/samlSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"before all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()",
                            "err": {},
                            "uuid": "cfa48365-4e22-4889-a851-f86e5d43e4b5",
                            "parentUUID": "679f97a2-f0f8-45bc-89d7-3acbf4b671b4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "fullTitle": "Auth API SAML Settings Tests \"after all\" hook in \"Auth API SAML Settings Tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await samlSettings.deleteSamlSettingsByName(testConfig.tenantOne.tenantId, 'unitTestIDP')",
                            "err": {},
                            "uuid": "1f988ec9-feb3-4060-8111-70945b923d2b",
                            "parentUUID": "679f97a2-f0f8-45bc-89d7-3acbf4b671b4",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                            "title": "SAML Settings crud ",
                            "fullFile": "/home/tim/src/integrify/api-auth/test/integration/functions/samlSettings.test.js",
                            "file": "/test/integration/functions/samlSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should insert saml settings and return a doc",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should insert saml settings and return a doc",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n           \nreq.body = data;\nawait samlSettings.createSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\n\nsamlId = inserted._id;\nexpect(inserted).to.exist;\nexpect(inserted.idpMetaData).to.equal(data.idpMetaData);\nexpect(inserted.idpName).to.equal(data.idpName);\nexpect(inserted.idpDescription).to.equal(data.idpDescription);\nexpect(inserted.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "35040b16-1e20-49a3-b606-bc198238718c",
                                    "parentUUID": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings without an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings without an id",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.createdByDetail).to.exist;",
                                    "err": {},
                                    "uuid": "3e36c239-4e15-497f-8483-8e6c910929f9",
                                    "parentUUID": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get saml settings with an id",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should get saml settings with an id",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId.toString();\nawait samlSettings.getSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result._id.toString()).to.equal(samlId.toString());",
                                    "err": {},
                                    "uuid": "81d37cb0-374d-458a-a293-d084ca950999",
                                    "parentUUID": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should update saml settings",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\n\nreq.body = data;\n\nawait samlSettings.updateSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.exist;",
                                    "err": {},
                                    "uuid": "f1751826-cf31-438f-b1fe-691458750e37",
                                    "parentUUID": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return sp metadata",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should return sp metadata",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.tenant = testConfig.tenantOne.tenantId;\nawait samlSettings.getMetaData(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst metadata = mockRes.body;\nexpect(metadata).to.exist;",
                                    "err": {},
                                    "uuid": "f76db4ca-6750-4b3d-a772-8be9c662e613",
                                    "parentUUID": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete saml settings",
                                    "fullTitle": "Auth API SAML Settings Tests SAML Settings crud  should delete saml settings",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.samlId = samlId;\nawait samlSettings.deleteSamlSettings(req, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst deleted = mockRes.body;\nexpect(deleted.message).to.equal(\"delete successful\");",
                                    "err": {},
                                    "uuid": "cb308385-51a4-4586-ad34-20474096cb59",
                                    "parentUUID": "0544a190-dc7d-4744-a747-0747e3fa3aed",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "35040b16-1e20-49a3-b606-bc198238718c",
                                "3e36c239-4e15-497f-8483-8e6c910929f9",
                                "81d37cb0-374d-458a-a293-d084ca950999",
                                "f1751826-cf31-438f-b1fe-691458750e37",
                                "f76db4ca-6750-4b3d-a772-8be9c662e613",
                                "cb308385-51a4-4586-ad34-20474096cb59"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 83,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "a898e648-178e-47d0-bbdc-3ae95d35cbd2"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        },
        {
            "uuid": "40be92c0-9318-4370-82f4-8a100d4541a2",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "3bb55537-03a2-461b-be35-86f04b4758d0",
                    "title": "Dashboard controller tests",
                    "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.controller.test.js",
                    "file": "/test/dashboard.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "844aa4a0-8fca-426d-b1d8-3b754331d300",
                            "parentUUID": "3bb55537-03a2-461b-be35-86f04b4758d0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "5d5a8eae-5188-4a7a-8b2c-5e8cb0febd3a",
                            "parentUUID": "3bb55537-03a2-461b-be35-86f04b4758d0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                            "title": "dashboard crud ",
                            "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.controller.test.js",
                            "file": "/test/dashboard.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 42,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.createDashboard(tenant, dashboardObj);\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "42d88f49-1f3a-42fd-aac2-78b0de9bc55a",
                                    "parentUUID": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboards = await dashboardController.listDashboards(tenant);\n         expect(dashboards.length).to.be.gt(0);  \n         let createdDashord  = dashboards.find((d) => {\n             return d.sid === sid;\n         })\n         expect\n         (createdDashord).to.exist",
                                    "err": {},
                                    "uuid": "d17ecee4-3cab-439a-8291-a94cfdd21ce7",
                                    "parentUUID": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard = await dashboardController.getDashboard(tenant,sid);\n            expect(dashboard).to.exist         \n            expect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "7df08b81-4fe6-491a-8ee9-19fa1098aac8",
                                    "parentUUID": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dashboard.banner = 'test-updated';\n            const updatedDashboard = await dashboardController.updateDashboard(tenant,dashboard.toObject());\n            expect(updatedDashboard).to.exist         \n            expect(updatedDashboard.sid).to.equal(sid)\n            expect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "f3a8d509-5c1a-4fd9-aba2-c74c57052e55",
                                    "parentUUID": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const copiedDashboard = await dashboardController.copyDashboard(tenant, sid);\n            expect(copiedDashboard).to.exist         \n            expect(copiedDashboard.sid).to.not.equal(sid)\n            expect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "2eeb5ac2-8789-4f5a-84c3-e9f9f57fedb1",
                                    "parentUUID": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a dashboard",
                                    "fullTitle": "Dashboard controller tests dashboard crud  delete a a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await dashboardController.deleteDashboard(tenant,sid);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "fd8b29f8-62c2-4412-9f1a-e1e933ee4c24",
                                    "parentUUID": "00feaa59-8abb-4a42-8e77-fadf879e872f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "42d88f49-1f3a-42fd-aac2-78b0de9bc55a",
                                "d17ecee4-3cab-439a-8291-a94cfdd21ce7",
                                "7df08b81-4fe6-491a-8ee9-19fa1098aac8",
                                "f3a8d509-5c1a-4fd9-aba2-c74c57052e55",
                                "2eeb5ac2-8789-4f5a-84c3-e9f9f57fedb1",
                                "fd8b29f8-62c2-4412-9f1a-e1e933ee4c24"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 81,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d11b476d-46f0-46c9-9609-d09b29c7174e",
                    "title": "Dashboard route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.handlers.test.js",
                    "file": "/test/dashboard.handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Dashboard route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\n\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nsession = (await mocks.req()).oauth;\nperms  = await permissions.currentUserPermissions(session)\nlet permissionsWithRun = perms.concat([\n    {\n        \"objectType\": \"tab\",\n        \"ownerSid\": \"bb6cb26b-d179-4763-b2cb-69d107dfd1d8\",\n        \"ownerType\": \"system\",\n        \"permissions\": enums.permissionTypes.run,\n        \"roleName\": \"system administrators\",\n        \"roleGuid\": \"a48ea7cf-f1ba-4ca9-bf17-2c97d49336cd\"\n      }\n])\nawait permissions.cachePerms(session, permissionsWithRun);\nconsole.log(permissionsWithRun)",
                            "err": {},
                            "uuid": "779bf71c-9919-4661-bf23-82ba7e1a6784",
                            "parentUUID": "d11b476d-46f0-46c9-9609-d09b29c7174e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Dashboard route handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-copy'});\nconsole.log(deleted);\nawait permissions.cachePerms(session, perms);",
                            "err": {},
                            "uuid": "75a38221-15db-48f2-8549-af32dd32d36b",
                            "parentUUID": "d11b476d-46f0-46c9-9609-d09b29c7174e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9247c678-ac84-4842-8607-71a7335b25f3",
                            "title": "dashboard crud ",
                            "fullFile": "/home/tim/src/integrify/api-dashboards/test/dashboard.handlers.test.js",
                            "file": "/test/dashboard.handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should create a dashboard",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = dashboardObj;\nawait handlers.createDashboard(req,mockRes);\nconst dashboard = req.body;\nsid = dashboard.sid;\nexpect(sid).to.exist",
                                    "err": {},
                                    "uuid": "367baa33-1dd4-4bc8-a6fb-82bdccb55405",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for end users",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for end users",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "afae6815-bd4c-4996-9ee8-7036e4f17006",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list dashboards for admins",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should list dashboards for admins",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.admin = true;\nawait handlers.listDashboards(req,mockRes);\nconst  dashboards = mockRes.body;\nexpect(dashboards.length).to.be.gt(0);  \nlet createdDashboard  = dashboards.find((d) => {\n    return d.sid === sid;\n})\nexpect(createdDashboard).to.exist",
                                    "err": {},
                                    "uuid": "bc27743d-1a23-45ca-aa08-dcd13d16b4ab",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should get a dashboard",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.getDashboard(req,mockRes);\ndashboard = mockRes.body;\nexpect(dashboard).to.exist         \nexpect(dashboard.sid).to.equal(sid)",
                                    "err": {},
                                    "uuid": "99231650-3a53-4789-9422-ab14b1b4f491",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should update a dashboard",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.updateDashboard(req,mockRes);\nconst updatedDashboard = mockRes.body;\nexpect(updatedDashboard).to.exist         \nexpect(updatedDashboard.sid).to.equal(sid)\nexpect(updatedDashboard.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "f2b08481-76f5-4bd0-83d0-18eaf32c5f3d",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should copy a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should copy a dashboard",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nreq.body = dashboard.toObject();\nawait handlers.copyDashboard(req,mockRes);\nconst copiedDashboard = mockRes.body;\nexpect(copiedDashboard).to.exist         \nexpect(copiedDashboard.sid).to.not.equal(sid)\nexpect(copiedDashboard._id).to.exist;",
                                    "err": {},
                                    "uuid": "7a2d81b7-c677-49e8-b49f-c829a7c8d97e",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a dashboard",
                                    "fullTitle": "Dashboard route handler tests dashboard crud  should delete a dashboard",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.sid = sid;\nawait handlers.deleteDashboard(req,mockRes);\nlet deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "97858125-2b5b-444f-b8d4-4abc1013d479",
                                    "parentUUID": "9247c678-ac84-4842-8607-71a7335b25f3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "367baa33-1dd4-4bc8-a6fb-82bdccb55405",
                                "afae6815-bd4c-4996-9ee8-7036e4f17006",
                                "bc27743d-1a23-45ca-aa08-dcd13d16b4ab",
                                "99231650-3a53-4789-9422-ab14b1b4f491",
                                "f2b08481-76f5-4bd0-83d0-18eaf32c5f3d",
                                "7a2d81b7-c677-49e8-b49f-c829a7c8d97e",
                                "97858125-2b5b-444f-b8d4-4abc1013d479"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 86,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1eab0953-7999-460b-8e0f-b1821c0f1abc",
                    "title": "Legacy tab mongo tests",
                    "fullFile": "/home/tim/src/integrify/api-dashboards/test/tab.test.js",
                    "file": "/test/tab.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig()\ntenant = testConfig.tenantOne.tenantId;;\ntab = await dashboardController.createTestTab(tenant)\nexpect(tab.SID).to.exist",
                            "err": {},
                            "uuid": "7291cc63-d4a4-42d7-87bd-48caeee7c439",
                            "parentUUID": "1eab0953-7999-460b-8e0f-b1821c0f1abc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Legacy tab mongo tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await dashboardController.deleteTabs(tenant, {Title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test'});\ndeleted = await dashboardController.deleteDashboards(tenant, {title: 'created-by-mocha-test-migrated'});",
                            "err": {},
                            "uuid": "71595af2-01c6-41ab-bec1-58aafaab74a9",
                            "parentUUID": "1eab0953-7999-460b-8e0f-b1821c0f1abc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0f34421a-acba-469f-a5ca-5571cc067e98",
                            "title": "tab crud ",
                            "fullFile": "/home/tim/src/integrify/api-dashboards/test/tab.test.js",
                            "file": "/test/tab.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should create a legacy tab",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tab = await dashboardController.createTestTab(tenant);\n\n tabSid = tab.SID;\n expect(tabSid).to.exist",
                                    "err": {},
                                    "uuid": "9060e1c7-b29d-43c2-af37-40695dd117cf",
                                    "parentUUID": "0f34421a-acba-469f-a5ca-5571cc067e98",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list legacy tabs",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should list legacy tabs",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  tabs = await dashboardController.listTabs(tenant);\n expect(tabs.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "bb752f81-cc46-4111-9c28-d8b266c9b34e",
                                    "parentUUID": "0f34421a-acba-469f-a5ca-5571cc067e98",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should get a legacy tab",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "tab = await dashboardController.getTab(tenant,tabSid);\n            expect(tab).to.exist         \n            expect(tab.SID).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "4db74dbe-53c5-4ff7-9287-da41d81a13b1",
                                    "parentUUID": "0f34421a-acba-469f-a5ca-5571cc067e98",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a tab using a dashboard object",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should update a tab using a dashboard object",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const dashboardObject = {\n    sid: tab.SID,\n    title: tab.Title,\n    ordinal: 5000,\n}\nconst dashboardMask = await dashboardController.updateTabFromDashboardObject(tenant,dashboardObject);\nexpect(dashboardObject.modifiedDate).to.exist\ntab = await dashboardController.getTab(tenant,tab.SID);\nexpect(tab).to.exist         \nexpect(tab.SID).to.equal(tabSid)\nexpect(tab.Ordinal).to.equal(dashboardObject.ordinal)",
                                    "err": {},
                                    "uuid": "bf127f26-1218-457e-a099-fe6a2ff976cf",
                                    "parentUUID": "0f34421a-acba-469f-a5ca-5571cc067e98",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should convert a legacy tab",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should convert a legacy tab",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  dashboard = await dashboardController.converTabToDashboard(tab);\n            expect(dashboard).to.exist         \n            expect(dashboard.layouts).to.exist;\n            expect(dashboard.legacySid).to.equal(tabSid)",
                                    "err": {},
                                    "uuid": "a170c491-bff6-460d-adc1-ff48a81d2e9a",
                                    "parentUUID": "0f34421a-acba-469f-a5ca-5571cc067e98",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should migrate legacy tab to dashboard",
                                    "fullTitle": "Legacy tab mongo tests tab crud  should migrate legacy tab to dashboard",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  success = await dashboardController.migrateTabToDashboard(tenant, tabSid);\n            expect(success.sid).to.exist;",
                                    "err": {},
                                    "uuid": "a7a0232a-a577-4487-8fb7-49e449747f13",
                                    "parentUUID": "0f34421a-acba-469f-a5ca-5571cc067e98",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9060e1c7-b29d-43c2-af37-40695dd117cf",
                                "bb752f81-cc46-4111-9c28-d8b266c9b34e",
                                "4db74dbe-53c5-4ff7-9287-da41d81a13b1",
                                "bf127f26-1218-457e-a099-fe6a2ff976cf",
                                "a170c491-bff6-460d-adc1-ff48a81d2e9a",
                                "a7a0232a-a577-4487-8fb7-49e449747f13"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "6862317b-2271-4a78-9176-198064ff6349",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "a8dd211e-1eac-4061-85ef-2af5b6609bc1",
                    "title": "Files db controller tests",
                    "fullFile": "/home/tim/src/integrify/api-files/test/db/file.controller.test.js",
                    "file": "/test/db/file.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"before all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await testLib.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "620f988b-0d95-4506-866e-cbb9378d03ed",
                            "parentUUID": "a8dd211e-1eac-4061-85ef-2af5b6609bc1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Files db controller tests\"",
                            "fullTitle": "Files db controller tests \"after all\" hook in \"Files db controller tests\"",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await fileController.removeFiles(tenant, {path: \"/created/by/mocha/test\"});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "15dfbfea-b67d-4d56-a761-76ab493c94d9",
                            "parentUUID": "a8dd211e-1eac-4061-85ef-2af5b6609bc1",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e3b5673d-6676-4a87-8c17-dd104f4734f8",
                            "title": "file crud ",
                            "fullFile": "/home/tim/src/integrify/api-files/test/db/file.controller.test.js",
                            "file": "/test/db/file.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a file",
                                    "fullTitle": "Files db controller tests file crud  should create a file",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const file = await fileController.createFile(tenant, fileObj);\nsid = file.sid;\nexpect(sid).to.exist;",
                                    "err": {},
                                    "uuid": "133c704e-0088-45f0-b411-fcaa2e661142",
                                    "parentUUID": "e3b5673d-6676-4a87-8c17-dd104f4734f8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a file",
                                    "fullTitle": "Files db controller tests file crud  should get a file",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.getFile(tenant, sid);\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "624ff4b2-cc42-417b-b949-a5e9d1c1365c",
                                    "parentUUID": "e3b5673d-6676-4a87-8c17-dd104f4734f8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should find a file",
                                    "fullTitle": "Files db controller tests file crud  should find a file",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "file = await fileController.findFile(tenant, {filePath: \"/created/by/mocha/test\"});\nexpect(file).to.exist;\nexpect(file.sid).to.equal(sid);",
                                    "err": {},
                                    "uuid": "be7ed269-1d45-4c6a-b362-21a3e8caa972",
                                    "parentUUID": "e3b5673d-6676-4a87-8c17-dd104f4734f8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a file",
                                    "fullTitle": "Files db controller tests file crud  should update a file",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const updatedFile = await fileController.updateFile(\n  tenant,\n  file.toObject()\n);\nexpect(updatedFile).to.exist;\nexpect(updatedFile.sid).to.equal(sid);\nexpect(updatedFile.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "4bcc870e-0d9a-46bf-afe9-0537e94c9ce5",
                                    "parentUUID": "e3b5673d-6676-4a87-8c17-dd104f4734f8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a file",
                                    "fullTitle": "Files db controller tests file crud  delete a a file",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await fileController.removeFile(tenant, fileObj);\nexpect(deleted).to.exist;\nexpect(deleted.deletedCount).to.equal(1);",
                                    "err": {},
                                    "uuid": "bf9c53fd-a086-4a77-9cdd-addfe9c6d452",
                                    "parentUUID": "e3b5673d-6676-4a87-8c17-dd104f4734f8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "133c704e-0088-45f0-b411-fcaa2e661142",
                                "624ff4b2-cc42-417b-b949-a5e9d1c1365c",
                                "be7ed269-1d45-4c6a-b362-21a3e8caa972",
                                "4bcc870e-0d9a-46bf-afe9-0537e94c9ce5",
                                "bf9c53fd-a086-4a77-9cdd-addfe9c6d452"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 53,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "49dda3bd-3a5d-44ee-abca-da24c544be88",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "b3e2a3bb-db5c-4dc8-ac18-0c0fb82a8255",
                    "title": "Form controller tests",
                    "fullFile": "/home/tim/src/integrify/api-forms/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Form controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 8,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenant = config.tenantOne.tenantId;\nsession = {jwt_token: 'xxxxx', tenant: config.tenantOne.tenantId, \nuser_sid: config.tenantOne.adminUser.sid,\nprofile: {\n  sid: config.tenantOne.adminUser.sid,\n  user_sid: config.tenantOne.adminUser.sid,\n  user_name: config.tenantOne.adminUser.userName,\n  email: \"test@nowhere.com\",\n  name: config.tenantOne.adminUser.userName + \" user\"\n}\n   }",
                            "err": {},
                            "uuid": "b7b4bf4a-ffd7-4408-8b86-74c1f05154c1",
                            "parentUUID": "b3e2a3bb-db5c-4dc8-ac18-0c0fb82a8255",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "73a715dc-76c3-499c-bacc-2996584db784",
                            "title": "form retrieval",
                            "fullFile": "/home/tim/src/integrify/api-forms/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should retrieve a form by id with default",
                                    "fullTitle": "Form controller tests form retrieval should retrieve a form by id with default",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const form = await controller.getForm(tenant, profileFormSid);\nexpect(form['name']).to.equal('Contact Profile Update Form');",
                                    "err": {},
                                    "uuid": "ff8ec3b7-91a2-48b6-aafd-829a251fb49d",
                                    "parentUUID": "73a715dc-76c3-499c-bacc-2996584db784",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should parse out questions",
                                    "fullTitle": "Form controller tests form retrieval should parse out questions",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const questions = await controller.getFormQuestions(tenant, profileFormSid);\nexpect(questions.length).to.equal(12);\nexpect(Object.keys(questions[0])).to.have.members(['id', 'displayName', 'label', 'show', 'type', 'validation'])",
                                    "err": {},
                                    "uuid": "cfaf059d-d458-48ad-a248-c186dfaca268",
                                    "parentUUID": "73a715dc-76c3-499c-bacc-2996584db784",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms without a name search",
                                    "fullTitle": "Form controller tests form retrieval should list forms without a name search",
                                    "timedOut": false,
                                    "duration": 166,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const forms = await controller.listForms(tenant);\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].name).to.exist;",
                                    "err": {},
                                    "uuid": "f7d03315-b16d-4cc8-9050-13b25f1d4ede",
                                    "parentUUID": "73a715dc-76c3-499c-bacc-2996584db784",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms with a name search",
                                    "fullTitle": "Form controller tests form retrieval should list forms with a name search",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const forms = await controller.listForms(tenant, {sid: profileFormSid});\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].sid).to.equal(profileFormSid);",
                                    "err": {},
                                    "uuid": "a65ebee8-e41b-4090-bcd0-8bc3e0deb1c7",
                                    "parentUUID": "73a715dc-76c3-499c-bacc-2996584db784",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ff8ec3b7-91a2-48b6-aafd-829a251fb49d",
                                "cfaf059d-d458-48ad-a248-c186dfaca268",
                                "f7d03315-b16d-4cc8-9050-13b25f1d4ede",
                                "a65ebee8-e41b-4090-bcd0-8bc3e0deb1c7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 235,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3f64e78c-8a3f-4ebc-a111-44ee7f0dc4e0",
                    "title": "Form route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-forms/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Form route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenant = config.tenantOne.tenantId;\nintegrifyEnvToken = config.tenantOne.tenantId + \" \" + process.env.INTEGRIFY_ENV_TOKEN\noauth = {jwt_token: 'xxxxx', tenant: config.tenantOne.tenantId, \nuser_sid: config.tenantOne.adminUser.sid,\nprofile: {\n  sid: config.tenantOne.adminUser.sid,\n  user_sid: config.tenantOne.adminUser.sid,\n  user_name: config.tenantOne.adminUser.userName,\n  email: \"test@nowhere.com\",\n  name: config.tenantOne.adminUser.userName + \" user\"\n}\n       }",
                            "err": {},
                            "uuid": "a7ef34ed-ecc7-4c73-8567-53b93339c643",
                            "parentUUID": "3f64e78c-8a3f-4ebc-a111-44ee7f0dc4e0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "fb536e09-de8b-4df0-b548-ad94db061376",
                            "title": "form retrieval",
                            "fullFile": "/home/tim/src/integrify/api-forms/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should retrieve a form by id with default",
                                    "fullTitle": "Form route handler tests form retrieval should retrieve a form by id with default",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.formSid = profileFormSid;\nawait handlers.getForm(req,mockRes);\nconst form = mockRes.body;\nexpect(form.name).to.equal('Contact Profile Update Form');",
                                    "err": {},
                                    "uuid": "237e1cc0-de4d-4696-8186-ae29e6091113",
                                    "parentUUID": "fb536e09-de8b-4df0-b548-ad94db061376",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should parse out questions",
                                    "fullTitle": "Form route handler tests form retrieval should parse out questions",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.formSid = profileFormSid;\nawait handlers.getFormQuestions(req, mockRes);\nconst questions = mockRes.body;\nexpect(questions.length).to.equal(12);\nexpect(Object.keys(questions[0])).to.have.members(['id', 'displayName', 'label', 'show', 'type', 'validation'])",
                                    "err": {},
                                    "uuid": "4a30d2aa-7109-4e4c-8fc5-0a8ef4fff066",
                                    "parentUUID": "fb536e09-de8b-4df0-b548-ad94db061376",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms without a query or userPerms",
                                    "fullTitle": "Form route handler tests form retrieval should list forms without a query or userPerms",
                                    "timedOut": false,
                                    "duration": 321,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\n//req.params.formSid = profileFormSid;\nawait handlers.searchForms(req,mockRes);\nconst forms = mockRes.body;\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].name).to.exist;\nexpect(forms[0].categoryName).to.exist;",
                                    "err": {},
                                    "uuid": "0cf4b23d-2c7c-40e2-96c5-74c1901ddfca",
                                    "parentUUID": "fb536e09-de8b-4df0-b548-ad94db061376",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list forms with a search term",
                                    "fullTitle": "Form route handler tests form retrieval should list forms with a search term",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query.search = 'profile Update';\nawait handlers.searchForms(req,mockRes);\nconst forms = mockRes.body;\nexpect(forms.length).to.be.gt(0);\nexpect(forms[0].categoryName).to.exist;",
                                    "err": {},
                                    "uuid": "7e30ef34-442e-4dd7-b6a3-70cfcdcf8653",
                                    "parentUUID": "fb536e09-de8b-4df0-b548-ad94db061376",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "237e1cc0-de4d-4696-8186-ae29e6091113",
                                "4a30d2aa-7109-4e4c-8fc5-0a8ef4fff066",
                                "0cf4b23d-2c7c-40e2-96c5-74c1901ddfca",
                                "7e30ef34-442e-4dd7-b6a3-70cfcdcf8653"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 345,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "d445bbe1-8651-4760-8a07-398455c66de1",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "76259ac4-6d5e-4a79-b640-6bba0732166b",
                    "title": "Instance API Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                    "file": "/test/db/instanceController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level\n// session = {tenant: config.tenantOne.tenantId, user_sid: '1e660111-de6f-4318-8f51-6e59cb33d8d7'} //process level\n// session = {tenant: config.tenantOne.tenantId, user_sid:'521a92c8-e77c-4537-811b-dea6e533d800'} //category level\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "8c7cf9e2-4216-40fe-833d-9eec534002f6",
                            "parentUUID": "76259ac4-6d5e-4a79-b640-6bba0732166b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                            "title": "list tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "get a full instance",
                                    "fullTitle": "Instance API Controller Tests list tests get a full instance",
                                    "timedOut": false,
                                    "duration": 320,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst fullInstance = await instanceController.getFullInstance(\n  sampleInstanceGuid\n);\nexpect(fullInstance).to.exist;\nexpect(fullInstance.instanceTasks.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "2eac7d9c-6590-4186-955f-adbf4c6b26ef",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid)\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "7bbbd9a5-c18f-4167-be16-7835103d0129",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with requester",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with requester",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {requester: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.exist;\nexpect(instance.requester.contactGuid).to.exist;\nexpect(instance.client).to.not.exist;",
                                    "err": {},
                                    "uuid": "51aefb0d-244f-4030-89cf-de32ac7a0926",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {client: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "bde7dcaf-677a-4d14-be6f-aa6be03b93a4",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance with client manager",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance with client manager",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\n// get instances for Joe User, who reports to System System\nlet instances = await Instance.query().where(\"clientGuid\", '92a73dad-d953-4c59-9c5e-5d037791d411');\n\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instance = await instanceController.getInstance(sampleInstanceGuid, {clientManager: true})\nexpect(instance).to.exist;\nexpect(instance.instanceGuid).to.equal(sampleInstanceGuid)\nexpect(instance.instanceId).to.be.gt(0)\nexpect(instance.requester).to.not.exist;\nexpect(instance.client).to.exist;\nexpect(instance.client.contactGuid).to.exist;\nexpect(instance.client.manager).to.exist;\nexpect(instance.client.manager.contactGuid).to.exist;",
                                    "err": {},
                                    "uuid": "9716c847-5386-4df7-9f30-c893f0d98020",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance process",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance process",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet instances = await Instance.query().orderBy(\"createdDate\", \"desc\");\nexpect(instances.length).to.be.gt(0);\nsampleInstanceGuid = instances[0].instanceGuid;\nsampleInstance = instances[0];\nconst instanceController = new InstanceController(config.tenantOne);\nconst instanceProcess = await instanceController.getInstanceProcess(sampleInstanceGuid)\nexpect(instanceProcess).to.exist;\nexpect(instanceProcess.instanceGuid).to.equal(sampleInstanceGuid)",
                                    "err": {},
                                    "uuid": "e4403c75-4400-45e2-bf70-e6c00d400f5b",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "gets an instance recipient tasks data by instanceSid",
                                    "fullTitle": "Instance API Controller Tests list tests gets an instance recipient tasks data by instanceSid",
                                    "timedOut": false,
                                    "duration": 39,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(config.tenantOne);\nconst instanceSid = '6D4785AE-57A2-46C5-9141-DE2B134ED8EF'\nconst instanceTasks = await instanceController.getInstanceRecipientTasksData(instanceSid);\n\nexpect(instanceTasks).to.exist;\nexpect(instanceTasks.length).to.be.gt(0);\nconst maintenanceReqFormTask = instanceTasks[2]\nexpect(maintenanceReqFormTask.taskName).to.equal('Maintenance Request Form')\nexpect(maintenanceReqFormTask.recipientTasks.length).to.be.gt(0)\nconst recipientTask = maintenanceReqFormTask.recipientTasks[0]\nexpect(recipientTask.recipientGuid).to.equal('4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF');\nexpect(recipientTask.taskData.length).to.be.gt(0)\nexpect(recipientTask.taskData.find(x => x.dataLabel == 'Location of Problem').dataValue).to.equal('Inside the building');",
                                    "err": {},
                                    "uuid": "0a2547b5-a34b-434d-9065-04b356183fd4",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests columns",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests columns",
                                    "timedOut": false,
                                    "duration": 74,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getMyRequests();\n        \nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0);\nsampleInstance = firstInstance;",
                                    "err": {},
                                    "uuid": "3bbe0295-9ed3-4f40-9ed3-7b55c8bdf11e",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - ID",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - ID",
                                    "timedOut": false,
                                    "duration": 153,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processId\",\n          data: {\n            comparison: \"eq\",\n            value: sampleInstance.processId,\n          },\n        },\n      ],\n      count: 5,\n    });\n        \n    expect(result.results[0].processId).to.equal(sampleInstance.processId);\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"gt\",\n            value: 500,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"asc\",\n      count: 5,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.length.should.equal(5); \n        \n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.gt(500);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceId\",\n          data: {\n            comparison: \"lt\",\n            value: 505,\n          },\n        },\n      ],\n      sort: \"instanceId\",\n      dir: \"desc\",\n      count: 2,\n    });\n        \n    expect(result.results.length).to.equal(2);\n    result.results.forEach((result) => {\n      expect(result.instanceId).to.be.lt(505);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "ad0a0aaa-cae2-4552-8819-b4486af74582",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - date",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - date",
                                    "timedOut": false,
                                    "duration": 101,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let d = moment().day(-90);\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"90\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n      expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().year(-30);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"30\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length)\n        expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    d = moment().day(-7);\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"range\", value: \"7\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-3);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"3\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    // d = moment().day(-1);\n    // result = await f.call(instanceController, {\n    //   filters: [\n    //     {\n    //       field: \"StartDate\",\n    //       data: { comparison: \"range\", value: \"1\" },\n    //     },\n    //   ],\n    //   count: 1,\n    //   dir: \"asc\",\n    // });\n        \n    // if (result.results.length)\n    //     expect(result.results[0].startDate).to.be.gt(d.toDate());\n        \n    const startDate = moment(\"2018-10-11\");\n    const endDate = moment(\"2018-11-23\");\n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"StartDate\",\n          data: { comparison: \"gt\", value: \"2018-10-11\" },\n        },\n        {\n          field: \"StartDate\",\n          data: { comparison: \"lt\", value: \"2018-11-23\" },\n        },\n      ],\n      count: 1,\n      dir: \"asc\",\n    });\n        \n    if (result.results.length) {\n        expect(result.results[0].startDate).to.be.gt(startDate.toDate());\n        expect(result.results[0].startDate).to.be.lt(endDate.toDate());\n    }\n  })\n);",
                                    "err": {},
                                    "uuid": "13c32031-2edc-4fc3-98cb-709adf840c86",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - name",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - name",
                                    "timedOut": false,
                                    "duration": 87,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"instanceName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.instanceName.toLowerCase()).to.contain(\"test\");\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processName\",\n          data: { comparison: \"contains\", value: \"test\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    // no longer useful after starting over with an empty db\n    // result.results.forEach((instance) => {\n    //   instance.processName.should.contain(\"test\");\n    // });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requester\",\n          data: { comparison: \"contains\", value: \"system system\" },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid.toLowerCase());\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "851cbdeb-616f-4cd2-983d-635103c2ca2e",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - filters - guid",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - filters - guid",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"processGuid\",\n          data: { comparison: \"contains\", value: sampleInstance.processGuid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.processName.indexOf(sampleInstance.processName)).to.be.gt(-1);\n    });\n        \n    result = await f.call(instanceController, {\n      filters: [\n        {\n          field: \"requesterGuid\",\n          data: { comparison: \"contains\", value: session.user_sid },\n        },\n      ],\n      count: 10,\n    });\n        \n    result.results.forEach((instance) => {\n      expect(instance.requesterGuid\n        .toLowerCase())\n        .to.equal(session.user_sid);\n    });\n  })\n);",
                                    "err": {},
                                    "uuid": "e6bcef27-b51d-4904-9b01-f6e02303383d",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my/manage/monitor requests param - count",
                                    "fullTitle": "Instance API Controller Tests list tests get my/manage/monitor requests param - count",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n        \nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, { count: 2 });\n        \n    expect(result.results).to.exist;\n    expect(result.results.length).to.equal(2);\n  })\n);",
                                    "err": {},
                                    "uuid": "2cc23b9a-4dd0-4df4-a1d3-4a123fd4876d",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests params - sort, dir",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests params - sort, dir",
                                    "timedOut": false,
                                    "duration": 37,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      count: 2,\n      dir: \"asc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.lt(\n      result.results[1].createdDate\n    );\n        \n    result = await f.call(instanceController, {\n      count: 2,\n      dir: \"desc\",\n    });\n        \n    expect(result.results[0].createdDate).to.be.gt(\n      result.results[1].createdDate\n    );\n  })\n);",
                                    "err": {},
                                    "uuid": "7fe45021-0548-4c06-b2b4-141164c8c2f7",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get my requests param - start",
                                    "fullTitle": "Instance API Controller Tests list tests get my requests param - start",
                                    "timedOut": false,
                                    "duration": 75,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst funcs = [\n  await instanceController.getMyRequests,\n  await instanceController.getManageMonitorRequests,\n];\n        \nawait Promise.all(\n  funcs.map(async (f) => {\n    let result = await f.call(instanceController, {\n      start: 0,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startZeroId = result.results[0].instanceId;\n        \n    result = await f.call(instanceController, {\n      start: 1,\n      count: 2,\n      sort: \"instanceId\",\n      dir: \"asc\",\n    });\n        \n    const startOneId = result.results[0].instanceId;\n        \n    expect(startZeroId).to.be.lessThan(startOneId);\n  })\n);",
                                    "err": {},
                                    "uuid": "3b8ed5c0-af5a-440e-8854-e9c1226ba6d8",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "a744985c-fa34-4986-9054-4f5668ad1e73",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with search term against procssName, instanceName and requester",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with search term against procssName, instanceName and requester",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.processName, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "d5421ac3-6fba-4dc1-9a65-78e924bac7ad",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get monitor requests with a numeric term against instanceId",
                                    "fullTitle": "Instance API Controller Tests list tests get monitor requests with a numeric term against instanceId",
                                    "timedOut": false,
                                    "duration": 34,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({search: sampleInstance.instanceId, permisionType: 'monitor'});\nconsole.log(result)\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "7d6fcec7-e90e-4ffb-a025-d96f2d1699ec",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "get manage requests",
                                    "fullTitle": "Instance API Controller Tests list tests get manage requests",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'manage'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\n        \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\n// console.log(result);\nexpect(firstInstance.instanceGuid).to.be.ok\nexpect(firstInstance.instanceId).to.be.ok\nexpect(firstInstance.instanceName).to.be.ok\nexpect(firstInstance.processName).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"lastMilestone\")).to.be.ok\nexpect(firstInstance.createdDate).to.be.ok\nexpect(Object.keys(firstInstance).includes(\"modifiedDate\")).to.be.ok\nexpect(firstInstance.requester).to.be.ok\n\n        \nexpect(result.total).to.be.greaterThan(0)",
                                    "err": {},
                                    "uuid": "7a3e07ef-a19b-4c3d-a3af-999cd2096b80",
                                    "parentUUID": "d1c5cf6d-b83d-48ea-8255-05ad0e9c8100",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2eac7d9c-6590-4186-955f-adbf4c6b26ef",
                                "7bbbd9a5-c18f-4167-be16-7835103d0129",
                                "51aefb0d-244f-4030-89cf-de32ac7a0926",
                                "bde7dcaf-677a-4d14-be6f-aa6be03b93a4",
                                "9716c847-5386-4df7-9f30-c893f0d98020",
                                "e4403c75-4400-45e2-bf70-e6c00d400f5b",
                                "0a2547b5-a34b-434d-9065-04b356183fd4",
                                "3bbe0295-9ed3-4f40-9ed3-7b55c8bdf11e",
                                "ad0a0aaa-cae2-4552-8819-b4486af74582",
                                "13c32031-2edc-4fc3-98cb-709adf840c86",
                                "851cbdeb-616f-4cd2-983d-635103c2ca2e",
                                "e6bcef27-b51d-4904-9b01-f6e02303383d",
                                "2cc23b9a-4dd0-4df4-a1d3-4a123fd4876d",
                                "7fe45021-0548-4c06-b2b4-141164c8c2f7",
                                "3b8ed5c0-af5a-440e-8854-e9c1226ba6d8",
                                "a744985c-fa34-4986-9054-4f5668ad1e73",
                                "d5421ac3-6fba-4dc1-9a65-78e924bac7ad",
                                "7d6fcec7-e90e-4ffb-a025-d96f2d1699ec",
                                "7a3e07ef-a19b-4c3d-a3af-999cd2096b80"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1177,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "bbe08a11-4859-4d06-bd30-29165ecca45a",
                            "title": "delete/undelete tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "deletes a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a request",
                                    "timedOut": false,
                                    "duration": 120,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst result = await instanceController.getManageMonitorRequests({permisionType: 'monitor'});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nsampleInstances = result.results;\n    \n// make sure it has the columns that we want\nconst firstInstance = result.results[0];\nsampleInstanceGuid = firstInstance.instanceGuid;\n      \nlet deleted = await instanceController.deleteInstance(sampleInstanceGuid);\n\nexpect(sampleInstanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.deletedDate).not.be.null\nconst Instance = await models.getModel(config.tenantOne.tenantId, \"Instance\");\nlet excludeDeleted = await Instance.query().where({instanceGuid: sampleInstanceGuid})\nexpect(excludeDeleted.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "1abbefd0-baec-4f39-9c6c-e54449cd2285",
                                    "parentUUID": "bbe08a11-4859-4d06-bd30-29165ecca45a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retores a request",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests retores a request",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet undeleted = await instanceController.restoreInstance(sampleInstanceGuid);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(sampleInstanceGuid).to.equal(undeleted.instanceGuid)\nexpect(undeleted.deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "bec082f5-ddbe-49b4-b349-d924cd951ffd",
                                    "parentUUID": "bbe08a11-4859-4d06-bd30-29165ecca45a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "deletes a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests deletes a batch of requests",
                                    "timedOut": false,
                                    "duration": 119,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.deleteInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\n//expect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).not.to.be.null;",
                                    "err": {},
                                    "uuid": "3ccbe023-fb57-437a-8f07-1a15185b0076",
                                    "parentUUID": "bbe08a11-4859-4d06-bd30-29165ecca45a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores a batch of requests",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores a batch of requests",
                                    "timedOut": false,
                                    "duration": 91,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nconst instanceGuids = sampleInstances.map((i) => {\n  return i.instanceGuid;\n})\nlet deleted = await instanceController.restoreInstances(instanceGuids);\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(deleted.length).to.equal(sampleInstances.length);\nexpect(deleted[0].instanceGuid).to.equal(sampleInstances[0].instanceGuid);\nexpect(deleted[0].deletedDate).to.be.null;",
                                    "err": {},
                                    "uuid": "dbb1bed3-00eb-4c1a-aa8a-828623e618ca",
                                    "parentUUID": "bbe08a11-4859-4d06-bd30-29165ecca45a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "restores all",
                                    "fullTitle": "Instance API Controller Tests delete/undelete tests restores all",
                                    "timedOut": false,
                                    "duration": 435,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\nlet restored = await instanceController.restoreAllInstances();\n//expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\nexpect(restored.length).to.gt(0);",
                                    "err": {},
                                    "uuid": "011efe19-7a87-4554-8e26-4257686aa2c0",
                                    "parentUUID": "bbe08a11-4859-4d06-bd30-29165ecca45a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1abbefd0-baec-4f39-9c6c-e54449cd2285",
                                "bec082f5-ddbe-49b4-b349-d924cd951ffd",
                                "3ccbe023-fb57-437a-8f07-1a15185b0076",
                                "dbb1bed3-00eb-4c1a-aa8a-828623e618ca",
                                "011efe19-7a87-4554-8e26-4257686aa2c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 810,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "e4bb0b83-504e-4520-be26-c50411ac008d",
                            "title": "insert tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts an instance data",
                                    "fullTitle": "Instance API Controller Tests insert tests inserts an instance data",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceDataRow = {\n  itaskRecipientGuid: '8ad1a6f2-9f6f-4667-9750-d961044ed817',\n  itaskGuid: '5bde578f-615f-4494-86b2-ca61044ed883',\n  taskGuid: '6386f905-7fac-41c6-9b6b-86d53f14d61c',\n  objectGuid: null,\n  objectType: null,\n  objectId: null,\n  dataProperty: '1491430190541',\n  dataType: 'String',\n  dataSid: '14777392-ac81-44f0-b1f2-87d53f14d65d',\n  dataId: null,\n  dataClientId: '1491430190541',\n  dataLabel: 'Enter Details:',\n  dataValue: 'Need a background check',\n  META_1: 'TEST_INSERT_INSTANCE_DATA',\n  META_2: null,\n  dataHide: null,\n  instanceContactGuid: null,\n  roleGuid: null,\n  dataValueExt: null,\n  questionType: 'LongText',\n  deletedDate: new Date().toISOString() // so that it doesnt interfere with its instance\n}\nconst instanceController = new InstanceController(session)\nlet instanceDataGuid = await instanceController.insertInstanceData(instanceDataRow)\nexpect(instanceDataGuid).to.be.a.uuid()",
                                    "err": {},
                                    "uuid": "e7bbe6dc-ea63-4f12-b8d9-f1e17f24c177",
                                    "parentUUID": "e4bb0b83-504e-4520-be26-c50411ac008d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e7bbe6dc-ea63-4f12-b8d9-f1e17f24c177"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "01320317-dcbb-4fc4-800e-cf621769934e",
                            "title": "update tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceController.test.js",
                            "file": "/test/db/instanceController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates an instance task recipient task state",
                                    "fullTitle": "Instance API Controller Tests update tests updates an instance task recipient task state",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session)\nconst recipTaskSid = 'b3fef53a-7742-46d1-9faf-be573c14d6fa'\nlet taskState = 'Cancelled'\nlet updated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)\n// change it back to Completed\ntaskState = 'Completed'\nupdated = await instanceController.setInstanceRecipientTaskState(recipTaskSid, taskState)\nexpect(updated.taskState).to.equal(taskState)",
                                    "err": {},
                                    "uuid": "907ba4c5-c74c-4270-a7cf-488dd3ae0c44",
                                    "parentUUID": "01320317-dcbb-4fc4-800e-cf621769934e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "907ba4c5-c74c-4270-a7cf-488dd3ae0c44"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 45,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "65e8c53d-9f82-408e-b2c8-c23459bf5ae1",
                    "title": "Instance API Model Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceModel.test.js",
                    "file": "/test/db/instanceModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a0e314f8-4d28-4afe-98f2-de230b76ec1a",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/instanceModel.test.js",
                            "file": "/test/db/instanceModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Instance API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "968ac70d-11cc-43c9-be5b-19d8f71b906e",
                                    "parentUUID": "a0e314f8-4d28-4afe-98f2-de230b76ec1a",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Instance API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = await sqldb.models.bindModel(config.tenantOne.tenantId, instanceModels.Instance)\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "2ee1c58e-5a80-407e-bfb9-8a7a9e684bd9",
                                    "parentUUID": "a0e314f8-4d28-4afe-98f2-de230b76ec1a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Instance API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceModel = (await models.getModels(config.tenantOne.tenantId)).Instance;\n          \n          let results = await instanceModel.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "d239522c-fbed-467c-ac9f-09900aafba86",
                                    "parentUUID": "a0e314f8-4d28-4afe-98f2-de230b76ec1a",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Instance API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist\n          let results = await models._tenantModels[config.tenantOne.tenantId].Instance.query()\n          //console.log(results)\n          expect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "b251e8c9-b1be-4cdd-84cf-b5ca8c15a6f7",
                                    "parentUUID": "a0e314f8-4d28-4afe-98f2-de230b76ec1a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2ee1c58e-5a80-407e-bfb9-8a7a9e684bd9",
                                "d239522c-fbed-467c-ac9f-09900aafba86",
                                "b251e8c9-b1be-4cdd-84cf-b5ca8c15a6f7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "d37d9b21-eb0a-47e7-af90-d9d9c9990701",
                    "title": "Task API Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskController.test.js",
                    "file": "/test/db/myTaskController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Task API Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\ntenantId = config.tenantOne.tenantId;\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "8c88f8d0-a9c5-4770-b40f-332cacd81a17",
                            "parentUUID": "d37d9b21-eb0a-47e7-af90-d9d9c9990701",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                            "title": "list tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskController.test.js",
                            "file": "/test/db/myTaskController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should set a sample task",
                                    "fullTitle": "Task API Controller Tests list tests should set a sample task",
                                    "timedOut": false,
                                    "duration": 227,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Task = await models.getModel(config.tenantOne.tenantId, 'InstanceRecipientTask');\nconst tasks = await Task.query()\n  .withGraphFetched('[instanceTaskBase, taskType, instance]')\n  .where('recipientGuid', session.user_sid)\n  .orderBy('instanceRecipientTask.createdDate', 'desc');\nexpect(tasks.length).to.be.gt(0);\nsampleTaskGuid = tasks[0].itaskRecipientGuid;\nsampleTask = tasks[0];\nsampleTask.taskName = sampleTask.instanceTaskBase.taskName;\nsampleTask.taskTypeName = sampleTask.taskType.taskTypeName;\nsampleTask.instanceId = sampleTask.instance.instanceId;\nsampleTask.instanceName = sampleTask.instance.instanceName;",
                                    "err": {},
                                    "uuid": "f33290d4-7367-481c-85d6-b5617385f149",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks columns",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks columns",
                                    "timedOut": false,
                                    "duration": 250,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst result = await taskController.getMyTasks();\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst firstTask = result.results[0];\nexpect(firstTask.itaskRecipientId).to.be.ok;\nexpect(firstTask.itaskRecipientGuid).to.be.ok;\nexpect(firstTask.taskName).to.be.ok;\nexpect(firstTask.taskTypeName).to.be.ok;\nexpect(firstTask.createdDate).to.be.ok;\nexpect(firstTask.dueDate).not.to.be.undefined;\nexpect(firstTask.priority).not.to.be.undefined;\nexpect(firstTask.instanceName).to.be.ok;\nexpect(firstTask.instanceId).to.be.ok;\nexpect(firstTask.lastMilestone).to.be.ok;\nexpect(result.total).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "30a65ba4-7baa-4663-83b6-49f0291b9dd3",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my open tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my open tasks only",
                                    "timedOut": false,
                                    "duration": 191,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Open', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState === 'Initialized' || task.taskState === 'Started').to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "d6531619-b5f9-4af2-9ae8-3208b5c6ff9c",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my completed tasks only",
                                    "fullTitle": "Task API Controller Tests list tests should get my completed tasks only",
                                    "timedOut": false,
                                    "duration": 167,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskState', 'eq', 'Completed', 50, 'asc');\nconst result = await taskController.getMyTasks(options);\nresult.results.forEach(task => {\n  expect(task.taskState).to.equal('Completed');\n});",
                                    "err": {},
                                    "uuid": "717cb1a2-13fb-461d-bab6-1b9a2b36f58c",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskName",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskName",
                                    "timedOut": false,
                                    "duration": 215,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskName', 'contains', sampleTask.taskName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "5b59dd92-5008-42f7-af69-93690719f85b",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: taskType",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: taskType",
                                    "timedOut": false,
                                    "duration": 218,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('taskType', 'contains', sampleTask.taskTypeName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "39a3ddc7-f6c5-4ef8-92c5-64055f40bdac",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: description (instanceName)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: description (instanceName)",
                                    "timedOut": false,
                                    "duration": 222,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceName', 'contains', sampleTask.instanceName);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "7e58df22-d13c-49f1-a21d-4bd791b80eaf",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requestId (instanceId)",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requestId (instanceId)",
                                    "timedOut": false,
                                    "duration": 113,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('instanceId', 'contains', sampleTask.instanceId);\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "7137d099-e67c-40f4-a3f6-88582a382887",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. filters: requester",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. filters: requester",
                                    "timedOut": false,
                                    "duration": 231,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nconst options = generateOptions('requester', 'contains', 'system system');\nconst result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "8cb2339f-c009-4717-a227-242438def66b",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my task by searching",
                                    "fullTitle": "Task API Controller Tests list tests should get my task by searching",
                                    "timedOut": false,
                                    "duration": 927,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {search: sampleTask.taskName};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.taskTypeName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceName};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);\noptions = {search: sampleTask.instanceId};\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].itaskRecipientGuid).to.equal(sampleTask.itaskRecipientGuid);",
                                    "err": {},
                                    "uuid": "6fc61a6a-77a8-4269-9663-dedeff3a60fb",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - start",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - start",
                                    "timedOut": false,
                                    "duration": 355,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {\n  start: 0,\n  count: 2,\n  sort: 'itaskRecipientId',\n  dir: 'asc'\n};\nlet result = await taskController.getMyTasks(options);\nconst startZeroId = result.results[0].itaskRecipientId;\noptions.start = 1;\nresult = await taskController.getMyTasks(options);\nconst startOneId = result.results[0].itaskRecipientId;\nexpect(startZeroId).to.be.lt(startOneId);",
                                    "err": {},
                                    "uuid": "339ce99d-8fe5-4d64-9d70-218355c7f3a2",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - sort, dir",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - sort, dir",
                                    "timedOut": false,
                                    "duration": 286,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2, dir: 'asc'};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.lt(result.results[1].createdDate);\noptions.dir = 'desc';\nresult = await taskController.getMyTasks(options);\nexpect(result.results[0].createdDate).to.be.gt(result.results[1].createdDate);",
                                    "err": {},
                                    "uuid": "e32846f6-e958-4ad8-af6e-3c4dcbf324c9",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get my tasks. params - count",
                                    "fullTitle": "Task API Controller Tests list tests should get my tasks. params - count",
                                    "timedOut": false,
                                    "duration": 116,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskController = new TaskController(session);\nlet options = {count: 2};\nlet result = await taskController.getMyTasks(options);\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(2);",
                                    "err": {},
                                    "uuid": "2ec2beb3-fe9a-4ec9-8e6a-5976bcbb8a29",
                                    "parentUUID": "00c30edf-e90c-4132-8ea7-5bf8b388d695",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f33290d4-7367-481c-85d6-b5617385f149",
                                "30a65ba4-7baa-4663-83b6-49f0291b9dd3",
                                "d6531619-b5f9-4af2-9ae8-3208b5c6ff9c",
                                "717cb1a2-13fb-461d-bab6-1b9a2b36f58c",
                                "5b59dd92-5008-42f7-af69-93690719f85b",
                                "39a3ddc7-f6c5-4ef8-92c5-64055f40bdac",
                                "7e58df22-d13c-49f1-a21d-4bd791b80eaf",
                                "7137d099-e67c-40f4-a3f6-88582a382887",
                                "8cb2339f-c009-4717-a227-242438def66b",
                                "6fc61a6a-77a8-4269-9663-dedeff3a60fb",
                                "339ce99d-8fe5-4d64-9d70-218355c7f3a2",
                                "e32846f6-e958-4ad8-af6e-3c4dcbf324c9",
                                "2ec2beb3-fe9a-4ec9-8e6a-5976bcbb8a29"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3518,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "912d90ec-1bc4-4937-ae6d-b464bf331955",
                    "title": "My Task API Model Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskModel.test.js",
                    "file": "/test/db/myTaskModel.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "249aab84-f15c-4ff3-a808-1963d40e4c05",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/db/myTaskModel.test.js",
                            "file": "/test/db/myTaskModel.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "My Task API Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "ff6b9090-f333-4488-a2cb-448f0b50ab1c",
                                    "parentUUID": "249aab84-f15c-4ff3-a808-1963d40e4c05",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "My Task API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = await sqldb.models.bindModel(config.tenantOne.tenantId, taskModels.InstanceRecipientTask);\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "9ec1c757-3bbb-4c5b-9c7c-bb094243e277",
                                    "parentUUID": "249aab84-f15c-4ff3-a808-1963d40e4c05",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "My Task API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const taskModel = (await models.getModels(config.tenantOne.tenantId)).InstanceRecipientTask;\nconst results = await taskModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "46c7fea6-c856-4da9-af44-a2d3e32c5630",
                                    "parentUUID": "249aab84-f15c-4ff3-a808-1963d40e4c05",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models cached in memory",
                                    "fullTitle": "My Task API Model Tests tests should bound models cached in memory",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tenantModels[config.tenantOne.tenantId]).to.exist;\nconst results = await models._tenantModels[config.tenantOne.tenantId].InstanceRecipientTask.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "48c76675-b25b-4437-8ae5-f41d26b4cf4d",
                                    "parentUUID": "249aab84-f15c-4ff3-a808-1963d40e4c05",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ec1c757-3bbb-4c5b-9c7c-bb094243e277",
                                "46c7fea6-c856-4da9-af44-a2d3e32c5630",
                                "48c76675-b25b-4437-8ae5-f41d26b4cf4d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 33,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "85891627-653f-4c33-a203-bc3d1cf5c450",
                    "title": "Instance API Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/integration/instance.test.js",
                    "file": "/test/integration/instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Instance API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 15,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken()\nthis.timeout(105000); \nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "bd730855-cc8e-4ede-becb-a24f3e49f60b",
                            "parentUUID": "85891627-653f-4c33-a203-bc3d1cf5c450",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "78b3758f-e8b8-4c4f-923d-77259c3bd6dc",
                            "title": "getInstancesByPermission",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of instances for a user with monitor permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with monitor permissions",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "32b19546-fc0b-43a4-b359-f41116c6ef02",
                                    "parentUUID": "78b3758f-e8b8-4c4f-923d-77259c3bd6dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances for a user with manage permissions",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances for a user with manage permissions",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "f213af55-c3f8-4933-8e34-3459cd00aa3a",
                                    "parentUUID": "78b3758f-e8b8-4c4f-923d-77259c3bd6dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a list of instances started by the user calling the endpoint",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a list of instances started by the user calling the endpoint",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();\n            sampleInstance = result.results[0];",
                                    "err": {},
                                    "uuid": "043ff420-56fb-456d-a2a8-161e8682afa9",
                                    "parentUUID": "78b3758f-e8b8-4c4f-923d-77259c3bd6dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"monitor\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"monitor\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 142,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"monitor\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"gteq\",\"type\":\"date\",\"value\":'2010-01-01'}},\n                {\"field\":\"startDate\",\"data\":{\"comparison\":\"lteq\",\"type\":\"date\",\"value\":'2030-01-01'}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "51c4edd3-532b-4a04-a4a8-4348be9a4995",
                                    "parentUUID": "78b3758f-e8b8-4c4f-923d-77259c3bd6dc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a \"mine\" list of instances filtered",
                                    "fullTitle": "Instance API Tests getInstancesByPermission should return a \"mine\" list of instances filtered",
                                    "timedOut": false,
                                    "duration": 151,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.params.permissionType = \"mine\";\n            req.query.filters = [\n                \n                {\"field\":\"instanceName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.instanceName}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"gteq\",\"type\":\"string\",\"value\":1}},\n                {\"field\":\"instanceId\",\"data\":{\"comparison\":\"lteq\",\"type\":\"string\",\"value\":1000000}},\n                {\"field\":\"processName\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.processName}},\n                {\"field\":\"instanceState\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.instanceState}},\n                {\"field\":\"lastMilestone\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.lastMilestone}},\n                {\"field\":\"requesterGuid\",\"data\":{\"comparison\":\"eq\",\"type\":\"string\",\"value\":sampleInstance.requesterGuid}},\n                {\"field\":\"requester\",\"data\":{\"comparison\":\"contains\",\"type\":\"string\",\"value\":sampleInstance.requester}}\n            ]\n\t\t\tawait handlers.getInstancesByPermission(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst result = mockRes.body;\n            expect(result.total).to.exist;\n            expect(result.total).to.be.gt(0);\n            expect(result.results).to.be.array();",
                                    "err": {},
                                    "uuid": "72018c47-0494-43de-ba94-bde6b977485a",
                                    "parentUUID": "78b3758f-e8b8-4c4f-923d-77259c3bd6dc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "32b19546-fc0b-43a4-b359-f41116c6ef02",
                                "f213af55-c3f8-4933-8e34-3459cd00aa3a",
                                "043ff420-56fb-456d-a2a8-161e8682afa9",
                                "51c4edd3-532b-4a04-a4a8-4348be9a4995",
                                "72018c47-0494-43de-ba94-bde6b977485a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 338,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "23247e6f-e989-4f2c-a417-907965f0c0d7",
                            "title": "deleteInstances",
                            "fullFile": "/home/tim/src/integrify/api-instance/test/integration/instance.test.js",
                            "file": "/test/integration/instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a batch of instances",
                                    "fullTitle": "Instance API Tests deleteInstances should delete a batch of instances",
                                    "timedOut": false,
                                    "duration": 625,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const instanceController = new InstanceController(session);\n            let result = await instanceController.getMyRequests()\n            let instanceGuids= result.results.map((i) => {\n                return i.instanceGuid;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req(jwt)\n            req.body = JSON.stringify(instanceGuids);\n           \n\t\t\tawait handlers.deleteInstances(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n            expect(mockRes.body).to.exist;\n\t\t\tlet deleted = mockRes.body;\n            expect(deleted.instancesDeleted).to.exist;\n            expect(deleted.instancesDeleted).to.equal(instanceGuids.length);\n            \n            //retore them\n            \n            let restored = await instanceController.restoreInstances(instanceGuids);\n            //expect(firstInstance.instanceGuid).to.equal(deleted.instanceGuid)\n            expect(restored.length).to.equal(instanceGuids.length);",
                                    "err": {},
                                    "uuid": "d411fc27-99cb-4dd4-9ea2-721df87ae8e9",
                                    "parentUUID": "23247e6f-e989-4f2c-a417-907965f0c0d7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d411fc27-99cb-4dd4-9ea2-721df87ae8e9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 625,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "c045f6f4-762b-42ae-b4a7-c060ac5e0b59",
                    "title": "MyTask API Tests",
                    "fullFile": "/home/tim/src/integrify/api-instance/test/integration/myTask.test.js",
                    "file": "/test/integration/myTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "MyTask API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 10,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};",
                            "err": {},
                            "uuid": "43a95eb6-e0f8-4c74-81e7-18d30b02a227",
                            "parentUUID": "c045f6f4-762b-42ae-b4a7-c060ac5e0b59",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of my tasks",
                            "fullTitle": "MyTask API Tests should return a list of my tasks",
                            "timedOut": false,
                            "duration": 116,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req(jwt);\nawait handlers.getMyTasks(req, mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;\nconst result = mockRes.body;\nexpect(result.total).to.exist;\nexpect(result.total).to.be.gt(0);\nexpect(result.results).to.be.array();\nexpect(result.results.length).to.be.gt(0);\nsampleTask = result.results[0];",
                            "err": {},
                            "uuid": "39d7fc42-ce53-4560-ba15-d3da9c6573fc",
                            "parentUUID": "c045f6f4-762b-42ae-b4a7-c060ac5e0b59",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "39d7fc42-ce53-4560-ba15-d3da9c6573fc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 116,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "b4e920fb-c8dc-432d-bde4-ddee847fe458",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "351f81ac-030d-48ce-bc93-9d4b8062313e",
                    "title": "Process controller tests",
                    "fullFile": "/home/tim/src/integrify/api-processes/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Process controller tests\"",
                            "fullTitle": "Process controller tests \"before all\" hook in \"Process controller tests\"",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nconfig = await mocks.getTestConfig();\ntenant = config.tenantOne.tenantId;\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} //system level",
                            "err": {},
                            "uuid": "ab68840f-702d-44cc-a897-1102045bb7cb",
                            "parentUUID": "351f81ac-030d-48ce-bc93-9d4b8062313e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7375bc19-6805-4c4e-a66b-f25da0d7ee55",
                            "title": "process crud ",
                            "fullFile": "/home/tim/src/integrify/api-processes/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "searches for a process with run permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with run permissions",
                                    "timedOut": false,
                                    "duration": 168,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'run', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "a00c1ff1-f482-4cea-8c22-ad85b8199c87",
                                    "parentUUID": "7375bc19-6805-4c4e-a66b-f25da0d7ee55",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "searches for a process with viewConfig permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with viewConfig permissions",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'viewconfig', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "3ea499b5-1a00-4b50-9bb3-14567cb96611",
                                    "parentUUID": "7375bc19-6805-4c4e-a66b-f25da0d7ee55",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "searches for a process with edit permissions",
                                    "fullTitle": "Process controller tests process crud  searches for a process with edit permissions",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processConstroller = new ProcessController(session);\n//const  processes = await processConstroller.searchProcesses('Update my profile', 'run', {});\nconst  processes = await processConstroller.searchProcesses({permissionType: 'edit', search:'Update my profile'});\n\nexpect(processes.length).to.be.gt(0);\nconst process = processes[0];\nexpect(process.categoryName).to.exist;\nexpect(process.processGuid).to.exist;",
                                    "err": {},
                                    "uuid": "d5867f2b-e544-44f6-8563-539cb2b5e903",
                                    "parentUUID": "7375bc19-6805-4c4e-a66b-f25da0d7ee55",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a00c1ff1-f482-4cea-8c22-ad85b8199c87",
                                "3ea499b5-1a00-4b50-9bb3-14567cb96611",
                                "d5867f2b-e544-44f6-8563-539cb2b5e903"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 177,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "01e54722-c592-4825-8a41-e9a8b6d14779",
                    "title": "Process route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-processes/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Process route handler tests\"",
                            "fullTitle": "Process route handler tests \"before all\" hook in \"Process route handler tests\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "17a735a1-0a1c-4ed8-b755-638aa68a12e5",
                            "parentUUID": "01e54722-c592-4825-8a41-e9a8b6d14779",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9dd37705-ace0-4496-aa33-5949a9ecc54d",
                            "title": "process crud ",
                            "fullFile": "/home/tim/src/integrify/api-processes/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should search processes with run perms",
                                    "fullTitle": "Process route handler tests process crud  should search processes with run perms",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query = {permissionType: 'run', search:'Update my profile'}\nawait handlers.searchProcesses(req,mockRes);\nconst processes = mockRes.body;\nconst process= processes[0];\nexpect(process).to.exist",
                                    "err": {},
                                    "uuid": "d6469840-2835-4080-b0e1-2acfc716db67",
                                    "parentUUID": "9dd37705-ace0-4496-aa33-5949a9ecc54d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should search processes with view config perms",
                                    "fullTitle": "Process route handler tests process crud  should search processes with view config perms",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.query = {permissionType: 'viewconfig', search:'Update my profile'}\nawait handlers.searchProcesses(req,mockRes);\nconst processes = mockRes.body;\nconst process= processes[0];\nexpect(process).to.exist",
                                    "err": {},
                                    "uuid": "1728960a-68a5-471e-8925-15f2eca62a3f",
                                    "parentUUID": "9dd37705-ace0-4496-aa33-5949a9ecc54d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d6469840-2835-4080-b0e1-2acfc716db67",
                                "1728960a-68a5-471e-8925-15f2eca62a3f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "66d62f43-41df-4c6e-9694-7dac99721c0b",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "1f33416f-3f3a-41c1-9c55-e50420340746",
                    "title": "Report controller tests",
                    "fullFile": "/home/tim/src/integrify/api-reports/test/controller.test.js",
                    "file": "/test/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Report controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "ddaa8486-6dbf-40b4-ba11-1c69fd2daba6",
                            "parentUUID": "1f33416f-3f3a-41c1-9c55-e50420340746",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "69a98e24-431e-41dd-bd22-50f20e400853",
                            "title": "process crud ",
                            "fullFile": "/home/tim/src/integrify/api-reports/test/controller.test.js",
                            "file": "/test/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a report",
                                    "fullTitle": "Report controller tests process crud  should create a report",
                                    "timedOut": false,
                                    "duration": 41,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const reportJson = { Name: \"test report\" };\nconst report = await reportController.createReport(tenant, reportJson);\nexpect(report.sid).to.exist\nreportSid = report.sid",
                                    "err": {},
                                    "uuid": "c28ea0d6-131d-42a3-8a29-a1a9587c29a3",
                                    "parentUUID": "69a98e24-431e-41dd-bd22-50f20e400853",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should retrieve a report",
                                    "fullTitle": "Report controller tests process crud  should retrieve a report",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.sid).to.equal(reportSid)",
                                    "err": {},
                                    "uuid": "715110f6-234a-438a-bd98-04666b3b7b3f",
                                    "parentUUID": "69a98e24-431e-41dd-bd22-50f20e400853",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should populate core-service expected default values",
                                    "fullTitle": "Report controller tests process crud  should populate core-service expected default values",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.limits.get('DateRange')).to.equal(30);\nexpect(report.limits.get('UserFilter')).to.equal('No');\nexpect(report.limits.get('PageSize')).to.equal(10);",
                                    "err": {},
                                    "uuid": "3d5e2a8f-0310-49cd-b313-0971be0e8c40",
                                    "parentUUID": "69a98e24-431e-41dd-bd22-50f20e400853",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a report",
                                    "fullTitle": "Report controller tests process crud  should update a report",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const columnMap = { \"column\" : {\n  \"@alias\" : \"Address Line 1\",\n  \"@sortable\" : \"No\",\n  \"mapping_val\" : \"Client|AddressLine1\",\n  \"mapping_text\" : \"Client - Address Line 1\"\n}}\nconst newFields = { \"columns\" : [ columnMap ]}\nconst updatedReport = await reportController.updateReport(tenant,reportSid,newFields)\nexpect(updatedReport).to.exist\nexpect(updatedReport.sid).to.equal(reportSid)\nexpect(updatedReport.modifiedDate).to.be.above(updatedReport.createdDate);\nexpect(updatedReport.columns.length).to.equal(1)",
                                    "err": {},
                                    "uuid": "cc88baaf-15d9-484b-89a7-f14a4f556a7a",
                                    "parentUUID": "69a98e24-431e-41dd-bd22-50f20e400853",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "soft deletes a report",
                                    "fullTitle": "Report controller tests process crud  soft deletes a report",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const report = await reportController.getReport(tenant,reportSid);\nexpect(report.deletedDate).to.not.exist\nconst deleted = await reportController.deleteReport(tenant,reportSid);\nexpect(deleted).to.exist\nexpect(deleted.deletedDate).to.exist",
                                    "err": {},
                                    "uuid": "7445cd63-c35d-4c1a-a961-d9ce7e4bfc8c",
                                    "parentUUID": "69a98e24-431e-41dd-bd22-50f20e400853",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c28ea0d6-131d-42a3-8a29-a1a9587c29a3",
                                "715110f6-234a-438a-bd98-04666b3b7b3f",
                                "3d5e2a8f-0310-49cd-b313-0971be0e8c40",
                                "cc88baaf-15d9-484b-89a7-f14a4f556a7a",
                                "7445cd63-c35d-4c1a-a961-d9ce7e4bfc8c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 68,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "48df9c6f-276f-490e-a708-7581ea800de0",
                    "title": "Report route handler tests",
                    "fullFile": "/home/tim/src/integrify/api-reports/test/handlers.test.js",
                    "file": "/test/handlers.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Report route handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "975e0e87-f8e3-40c9-a828-2e5fed11726c",
                            "parentUUID": "48df9c6f-276f-490e-a708-7581ea800de0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "425b578b-e6fb-4c09-ba4c-dedd49d359cc",
                            "title": "handler report crud ",
                            "fullFile": "/home/tim/src/integrify/api-reports/test/handlers.test.js",
                            "file": "/test/handlers.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a report",
                                    "fullTitle": "Report route handler tests handler report crud  should create a report",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { Name: \"handler test report\" }\nconst response = await handlers.createReport(req,mockRes);\nconst report = response.body;\nexpect(report.sid).to.exist;\nreportSid = report.sid;",
                                    "err": {},
                                    "uuid": "e3a0fd21-7785-4cd2-9903-10269cb53a7f",
                                    "parentUUID": "425b578b-e6fb-4c09-ba4c-dedd49d359cc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a report",
                                    "fullTitle": "Report route handler tests handler report crud  should get a report",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nconst response = await handlers.getReport(req,mockRes);\nconst report = response.body;\nexpect(report).to.exist\nexpect(report.sid).to.equal(reportSid)",
                                    "err": {},
                                    "uuid": "5c187e86-a44d-4e63-8329-e9e9cb911dc6",
                                    "parentUUID": "425b578b-e6fb-4c09-ba4c-dedd49d359cc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a report",
                                    "fullTitle": "Report route handler tests handler report crud  should update a report",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nreq.body = { Description: 'handler test description' }\nconst response = await handlers.updateReport(req,mockRes);\nconst updatedReport = response.body;\nexpect(updatedReport).to.exist\nexpect(updatedReport.sid).to.equal(reportSid)\nexpect(updatedReport.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "52a768b9-7546-499c-a724-e98c4c214915",
                                    "parentUUID": "425b578b-e6fb-4c09-ba4c-dedd49d359cc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should delete a report",
                                    "fullTitle": "Report route handler tests handler report crud  should delete a report",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.reportSid = reportSid;\nconst response = await handlers.deleteReport(req,mockRes);\nlet deletedReport = response.body;\nexpect(deletedReport).to.exist;\nexpect(deletedReport.deletedDate).to.exist;",
                                    "err": {},
                                    "uuid": "ddfa2a06-a8e7-447c-8f7a-ce24f15b2c62",
                                    "parentUUID": "425b578b-e6fb-4c09-ba4c-dedd49d359cc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e3a0fd21-7785-4cd2-9903-10269cb53a7f",
                                "5c187e86-a44d-4e63-8329-e9e9cb911dc6",
                                "52a768b9-7546-499c-a724-e98c4c214915",
                                "ddfa2a06-a8e7-447c-8f7a-ce24f15b2c62"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "20f9a95c-b6da-4f50-b7eb-7ad7e6e95e20",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "b3cab6b2-1737-4951-8975-7ac9b6bbebe0",
                    "title": "Settings API Holiday Controller tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/holidays.controller.test.js",
                    "file": "/test/integration/db/holidays.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Holiday Controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 6,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nsession = {tenantId: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}\ntenantId = config.tenantOne.tenantId;\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "f7d251f3-8428-4d83-b087-326aeeaa50e8",
                            "parentUUID": "b3cab6b2-1737-4951-8975-7ac9b6bbebe0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should insert, select, delete and list holidays",
                            "fullTitle": "Settings API Holiday Controller tests should insert, select, delete and list holidays",
                            "timedOut": false,
                            "duration": 214,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let holiday = {\n  holidayName: \"O Day\",\n  startDate: \"2019-10-10T00:00:00.000Z\",\n  endDate: \"2019-10-11T00:00:00.000Z\",\n  country: \"USA\"\n};\nlet holidayController = new HolidayController(oauth);\n// insert\nconst inserted = await holidayController.insertHoliday(holiday);\nvalidateHoliday(holiday, inserted);\n// select\nlet gotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n// update\nholiday.holidayGuid = inserted.holidayGuid;\nholiday.holidayName = \"Easter Monday\";\nholiday.country = \"Papa New Guinea\";\nawait holidayController.updateHoliday(holiday);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nvalidateHoliday(holiday, gotOne);\n//list\nconst holidays = await holidayController.listHolidays();\nexpect(holidays.length).to.be.gt(0);\nholiday = holidays[0];\nexpect(holiday.holidayGuid).to.exist;\nexpect(holiday.holidayName).to.exist;\nexpect(holiday.startDate).to.exist;\nexpect(holiday.endDate).to.exist;\nexpect(holiday.country).to.exist;\n// delete\nconst holidayGuids = [inserted.holidayGuid];\nawait holidayController.deleteHolidays(holidayGuids);\ngotOne = await holidayController.getHoliday(inserted.holidayGuid);\nexpect(gotOne).to.not.exist;",
                            "err": {},
                            "uuid": "5decb513-cb04-4660-88e8-6a4f67b6cd60",
                            "parentUUID": "b3cab6b2-1737-4951-8975-7ac9b6bbebe0",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "5decb513-cb04-4660-88e8-6a4f67b6cd60"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 214,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f08b0887-e77c-4efd-804e-cd9bcdfaa004",
                    "title": "Settings API Language Controller test",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/languages.controller.test.js",
                    "file": "/test/integration/db/languages.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API Language Controller test \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\noauth = {\n  instance_name: config.tenantOne.tenantId,\n  user_sid: config.tenantOne.adminUser.sid\n}",
                            "err": {},
                            "uuid": "4fb9d4bc-7151-42d7-8ce1-9b5b223472a5",
                            "parentUUID": "f08b0887-e77c-4efd-804e-cd9bcdfaa004",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of languages",
                            "fullTitle": "Settings API Language Controller test should get a list of languages",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const languageCtrl = new LanguageController(oauth);\nconst languages = await languageCtrl.listLanguages();\nexpect(languages.length).to.be.gt(0);\nconst language = languages[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "92b63514-aa32-4741-b875-2d65b5af0dda",
                            "parentUUID": "f08b0887-e77c-4efd-804e-cd9bcdfaa004",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "92b63514-aa32-4741-b875-2d65b5af0dda"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8ba810de-6f22-47a8-8310-210d5673313f",
                    "title": "Settings API System Setting Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                    "file": "/test/integration/db/systemsetting.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Settings API System Setting Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()} \nthis.timeout(105000);",
                            "err": {},
                            "uuid": "d221b23a-f157-4755-9bd5-f1000c0116ef",
                            "parentUUID": "8ba810de-6f22-47a8-8310-210d5673313f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ed628e86-2092-43a7-82ef-93a2cff437c2",
                            "title": "Model Tests",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a system setting model",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should get a system setting model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nexpect(SystemSettingsModel).to.exist;",
                                    "err": {},
                                    "uuid": "19cd7c01-ae9c-43ef-87f1-6fb9d1f9e5b2",
                                    "parentUUID": "ed628e86-2092-43a7-82ef-93a2cff437c2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Model Tests should return system settings",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const SystemSettingsModel = await model.getConsumerModel(\n  config.ConsumersConn1,\n  \"SystemSettings\"\n);\nlet results = await SystemSettingsModel.query();\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "4bd1cb04-6351-4e49-bc4c-66704a4affbd",
                                    "parentUUID": "ed628e86-2092-43a7-82ef-93a2cff437c2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "19cd7c01-ae9c-43ef-87f1-6fb9d1f9e5b2",
                                "4bd1cb04-6351-4e49-bc4c-66704a4affbd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ec51a51c-6147-438a-a436-d949752a34c8",
                            "title": "Controller Tests",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/db/systemsetting.controller.test.js",
                            "file": "/test/integration/db/systemsetting.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list system settings",
                                    "timedOut": false,
                                    "duration": 71,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listSystemSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\nexpect(systemSettings[0].masterSettings.settingsGuid).to.exist;",
                                    "err": {},
                                    "uuid": "54931d13-58a3-4c0e-a0a1-fca7ea0ad027",
                                    "parentUUID": "ec51a51c-6147-438a-a436-d949752a34c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list password settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should list password settings",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let systemSettingController = new SystemSettingController(session);\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings).to.exist;\nexpect(systemSettings.length).to.be.gt(0);\n// only system settings listed should be the ones related to passwords   \nexpect(systemSettings.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(systemSettings.length);",
                                    "err": {},
                                    "uuid": "8c741080-a9cf-43ab-a033-077e7e4c178e",
                                    "parentUUID": "ec51a51c-6147-438a-a436-d949752a34c8",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update system settings",
                                    "fullTitle": "Settings API System Setting Controller Tests Controller Tests should update system settings",
                                    "timedOut": false,
                                    "duration": 184,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let pwdSettings = [{\n  \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION\",\n  \"settingsValue\":\"14\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"6F170960-C5BC-4A12-B170-1CCEDCAC3DF2\",\n    \"settingsKey\":\"PWD_EXPIRATION\",\n    \"keyDefault\":\"7\",\n    \"keyOptions\":null,\n    \"description\":\"Length in days before a user is prompted to change his or her password.\"\n  }\n}, {\n  \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n  \"dataInstanceGuid\":\"2CA0CE58-B55B-4DA7-ACE1-5FC37E3D32D5\",\n  \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n  \"settingsValue\":\"1\", // changed\n  \"createdBy\":\"4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF\",\n  \"createdDate\":\"2020-01-28T03:38:03.200Z\",\n  \"modifiedBy\":null,\n  \"modifiedDate\":null,\n  \"masterSettings\":{\n    \"settingsGuid\":\"B2476A3D-095F-424A-9C29-4AA95E93A09E\",\n    \"settingsKey\":\"PWD_EXPIRATION_ACTIVE\",\n    \"keyDefault\":\"0\",\n    \"keyOptions\":\"1|0\",\n    \"description\":\"Flag to turn enforcement of password expiration.  1 = On, 0 = Off\"\n  }\n}]\n// save the changes above, query to verify changes, set them back to the defaults\nlet systemSettingController = new SystemSettingController(session)\nawait systemSettingController.updateSystemSettings(pwdSettings)\nlet systemSettings = await systemSettingController.listPasswordSettings();\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('14')\nexpect(systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1')\npwdSettings.forEach(setting => {\n  setting.settingsValue = setting.masterSettings.keyDefault\n})\nawait systemSettingController.updateSystemSettings(pwdSettings)\nsystemSettings = await systemSettingController.listPasswordSettings();\nlet pwdExpiration = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION')\nlet pwdExpirationActive = systemSettings.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE')\nexpect(pwdExpiration.settingsValue).to.equal(pwdExpiration.masterSettings.keyDefault)\nexpect(pwdExpirationActive.settingsValue).to.equal(pwdExpirationActive.masterSettings.keyDefault)",
                                    "err": {},
                                    "uuid": "fad51794-b1eb-4a94-b5c0-d77c69680a42",
                                    "parentUUID": "ec51a51c-6147-438a-a436-d949752a34c8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "54931d13-58a3-4c0e-a0a1-fca7ea0ad027",
                                "8c741080-a9cf-43ab-a033-077e7e4c178e",
                                "fad51794-b1eb-4a94-b5c0-d77c69680a42"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 287,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4e7bf598-defe-4349-825d-148e2b1ec0cb",
                    "title": "Biztime API Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/biztimes.test.js",
                    "file": "/test/integration/functions/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Biztime API Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\njwt = await testLib.getAuthToken();\nthis.timeout(10500);\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nmockRes = await mocks.mockResponse();\nreq = await mocks.req(jwt);",
                            "err": {},
                            "uuid": "bdcbe7bc-2eea-40a4-80a4-d08364f07bf9",
                            "parentUUID": "4e7bf598-defe-4349-825d-148e2b1ec0cb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should return a list of biztimes",
                            "fullTitle": "Biztime API Tests should return a list of biztimes",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.listBiztimes(req, mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nexpect(mockRes.body.length).to.be.gt(0);\nvalidateBiztime(mockRes.body[0]);",
                            "err": {},
                            "uuid": "7a916cc1-3048-4f94-ad89-a530549391e6",
                            "parentUUID": "4e7bf598-defe-4349-825d-148e2b1ec0cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert a biztime",
                            "fullTitle": "Biztime API Tests should insert a biztime",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.insertBiztime(\n  {...req, body: {...biztimeToInsert}},\n  mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\ninsertedBiztime = mockRes.body;\nvalidateBiztime(biztimeToInsert, insertedBiztime);",
                            "err": {},
                            "uuid": "eabe73e7-42d3-4e41-bf67-fe9106595f59",
                            "parentUUID": "4e7bf598-defe-4349-825d-148e2b1ec0cb",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update a biztime",
                            "fullTitle": "Biztime API Tests should update a biztime",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await handlers.updateBiztime(\n  {\n    ...req,\n    params: {bizTimeGuid: insertedBiztime.bizTimeGuid},\n    body: {...biztimeToUpdate}},\n  mockRes\n  );\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;\nvalidateBiztime(biztimeToUpdate, mockRes.body);",
                            "err": {},
                            "uuid": "c0083893-9642-4925-bbc0-902e8aa4cd4f",
                            "parentUUID": "4e7bf598-defe-4349-825d-148e2b1ec0cb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7a916cc1-3048-4f94-ad89-a530549391e6",
                        "eabe73e7-42d3-4e41-bf67-fe9106595f59",
                        "c0083893-9642-4925-bbc0-902e8aa4cd4f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 37,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "75cf0d9f-3bed-4fb8-b9fe-62ffe6a35690",
                    "title": "Settings API Holiday Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/holidays.test.js",
                    "file": "/test/integration/functions/holidays.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "insert, list, get, delete holiday",
                            "fullTitle": "Settings API Holiday Tests insert, list, get, delete holiday",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nlet listHolidaysEvent = await mocks.listHolidaysEvent()\nlet insertHolidayEvent = await mocks.insertHolidayEvent();\nlet getHolidayEvent = await mocks.getHolidayEvent();\n\n// insert\nawait holidays.insert(insertHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst inserted = mockRes.body;\nvalidateHoliday(insertHolidayEvent.body, inserted);\n//list\nawait holidays.list(listHolidaysEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nexpect(mockRes.body.length).to.be.greaterThan(0);\nexpectDefinedHoliday(mockRes.body[0]);\n// get\ngetHolidayEvent.params.holidayGuid = inserted.holidayGuid;\nawait holidays.get(getHolidayEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst got = mockRes.body;\nvalidateHoliday(inserted, got);\n// delete\nlet deleteEvent = Object.assign({}, listHolidaysEvent);\ndeleteEvent.body = [inserted.holidayGuid];\nawait holidays.remove(deleteEvent, mockRes);\n\t\texpect(mockRes.statusCode).to.equal(200);\ngetHolidayEvent.params = {\n  holidayGuid: inserted.holidayGuid\n};\nawait holidays.get(getHolidayEvent, mockRes);\nexpect(mockRes.statusCode).to.equal(404);",
                            "err": {},
                            "uuid": "eb285f26-bd74-4cc6-bb3f-88c352437479",
                            "parentUUID": "75cf0d9f-3bed-4fb8-b9fe-62ffe6a35690",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "eb285f26-bd74-4cc6-bb3f-88c352437479"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 40,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6f721e6c-4913-4127-9bd0-6bc0b8df7984",
                    "title": "Settings API Languages Test",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/languages.test.js",
                    "file": "/test/integration/functions/languages.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get a list of holidays",
                            "fullTitle": "Settings API Languages Test should get a list of holidays",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockRes = mocks.mockResponse();\nconst listLanguagesEvent = await mocks.listLanguagesEvent();\nawait languages.list(listLanguagesEvent, mockRes);\nexpect(mockRes.statusCode).to.eq(200);\nexpect(mockRes.body.length).to.be.gt(0);\nconst language = mockRes.body[0];\nexpect(language.languageGuid).to.exist;\nexpect(language.languageName).to.exist;",
                            "err": {},
                            "uuid": "6b430c09-ecfc-4adb-afc5-6c4ad9e6239f",
                            "parentUUID": "6f721e6c-4913-4127-9bd0-6bc0b8df7984",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "6b430c09-ecfc-4adb-afc5-6c4ad9e6239f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "6b7a6664-29b1-469f-be28-a97a80442a17",
                    "title": "Settings API Password Settings Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/passwordSettings.test.js",
                    "file": "/test/integration/functions/passwordSettings.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the password settings",
                            "fullTitle": "Settings API Password Settings Tests lists the password settings",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait passwordSettings.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(0);\n// only system settings listed should be the ones related to passwords\nexpect(result.filter(x => x.settingsKey.startsWith('PWD')).length).to.equal(result.length);",
                            "err": {},
                            "uuid": "3d05437f-c264-4c39-8e33-0b511422252b",
                            "parentUUID": "6b7a6664-29b1-469f-be28-a97a80442a17",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "3d05437f-c264-4c39-8e33-0b511422252b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 22,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1cc1f76d-36d0-46d7-b54b-b3244369f358",
                    "title": "Settings API System Config Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/systemConfig.test.js",
                    "file": "/test/integration/functions/systemConfig.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "lists the system config settings",
                            "fullTitle": "Settings API System Config Tests lists the system config settings",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nawait systemConfig.list(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body\nexpect(result.length).to.be.greaterThan(40);\nexpect(result[0].settingsGuid).to.exist\nexpect(result[0].settingsKey).to.exist\nexpect(result[0].settingsValue).to.exist\nexpect(result[0].masterSettings.description).to.exist\nexpect(result[0].masterSettings.keyDefault).to.exist\nexpect(result[0].masterSettings.keyOptions).to.exist",
                            "err": {},
                            "uuid": "433ff2af-162f-4c83-b8ee-52859604b576",
                            "parentUUID": "1cc1f76d-36d0-46d7-b54b-b3244369f358",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "updates system config settings",
                            "fullTitle": "Settings API System Config Tests updates system config settings",
                            "timedOut": false,
                            "duration": 138,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse();\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"true\"\n}]\nawait systemConfig.update(mockReq, mockRes);\n\n\t\texpect(mockRes.statusCode).to.equal(200);\nlet result = mockRes.body\nexpect(result).to.equal('1');\n// verify that change was made\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nlet allowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('true')\n// revert the change\nmockReq.body = [{\n  settingsGuid: \"2B18AE62-7C26-439C-84A7-371B4A51BE26\",\n  settingsKey: \"AllowGetReqInfo\",\n  settingsValue: \"false\"\n}]\nawait systemConfig.update(mockReq, mockRes);\nawait systemConfig.list(mockReq, mockRes);\nresult = mockRes.body\nallowGetReqInfo = result.find( x => x.settingsKey == 'AllowGetReqInfo')\nexpect(allowGetReqInfo.settingsValue).to.equal('false')",
                            "err": {},
                            "uuid": "96ba8f70-397e-48e9-8143-1aecd3ee3d71",
                            "parentUUID": "1cc1f76d-36d0-46d7-b54b-b3244369f358",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "433ff2af-162f-4c83-b8ee-52859604b576",
                        "96ba8f70-397e-48e9-8143-1aecd3ee3d71"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 160,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "581eaef0-da55-4468-844f-a152095c6183",
                    "title": "Settings API Utilities Tests",
                    "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                    "file": "/test/integration/functions/utilities.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "70d483e9-4e8c-484e-8892-c1016c893caf",
                            "title": "locales",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "lists locales",
                                    "fullTitle": "Settings API Utilities Tests locales lists locales",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\nawait utils.listLocales(mocks.req(), mockRes);\nexpect(mockRes.statusCode).equal(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "0103d5ef-6355-4f57-a5d0-b3ee0bbacc1c",
                                    "parentUUID": "70d483e9-4e8c-484e-8892-c1016c893caf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0103d5ef-6355-4f57-a5d0-b3ee0bbacc1c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "61ffbc48-9356-4a24-8e5c-affe89246663",
                            "title": "timezones",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list timezones",
                                    "fullTitle": "Settings API Utilities Tests timezones should list timezones",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listTimezones(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "87fb85a8-d7a1-4686-b59f-02e3a869335d",
                                    "parentUUID": "61ffbc48-9356-4a24-8e5c-affe89246663",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "87fb85a8-d7a1-4686-b59f-02e3a869335d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "389896f9-f677-48cc-bd11-1625e5588801",
                            "title": "running versions",
                            "fullFile": "/home/tim/src/integrify/api-settings/test/integration/functions/utilities.test.js",
                            "file": "/test/integration/functions/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list running versions",
                                    "fullTitle": "Settings API Utilities Tests running versions should list running versions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nawait utils.listRunningVersions(mocks.req(), mockRes);\nexpect(mockRes.statusCode).eq(200);\nexpect(mockRes.body).to.exist;",
                                    "err": {},
                                    "uuid": "99f5f1a2-79a7-4f6c-bae1-5b107d9edb90",
                                    "parentUUID": "389896f9-f677-48cc-bd11-1625e5588801",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "99f5f1a2-79a7-4f6c-bae1-5b107d9edb90"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "ca0e1d2d-f3a8-4e6f-b789-48168205726a",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "9910e23e-e2ae-42f5-98d8-a314b5e2b271",
                    "title": "Task Dispatcher API Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                    "file": "/test/integration/db/controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "fullTitle": "Task Dispatcher API Controller Tests \"before all\" hook in \"Task Dispatcher API Controller Tests\"",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = {tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()}",
                            "err": {},
                            "uuid": "8b36c1dc-7dc9-490b-b499-a6ccad7f679c",
                            "parentUUID": "9910e23e-e2ae-42f5-98d8-a314b5e2b271",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "07b60ab1-0e6c-461b-84ce-896b311562b7",
                            "title": "ProcessTaskController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get process tasks",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskController should get process tasks",
                                    "timedOut": false,
                                    "duration": 178,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskController = new controllers.ProcessTaskController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nlet processTasks = await processTaskController.getProcessTasks(updateMyProfileProcessSid)\nexpect(processTasks).to.exist;\nexpect(processTasks.length).to.be.gt(0);\nexpect(processTasks[0].processTaskGuid).to.exist;",
                                    "err": {},
                                    "uuid": "481c4f74-2d01-4041-a0dc-6d34c4815887",
                                    "parentUUID": "07b60ab1-0e6c-461b-84ce-896b311562b7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "481c4f74-2d01-4041-a0dc-6d34c4815887"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 178,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2373b988-e560-42f8-9406-a830af298055",
                            "title": "ProcessTaskAttributeController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task attributes",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should list process task attributes",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet includeExt = false\nlet processTaskAttributes = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributes[6].extendedAtt).to.not.exist;\nincludeExt = true\nlet processTaskAttributesIncExt = await processTaskAttributeController.list(profileFormProcessTaskSid, includeExt)\nexpect(processTaskAttributesIncExt).to.exist;\nexpect(processTaskAttributesIncExt.length).to.be.gt(0);\nexpect(processTaskAttributesIncExt[6].processTaskAttributeGuid).to.exist;\nexpect(processTaskAttributesIncExt[6].extendedAtt.extAttribute).to.exist;",
                                    "err": {},
                                    "uuid": "f9515e9a-d165-4805-ace8-87e986a41900",
                                    "parentUUID": "2373b988-e560-42f8-9406-a830af298055",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get and update a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get and update a process task attribute",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeGuid = '7cece0ab-bda6-4b13-a8fb-3f5c467371e6'  \nlet processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\nlet processTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\n// console.log(processTaskAttribute)\nexpect(processTaskAttribute.attributeValue).to.equal('0')\nlet numberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: 'TEST'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('TEST')\n// must set it back to original value so that we don't break anything\nnumberOfAffectedRows = await processTaskAttributeController.update({\n  processTaskAttributeGuid,\n  fields: {\n    attributeValue: '0'\n  }\n})\nexpect(numberOfAffectedRows).to.equal(1)\nprocessTaskAttribute =  await processTaskAttributeController.get(processTaskAttributeGuid)\nexpect(processTaskAttribute.attributeValue).to.equal('0')",
                                    "err": {},
                                    "uuid": "5802705b-4263-4b28-9bc3-5dacf2737b54",
                                    "parentUUID": "2373b988-e560-42f8-9406-a830af298055",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should insert a process task attribute",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should insert a process task attribute",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// pick any process task and insert a process task attribute\n// then delete it\nconst processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// give \"Update my profile - Start task\" a test process task att\nconst processTaskGuid = '27cb04ea-b19d-4327-8b3a-e82cc538d44d'\nconst attributeKey = 'TEST_KEY'\nconst attributeValue = 'TEST_VALUE'\nconst ordinal = 1\nconst processTaskAttribute = await processTaskAttributeController.insert({\n  processTaskGuid,\n  attributeKey,\n  attributeValue,\n  ordinal\n})\nexpect(processTaskAttribute.processTaskAttributeGuid).to.be.a.uuid()\nexpect(processTaskAttribute.processTaskGuid).to.equal(processTaskGuid)\nexpect(processTaskAttribute.attributeKey).to.equal(attributeKey)\nexpect(processTaskAttribute.attributeValue).to.equal(attributeValue)\nexpect(processTaskAttribute.ordinal).to.equal(ordinal)\n// cleanup\n// const numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nconst numberOfAffectedRows = await processTaskAttributeController.delete(processTaskAttribute.processTaskAttributeGuid)\nexpect(numberOfAffectedRows).to.equal(1)",
                                    "err": {},
                                    "uuid": "1787167f-6caa-47d7-8c96-148fa18dda50",
                                    "parentUUID": "2373b988-e560-42f8-9406-a830af298055",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get the process task attribute max ordinal value for a process task",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskAttributeController should get the process task attribute max ordinal value for a process task",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const processTaskAttributeController = new controllers.ProcessTaskAttributeController(session);\n// \"Update my profile - Start task\" a test process task att\nlet processTaskGuid = \"27cb04ea-b19d-4327-8b3a-e82cc538d44d\";\n// that process task has no atts so its max ordinal should be null\nlet maxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(null);\n// \"Update my profile - User Profile\" task does have atts.  seed db goes up to 12\nprocessTaskGuid = \"28d88aa5-fc4c-4e16-b32d-2964c738d49b\";\nmaxOrdinal = await processTaskAttributeController.getMaxOrdinal(processTaskGuid);\nexpect(maxOrdinal).to.equal(12);",
                                    "err": {},
                                    "uuid": "51d54175-1401-4038-bd85-69e0c20aea7d",
                                    "parentUUID": "2373b988-e560-42f8-9406-a830af298055",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f9515e9a-d165-4805-ace8-87e986a41900",
                                "5802705b-4263-4b28-9bc3-5dacf2737b54",
                                "1787167f-6caa-47d7-8c96-148fa18dda50",
                                "51d54175-1401-4038-bd85-69e0c20aea7d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 117,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "d1a2a72a-6013-4236-a0ff-18a34c742612",
                            "title": "ProcessTaskMappingController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list process task mappings",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessTaskMappingController should list process task mappings",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processTaskMappingController = new controllers.ProcessTaskMappingController(session);\nconst profileFormProcessTaskSid = 'c0473244-f04f-4916-8ac9-a73cc538d434'\nlet processTaskAttributes = await processTaskMappingController.list(profileFormProcessTaskSid)\nexpect(processTaskAttributes).to.exist;\nexpect(processTaskAttributes.length).to.be.gt(0);\nexpect(processTaskAttributes[0].processTaskMappingGuid).to.exist;",
                                    "err": {},
                                    "uuid": "37de067a-9e53-4c64-9772-41be90474f9f",
                                    "parentUUID": "d1a2a72a-6013-4236-a0ff-18a34c742612",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "37de067a-9e53-4c64-9772-41be90474f9f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "07a1806e-5024-4684-9065-5fe977818617",
                            "title": "ProcessController",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/controller.test.js",
                            "file": "/test/integration/db/controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should update a process's modified by and date fields",
                                    "fullTitle": "Task Dispatcher API Controller Tests ProcessController should update a process's modified by and date fields",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let processController = new controllers.ProcessController(session);\nconst updateMyProfileProcessSid = 'f864cfe2-98df-4724-8db1-de2cc538d4e0'\nconst systemUserGuid = 'D8C469C3-F781-4179-A09C-6D148885FB30'\nlet process = await processController.get(updateMyProfileProcessSid)\nexpect(process).to.exist;\nexpect(process.processGuid.toLowerCase()).to.equal(updateMyProfileProcessSid);\nconst oldModifiedDate = process.modifiedDate\nconst numberOfAffectedRows = await processController.updateModifiedByAndDate(updateMyProfileProcessSid)\nexpect(numberOfAffectedRows).to.equal(1)\nprocess = await processController.get(updateMyProfileProcessSid) \nexpect(process.modifiedDate).to.be.greaterThan(oldModifiedDate)\n// for some reason when executed in a test the db record's modifiedBy is set to \n// the systemUserGuid instead of the contact sid specified in the session (4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF)\nexpect(process.modifiedBy).to.equal(systemUserGuid)",
                                    "err": {},
                                    "uuid": "a53bbca7-f0f4-4c1b-9468-4f1973259893",
                                    "parentUUID": "07a1806e-5024-4684-9065-5fe977818617",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a53bbca7-f0f4-4c1b-9468-4f1973259893"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "53019a64-9dcc-4458-aa7b-ebbd875361ac",
                    "title": "Task Dispatcher API Model Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/model.test.js",
                    "file": "/test/integration/db/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c4924c9c-4778-4b31-b815-071556976d4c",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/db/model.test.js",
                            "file": "/test/integration/db/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"tests\"",
                                    "fullTitle": "Task Dispatcher API Model Tests tests \"before all\" hook in \"tests\"",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await testLib.getTestConfig();\nuser = config.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "d7367f61-db98-4005-acbf-6f6df0eb7a89",
                                    "parentUUID": "c4924c9c-4778-4b31-b815-071556976d4c",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 110,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = await sqldb.models.bindModel(\n  config.tenantOne.tenantId,\n  vwProcessTasksModels.vwProcessTasks\n);\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "fd6eae6a-5a94-4aa1-b069-75a808398278",
                                    "parentUUID": "c4924c9c-4778-4b31-b815-071556976d4c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return a hash of bound models",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should return a hash of bound models",
                                    "timedOut": false,
                                    "duration": 31,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const vwProcessTasksModel = (await models.getModels(config.tenantOne.tenantId))\n  .vwProcessTasks;\nlet results = await vwProcessTasksModel.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "3f50bc45-f6b5-4f3c-83f3-960273e63f5b",
                                    "parentUUID": "c4924c9c-4778-4b31-b815-071556976d4c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should bound models should be cached in memory",
                                    "fullTitle": "Task Dispatcher API Model Tests tests should bound models should be cached in memory",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(models._tentantModels[config.tenantOne.tenantId]).to.exist;\nlet results = await models._tentantModels[\n  config.tenantOne.tenantId\n].vwProcessTasks.query();\n//console.log(results)\nexpect(results.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "90270e49-673c-4512-9783-f4a82f10f02a",
                                    "parentUUID": "c4924c9c-4778-4b31-b815-071556976d4c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fd6eae6a-5a94-4aa1-b069-75a808398278",
                                "3f50bc45-f6b5-4f3c-83f3-960273e63f5b",
                                "90270e49-673c-4512-9783-f4a82f10f02a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 170,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "540c9264-e985-4bc7-bd38-45d6d4d3f297",
                    "title": "Task Dispatcher API FTP Push Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/functions/ftpPush.test.js",
                    "file": "/test/integration/functions/ftpPush.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task file settings",
                            "fullTitle": "Task Dispatcher API FTP Push Tests gets task file settings",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfilesettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst data = mockRes.body.Data;\nexpect(data).to.include({PickDirectory: \"No\"});\nexpect(data).to.include({FileToFTP: \"4a6c9613-bac9-4448-93c9-d9342bf5d897;96865aec-667c-4db5-8116-f1d1bae512ab\"});\nexpect(data).to.include({FTPSite: \"ftp\"});\nexpect(data).to.include({FTPUsername: \"ftp_user\"});\nexpect(data).to.include({FTPPassword: \"ftp_pass\"});",
                            "err": {},
                            "uuid": "66f5f152-c295-4051-850d-886978dee8d3",
                            "parentUUID": "540c9264-e985-4bc7-bd38-45d6d4d3f297",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets task file options",
                            "fullTitle": "Task Dispatcher API FTP Push Tests gets task file options",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getfileoptions\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nconst data = mockRes.body.Data[0];\nexpect(data).to.include('4a6c9613-bac9-4448-93c9-d9342bf5d897;96865aec-667c-4db5-8116-f1d1bae512ab');\nexpect(data).to.include('Form : File Attachment:  (Task Output)'),\nexpect(data).to.include('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "295799f7-48de-4c2b-9800-3ac16d026916",
                            "parentUUID": "540c9264-e985-4bc7-bd38-45d6d4d3f297",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "66f5f152-c295-4051-850d-886978dee8d3",
                        "295799f7-48de-4c2b-9800-3ac16d026916"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 27,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "de469425-117f-4fba-a36b-488a00722442",
                    "title": "Task Dispatcher API PDF Merge Tests",
                    "fullFile": "/home/tim/src/integrify/api-task-dispatcher/test/integration/functions/pdfMerge.test.js",
                    "file": "/test/integration/functions/pdfMerge.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "gets task settings",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets task settings",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_gettasksettings\", tasktype }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\n// vue output\n// expect(result.length).to.be.greaterThan(1);\n// expect(result[0].attributeKey).to.exist;\n// expect(result[0].attributeValue).to.exist;\n// expect(result.find(x => x.attributeKey == 'GeneratedFileName')).to.exist\n// expect(result.find(x => x.attributeKey == 'FirstPDF')).to.exist\n// angular output\nexpect(result.Data.GeneratedFileName).to.exist;\nexpect(result.Data.FirstPDF).to.exist;\nexpect(result.Data.SecondPDF).to.exist;",
                            "err": {},
                            "uuid": "bdfd498d-4626-4e73-b4c2-fc1984319aa7",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF options",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"script_getpdfoptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result.length).to.be.greaterThan(1);\n// vue output\n// expect(result[0].displayName).to.exist;\n// expect(result[0].processTaskGuid).to.exist;\n// expect(result[0].taskTypeGuid).to.exist;\n// angular output\nexpect(result[0].length).to.be.greaterThan(1);\nexpect(result[0][0]).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e;52407ad7-bd98-4023-8d88-91ef4464cd98');\nexpect(result[0][1]).to.equal('second PDF Merge Form : File Attachment (Task Output)');\nexpect(result[0][2]).to.equal('322ffece-654f-49e4-bb5c-4ae41768d5be');",
                            "err": {},
                            "uuid": "b1ab8800-e318-4e77-bf84-33289069ea75",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "lists PDF rule options",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests lists PDF rule options",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req();\nconst mockRes = await mocks.mockResponse();\nmockReq.params = { processTaskSid, op: \"listRuleOptions\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes);\nexpect(mockRes.statusCode).to.equal(200);\nconst result = mockRes.body;\nexpect(result).to.eql([{ Value: \"GeneratedPDF\", Label: \"Generated PDF\", Type: \"FileAttachment\"}])",
                            "err": {},
                            "uuid": "ccb16786-76bb-4b4f-aecf-8ddee8219b21",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets PDF fields",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets PDF fields",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getpdffields\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\n// vue output\n// expect(result.length).to.equal(1)\n// expect(result[0]).to.equal('FILE_NAME')\n// angular output\nexpect(result.Data.length).to.equal(1)\nexpect(result.Data[0][0]).to.equal('FILE_NAME')\nexpect(result.Data[0][1]).to.equal('FILE_NAME')",
                            "err": {},
                            "uuid": "61cce417-1195-406d-80c0-1fc737b89bdb",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - data source - form mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - data source - form mapping",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_Input')\nexpect(result[0].PrefillField).to.equal('1601919933647')\nexpect(result[0].Description).to.equal('Data - second PDF Merge Form - Merged PDF Filename:')\nexpect(result[0].TaskSID).to.equal('ae9b4a71-5f37-4fe9-9926-a0901da0eb0e')",
                            "err": {},
                            "uuid": "4a7ad2e2-9c69-4445-908f-c738b42564e4",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - fixed value mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - fixed value mapping",
                            "timedOut": false,
                            "duration": 10,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_fixedValue = 'c2095ccf-896b-46a0-b5e9-8e5b7e288270' \nconst processTaskSid_fixedValue = '5f719bb1-11b8-43d9-a9fd-66e55306f4eb'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_fixedValue, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_fixedValue }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Fixed_Value')\nexpect(result[0].PrefillField).to.equal('fixValFileName')\nexpect(result[0].Description).to.equal('Fixed Value - fixValFileName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "49247218-06e8-477d-88c1-d8aa64c8e676",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - request id mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - request id mapping",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_requestId = 'f9f94cfe-d4b3-4d89-9695-1b32c6cee55d' \nconst processTaskSid_requestId = '9b4f1444-7bd7-481a-8008-69a0490da139'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_requestId, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_requestId }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Request')\nexpect(result[0].PrefillField).to.equal('ID')\nexpect(result[0].Description).to.equal('Request - ID')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "3487717c-be34-4e00-964e-abe01f9149d3",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - client username mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - client username mapping",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_clientUsername = 'd1a7c44e-1e6e-4cdf-9d39-deac08a8b5cc' \nconst processTaskSid_clientUsername = 'a79cde56-9f3a-4be4-9824-dd634eddbff3'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_clientUsername, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_clientUsername }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Client')\nexpect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Client - UserName')\nexpect(result[0].TaskSID).to.not.exist",
                            "err": {},
                            "uuid": "14994edf-934b-47dc-b2a9-652bee5e2757",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "gets load params - status pdfmerge mapping",
                            "fullTitle": "Task Dispatcher API PDF Merge Tests gets load params - status pdfmerge mapping",
                            "timedOut": false,
                            "duration": 14,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const processSid_statusPdfMerge = 'ab3a8404-c208-4ca7-8ae6-637b16c23368' \nconst processTaskSid_statusPdfMerge = '7f4f1f42-228c-46dc-90a3-77fe15fe7412'\nconst mockReq = await mocks.req()\nconst mockRes = await mocks.mockResponse()\nmockReq.params = { processTaskSid: processTaskSid_statusPdfMerge, op: \"script_getloadparams\", tasktype }\nmockReq.query = { processSid: processSid_statusPdfMerge }\nawait functions.getConfig(mockReq, mockRes)\nexpect(mockRes.statusCode).to.equal(200)\nconst result = mockRes.body\nexpect(result.length).to.equal(1)\n\nexpect(result[0].ParameterName).to.equal('FILE_NAME')\nexpect(result[0].PrefillType).to.equal('Task_State')\n// expect(result[0].PrefillField).to.equal('UserName')\nexpect(result[0].Description).to.equal('Status - PDF Merge - ')\nexpect(result[0].TaskSID).to.equal('7f4f1f42-228c-46dc-90a3-77fe15fe7412')",
                            "err": {},
                            "uuid": "a4e1b1f6-22ea-42b3-acbd-64c1da7f579b",
                            "parentUUID": "de469425-117f-4fba-a36b-488a00722442",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "bdfd498d-4626-4e73-b4c2-fc1984319aa7",
                        "b1ab8800-e318-4e77-bf84-33289069ea75",
                        "ccb16786-76bb-4b4f-aecf-8ddee8219b21",
                        "61cce417-1195-406d-80c0-1fc737b89bdb",
                        "4a7ad2e2-9c69-4445-908f-c738b42564e4",
                        "49247218-06e8-477d-88c1-d8aa64c8e676",
                        "3487717c-be34-4e00-964e-abe01f9149d3",
                        "14994edf-934b-47dc-b2a9-652bee5e2757",
                        "a4e1b1f6-22ea-42b3-acbd-64c1da7f579b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 81,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "f3497f52-02e0-4d39-9ad3-74c687d5ee8f",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "db54ac6b-3c3f-4fd3-92c1-64b292ec2ac3",
                    "title": "Tenant API Sessions Tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/activeSessions.test.js",
                    "file": "/test/integration/activeSessions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 7,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \ntestConfig = await testLib.getTestConfig();\n    \ntenant = testConfig.tenantOne.tenantId;\ngroup = \"sessionServiceGroup\"\ntestEventType = 'extendSession'\nfullStreamName = tenant + '.stream.' + testStreamName\neventProcessedName = fullStreamName + \".\" + group + \".processed\";\neventHistoryName = fullStreamName + \".history\"",
                            "err": {},
                            "uuid": "00bdf5a8-85b1-4119-bb92-80c1546da00b",
                            "parentUUID": "db54ac6b-3c3f-4fd3-92c1-64b292ec2ac3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Sessions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "39a79a86-767c-45c2-996e-700fb259411b",
                            "parentUUID": "db54ac6b-3c3f-4fd3-92c1-64b292ec2ac3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "8e6c20fa-9b0e-4f60-a4c9-e350bea88503",
                            "title": "Active Sessions",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/activeSessions.test.js",
                            "file": "/test/integration/activeSessions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "232f3f21-8882-46ef-974c-1e682ba3169a",
                                    "title": "count active sessions",
                                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/activeSessions.test.js",
                                    "file": "/test/integration/activeSessions.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return activeSessions",
                                            "fullTitle": "Tenant API Sessions Tests Active Sessions count active sessions should return activeSessions",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions  = await getActiveSessions(tenant);\n//console.log(sessions)\nexpect(sessions).to.exist;\nexpect(sessions).to.have.property(\"activeSessions\")\nexpect(sessions).to.have.property(\"activeUsers\")",
                                            "err": {},
                                            "uuid": "7132b8fe-6eff-4215-84d2-f09f7555e5e3",
                                            "parentUUID": "232f3f21-8882-46ef-974c-1e682ba3169a",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "7132b8fe-6eff-4215-84d2-f09f7555e5e3"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5d802737-1f81-4751-b315-f5a464d3d450",
                    "title": "Tenant API licsense stats",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/licenseStats.test.js",
                    "file": "/test/integration/licenseStats.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API licsense stats \"before all\" hook",
                            "timedOut": false,
                            "duration": 3005,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000); \nconfig = await testLib.getTestConfig();\nlet sp = new stream.StreamPublisher('sessions',config.tenantOne.tenantId);\nawait sp.sendEvent(\"extendSession\", {\n    token: \"abcd234\",\n    user: {\n        sid:\"11111\", \n        user_name: \"iapprove\", \n        email: \"iapprove@integrify.com\", \n        name: \"System System\"\n    }\n})\n    \nawait delay(3000);",
                            "err": {},
                            "uuid": "0d77c133-873c-48eb-ad7b-b0a5f7ceabd2",
                            "parentUUID": "5d802737-1f81-4751-b315-f5a464d3d450",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API licsense stats \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "//forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "05bd56b4-7740-4994-abd4-e8732e2cba01",
                            "parentUUID": "5d802737-1f81-4751-b315-f5a464d3d450",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2a67b8a6-11bd-4003-af3f-ac4c2dc80a3d",
                            "title": "Post all stats",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/licenseStats.test.js",
                            "file": "/test/integration/licenseStats.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return ok",
                                    "fullTitle": "Tenant API licsense stats Post all stats should return ok",
                                    "timedOut": false,
                                    "duration": 467,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let result = await postAllStats();\nexpect(result).to.eq(\"ok\");",
                                    "err": {},
                                    "uuid": "93785c75-c1c2-4a5f-9553-cd1a84663b5b",
                                    "parentUUID": "2a67b8a6-11bd-4003-af3f-ac4c2dc80a3d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "93785c75-c1c2-4a5f-9553-cd1a84663b5b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 467,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5052cb63-daff-4f45-983b-8faaf7349338",
                    "title": "Tenant API Stream-Manager Tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                    "file": "/test/integration/monitor.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4e284eb8-95ff-4bf2-93cd-b04c05015fec",
                            "title": "listTenantStreams",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a list of the streams for a tenant",
                                    "fullTitle": "Tenant API Stream-Manager Tests listTenantStreams should return a list of the streams for a tenant",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\tlet results = await streamMonitor.listTenantStreams(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\tstreamName = apps[0]\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "67b03bb2-cc99-49f8-87e1-425bc104d960",
                                    "parentUUID": "4e284eb8-95ff-4bf2-93cd-b04c05015fec",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "67b03bb2-cc99-49f8-87e1-425bc104d960"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c941c923-1af4-41df-9658-91c6a76d869f",
                            "title": "streamInfoReqHandler",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests streamInfoReqHandler should return info for the stream",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.streamInfoReqHandler(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.exist",
                                    "err": {},
                                    "uuid": "c26415b4-d181-46ee-b6d3-6d1ca7aec5f3",
                                    "parentUUID": "c941c923-1af4-41df-9658-91c6a76d869f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c26415b4-d181-46ee-b6d3-6d1ca7aec5f3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "41e255b3-253d-4be6-8296-7383f089fe3b",
                            "title": "getGroupInfo",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return group info for the stream",
                                    "fullTitle": "Tenant API Stream-Manager Tests getGroupInfo should return group info for the stream",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\tlet results = await streamMonitor.getGroupInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "d95ee9b1-474d-4b2a-a745-25ef4048ba8c",
                                    "parentUUID": "41e255b3-253d-4be6-8296-7383f089fe3b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d95ee9b1-474d-4b2a-a745-25ef4048ba8c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b9da76b2-7cfa-46ad-84b8-1b6745100e56",
                            "title": "getConsumerInfo",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/monitor.test.js",
                            "file": "/test/integration/monitor.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return consumer info for the group",
                                    "fullTitle": "Tenant API Stream-Manager Tests getConsumerInfo should return consumer info for the group",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req();\n\t\t\treq.params.streamName = req.params.tenant + '.stream.' + testStreamName\n\t\t\treq.params.groupName = \"sessionServiceGroup\" \n\t\t\tlet results = await streamMonitor.getConsumerInfo(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst info = mockRes.body;\n\t\t\texpect(info).to.be.array()",
                                    "err": {},
                                    "uuid": "8b1af011-a355-41bd-8425-959f6271661b",
                                    "parentUUID": "b9da76b2-7cfa-46ad-84b8-1b6745100e56",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8b1af011-a355-41bd-8425-959f6271661b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "59fd9295-8dce-47cb-985f-206753ef80b2",
                    "title": "Tenant API License, Apps and Settings Tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                    "file": "/test/integration/tenant.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4b2c551b-83cd-4381-88f4-27eeac765234",
                            "title": "getTenantLicense",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a license for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicense should return a license for a tenant",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await mocks.req()\n\t\t\tlet results = await getTenantLicense(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseInfo = mockRes.body;\n\t\t\texpect(licenseInfo.instanceId).equal(req.oauth.tenant);",
                                    "err": {},
                                    "uuid": "c3cd9a00-1e67-4895-8aa8-2b77f7248198",
                                    "parentUUID": "4b2c551b-83cd-4381-88f4-27eeac765234",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c3cd9a00-1e67-4895-8aa8-2b77f7248198"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4c9b385b-72c4-4eb5-b320-9c0d27a5513a",
                            "title": "getTenantApps",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return apps for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantApps should return apps for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantApps(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst apps = mockRes.body;\n\t\t\texpect(apps).to.be.array()",
                                    "err": {},
                                    "uuid": "e2e998c3-fd11-41cd-85c2-f37a1963f6f1",
                                    "parentUUID": "4c9b385b-72c4-4eb5-b320-9c0d27a5513a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e2e998c3-fd11-41cd-85c2-f37a1963f6f1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "374aede9-16b5-4786-9e3d-a80f4b8168d3",
                            "title": "getTenantLicenseLocation",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return license location for a tenant",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLicenseLocation should return license location for a tenant",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\tlet results = await getTenantLicenseLocation(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst licenseLocation = mockRes.body;\n      expect(licenseLocation).to.satisfy(function(val) { return val === 'onpremise' || val.toLowerCase().includes('cloud'); });",
                                    "err": {},
                                    "uuid": "db52332d-c7cf-4635-93dd-8f0686104e94",
                                    "parentUUID": "374aede9-16b5-4786-9e3d-a80f4b8168d3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "db52332d-c7cf-4635-93dd-8f0686104e94"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "ca81f218-f814-4727-9d64-7a1f430aea05",
                            "title": "getTenantLoginSettings",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/tenant.test.js",
                            "file": "/test/integration/tenant.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should login settings for a tenant based on a tenant id",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a tenant id",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {tenant: req.config.tenantOne.tenantId}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "26b7221b-c4c0-42c8-bac4-94e10d9eccb2",
                                    "parentUUID": "ca81f218-f814-4727-9d64-7a1f430aea05",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should login settings for a tenant based on a host header",
                                    "fullTitle": "Tenant API License, Apps and Settings Tests getTenantLoginSettings should login settings for a tenant based on a host header",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n\t\t\tlet req = await  mocks.req()\n\t\t\treq.query = {hostHeader: req.config.tenantOne.hostHeader}\n\t\t\tlet results = await getTenantLoginSettings(req, mockRes);\n\t\t\texpect(mockRes.statusCode).equal(200);\n\t\t\texpect(mockRes.body).to.exist;\n\t\t\tconst settings = mockRes.body;\n\t\t\texpect(settings.ID).to.exist",
                                    "err": {},
                                    "uuid": "a4383e01-8c7d-446a-9c5e-26f7b0b19b46",
                                    "parentUUID": "ca81f218-f814-4727-9d64-7a1f430aea05",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "26b7221b-c4c0-42c8-bac4-94e10d9eccb2",
                                "a4383e01-8c7d-446a-9c5e-26f7b0b19b46"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "a9e1a5bb-0f55-4e20-a224-f26c272d3af3",
                    "title": "Tenant API Translation controller tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                    "file": "/test/integration/translation.controller.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "794b659d-41f7-4ed3-90dd-b57d693f5e0d",
                            "parentUUID": "a9e1a5bb-0f55-4e20-a224-f26c272d3af3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation controller tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "91f4f253-3191-4982-b34d-5259c67b17f7",
                            "parentUUID": "a9e1a5bb-0f55-4e20-a224-f26c272d3af3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c1a28cff-a5b3-46fb-a43b-7c31dd6ff683",
                            "title": "language crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  language = await translationController.createLanguage(tenant, languageObj);\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "5ae5c112-9b3d-4533-ba9d-9cec7c55b24f",
                                    "parentUUID": "c1a28cff-a5b3-46fb-a43b-7c31dd6ff683",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  languages = await translationController.listLanguages(tenant);\n         console.log(JSON.stringify(languages));\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "9170925d-5661-4b3e-9d60-cfecf2d6e07c",
                                    "parentUUID": "c1a28cff-a5b3-46fb-a43b-7c31dd6ff683",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language = await translationController.getLanguage(tenant,_id);\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "0296805a-19b0-4886-96fd-863cb113ed25",
                                    "parentUUID": "c1a28cff-a5b3-46fb-a43b-7c31dd6ff683",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "language.translationCode = 'test-updated';\n            language.modifiedBy = IntegrifySystemContactSid;\n            const updatedLanguage = await translationController.updateLanguage(tenant,language.toObject());\n            expect(updatedLanguage).to.exist         \n            expect(updatedLanguage._id.toString()).to.equal(_id)\n            expect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "a45f86c3-093f-4552-b38f-3404cd66bdb0",
                                    "parentUUID": "c1a28cff-a5b3-46fb-a43b-7c31dd6ff683",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a language",
                                    "fullTitle": "Tenant API Translation controller tests language crud  delete a a language",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLanguage(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "4ac2cdae-0ff2-42c5-95e4-c4e60ecd279d",
                                    "parentUUID": "c1a28cff-a5b3-46fb-a43b-7c31dd6ff683",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5ae5c112-9b3d-4533-ba9d-9cec7c55b24f",
                                "9170925d-5661-4b3e-9d60-cfecf2d6e07c",
                                "0296805a-19b0-4886-96fd-863cb113ed25",
                                "a45f86c3-093f-4552-b38f-3404cd66bdb0",
                                "4ac2cdae-0ff2-42c5-95e4-c4e60ecd279d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 73,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                            "title": "label crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  label = await translationController.createLabel(tenant, labelObj);\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "dca20375-f7f3-4136-b629-38d8fe162283",
                                    "parentUUID": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  labels = await translationController.listLabels(tenant);\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "06b4e05a-40e4-4dfc-ab8a-62677f8fd8b7",
                                    "parentUUID": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label = await translationController.getLabel(tenant,_id);\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "ea2813a9-b8fc-4ceb-8fb9-f56fc7677f96",
                                    "parentUUID": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\n            label.modifiedBy = IntegrifySystemContactSid;\n            const updatedLabel = await translationController.updateLabel(tenant,label.toObject());\n            expect(updatedLabel).to.exist         \n            expect(updatedLabel._id.toString()).to.equal(_id)\n            expect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "a70917b0-3dac-4851-878f-8ce4664a13bb",
                                    "parentUUID": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a a label",
                                    "fullTitle": "Tenant API Translation controller tests label crud  delete a a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const deleted = await translationController.deleteLabel(tenant,_id);\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "3ea99cae-24fd-47d0-9b22-0d5b07be789b",
                                    "parentUUID": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation controller tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst savedCount = await translationController.saveNewDefaultLabels(tenant, unsaved);\nexpect(savedCount).to.exist         \nexpect(savedCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "1305ad6d-a489-4a29-8c83-8fa1d89e4f44",
                                    "parentUUID": "10b9e61a-b43c-4348-9663-32e058c6cbd4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dca20375-f7f3-4136-b629-38d8fe162283",
                                "06b4e05a-40e4-4dfc-ab8a-62677f8fd8b7",
                                "ea2813a9-b8fc-4ceb-8fb9-f56fc7677f96",
                                "a70917b0-3dac-4851-878f-8ce4664a13bb",
                                "3ea99cae-24fd-47d0-9b22-0d5b07be789b",
                                "1305ad6d-a489-4a29-8c83-8fa1d89e4f44"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "24fb2bbc-05f9-41fc-9b53-2a98a2132893",
                            "title": "seed functions ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.controller.test.js",
                            "file": "/test/integration/translation.controller.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should seed languages",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed languages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLanguages(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "caf71289-ee48-47c1-85d0-489150ecb38f",
                                    "parentUUID": "24fb2bbc-05f9-41fc-9b53-2a98a2132893",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should seed labels",
                                    "fullTitle": "Tenant API Translation controller tests seed functions  should seed labels",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const  seeded = await translationController.seedLabels(true) //true for isTest;\n\nexpect(seeded).to.be.true;",
                                    "err": {},
                                    "uuid": "5bdffd2f-f601-48c9-afce-909b12b84f41",
                                    "parentUUID": "24fb2bbc-05f9-41fc-9b53-2a98a2132893",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "caf71289-ee48-47c1-85d0-489150ecb38f",
                                "5bdffd2f-f601-48c9-afce-909b12b84f41"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8d802423-25a3-415f-aa05-90c217b7941d",
                    "title": "Tenant API Translation handler tests",
                    "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.handler.test.js",
                    "file": "/test/integration/translation.handler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntestConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;",
                            "err": {},
                            "uuid": "233df960-3cd3-492a-9998-5848622b0cb4",
                            "parentUUID": "8d802423-25a3-415f-aa05-90c217b7941d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Tenant API Translation handler tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let deleted = await translationController.deleteLanguages(tenant, {languageName: 'test'});\ndeleted = await translationController.deleteLabels(tenant, {defaultText: 'label from test'});\nconsole.log(deleted);",
                            "err": {},
                            "uuid": "dd7c03e0-6751-4d80-82d0-f357a859fa78",
                            "parentUUID": "8d802423-25a3-415f-aa05-90c217b7941d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                            "title": "language crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should create a language",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = languageObj;\nawait translationHandler.createLanguage(req, mockRes);\nlanguage = mockRes.body;\n_id = language._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "c961408c-ae7d-4a54-bc97-59ccaac60b3c",
                                    "parentUUID": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list languages",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         await translationHandler.listLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);  \n         let createdLanguage  = languages.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLanguage).to.exist",
                                    "err": {},
                                    "uuid": "0eb35be9-35f3-46e7-b755-c5c1792200d7",
                                    "parentUUID": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list tenant languages",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should list tenant languages",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.params.tenant = tenant\n         await translationHandler.listTenantLanguages(req,mockRes);\n         const  languages = mockRes.body;\n         expect(languages.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "681d8855-64d4-4d7d-9c42-ce0567bad945",
                                    "parentUUID": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should get a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLanguage(req,mockRes);\n            language = mockRes.body;\n            expect(language).to.exist         \n            expect(language._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "631af519-50d5-41b3-9d56-6079389975b6",
                                    "parentUUID": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  should update a language",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = language;\nawait translationHandler.updateLanguage(req, mockRes);\nconst updatedLanguage = mockRes.body;\nexpect(updatedLanguage).to.exist         \nexpect(updatedLanguage._id.toString()).to.equal(_id)\nexpect(updatedLanguage.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "2d2f09bc-eee6-4a40-9e91-3d0ad6820568",
                                    "parentUUID": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete a language",
                                    "fullTitle": "Tenant API Translation handler tests language crud  delete a language",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLanguage(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "78389550-1b69-447e-be4a-5970a0631470",
                                    "parentUUID": "a3fad56a-9bc4-4ee9-8824-7897598e9097",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c961408c-ae7d-4a54-bc97-59ccaac60b3c",
                                "0eb35be9-35f3-46e7-b755-c5c1792200d7",
                                "681d8855-64d4-4d7d-9c42-ce0567bad945",
                                "631af519-50d5-41b3-9d56-6079389975b6",
                                "2d2f09bc-eee6-4a40-9e91-3d0ad6820568",
                                "78389550-1b69-447e-be4a-5970a0631470"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                            "title": "label crud ",
                            "fullFile": "/home/tim/src/integrify/api-tenant/test/integration/translation.handler.test.js",
                            "file": "/test/integration/translation.handler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should create a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = labelObj;\nawait translationHandler.createLabel(req, mockRes);\nlabel = mockRes.body;\n_id = label._id.toString();\nexpect(_id).to.exist",
                                    "err": {},
                                    "uuid": "d4a71bef-3802-41f7-ad29-af1dec60fd0c",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should list labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should list labels",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n         const req = await mocks.req();\n         req.query.tenant = tenant\n         await translationHandler.listLabels(req,mockRes);\n         const  labels = mockRes.body;\n         expect(labels.length).to.be.gt(0);  \n         let createdLabel  = labels.find((d) => {\n             return d._id.toString() === _id;\n         })\n         expect(createdLabel).to.exist",
                                    "err": {},
                                    "uuid": "a52a0c0b-d78f-4c9d-9d6a-984df088f56a",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should get a label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\n            const req = await mocks.req();\n            req.params.id = _id;\n            await translationHandler.getLabel(req,mockRes);\n            label = mockRes.body;\n            expect(label).to.exist         \n            expect(label._id.toString()).to.equal(_id)",
                                    "err": {},
                                    "uuid": "24fb9637-74df-4aef-922c-d7bbbcbbc44c",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  should update a label",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "label.translatedText = 'test-updated';\nlabel.modifiedBy = IntegrifySystemContactSid;\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = label;\nawait translationHandler.updateLabel(req, mockRes);\nconst updatedLabel = mockRes.body;   \nexpect(updatedLabel).to.exist         \nexpect(updatedLabel._id.toString()).to.equal(_id)\nexpect(updatedLabel.modifiedDate).to.exist;",
                                    "err": {},
                                    "uuid": "48011d11-00b3-4e1e-b281-3ccb982dfc1e",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete aa label",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete aa label",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.params.id = _id;\nawait translationHandler.deleteLabel(req,mockRes);\nconst  deleted = mockRes.body;\nexpect(deleted).to.exist         \nexpect(deleted.deletedCount).to.equal(1)",
                                    "err": {},
                                    "uuid": "e9336241-1ae3-42ec-8ccd-5d1886fdf64b",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "delete labels",
                                    "fullTitle": "Tenant API Translation handler tests label crud  delete labels",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let results = await translationController.listLabels(tenant,{_id})\n            let labelIds= results.map((i) => {\n                return i._id;\n            })\n\t\t\tconst mockRes = await mocks.mockResponse();\n            let req = await mocks.req()\n            req.body = labelIds;\n            await translationHandler.deleteLabels(req,mockRes);\n\t\t\tconst  deleted = mockRes.body;\n            expect(deleted).to.exist         \n            expect(deleted.deletedCount).to.exist",
                                    "err": {},
                                    "uuid": "0d52cc47-5b75-48f0-b578-6b1e46a623db",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save new labels from ui list",
                                    "fullTitle": "Tenant API Translation handler tests label crud  save new labels from ui list",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let unsaved = ['label from test']\nconst mockRes = await mocks.mockResponse();\nlet req = await mocks.req()\nreq.body = unsaved;\nawait translationHandler.saveNewDefaultLabels(req,mockRes);\nconst result = mockRes.body;\nexpect(result).to.exist         \nexpect(result.saved).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "02e2acfb-bd2d-4bb1-a008-98fd037ab248",
                                    "parentUUID": "bf64b796-6b5d-412a-9b00-2a80bf261870",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d4a71bef-3802-41f7-ad29-af1dec60fd0c",
                                "a52a0c0b-d78f-4c9d-9d6a-984df088f56a",
                                "24fb9637-74df-4aef-922c-d7bbbcbbc44c",
                                "48011d11-00b3-4e1e-b281-3ccb982dfc1e",
                                "e9336241-1ae3-42ec-8ccd-5d1886fdf64b",
                                "0d52cc47-5b75-48f0-b578-6b1e46a623db",
                                "02e2acfb-bd2d-4bb1-a008-98fd037ab248"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "2b2e689a-0d15-47a8-8d44-24a9a9cc7505",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "835c7d26-fffa-40f0-8137-521030c78ce0",
                    "title": "api-user Group Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                    "file": "/test/db/groupController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 288,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\nsession = { tenant: config.tenantOne.tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase() }; // system level\ntenantId = config.tenantOne.tenantId;\nfor (i = 1; i <= 10; i++) {\n  const groupController = new GroupController(session);\n  const result = await groupController.addGroup({ groupName: `Test Automation Group ${i}` });\n  testGroups.push(result);\n}",
                            "err": {},
                            "uuid": "4348b81a-9916-4eff-ac2d-b6f52458767c",
                            "parentUUID": "835c7d26-fffa-40f0-8137-521030c78ce0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 73,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// clean up our test data\nconst Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst ContactGroup = await models.getModel(config.tenantOne.tenantId, 'ContactGroup');\nawait Promise.all(testGroups.map(async (group) => {\n  await Group.query().hardDelete(group);\n  await ContactGroup.query()\n    .where('groupGuid', group.groupGuid)\n    .delete();\n}));",
                            "err": {},
                            "uuid": "a089e612-198e-48b8-bb6d-219f1c1e13cf",
                            "parentUUID": "835c7d26-fffa-40f0-8137-521030c78ce0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "1b91a840-bc55-442f-bc3d-bb5ed9ea37f2",
                            "title": "get tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "retrieves a group",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves a group",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groups = await Group.query().where('group_name', '=', 'Administrators');\nexpect(groups.length).to.equal(1);\nadminGroupGuid = groups[0].groupGuid;\nconst groupController = new GroupController(config.tenantOne);\nconst adminGroup = await groupController.getGroup(adminGroupGuid);\nexpect(adminGroup).to.exist;\nexpect(adminGroup.groupName).to.equal('Administrators');\nexpect(adminGroup.groupDesc).to.equal('System administrators');\nexpect(adminGroup.groupSql).to.be.null;",
                                    "err": {},
                                    "uuid": "a4f7bcf0-d14b-4109-9b12-d21784cb633f",
                                    "parentUUID": "1b91a840-bc55-442f-bc3d-bb5ed9ea37f2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all groups by default",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all groups by default",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups();\nconst groups = response.results;\nexpect(groups.length).to.be.above(10);",
                                    "err": {},
                                    "uuid": "5b6c855c-d514-45d2-a878-843277459b9b",
                                    "parentUUID": "1b91a840-bc55-442f-bc3d-bb5ed9ea37f2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves filtered list of groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves filtered list of groups",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst response = await groupController.getGroups({ search: 'Test Automation Group', count: 4 });\nconst groups = response.results;\nexpect(groups.length).to.equal(4);",
                                    "err": {},
                                    "uuid": "82fd6abc-3c90-400a-ae31-9ca5d6797efb",
                                    "parentUUID": "1b91a840-bc55-442f-bc3d-bb5ed9ea37f2",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves all possible members for adding to groups",
                                    "fullTitle": "api-user Group Controller Tests get tests retrieves all possible members for adding to groups",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const Group = await models.getModel(config.tenantOne.tenantId, 'Group');\nconst groupController = new GroupController(config.tenantOne);\nconst group = testGroups[9];\nconst response = await groupController.getNonMembers(group.groupGuid);\nconst results = response.results;\nexpect(results.length).to.be.equal(response.total);\n// empty group, so test a sampling of accounts that should be non-members\nexpect(results).to.include.deep({ memberGuid: \"A03BDD24-A0BA-4071-9A5B-2833C865EC3D\",\n                                  memberId: 1,\n                                  memberName: \"Administrators\",\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: testGroups[8].groupGuid.toUpperCase(),\n                                  memberId: testGroups[8].groupId,\n                                  memberName: testGroups[8].groupName,\n                                  memberType: \"Group\"\n                                })\nexpect(results).to.include.deep({ memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n                                  memberId: 1,\n                                  memberName: 'System System',\n                                  memberType: 'User'\n                                })\n// two system accounts that should not be returned, plus the group itself\nexpect(results).to.not.include.deep({ memberGuid: 'D8C469C3-F781-4179-A09C-6D148885FB30',\n                                               memberId: 92,\n                                               memberName: \"Integrify System\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: '64EC8FC9-B426-4376-A1A4-3AD16F0F9906',\n                                               memberId: 96,\n                                               memberName: \"Guest Account\",\n                                               memberType: \"User\"\n                                             })\nexpect(results).to.not.include.deep({ memberGuid: testGroups[9].groupGuid.toUpperCase(),\n                                           memberId: testGroups[9].groupId,\n                                           memberName: testGroups[9].groupName,\n                                           memberType: \"Group\"\n                                         })",
                                    "err": {},
                                    "uuid": "9e9c84d4-a847-4d40-8fa3-33fa3c9ad4a8",
                                    "parentUUID": "1b91a840-bc55-442f-bc3d-bb5ed9ea37f2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a4f7bcf0-d14b-4109-9b12-d21784cb633f",
                                "5b6c855c-d514-45d2-a878-843277459b9b",
                                "82fd6abc-3c90-400a-ae31-9ca5d6797efb",
                                "9e9c84d4-a847-4d40-8fa3-33fa3c9ad4a8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 82,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "65e877fc-e8e9-41ac-a219-7953d32a8c23",
                            "title": "insert tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "inserts a non-dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a non-dynamic group",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.dynamic).to.equal('No'); // ensure defaulting to \"No\" rather than null\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "a1490082-c979-4d8b-946c-3cb97a4b3ab5",
                                    "parentUUID": "65e877fc-e8e9-41ac-a219-7953d32a8c23",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "inserts a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests insert tests inserts a dynamic group",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nconst result = await groupController.addGroup(groupData);\nexpect(result.groupName).to.equal(groupName);\nexpect(result.groupDesc).to.equal(groupDesc);\nexpect(result.createdBy).to.equal(session.user_sid);\ntestGroups.push(result); // for cleanup at end",
                                    "err": {},
                                    "uuid": "65e8307d-be42-42df-b859-91cb72d19bd9",
                                    "parentUUID": "65e877fc-e8e9-41ac-a219-7953d32a8c23",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with bad SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with bad SQL",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'Test Group (simple)';\nconst groupDesc = 'Simple test group';\nconst groupData = {\n  groupName,\n  groupDesc,\n  dynamic: 'Yes',\n  groupSql: \"bad_column_name = 'Admin'\",\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "6e8a356a-463b-452e-a678-c3d3902b54ab",
                                    "parentUUID": "65e877fc-e8e9-41ac-a219-7953d32a8c23",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a group with no name",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a group with no name",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nawait expect(groupController.addGroup({ groupDesc: 'Test Group' })).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "aef217fe-75bd-40f7-9236-862d579951f1",
                                    "parentUUID": "65e877fc-e8e9-41ac-a219-7953d32a8c23",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects a dynamic group with no SQL",
                                    "fullTitle": "api-user Group Controller Tests insert tests rejects a dynamic group with no SQL",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupData = {\n  groupName: 'Dynamic Test Group',\n  dynamic: 'Yes',\n};\nconst groupController = new GroupController(session);\nawait expect(groupController.addGroup(groupData)).to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "02e62098-835d-4d55-906f-8e4d33956cb8",
                                    "parentUUID": "65e877fc-e8e9-41ac-a219-7953d32a8c23",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a1490082-c979-4d8b-946c-3cb97a4b3ab5",
                                "65e8307d-be42-42df-b859-91cb72d19bd9",
                                "6e8a356a-463b-452e-a678-c3d3902b54ab",
                                "aef217fe-75bd-40f7-9236-862d579951f1",
                                "02e62098-835d-4d55-906f-8e4d33956cb8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 75,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "b5eee096-b772-4355-9e7c-dd6acc23f3d6",
                            "title": "update tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates a group",
                                    "fullTitle": "api-user Group Controller Tests update tests updates a group",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nconst result = await groupController.updateGroup({\n  groupGuid: group.groupGuid,\n  groupName: 'Updated Test Automation Group',\n  dynamic: 'Yes',\n  groupSql: \"first_name = 'Admin'\",\n});\nexpect(result.groupName).to.equal('Updated Test Automation Group');\nexpect(result.dynamic).to.equal('Yes');\nexpect(result.groupSql).to.equal(\"first_name = 'Admin'\");",
                                    "err": {},
                                    "uuid": "4b8f7d50-c921-4e1c-8a42-248785e13b5e",
                                    "parentUUID": "b5eee096-b772-4355-9e7c-dd6acc23f3d6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update with no group name",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update with no group name",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "f8301754-494e-4466-ba95-2158c7ccca92",
                                    "parentUUID": "b5eee096-b772-4355-9e7c-dd6acc23f3d6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic without sql",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic without sql",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'Yes',\n    groupSql: '',\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "3a0b7682-94d1-4c3a-83c3-fb14f02d5486",
                                    "parentUUID": "b5eee096-b772-4355-9e7c-dd6acc23f3d6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "rejects an update for dynamic other than Yes/No",
                                    "fullTitle": "api-user Group Controller Tests update tests rejects an update for dynamic other than Yes/No",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[0];\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: true,\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);\nawait expect(groupController\n  .updateGroup({\n    groupGuid: group.groupGuid,\n    groupName: 'Validation test',\n    dynamic: 'yes',\n    groupSql: \"name = 'Admin'\",\n  }))\n  .to.be.rejectedWith(Error);",
                                    "err": {},
                                    "uuid": "9e269061-fbe3-438c-ae6e-2b527ac9fe62",
                                    "parentUUID": "b5eee096-b772-4355-9e7c-dd6acc23f3d6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4b8f7d50-c921-4e1c-8a42-248785e13b5e",
                                "f8301754-494e-4466-ba95-2158c7ccca92",
                                "3a0b7682-94d1-4c3a-83c3-fb14f02d5486",
                                "9e269061-fbe3-438c-ae6e-2b527ac9fe62"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "452a0d7c-9780-423f-8c59-020e6ede71a3",
                            "title": "delete tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "soft deletes a list of groups",
                                    "fullTitle": "api-user Group Controller Tests delete tests soft deletes a list of groups",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst timeBeforeDelete = Date.now();\nconst firstGroup = testGroups[0];\nconst response = await groupController.deleteGroups(testGroups.slice(0, 5).map((group) => group.groupGuid));\nexpect(response).to.eql([1, 1, 1, 1, 1]);\nconst deletedGroup = groupController.getGroup(firstGroup.groupGuid);\nexpect(deletedGroup).to.be.empty;",
                                    "err": {},
                                    "uuid": "8ed0a95d-42c2-4804-969f-c7f13055a849",
                                    "parentUUID": "452a0d7c-9780-423f-8c59-020e6ede71a3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8ed0a95d-42c2-4804-969f-c7f13055a849"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "20fb6c26-8795-4732-ad47-d740642d4b75",
                            "title": "membership test",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "adds a user to a group",
                                    "fullTitle": "api-user Group Controller Tests membership test adds a user to a group",
                                    "timedOut": false,
                                    "duration": 43,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9]; // 0-4 get deleted in a previous test\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(0); // make sure group starts empty\nlet result = await groupController.addMembersToGroup({\n  groupGuid: group.groupGuid,\n  members: [{\n    memberGuid: session.user_sid,\n    memberType: 'User',\n  },\n  ],\n});\nexpect(result).to.not.be.undefined;\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(1);\nexpect(result[0].memberGuid.toLowerCase()).to.equal(session.user_sid);\nexpect(result[0].groupGuid.toLowerCase()).to.equal(group.groupGuid);\nexpect(result[0].memberType).to.equal('User');",
                                    "err": {},
                                    "uuid": "e71c4058-f54e-4b11-a1d6-9ef8686f7a29",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "removes members from a group",
                                    "fullTitle": "api-user Group Controller Tests membership test removes members from a group",
                                    "timedOut": false,
                                    "duration": 36,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst group = testGroups[9];\nres = await groupController.getMembers(group.groupGuid);\nexpect(res.results.length).to.equal(1); // should have 1 member from preceding addUser test\nlet result = await groupController.removeMembersFromGroup({\n  groupGuid: group.groupGuid,\n  members: [session.user_sid],\n});\nexpect(result).to.equal(1);\nres = await groupController.getMembers(group.groupGuid);\nresult = res.results;\nexpect(result.length).to.equal(0);",
                                    "err": {},
                                    "uuid": "e26585f0-6f76-40a3-b31e-b2a271fe2d04",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a group",
                                    "timedOut": false,
                                    "duration": 21,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid);\nexpect(res.results.length).to.be.at.least(2);",
                                    "err": {},
                                    "uuid": "ad8f19bc-1874-4bb4-9705-0425479e1993",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "filters members of a group based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test filters members of a group based on search string",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst res = await groupController.getMembers(usersGroupGuid, { search: 'no-reply@integrify.com' });\nexpect(res.results.length).to.equal(2);",
                                    "err": {},
                                    "uuid": "0f5781af-0c74-4cee-a443-fb04e3cb9af6",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits result members of a group based start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits result members of a group based start/count",
                                    "timedOut": false,
                                    "duration": 53,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst usersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nlet res = await groupController.getMembers(usersGroupGuid);\nconst groupSize = res.results.length;\nexpect(groupSize).to.equal(res.total);\nres = await groupController.getMembers(usersGroupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(groupSize);\nres = await groupController.getMembers(usersGroupGuid, { start: 1 });\nexpect(res.results.length).to.equal(groupSize - 1);\nexpect(res.total).to.equal(groupSize);",
                                    "err": {},
                                    "uuid": "a0d940a0-a9e4-4320-888f-c3ec79ad5207",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to users only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to users only",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'true', groups: 'false' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('User'));",
                                    "err": {},
                                    "uuid": "b8f8ceb1-0acb-48ff-a437-e9886e9cfcc4",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits nonmembers to groups only",
                                    "fullTitle": "api-user Group Controller Tests membership test limits nonmembers to groups only",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst adminGroupGuid = 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D';\nconst res = await groupController.getNonMembers(adminGroupGuid, { users: 'false', groups: 'true' });\nres.results.forEach((groupMember) => expect(groupMember.memberType).to.equal('Group'));",
                                    "err": {},
                                    "uuid": "6b566fd9-c25c-437a-9796-2aa8e233f0a4",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "retrieves groups a user belongs to",
                                    "fullTitle": "api-user Group Controller Tests membership test retrieves groups a user belongs to",
                                    "timedOut": false,
                                    "duration": 38,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst userGuid = '4e99e0dd-b3b3-4d5d-826d-3d5ae62a16cf';\nconst res = await groupController.getUserGroups(userGuid);\nexpect(res.results.find((result) => result.groupName == 'Administrators')).to.not.be.undefined;\nexpect(res.results.find((result) => result.groupDesc == 'All users')).to.not.be.undefined;",
                                    "err": {},
                                    "uuid": "d65071f6-f9e9-43ec-83ee-9a9566eb6dae",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on start/count",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on start/count",
                                    "timedOut": false,
                                    "duration": 79,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { count: 1 });\nexpect(res.results.length).to.equal(1);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 0, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);\nres = await groupController.getNonMembers(group.groupGuid, { start: 1, count: 5 });\nexpect(res.results.length).to.equal(5);\nexpect(res.total).to.equal(availableSize);",
                                    "err": {},
                                    "uuid": "c78766d2-9f32-4824-b459-3253f0502aec",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "limits resulting nonmembers based on search string",
                                    "fullTitle": "api-user Group Controller Tests membership test limits resulting nonmembers based on search string",
                                    "timedOut": false,
                                    "duration": 51,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const group = testGroups[9];\nconst groupController = new GroupController(session);\nlet res = await groupController.getNonMembers(group.groupGuid);\nconst availableSize = res.results.length;\nexpect(availableSize).to.equal(res.total);\nres = await groupController.getNonMembers(group.groupGuid, { search: 'System' });\nconst { results } = res;\nexpect(results).to.eql([{\n  memberGuid: 'A03BDD24-A0BA-4071-9A5B-2833C865EC3D',\n  memberName: 'Administrators',\n  memberType: 'Group',\n  memberId: 1,\n},\n{\n  memberGuid: '4E99E0DD-B3B3-4D5D-826D-3D5AE62A16CF',\n  memberId: 1,\n  memberName: 'System System',\n  memberType: 'User',\n},\n]);",
                                    "err": {},
                                    "uuid": "b0349f54-cbd5-453b-9bdc-82201ca3b701",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists members of a dynamic group",
                                    "fullTitle": "api-user Group Controller Tests membership test lists members of a dynamic group",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst allUsersGroupGuid = 'eab8a4c9-6903-40bc-a2ee-cf254a408d6f';\nconst result = await groupController.getMembers(allUsersGroupGuid);",
                                    "err": {},
                                    "uuid": "ab3b4767-4983-4900-a649-638ccd74eb06",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "lists all members of a group containing groups",
                                    "fullTitle": "api-user Group Controller Tests membership test lists all members of a group containing groups",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "",
                                    "err": {},
                                    "uuid": "aab53628-1e5f-42c4-955d-4ea8855c63ef",
                                    "parentUUID": "20fb6c26-8795-4732-ad47-d740642d4b75",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e71c4058-f54e-4b11-a1d6-9ef8686f7a29",
                                "e26585f0-6f76-40a3-b31e-b2a271fe2d04",
                                "ad8f19bc-1874-4bb4-9705-0425479e1993",
                                "0f5781af-0c74-4cee-a443-fb04e3cb9af6",
                                "a0d940a0-a9e4-4320-888f-c3ec79ad5207",
                                "b8f8ceb1-0acb-48ff-a437-e9886e9cfcc4",
                                "6b566fd9-c25c-437a-9796-2aa8e233f0a4",
                                "d65071f6-f9e9-43ec-83ee-9a9566eb6dae",
                                "c78766d2-9f32-4824-b459-3253f0502aec",
                                "b0349f54-cbd5-453b-9bdc-82201ca3b701",
                                "ab3b4767-4983-4900-a649-638ccd74eb06",
                                "aab53628-1e5f-42c4-955d-4ea8855c63ef"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 404,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "ff5f46a9-3bc7-4329-b6e4-f7e2da986eb9",
                            "title": "association tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/db/groupController.test.js",
                            "file": "/test/db/groupController.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(47);\n// should not include categoryLevel by default\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName');",
                                    "err": {},
                                    "uuid": "dba07fea-634d-498e-a605-c5bedb6015ef",
                                    "parentUUID": "ff5f46a9-3bc7-4329-b6e4-f7e2da986eb9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list processes associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list processes associated to a group",
                                    "timedOut": false,
                                    "duration": 74,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getProcessAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D', { include: ['category'] });\nexpect(res[0]).to.have.keys('processGuid', 'processName', 'processVersion', 'taskName', 'categoryLevel');",
                                    "err": {},
                                    "uuid": "a66c55d7-ecf8-4148-8e7f-a8a5525308c8",
                                    "parentUUID": "ff5f46a9-3bc7-4329-b6e4-f7e2da986eb9",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "list roles associated to a group",
                                    "fullTitle": "api-user Group Controller Tests association tests list roles associated to a group",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupController = new GroupController(session);\nconst res = await groupController.getRoleAssociations('A03BDD24-A0BA-4071-9A5B-2833C865EC3D');\nexpect(res.length).to.equal(1);",
                                    "err": {},
                                    "uuid": "7971d75e-cd71-4612-b565-10fac08b5cd6",
                                    "parentUUID": "ff5f46a9-3bc7-4329-b6e4-f7e2da986eb9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dba07fea-634d-498e-a605-c5bedb6015ef",
                                "a66c55d7-ecf8-4148-8e7f-a8a5525308c8",
                                "7971d75e-cd71-4612-b565-10fac08b5cd6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 106,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "e005e7e5-d963-453a-9769-625d8d712745",
                    "title": "api-user User Controller Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/db/userController.test.js",
                    "file": "/test/db/userController.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Controller Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1175,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await testLib.getTestConfig();\ntenantId = config.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: config.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nMetadataValue = await models.getModel(tenantId, 'MetadataValue');\nUserAuth = await models.getModel(tenantId, 'UserAuth');\n// add user\nuserCtrl = new UserController(session);\nfor (let i=1; i<=limit; i++) {\n  const user = {\n    firstName: 'test first name' + i,\n    lastName: 'last' + i,\n    userName: 'test_username' + i,\n    email: `test${i}@test.test${i}`,\n    locale: 'en-US',\n    languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460', // US English\n    password: testPwd,\n    confirmPassword: testPwd,\n    title: 'title' + i\n  };\n  const dbUser = await userCtrl.insertUser(user)\n  testUsers.push(dbUser);\n}",
                            "err": {},
                            "uuid": "7ad8fdfa-3f3b-471f-9ec7-c0d0f38e443c",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Controller Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 82,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await Promise.all( testUsers.map( async (user) => {\n  return UserAuth.query().deleteById(user.contactGuid);\n}));\nawait User.query().delete().where('firstName', 'like', 'test first%');",
                            "err": {},
                            "uuid": "1b6dc627-c339-405b-bc96-96b5bf425738",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should retrieves users",
                            "fullTitle": "api-user User Controller Tests should retrieves users",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenantId, 'User');\nconst UserAuth = await models.getModel(tenantId, 'UserAuth');\nconst users = await User.query()\n  .orderBy('createdDate', 'desc')\n  .limit(limit);\nawait Promise.all(users.map(async user => {\n  const result = await userCtrl.getUser(user.contactGuid);\n  const {userName, managerGuid, ...userToCompare1} = result;\n  user.languageGuid = user.languageGuid.toLowerCase() // 'user' from Database query has \"upper case\" language guid - but userToCompare1 from API should be in lower case\n  user.contactGuid = user.contactGuid.toLowerCase()\n  user.createdBy = user.createdBy.toLowerCase()\n  expect(userToCompare1).to.deep.eq(user);\n  // compare testUser to user\n  const testUser = testUsers.find(u => u.contactGuid === user.contactGuid);\n  ['firstName', 'lastName', 'email', 'locale', 'languageGuid', 'contactId', 'title'].forEach(p => {\n    expect(testUser[p]).to.eq(user[p]);\n  });\n  // check userNames\n  const userAuth = await UserAuth.query()\n    .findById(user.contactGuid);\n  expect(userAuth).to.exist;\n  expect(userAuth.userName).to.eq(testUser.userName);\n}));",
                            "err": {},
                            "uuid": "13bd7aff-fcc0-46e1-837b-c14f61162854",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should search in users",
                            "fullTitle": "api-user User Controller Tests should search in users",
                            "timedOut": false,
                            "duration": 74,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\n// search by id\nlet result = await userCtrl.getUsers({search: testUser.contactId});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.eq(1);\n// search by username\nresult = await userCtrl.getUsers({search: testUser.userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = testUser.userName);\nexpect(found).to.exist;\n// search by first & last names\nresult = await userCtrl.getUsers({search: testUser.firstName.slice(0, -2)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.first === testUser.first);\nexpect(found).to.exist;\nresult = await userCtrl.getUsers({search: testUser.lastName.slice(0, -1)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.lastName === testUser.lastName);\nexpect(found).to.exist;\n// search by email\nresult = await userCtrl.getUsers({search: testUser.email.slice(-10)});\nexpect(result.results.length).to.be.gt(0);\nfound = result.results.find(u => u.email === testUser.email);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "e290ef34-0ab6-4583-8e01-e66a730d4759",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should limit results",
                            "fullTitle": "api-user User Controller Tests should limit results",
                            "timedOut": false,
                            "duration": 13,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const result = await userCtrl.getUsers({count: 4});\nexpect(result.results.length).to.eq(4);",
                            "err": {},
                            "uuid": "17df6338-5aab-4c1b-a0bb-d1c6d7ae2d7b",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should retrieve filtered users ",
                            "fullTitle": "api-user User Controller Tests should retrieve filtered users ",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[0];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nconst filters = [\n  {\n    field: 'lastName',\n    data: {comparison: 'eq', type: 'string', value: user.lastName,}\n  },\n  {\n    field: 'firstName',\n    data: {comparison: 'contains', value: user.firstName}\n  },\n  {\n    field: 'userName',\n    data: {comparison: 'eq', value: user.userName}\n  },\n  {\n    field: 'email',\n    data: {comparison: 'contains', value: user.email}\n  },\n  {\n    field: 'title',\n    data: {comparison: 'contains', value: user.title}\n  },\n  {\n    field: 'constCenter',\n    data: {comparison: 'contains', value: user.constCenter}\n  },\n  {\n    field: 'country',\n    data: {comparison: 'contains', value: user.country}\n  },\n  {\n    field: 'department',\n    data: {comparison: 'contains', value: user.department}\n  },\n  {\n    field: 'managerName',\n    data: {comparison: 'contains', value: user.managerName}\n  },\n  {\n    field: 'managerGuid',\n    data: {comparison: 'contains', value: user.managerGuid}\n  },\n];\nconst result = await userCtrl.getUsers({filters});\nexpect(result.results).to.exist;\nexpect(result.results.length).to.be.gt(0);\nconst found = result.results.find(u => u.contactGuid === testUser.contactGuid);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "d2223730-3d4e-4f6d-8b91-ad4233807a20",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a list of managers",
                            "fullTitle": "api-user User Controller Tests should get a list of managers",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const exceptGuid = testUsers[0].contactGuid;\nconst managers = await userCtrl.getManagers({exceptGuid});\nmanagers.forEach(manager => {\n  expect(manager.contactGuid).to.not.eq(exceptGuid);\n});\ntestUsers.filter(u => u.contactGuid !== exceptGuid).forEach(u => {\n  const manager = managers.find(m => m.contactGuid === u.contactGuid);\n  const {contactGuid, firstName, lastName, email, title} = u;\n  const testUser = {contactGuid, firstName, lastName, email, title};\n  expect(manager).to.deep.eq(testUser);\n});",
                            "err": {},
                            "uuid": "fe618b03-e70d-48f6-af37-3ec67d3a2431",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get a single user",
                            "fullTitle": "api-user User Controller Tests should get a single user",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = testUsers[3];\nconst user = await userCtrl.getUser(testUser.contactGuid);\nexpect(user).to.exist;\n['contactGuid', 'contactId', 'firstName', 'lastName', 'userName', 'email', 'locale', 'languageGuid', 'title'].forEach(p => {\n  expect(user[p]).to.eq(testUser[p]);\n});\n['middleName', 'phone', 'address1', 'address2', 'city', 'state', 'zip', 'country',\n  'department', 'costCenter', 'division', 'managerGuid', 'cField1', 'cField2'].forEach(p => {\n  expect(!!user[p] || user[p] === null || user[p] === '').to.eq(true);\n});",
                            "err": {},
                            "uuid": "1932141f-cb0d-4019-8441-4d146cf0302b",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update and get delegate",
                            "fullTitle": "api-user User Controller Tests should update and get delegate",
                            "timedOut": false,
                            "duration": 71,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// insert delegate\nconst testDelegate = {\n  contactGuid: testUsers[3].contactGuid,\n  processes: [{id: 'a6714779-4bde-4000-8361-ad37c838d440'}, {id: '3545404d-6fff-4ed5-ba9a-1100ce38d421'}, {id: 'cfc36de0-a71b-451f-817a-2092c3c247ca'}],\n  startDate: '2021-01-14',\n  startTime: '06:00',\n  endDate: '2021-01-15',\n  endTime: '17:35',\n};\nawait userCtrl.updateDelegate(testUsers[3].contactGuid, testDelegate);\n// get delegate\nlet delegate = await userCtrl.getDelegate(testDelegate.contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.exist;\n  expect(delegate[p]).to.eq(testDelegate[p]);\n})\nexpect(delegate.processes).to.exist;\nexpect(delegate.processes.length).to.eq(testDelegate.processes.length);\ntestDelegate.processes.forEach(p => {\n  const process = delegate.processes.find(dp => dp.id === p.id);\n  expect(process).to.exist;\n});\n// for user without delegate\ndelegate = await userCtrl.getDelegate(testUsers[1].contactGuid);\n['contactGuid', 'startDate', 'startTime', 'endDate', 'endTime'].forEach(p => {\n  expect(delegate[p]).to.be.null;\n});\nexpect(delegate.processes.length).to.eq(0);\n// delete delegate\nawait MetadataValue.query()\n  .where('ownerSid', testDelegate.contactGuid)\n  .delete();",
                            "err": {},
                            "uuid": "b7653c64-2a93-468d-bf7a-7726402fb11c",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "password should be hashed",
                            "fullTitle": "api-user User Controller Tests password should be hashed",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await UserAuth.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.password).to.not.eq(testPwd);",
                            "err": {},
                            "uuid": "221c87b8-92b6-4bf0-8966-2eb27cb870ec",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "user should be active (not deleted)",
                            "fullTitle": "api-user User Controller Tests user should be active (not deleted)",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = await User.query()\n  .findById(testUsers[0].contactGuid);\nexpect(user.deletedDate).to.be.null;\nexpect(user.deletedBy).to.be.null;",
                            "err": {},
                            "uuid": "8f6fa026-2634-4bcc-87bd-a38509c1a92c",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should convert user Guids",
                            "fullTitle": "api-user User Controller Tests should convert user Guids",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const testUser = {\n  contactGuid: 'SomeRandomString',\n  managerGuid: 'SomeRandomString',\n  signatureGuid: 'SomeRandomString',\n  languageGuid: 'SomeRandomString',\n  createdBy: 'SomeRandomString',\n};\nconst convertedUser1 = userCtrl.convertUserGuids(testUser);\nconst convertedUser2 = userCtrl.convertUserGuids({contactGuid: testUser.contactGuid});\n[convertedUser1, convertedUser2].forEach(u => {\n  Object.keys(u).forEach(key => {\n    expect(u[key]).to.eq(u[key].toLowerCase());\n  });\n});",
                            "err": {},
                            "uuid": "92cce189-62e5-45f1-a284-7dc8c5a04ecd",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if username is taken",
                            "fullTitle": "api-user User Controller Tests should check if username is taken",
                            "timedOut": false,
                            "duration": 22,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[0].contactGuid;\nconst username = testUsers[0].userName;\nlet isTaken = await userCtrl.isUserNameTaken(username);\nexpect(isTaken).to.be.true;\nisTaken = await userCtrl.isUserNameTaken(username.toUpperCase());\nexpect(isTaken).to.be.true;\n// with un-taken username\nisTaken = await userCtrl.isUserNameTaken('someUnusedUsernameTest');\nexpect(isTaken).to.be.false;\n// with Guid provided\nisTaken = await userCtrl.isUserNameTaken(username, userGuid);\nexpect(isTaken).to.be.false;",
                            "err": {},
                            "uuid": "1e175b21-0dfa-4259-a97c-a367cd0d0670",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Controller Tests should update user",
                            "timedOut": false,
                            "duration": 152,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userGuid = testUsers[3].contactGuid;\nconst data = {\n  firstName: 'test first updated',\n  middleName: 'up mid name',\n  lastName: 'up last name',\n  email: 'updated@email.com',\n  title: 'updatedTitle',\n  division: 'up division',\n  department: 'upd department',\n  costCenter: 'upd cost center',\n  location: 'upd loc',\n  phone: '094-242-5654 ext 4',\n  managerGuid: testUsers[0].contactGuid,\n  address1: '654 Some ave',\n  address2: 'apt 589',\n  city: 'New London',\n  state: 'OR',\n  zip: '98353',\n  country: 'USM',\n  languageGuid: testUsers[0].languageGuid,\n  timezone: 'PFT-09',\n  locale: 'en-US',\n  cField1: 'upd cust field 1',\n  cField2: 'upd cust field 2',\n  active: false,\n  userName: 'updatedUserName',\n  password: 'updatedPwd',\n  signatureGuid: '36b65bca-140d-41b9-ac8b-89b50c86e7ba'\n};\n// get current password\nlet user = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst previousPwd = user.password;\n// update\nuser = await userCtrl.updateUser(userGuid, data);\nconst {contactGuid, contactId, createdBy, createdDate, deletedBy, deletedDate, modifiedBy, modifiedDate, ntId, reportsToGuid, lastUpdate, ...updatedUser} = user;\nconst {password, active, ...testData} = data;\nexpect(updatedUser).to.deep.eq(testData);\n// should be inactive/deleted\nexpect(!!deletedBy).to.be.true;\nexpect(!!deletedDate).to.be.true;\n// should change the password\nuser = await UserAuth.query()\n  .findById(testUsers[3].contactGuid);\nconst updatedPwd = user.password;\nexpect(previousPwd).to.not.eq(updatedPwd);",
                            "err": {},
                            "uuid": "5afa224d-0b94-4cea-9f21-1ce563f2f41e",
                            "parentUUID": "e005e7e5-d963-453a-9769-625d8d712745",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "13bd7aff-fcc0-46e1-837b-c14f61162854",
                        "e290ef34-0ab6-4583-8e01-e66a730d4759",
                        "17df6338-5aab-4c1b-a0bb-d1c6d7ae2d7b",
                        "d2223730-3d4e-4f6d-8b91-ad4233807a20",
                        "fe618b03-e70d-48f6-af37-3ec67d3a2431",
                        "1932141f-cb0d-4019-8441-4d146cf0302b",
                        "b7653c64-2a93-468d-bf7a-7726402fb11c",
                        "221c87b8-92b6-4bf0-8966-2eb27cb870ec",
                        "8f6fa026-2634-4bcc-87bd-a38509c1a92c",
                        "92cce189-62e5-45f1-a284-7dc8c5a04ecd",
                        "1e175b21-0dfa-4259-a97c-a367cd0d0670",
                        "5afa224d-0b94-4cea-9f21-1ce563f2f41e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 411,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "2b048dfc-a73e-4528-bc5e-95ee56097f24",
                    "title": "api-user Group Handler Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/groupHandler.test.js",
                    "file": "/test/groupHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 138,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenant = testConfig.tenantOne.tenantId;\nconst userCtl = new UserController({tenantId: tenant})\nrestrictedUser = await userCtl.insertUser({firstName: 'groups test',\n                                           lastName: 'groups test',\n                                           userName: 'restricted user for groups permission test',\n                                           password: 'password'})",
                            "err": {},
                            "uuid": "5a9e6b94-8731-448a-8fce-98cfbc0a8774",
                            "parentUUID": "2b048dfc-a73e-4528-bc5e-95ee56097f24",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user Group Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 59,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const User = await models.getModel(tenant, 'User');\nawait User.query().hardDelete(restrictedUser)",
                            "err": {},
                            "uuid": "504347f4-2e06-4036-bb02-2bfd17ec3059",
                            "parentUUID": "2b048dfc-a73e-4528-bc5e-95ee56097f24",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "35906733-6922-4412-a6f0-cb7b717c3fb2",
                            "title": "crud tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should create a group",
                                    "fullTitle": "api-user Group Handler Tests crud tests should create a group",
                                    "timedOut": false,
                                    "duration": 20,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nconst group = response.body\nexpect(response.statusCode).to.equal(200)\nexpect(group.groupGuid).to.match(/([-\\w]+)/)\nexpect(group.groupName).to.equal(groupName);\n// cleanup\nreq.body = [group.groupGuid]\nconst foo = await handlers.deleteGroups(req, mockRes)",
                                    "err": {},
                                    "uuid": "e9f40a68-eb57-4e6b-b9e8-26c37a25925b",
                                    "parentUUID": "35906733-6922-4412-a6f0-cb7b717c3fb2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e9f40a68-eb57-4e6b-b9e8-26c37a25925b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "c563cef8-7f73-4067-bccf-541beaffb071",
                            "title": "permission tests",
                            "fullFile": "/home/tim/src/integrify/api-user/test/groupHandler.test.js",
                            "file": "/test/groupHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "admin should have manage/edit permissions per group",
                                    "fullTitle": "api-user Group Handler Tests permission tests admin should have manage/edit permissions per group",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = testConfig.tenantOne.adminUser.sid;\nconst response = await handlers.getGroups(req,mockRes);\nconst groups = response.body.results;\ngroups.forEach( group => {\n  expect(group.canManage).to.equal(true);\n  expect(group.canEdit).to.equal(true);\n});",
                                    "err": {},
                                    "uuid": "ce9d6784-4da3-4797-a034-ff43ce691961",
                                    "parentUUID": "c563cef8-7f73-4067-bccf-541beaffb071",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to create a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to create a group",
                                    "timedOut": false,
                                    "duration": 33,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupName = 'api-user group test'\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid;\nreq.body = { groupName: groupName,\n             groupDesc: 'api-user group test description' }\nconst response = await handlers.addGroup(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "2b7681f7-5fa3-4815-b1bb-f035e7385995",
                                    "parentUUID": "c563cef8-7f73-4067-bccf-541beaffb071",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to list groups members",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to list groups members",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.groupGuid = group.groupGuid\nconst response = await handlers.getGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "ca653e42-0b25-4acb-bef3-8e24935f6ae6",
                                    "parentUUID": "c563cef8-7f73-4067-bccf-541beaffb071",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should not have permission to delete a group",
                                    "fullTitle": "api-user Group Handler Tests permission tests should not have permission to delete a group",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const groupCtl = new GroupController({tenantId: tenant})\nconst group = groupCtl.getGroups({count: 1})\nconst mockRes = await mocks.mockResponse();\nconst req = await mocks.req();\nreq.oauth.user_sid = restrictedUser.contactGuid\nreq.params.body = [ group.groupGuid ]\nconst response = await handlers.deleteGroups(req,mockRes);\nexpect(response.statusCode).to.equal(403)",
                                    "err": {},
                                    "uuid": "ae26aede-6478-4b45-96fa-e8061027f891",
                                    "parentUUID": "c563cef8-7f73-4067-bccf-541beaffb071",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ce9d6784-4da3-4797-a034-ff43ce691961",
                                "2b7681f7-5fa3-4815-b1bb-f035e7385995",
                                "ca653e42-0b25-4acb-bef3-8e24935f6ae6",
                                "ae26aede-6478-4b45-96fa-e8061027f891"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 63,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                    "title": "api-user User Handler Tests",
                    "fullFile": "/home/tim/src/integrify/api-user/test/userHandler.test.js",
                    "file": "/test/userHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "api-user User Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "testConfig = await mocks.getTestConfig();\ntenantId = testConfig.tenantOne.tenantId;\nsession = {tenant: tenantId, user_sid: testConfig.tenantOne.adminUser.sid.toLowerCase()};\nUser = await models.getModel(tenantId, 'User');\nUserAuth = await models.getModel(tenantId, 'UserAuth');",
                            "err": {},
                            "uuid": "5d1c9c44-0ed2-495f-ac9a-22c9e53dcd57",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": true,
                            "skipped": false
                        },
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "api-user User Handler Tests \"before each\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req = await mocks.req();\nmockRes = await mocks.mockResponse();\ntestUser = (await User.query().limit(1))[0];\ntestUser.userName  = (await UserAuth.query().select('userName').where('contactGuid', testUser.contactGuid))[0].userName;",
                            "err": {},
                            "uuid": "025e6824-1966-43b2-9bd0-e4a97d71b5d9",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "api-user User Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 36,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await UserAuth.query().delete().where('userName', 'like', 'user_to_delete%');\nawait User.query().delete().where('firstName', 'like', 'user_to_delete%');",
                            "err": {},
                            "uuid": "0e917163-e617-4d30-bd3b-58d986252253",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should get a list of users",
                            "fullTitle": "api-user User Handler Tests should get a list of users",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getUsers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.results).to.exist;\nexpect(response.body.results.length).to.be.gt(0);\nexpect(response.body.total).to.exist;\nexpect(response.body.total).to.be.gt(0);",
                            "err": {},
                            "uuid": "4ca70038-5fc5-46fd-975a-bd6b49e8d41e",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should return a list of managers",
                            "fullTitle": "api-user User Handler Tests should return a list of managers",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.getManagers(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.length).to.be.gt(0);",
                            "err": {},
                            "uuid": "735ffe13-39cc-4d9f-ab45-138630a5984a",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get single user",
                            "fullTitle": "api-user User Handler Tests should get single user",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.params.userGuid = testUser.contactGuid;\nconst response = await handlers.getUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.delegate).to.exist;",
                            "err": {},
                            "uuid": "b09fe324-c744-4100-a51b-05ff38f1be4b",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should check if userName is taken",
                            "fullTitle": "api-user User Handler Tests should check if userName is taken",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.query.userName = testUser.userName;\nreq.query.userGuid = testUser.contactGuid;\nconst response = await handlers.checkIfUserNameIsTaken(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.isTaken).to.exist;\nexpect(response.body.isTaken).to.be.false;",
                            "err": {},
                            "uuid": "e36b3df6-0f6f-449f-8181-febd3f8e5765",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not insert user without data",
                            "fullTitle": "api-user User Handler Tests should not insert user without data",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;\nexpect(response.body.password).to.exist;",
                            "err": {},
                            "uuid": "1955b6c7-7361-4888-bc7a-13b2dd6477c3",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insert user",
                            "fullTitle": "api-user User Handler Tests should insert user",
                            "timedOut": false,
                            "duration": 144,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = {\n  firstName: 'user_to_delete',\n  lastName: 'lastName',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n  email: 'random@test.com',\n  locale: 'en-US',\n  timezone: 'Pacific',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n}\nconst response = await handlers.insertUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body).to.exist;\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;",
                            "err": {},
                            "uuid": "f7c7be44-5a8b-47e4-aad8-35cb1b8e297e",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should register a user",
                            "fullTitle": "api-user User Handler Tests should register a user",
                            "timedOut": false,
                            "duration": 6684,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const userName = 'register_user' + Math.random().toString(36).substring(7) // random string\nreq.body = {\n  firstName: 'register_user',\n  lastName: 'lastName',\n  userName,\n  email: 'random@test.com',\n  // locale: 'en-US',\n  timezone: 'US/Central',\n  languageGuid: testUser.languageGuid,\n  password: 'randomPwd',\n  tenant: tenantId\n}\nreq.bypassRecaptcha = true\nconst response = await handlers.registerUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\n// search by username to verify user record was created\nconst userCtrl = new UserController(session);\nconst result = await userCtrl.getUsers({search: userName});\nexpect(result.results.length).to.be.gt(0);\nlet found = result.results.find(u => u.userName = userName);\nexpect(found).to.exist;",
                            "err": {},
                            "uuid": "88e090f4-62cc-496e-b7d2-aa028115e4ee",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not update user with empty data",
                            "fullTitle": "api-user User Handler Tests should not update user with empty data",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "req.body = '{}';\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(400);\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.deep.eq(['The firstName field is required.']);\nexpect(response.body.lastName).to.exist;",
                            "err": {},
                            "uuid": "a18950a6-d92e-482a-98ae-d71bc298ee38",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should update user",
                            "fullTitle": "api-user User Handler Tests should update user",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let userToDelete = (await UserAuth.query().where('userName', 'like', 'user_to_delete%').limit(1))[0];\nif (!userToDelete) {\n  req.body = {\n    firstName: 'user_to_delete',\n    lastName: 'lastName',\n    userName: 'user_to_delete' + Math.random().toString(36).substring(7), // random string\n    email: 'random@test.com',\n    locale: 'en-US',\n    timezone: 'Pacific',\n    languageGuid: testUser.languageGuid,\n    password: 'randomPwd',\n  }\n  userToDelete  = (await handlers.insertUser(req, mockRes)).body;\n}\nconst data = {\n  firstName: 'user_to_delete',\n  lastName: 'updated last',\n  userName: 'user_to_delete' + Math.random().toString(36).substring(7),\n  email: 'random@test.updated',\n  locale: 'en-US',\n  timezone: 'Atlantic/New York',\n  languageGuid: testUser.languageGuid,\n};\nreq.params.userGuid = userToDelete.contactGuid;\nreq.body = JSON.stringify(data);\nconst response = await handlers.updateUser(req, mockRes);\nexpect(response.statusCode).to.eq(200);\nexpect(response.body.contactGuid).to.exist;\nexpect(response.body.firstName).to.exist;\nexpect(response.body.firstName).to.eq(data.firstName);\nexpect(response.body.timezone).to.exist;\nexpect(response.body.timezone).to.eq(data.timezone);",
                            "err": {},
                            "uuid": "099cf27c-9629-40ee-88f1-c74725572c20",
                            "parentUUID": "40379cf6-be12-46b9-8c0e-a87cbceb351d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "4ca70038-5fc5-46fd-975a-bd6b49e8d41e",
                        "735ffe13-39cc-4d9f-ab45-138630a5984a",
                        "b09fe324-c744-4100-a51b-05ff38f1be4b",
                        "e36b3df6-0f6f-449f-8181-febd3f8e5765",
                        "1955b6c7-7361-4888-bc7a-13b2dd6477c3",
                        "f7c7be44-5a8b-47e4-aad8-35cb1b8e297e",
                        "88e090f4-62cc-496e-b7d2-aa028115e4ee",
                        "a18950a6-d92e-482a-98ae-d71bc298ee38",
                        "099cf27c-9629-40ee-88f1-c74725572c20"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6886,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 10000
        },
        {
            "uuid": "ffe0c2fb-a1fe-4a6b-92e5-2c4e1dbb630f",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "7bb7beb9-b068-4465-8122-4675109052cb",
                    "title": "Config Processor ENV.CONFIG tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/config.test.js",
                    "file": "/test/integration/config.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor ENV.CONFIG tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 23,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nprocess.env.TESTING = true;\n\nconfigHelper = require(\"../../src/helpers/config\")\nredis = require(\"integrify-libs\").redisClient\npubSubClient = redis.makeCopy();\npubSubClient.subscribe('updateEnvConfig')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n//let deletes = await redis.delAsync(['ENV.CONFIG']);\n//console.log(deletes)",
                            "err": {},
                            "uuid": "58f8bb18-30f8-4100-ac1a-262605a755c2",
                            "parentUUID": "7bb7beb9-b068-4465-8122-4675109052cb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "613fc700-2684-4be4-b0f6-0cdd352ba5d5",
                            "title": "config helper",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/config.test.js",
                            "file": "/test/integration/config.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "e7e937b8-fa68-4899-a922-d703f1c5ed44",
                                    "title": "setConfig",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/config.test.js",
                                    "file": "/test/integration/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a local config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a local config file",
                                            "timedOut": false,
                                            "duration": 332,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nconsole.log(\"wow\",storedConfig)\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\n//expect(storedConfig.cacheTime).to.exist;\nawait delay(300)",
                                            "err": {},
                                            "uuid": "48d2d6ba-badc-46f6-a164-37da3e8a8b1c",
                                            "parentUUID": "e7e937b8-fa68-4899-a922-d703f1c5ed44",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateEnvConfig pub/sub channel",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should get a message on the updateEnvConfig pub/sub channel",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(pubSubMessage.channel).to.equal('updateEnvConfig');",
                                            "err": {},
                                            "uuid": "5901666f-1480-4998-9d7b-77ac130add24",
                                            "parentUUID": "e7e937b8-fa68-4899-a922-d703f1c5ed44",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set ENV.CONFIG in redis based on a S3 config file",
                                            "fullTitle": "Config Processor ENV.CONFIG tests config helper setConfig should set ENV.CONFIG in redis based on a S3 config file",
                                            "timedOut": false,
                                            "duration": 23,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.USE_S3_FILES=\"true\"\nawait configHelper.setEnvConfig()\nlet storedConfig = await redis.getAsync('ENV.CONFIG')\nexpect(storedConfig).to.exist;\nstoredConfig = JSON.parse(storedConfig);\nexpect(storedConfig.cacheTime).to.exist;",
                                            "err": {},
                                            "uuid": "e20de332-fa97-463c-bedb-d3def94912ce",
                                            "parentUUID": "e7e937b8-fa68-4899-a922-d703f1c5ed44",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "48d2d6ba-badc-46f6-a164-37da3e8a8b1c",
                                        "5901666f-1480-4998-9d7b-77ac130add24",
                                        "e20de332-fa97-463c-bedb-d3def94912ce"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 356,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "12b96f4e-3c4f-4a6d-a643-37b09962b37a",
                    "title": "Config Processor Event Handler Tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/configEventHandler.test.js",
                    "file": "/test/integration/configEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5055,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName]);\n\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"updateEnvConfig\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateDataInstances\", {\n  update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n    update: new Date().toISOString()\n});\nawait sp.sendEvent(\"updateLicenses\", {\n  update: new Date().toISOString(),\n  tenantId: 'integrifydev'\n      });\n\n\nforkedProcessor = await configStreamConsumer.monitorStream(tenant);\nawait delay(5000);",
                            "err": {},
                            "uuid": "980b57de-550a-44c0-a56a-362fd735c104",
                            "parentUUID": "12b96f4e-3c4f-4a6d-a643-37b09962b37a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Config Processor Event Handler Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "48cf3223-e344-4dd3-a561-c5f98c2732fb",
                            "parentUUID": "12b96f4e-3c4f-4a6d-a643-37b09962b37a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "4bce906b-bb70-4b9f-92f2-d75e1e3c3c95",
                            "title": "config stream processor",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/configEventHandler.test.js",
                            "file": "/test/integration/configEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "ec1a8726-d31f-43e4-b631-c56cc93eb250",
                                    "title": "reads from config stream",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/configEventHandler.test.js",
                                    "file": "/test/integration/configEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Config Processor Event Handler Tests config stream processor reads from config stream should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "bc200288-dd16-4549-8f78-60d8aed8b16d",
                                            "parentUUID": "ec1a8726-d31f-43e4-b631-c56cc93eb250",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "bc200288-dd16-4549-8f78-60d8aed8b16d"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "802d0462-ebda-416e-b282-7b6c3b23e272",
                    "title": "Config data instance tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/dataInstance.test.js",
                    "file": "/test/integration/dataInstance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config data instance tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateDataInstances')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});\n  \nlet deletes = await redis.delAsync(['data_instances']);",
                            "err": {},
                            "uuid": "2f763f8d-3dab-413c-b807-4207da6743d8",
                            "parentUUID": "802d0462-ebda-416e-b282-7b6c3b23e272",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "ca63c231-21df-4b92-b9a4-52c41a7a7a3c",
                            "title": "dataInstasnce helper",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/dataInstance.test.js",
                            "file": "/test/integration/dataInstance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "9d56b59e-68bc-4436-b9f5-97e50cd6a5ee",
                                    "title": "updateDataInstances",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/dataInstance.test.js",
                                    "file": "/test/integration/dataInstance.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set data_instances in redis",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should set data_instances in redis",
                                            "timedOut": false,
                                            "duration": 586,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await dataInstanceHelper.updateDataInstances();\nlet storedDataInstances = await redis.getAsync('data_instances')\nexpect(storedDataInstances).to.exist;\nstoredDataInstances = JSON.parse(storedDataInstances);\nexpect(Object.keys(storedDataInstances).length).to.be.gt(0);",
                                            "err": {},
                                            "uuid": "a618a410-c08f-416e-9445-622a638960dd",
                                            "parentUUID": "9d56b59e-68bc-4436-b9f5-97e50cd6a5ee",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateDataInstances pub/sub channel",
                                            "fullTitle": "Config data instance tests dataInstasnce helper updateDataInstances should get a message on the updateDataInstances pub/sub channel",
                                            "timedOut": false,
                                            "duration": 301,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateDataInstances');",
                                            "err": {},
                                            "uuid": "ad73f427-6b45-413c-98c4-c51f4913f0e4",
                                            "parentUUID": "9d56b59e-68bc-4436-b9f5-97e50cd6a5ee",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a618a410-c08f-416e-9445-622a638960dd",
                                        "ad73f427-6b45-413c-98c4-c51f4913f0e4"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 887,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b8d80cdc-d2d4-4316-ba85-6921f66ca5ef",
                    "title": "Config license tests",
                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/license.test.js",
                    "file": "/test/integration/license.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Config license tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "process.env.TESTING = true;\npubSubClient.subscribe('updateLicenses')\npubSubClient.on('message', function(channel, message) {\n  \n  pubSubMessage = {channel, message}\n  // pubSubMessage[channel] = message;\n  \n});",
                            "err": {},
                            "uuid": "820bef0f-72c5-4151-83fb-16862f7cb0f3",
                            "parentUUID": "b8d80cdc-d2d4-4316-ba85-6921f66ca5ef",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d94c4677-a628-437e-ad97-2ebd22f616da",
                            "title": "license helper",
                            "fullFile": "/home/tim/src/integrify/config-processor/test/integration/license.test.js",
                            "file": "/test/integration/license.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "a8d55c68-0f52-4ae6-87b1-35c87ad40756",
                                    "title": "updateLicenses",
                                    "fullFile": "/home/tim/src/integrify/config-processor/test/integration/license.test.js",
                                    "file": "/test/integration/license.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should set licenses and x.license in redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set licenses and x.license in redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 411,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses()\nlet storedLicences = await redis.hgetallAsync('licenses')\nlicenseId = Object.keys(storedLicences)[0]\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "906e32d9-af9e-43c3-ac4b-0db78401a7d3",
                                            "parentUUID": "a8d55c68-0f52-4ae6-87b1-35c87ad40756",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should get a message on the updateLicenses pub/sub channel",
                                            "fullTitle": "Config license tests license helper updateLicenses should get a message on the updateLicenses pub/sub channel",
                                            "timedOut": false,
                                            "duration": 300,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await delay(300)\nexpect(pubSubMessage.channel).to.equal('updateLicenses');",
                                            "err": {},
                                            "uuid": "de0b626a-d12f-4a27-a2c4-b24cc7327894",
                                            "parentUUID": "a8d55c68-0f52-4ae6-87b1-35c87ad40756",
                                            "isHook": false,
                                            "skipped": false
                                        },
                                        {
                                            "title": "should set license redis for all dataInstances",
                                            "fullTitle": "Config license tests license helper updateLicenses should set license redis for all dataInstances",
                                            "timedOut": false,
                                            "duration": 183,
                                            "state": "passed",
                                            "speed": "slow",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "await licenseHelper.updateLicenses(licenseId)\nlet storedLicences = await redis.hgetallAsync('licenses')\nexpect(storedLicences).to.exist;",
                                            "err": {},
                                            "uuid": "449b5a55-5c5c-4582-8e59-5e96064d7638",
                                            "parentUUID": "a8d55c68-0f52-4ae6-87b1-35c87ad40756",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "906e32d9-af9e-43c3-ac4b-0db78401a7d3",
                                        "de0b626a-d12f-4a27-a2c4-b24cc7327894",
                                        "449b5a55-5c5c-4582-8e59-5e96064d7638"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 894,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 105000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "7992ffce-3956-410f-9e7c-d4eb29ecd75d",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "2b657435-8664-48a1-96bb-acc505d9ba27",
                    "title": "Core Service biztimes",
                    "fullFile": "/home/tim/src/integrify/core-service/test/biztimes.test.js",
                    "file": "/test/biztimes.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service biztimes \"before all\" hook",
                            "timedOut": false,
                            "duration": 12,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nbiz = { \"Active\": false, \"EndHour\": 17, \"EndMinute\": 0, \"SID\": test_data.biz_sid, \"StartHour\": 9, \"StartMinute\": 15, \"Weekday\": 0 }",
                            "err": {},
                            "uuid": "bc03a515-ff92-4967-9d97-9c42d1f87474",
                            "parentUUID": "2b657435-8664-48a1-96bb-acc505d9ba27",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d7762d19-aac4-4e6f-a10d-99bed9aa315e",
                            "title": "GET /biztimes",
                            "fullFile": "/home/tim/src/integrify/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "gets biztimes",
                                    "fullTitle": "Core Service biztimes GET /biztimes gets biztimes",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/biztimes')\n    .set('Authorization', 'Bearer ' + token)\n// biz = res.body.Items[0];\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "64bd488a-8983-479e-ab1b-e39f49e8be72",
                                    "parentUUID": "d7762d19-aac4-4e6f-a10d-99bed9aa315e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "64bd488a-8983-479e-ab1b-e39f49e8be72"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 65,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e4c3d2bd-2b47-4cc0-b9a2-18460ca4f6f3",
                            "title": "POST /biztimes/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/biztimes.test.js",
                            "file": "/test/biztimes.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "if (biz.EndHour < 24)\n    biz.EndHour = biz.EndHour + 1\nelse\n    biz.EndHour = biz.EndHour - 23",
                                    "err": {},
                                    "uuid": "26349944-000d-4a86-bb23-f3d3812a58b4",
                                    "parentUUID": "e4c3d2bd-2b47-4cc0-b9a2-18460ca4f6f3",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves biztimes",
                                    "fullTitle": "Core Service biztimes POST /biztimes/save saves biztimes",
                                    "timedOut": false,
                                    "duration": 37,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/biztimes/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(biz)\n//console.log(res.body)\nexpect(res.status).to.equal(200);\nexpect(res.body.EndHour).to.exist;",
                                    "err": {},
                                    "uuid": "4e2e8e64-970d-4590-91d2-48eb1abe0476",
                                    "parentUUID": "e4c3d2bd-2b47-4cc0-b9a2-18460ca4f6f3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4e2e8e64-970d-4590-91d2-48eb1abe0476"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 37,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "5b29f913-038f-4f89-bf74-587c09e645bc",
                    "title": "Core Service category",
                    "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                    "file": "/test/category.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service category \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "f107c48a-00e6-43a0-bddf-9ca6eb6db458",
                            "parentUUID": "5b29f913-038f-4f89-bf74-587c09e645bc",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "14b01c31-3275-4965-bea9-f4096dc839de",
                            "title": "GET tree/{object_type}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET tree/{object_type} core-service",
                                    "timedOut": false,
                                    "duration": 45,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = res.body[0]\n            coreResult = res.body;\n            //console.log(res.body)\n            expect(res.status).to.equal(200);\n            // expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "318881f0-80e9-43a2-9d43-33789451c7f8",
                                    "parentUUID": "14b01c31-3275-4965-bea9-f4096dc839de",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "318881f0-80e9-43a2-9d43-33789451c7f8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 45,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "fe915b86-487b-4fa7-a24e-d1f732519451",
                            "title": "GET {sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/category/' + category.id)\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "272eb6d7-dc40-465c-9cfe-85e909d86cf5",
                                    "parentUUID": "fe915b86-487b-4fa7-a24e-d1f732519451",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "272eb6d7-dc40-465c-9cfe-85e909d86cf5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "791445d0-656d-41d8-ba39-98d368aae4ff",
                            "title": "POST save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category POST save core-service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/category/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(category_save)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.CreatedDate).to.exist;\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "0556d068-4633-4170-ba58-2074eef09def",
                                    "parentUUID": "791445d0-656d-41d8-ba39-98d368aae4ff",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0556d068-4633-4170-ba58-2074eef09def"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "87fc9180-7131-4f05-b316-1f679029a191",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/category.test.js",
                            "file": "/test/category.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service category GET {sid}/delete \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//Fetch category sid to delete\n            let resp = await chai.request(newUrlBase)\n                .get('/categories/tree/category?node=all')\n                .set('Authorization', 'Bearer ' + token)\n            category = resp.body;\n            category.forEach(element => {\n                //console.log(element.Name);\n                if (element.Name == 'Qa Auto')\n                    cate_delete = element;\n            });",
                                    "err": {},
                                    "uuid": "0240785a-93f3-43a5-a0dd-2a6786d00087",
                                    "parentUUID": "87fc9180-7131-4f05-b316-1f679029a191",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service category GET {sid}/delete core-service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/category/' + cate_delete.id + '/delete')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.equal(0);\n// expect(res.body.Name).to.exist;",
                                    "err": {},
                                    "uuid": "35c811a7-c237-45d6-82cc-abdccca8e3e9",
                                    "parentUUID": "87fc9180-7131-4f05-b316-1f679029a191",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "35c811a7-c237-45d6-82cc-abdccca8e3e9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "7df9b3a3-3320-499b-9b21-f2fa4f09b72f",
                    "title": "Core Service contacts",
                    "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                    "file": "/test/contact.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service contacts \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "20e63bf2-9533-4481-a2a5-d01d5c8e0f31",
                            "parentUUID": "7df9b3a3-3320-499b-9b21-f2fa4f09b72f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "188fb1be-b75c-4267-8145-729543f2d8b6",
                            "title": "GET /contacts/current",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/current core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/current/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;\n                  currentUser_sid = res.body.SID",
                                    "err": {},
                                    "uuid": "74f5ad89-7733-4ea8-8e5d-40ab6b134af4",
                                    "parentUUID": "188fb1be-b75c-4267-8145-729543f2d8b6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "74f5ad89-7733-4ea8-8e5d-40ab6b134af4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3085ac13-6578-44c4-8a30-251cec8ff15c",
                            "title": "GET detail/{contact_sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET detail/{contact_sid} core-service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .get('/contacts/detail/' + currentUser_sid)\n                        .set('Authorization', 'Bearer ' + token)\n                  coreResult = res.body;\n                  expect(res.status).to.equal(200);\n                  expect(res.body.ContactID).to.exist;",
                                    "err": {},
                                    "uuid": "579213a2-c8d5-468f-9927-d4db7fcefbee",
                                    "parentUUID": "3085ac13-6578-44c4-8a30-251cec8ff15c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "579213a2-c8d5-468f-9927-d4db7fcefbee"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "cf5beb27-d910-4d71-9b51-b0aae081d7f4",
                            "title": "GET {contact_sid}/attributes",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/attributes core-service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/attributes')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \nexpect(res.body[0]).to.exist;\nexpect(res.body[1]).to.exist;\nexpect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "6af6c185-879f-4888-8f46-14283e49b714",
                                    "parentUUID": "cf5beb27-d910-4d71-9b51-b0aae081d7f4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6af6c185-879f-4888-8f46-14283e49b714"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0ded2c61-b6dd-4f19-b829-fe7edbade81a",
                            "title": "GET {contact_sid}/delegations",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET {contact_sid}/delegations core-service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contact/' + currentUser_sid + '/delegations')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\n// //console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "0a7e699a-5e76-4032-ac30-14e9e0dde989",
                                    "parentUUID": "0ded2c61-b6dd-4f19-b829-fe7edbade81a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0a7e699a-5e76-4032-ac30-14e9e0dde989"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b7136d28-caf3-4510-b61c-774ee3f114ee",
                            "title": "GET byuserid/{user_id}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET byuserid/{user_id} core-service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/byuserid/iApprove')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\n//console.log(res.body)\nexpect(res.status).to.equal(200);\n//Need clarifacation on a valaid test \n// expect(res.body[0]).to.exist;\n// expect(res.body[1]).to.exist;\n// expect(res.body[2]).to.exist;",
                                    "err": {},
                                    "uuid": "67ef55ce-8668-4279-bb91-f47adbc3a534",
                                    "parentUUID": "b7136d28-caf3-4510-b61c-774ee3f114ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "67ef55ce-8668-4279-bb91-f47adbc3a534"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "da6b973a-5dac-4729-a1bb-6cf08dfbdb98",
                            "title": "GET /contacts/search",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service contacts GET /contacts/search core-service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search?search=System')\n      .set('Authorization', 'Bearer ' + token);\n// //console.log(res.body)\ncoreResult = res.body;\n//console.log(res.body);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a358d7fd-6e44-49b2-8b1e-9db9b0ec3d02",
                                    "parentUUID": "da6b973a-5dac-4729-a1bb-6cf08dfbdb98",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a358d7fd-6e44-49b2-8b1e-9db9b0ec3d02"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3c45a9c5-5d68-4f48-9778-a28b5737c456",
                            "title": "GET /contact/search/quick/name",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contact/search/quick/name core service",
                                    "timedOut": false,
                                    "duration": 73,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/search/quick/name/script/?start=0&count=20&sort=Name&dir=ASC&filter=System')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "16773bd7-ca8e-49ea-bdd5-6399e529dca1",
                                    "parentUUID": "3c45a9c5-5d68-4f48-9778-a28b5737c456",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "16773bd7-ca8e-49ea-bdd5-6399e529dca1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 73,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a1acddb1-89cf-40b7-a8cd-59bc88e2fd35",
                            "title": "GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts GET /contacts/contactdetailsearch/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/contacts/contactdetailsearch/0/10/LAST_NAME/ASC/script/')\n      .set('Authorization', 'Bearer ' + token);\n//console.log(res.body)\nexpect(res.status).to.equal(200);\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "0cd1528a-d5f3-425e-82ee-1c539d8bec78",
                                    "parentUUID": "a1acddb1-89cf-40b7-a8cd-59bc88e2fd35",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0cd1528a-d5f3-425e-82ee-1c539d8bec78"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 26,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "58e9be0e-b18e-4ec5-9bd3-bf015906d4f7",
                            "title": "POST /contacts/save | update",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service",
                                    "timedOut": false,
                                    "duration": 347,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/contacts/save')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\ninsertedSid = res.text\n//console.log(res.text)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "dea3f561-c588-4df7-a6f4-92b1ef0f1292",
                                    "parentUUID": "58e9be0e-b18e-4ec5-9bd3-bf015906d4f7",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/save | update core service update",
                                    "timedOut": false,
                                    "duration": 344,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/update')\n      .set('Authorization', 'Bearer ' + token)\n      .send(contact);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "ab79cafb-76cf-4c16-9191-5a253fe714a0",
                                    "parentUUID": "58e9be0e-b18e-4ec5-9bd3-bf015906d4f7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dea3f561-c588-4df7-a6f4-92b1ef0f1292",
                                "ab79cafb-76cf-4c16-9191-5a253fe714a0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 691,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7346c58e-8213-4318-a15a-ce6b29ae3a23",
                            "title": "POST /contacts/replace POST",
                            "fullFile": "/home/tim/src/integrify/core-service/test/contact.test.js",
                            "file": "/test/contact.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "replace_user = [[\"OldContactSid\", insertedSid], [\"ReplacementContactSid\", insertedSid2], [\"RecipientReplace\", \"No\"], [\"OpenTaskReplace\", \"No\"], [\"GroupReplace\", \"No\"], [\"RoleReplace\", \"No\"], [\"DelegationReplace\", \"No\"]]",
                                    "err": {},
                                    "uuid": "d45669bc-d404-4fc4-bb09-5671f010c4ea",
                                    "parentUUID": "7346c58e-8213-4318-a15a-ce6b29ae3a23",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service update",
                                    "fullTitle": "Core Service contacts POST /contacts/replace POST core service update",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "contact.SID = insertedSid;\nlet res = await chai.request(newUrlBase)\n      .post('/contacts/replace ')\n      .set('Authorization', 'Bearer ' + token)\n      .send(replace_user);\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "a6fde817-de92-4499-8117-41f6e035aa1e",
                                    "parentUUID": "7346c58e-8213-4318-a15a-ce6b29ae3a23",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a6fde817-de92-4499-8117-41f6e035aa1e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "34ef163a-5f16-4b80-ad14-2b3b8d92051e",
                    "title": "Core service dbconns",
                    "fullFile": "/home/tim/src/integrify/core-service/test/dbconn.test.js",
                    "file": "/test/dbconn.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core service dbconns \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "f2bc8b97-82ff-46c5-92d9-748b93580d2a",
                            "parentUUID": "34ef163a-5f16-4b80-ad14-2b3b8d92051e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "it should GET all dbconns",
                            "fullTitle": "Core service dbconns it should GET all dbconns",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                            "err": {},
                            "uuid": "55cdf08d-b73b-464e-88da-222ee257cf84",
                            "parentUUID": "34ef163a-5f16-4b80-ad14-2b3b8d92051e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should add a test dbconn",
                            "fullTitle": "Core service dbconns it should add a test dbconn",
                            "timedOut": false,
                            "duration": 57,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/save/script/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n  .set('Authorization', 'Bearer ' + token)\n  .send(testDbConn)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.be.a.guid()\ntestDbConnSid = res.text\n// verify testDbConn comes back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.be.greaterThan(-1);",
                            "err": {},
                            "uuid": "aef4303b-cf96-423e-b67a-b8748980195b",
                            "parentUUID": "34ef163a-5f16-4b80-ad14-2b3b8d92051e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "it should delete the test dbconn",
                            "fullTitle": "Core service dbconns it should delete the test dbconn",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let res = await chai.request(newUrlBase)\n  .post('/dbconns/delete/script/')\n  .set('Authorization', 'Bearer ' + token)\n  .send([testDbConnSid])\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n// verify testDbConn does not come back in list\nres = await chai.request(newUrlBase)\n  .get('/dbconns/list/0/1000/Name/ASC/script/')\n  .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testDbConnSid);\nexpect(idx).to.equal(-1);",
                            "err": {},
                            "uuid": "827f9430-cab3-4d2a-899f-566babb55937",
                            "parentUUID": "34ef163a-5f16-4b80-ad14-2b3b8d92051e",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "55cdf08d-b73b-464e-88da-222ee257cf84",
                        "aef4303b-cf96-423e-b67a-b8748980195b",
                        "827f9430-cab3-4d2a-899f-566babb55937"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 94,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "76449a86-4b51-4208-8928-c368473d07d3",
                    "title": "Core Service groups",
                    "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                    "file": "/test/group.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service groups \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "d989bc61-8232-4b62-9146-1833e5beaa22",
                            "parentUUID": "76449a86-4b51-4208-8928-c368473d07d3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "35c3dcd6-9855-4fdd-aa38-9dd381bcdc32",
                            "title": "POST /group/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /group/save core service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                        .post('/groups/save/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                        .set('Authorization', 'Bearer ' + token)\n                        .send({ \"Name\": \"Qa Auto\", \"Description\": \"This is an automation\", \"Dynamic\": 0 })\n                  new_groupSid = res.text;\n                  expect(res.status).to.equal(200);\n                  expect(res.text).to.exist;\n                  expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "e0929925-42e0-4bc6-be22-f8b419bfc772",
                                    "parentUUID": "35c3dcd6-9855-4fdd-aa38-9dd381bcdc32",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e0929925-42e0-4bc6-be22-f8b419bfc772"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "9fa2dc0b-702a-4818-ba60-d6a1fef79631",
                            "title": "POST /groups/members/{groupSid}/add",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/add core service",
                                    "timedOut": false,
                                    "duration": 48,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/add') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "b5fa8213-565b-4fdd-80f4-306309c4e3ee",
                                    "parentUUID": "9fa2dc0b-702a-4818-ba60-d6a1fef79631",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b5fa8213-565b-4fdd-80f4-306309c4e3ee"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 48,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "258abbe7-a65a-4cd5-8cf4-5ccf0ff24761",
                            "title": "POST /groups/members/{groupSid}/remove",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups POST /groups/members/{groupSid}/remove core service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/groups/members/' + new_groupSid + '/remove') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n      .set('Authorization', 'Bearer ' + token)\n      .send([{ SID: system_user, ContactType: 1 }])\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "c0e4060b-3f94-4f0a-b731-95bd39c18bc1",
                                    "parentUUID": "258abbe7-a65a-4cd5-8cf4-5ccf0ff24761",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c0e4060b-3f94-4f0a-b731-95bd39c18bc1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a1a716fd-000d-4443-ae39-9e1e5549242e",
                            "title": "GET /groups​/{sid}​/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service groups GET /groups​/{sid}​/delete core-service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + new_groupSid + '/delete')\n      .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('true')",
                                    "err": {},
                                    "uuid": "5c689b1d-a5c4-4854-abb7-3d54deda21fc",
                                    "parentUUID": "a1a716fd-000d-4443-ae39-9e1e5549242e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c689b1d-a5c4-4854-abb7-3d54deda21fc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "7966fdb3-ada4-449f-9926-df8aae12408e",
                            "title": "GET /groups/list/simple",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/list/simple core service",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/simple')\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Administrators');",
                                    "err": {},
                                    "uuid": "992acf92-2a72-4b8c-b98e-6a8960d18f63",
                                    "parentUUID": "7966fdb3-ada4-449f-9926-df8aae12408e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "992acf92-2a72-4b8c-b98e-6a8960d18f63"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0c8a10af-7265-47ac-95a8-a23a06e767a6",
                            "title": "GET /groups/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/{sid} core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.SID).to.exist\nexpect(res.body.SID).to.be.guid\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "bc418478-f07e-4054-9ca6-eb8cd7ea48eb",
                                    "parentUUID": "0c8a10af-7265-47ac-95a8-a23a06e767a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bc418478-f07e-4054-9ca6-eb8cd7ea48eb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4c18182e-aa29-4265-80ba-273a6b55ee2a",
                            "title": "GET /groups/listroleassociation/{groupSid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listroleassociation/{groupSid} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listroleassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('System Administrators');\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "3fd5d9b0-cea4-443d-92a0-03f472c04fec",
                                    "parentUUID": "4c18182e-aa29-4265-80ba-273a6b55ee2a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3fd5d9b0-cea4-443d-92a0-03f472c04fec"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "47dd3e74-6564-4447-8ef6-6ca49cbea24c",
                            "title": "GET /groups/select/{contact_sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/select/{contact_sid} core service",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/select/' + system_user)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "382f23d5-1286-4d78-a402-081db9f85551",
                                    "parentUUID": "47dd3e74-6564-4447-8ef6-6ca49cbea24c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "382f23d5-1286-4d78-a402-081db9f85551"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "3bd35b3f-e923-4da1-930e-3bfc6beb75ba",
                            "title": "GET /groups​/nondynamic​/list​/simple",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups​/nondynamic​/list​/simple core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/nondynamic/list/simple')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "765b175c-3642-4d9e-b1e2-559f477dc8d7",
                                    "parentUUID": "3bd35b3f-e923-4da1-930e-3bfc6beb75ba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "765b175c-3642-4d9e-b1e2-559f477dc8d7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "b9e55ffd-1cb0-447c-b631-1dcc523847a9",
                            "title": "​GET /groups​/listmembers​/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/listmembers​/{sid} core service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listmembers/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "49fdf20d-740e-4467-b370-3749ee5a0247",
                                    "parentUUID": "b9e55ffd-1cb0-447c-b631-1dcc523847a9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "49fdf20d-740e-4467-b370-3749ee5a0247"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "158ce0c4-5b22-4dab-8b69-ec4acdd50b43",
                            "title": "​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups ​GET /groups​/list​/{page}​/{count}​/{sort}​/{dir} core service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/list/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "e4249f3c-c308-4a9a-83cd-8250110aeef5",
                                    "parentUUID": "158ce0c4-5b22-4dab-8b69-ec4acdd50b43",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e4249f3c-c308-4a9a-83cd-8250110aeef5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "55a91aec-adca-4f38-ae8f-85be285e4017",
                            "title": "GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listbypage/{sid}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listbypage/' + groupSid + '/0/10/Name/asc')\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "bd6eda7e-e004-4f4b-9e3c-c6709e8b3cd0",
                                    "parentUUID": "55a91aec-adca-4f38-ae8f-85be285e4017",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bd6eda7e-e004-4f4b-9e3c-c6709e8b3cd0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "e6aeaad1-5e9d-43e5-9a4e-0a6307691f0d",
                            "title": "GET /groups/listprocessassociation/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/group.test.js",
                            "file": "/test/group.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service groups GET /groups/listprocessassociation/{sid} core service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/groups/listprocessassociation/' + groupSid)\n      .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "6725f889-f077-4d1d-b258-feb654cf5b32",
                                    "parentUUID": "e6aeaad1-5e9d-43e5-9a4e-0a6307691f0d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6725f889-f077-4d1d-b258-feb654cf5b32"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "d22a48de-a086-49f4-8a11-1491b971d612",
                    "title": "Core Service Members",
                    "fullFile": "/home/tim/src/integrify/core-service/test/member.test.js",
                    "file": "/test/member.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Members \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "76dc1b40-513e-414c-ae82-26f4edf4464d",
                            "parentUUID": "d22a48de-a086-49f4-8a11-1491b971d612",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6862eba5-9053-49f9-9b71-753f5ebe49dd",
                            "title": "{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/member.test.js",
                            "file": "/test/member.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Members {page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/member/0/10/Name/Asc/script/?filter=&include=3')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.text;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist\n// expect(res.).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "1de6ed60-6392-44bb-b00c-63001817b13e",
                                    "parentUUID": "6862eba5-9053-49f9-9b71-753f5ebe49dd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1de6ed60-6392-44bb-b00c-63001817b13e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "e747bf2e-1fba-4112-be1b-a8e19c4dd992",
                    "title": "Core Service myTasks",
                    "fullFile": "/home/tim/src/integrify/core-service/test/myTasks.test.js",
                    "file": "/test/myTasks.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service myTasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "34980999-55d4-4189-9fea-64b39288d54a",
                            "parentUUID": "e747bf2e-1fba-4112-be1b-a8e19c4dd992",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "30993f07-4a2e-445f-baae-c684c11be752",
                            "title": "GEt {status}/{page}/{count}/{sort}/{dir}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/myTasks.test.js",
                            "file": "/test/myTasks.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service myTasks GEt {status}/{page}/{count}/{sort}/{dir} core service",
                                    "timedOut": false,
                                    "duration": 100,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/myTasks/status/0/10/Name/Asc')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;",
                                    "err": {},
                                    "uuid": "cefde2cb-6421-45b5-b521-b08c42cb7b6e",
                                    "parentUUID": "30993f07-4a2e-445f-baae-c684c11be752",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cefde2cb-6421-45b5-b521-b08c42cb7b6e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 100,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "ce092034-79d2-421b-871d-83bb6cc63a23",
                    "title": "Core Service powerForm",
                    "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                    "file": "/test/powerform.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service powerForm \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\n// //console.log(test_data);\nnew_role = '{ \"Name\": \"Qatest\", \"ExtendedDescription\": \"qa automated\", \"OwnerSID\":' + test_data.object_sid + ', \"OwnerType\": 2 }'\npowerform = {\n    CategorySID: test_data.category_sid,\n    Name: \"test\",\n    PowerFormType: \"0\",\n    Version: 1\n}\n// { \"ID\": 9999, \"Mode\": 2, \"ObjectType\": 1, \"RoleSID\": test_data.role_sid, \"SID\": \"90645d40-9de6-48b1-b689-0a610ef1d716\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 3, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"4711a8f4-68be-4772-b389-0a610ef1d7fe\", \"Permissions\": 0 }, { \"ID\": 9999, \"Mode\": 4, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"b1e03457-e202-4a99-a389-0a610ef1d79d\", \"Permissions\": 0 }, { \"ID\": 0, \"Mode\": 5, \"ObjectType\": 1, \"RoleSID\": \"e513a6ec-cfea-4bcb-8b74-eebc3439c9fc\", \"SID\": \"f221751c-ba9f-4b19-9708-1f22372dffde\", \"Permissions\": 1023 }",
                            "err": {},
                            "uuid": "f4d0fe47-0699-444c-9820-bfe3796719d2",
                            "parentUUID": "ce092034-79d2-421b-871d-83bb6cc63a23",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "d1a62396-304f-4807-a235-4d8e3f235edf",
                            "title": "POST /Powerform/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm POST /Powerform/save core service",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/powerform/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(powerform)\nexpect(res.status).to.equal(200);\nsid = res.body.SID\n//console.log(sid)",
                                    "err": {},
                                    "uuid": "c2fe8fc5-3ad7-44c1-8f74-2ee52f1888c3",
                                    "parentUUID": "d1a62396-304f-4807-a235-4d8e3f235edf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c2fe8fc5-3ad7-44c1-8f74-2ee52f1888c3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "40e3f09a-0e6e-4dcd-aef2-a18babb8e793",
                            "title": "GET /Powerform/{sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid} core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid)\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "1f0a3ab3-f409-4ea0-b991-1080b6ae1dc0",
                                    "parentUUID": "40e3f09a-0e6e-4dcd-aef2-a18babb8e793",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1f0a3ab3-f409-4ea0-b991-1080b6ae1dc0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "25f3d2f3-b51f-4cd3-b949-ae6229414cd6",
                            "title": "GET /Powerform/{sid}/detail",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "92c2e29e-8154-417c-9e57-a28713b5b7d1",
                                    "parentUUID": "25f3d2f3-b51f-4cd3-b949-ae6229414cd6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92c2e29e-8154-417c-9e57-a28713b5b7d1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ef4735b6-83fd-48b6-8562-9dd0a95f185b",
                            "title": "GET /Powerform/{sid}/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/powerform.test.js",
                            "file": "/test/powerform.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service powerForm GET /Powerform/{sid}/delete core service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/powerform/' + sid + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "0304f25a-97f6-4507-b4d1-ee411f5cdc12",
                                    "parentUUID": "ef4735b6-83fd-48b6-8562-9dd0a95f185b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0304f25a-97f6-4507-b4d1-ee411f5cdc12"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "733a4f30-e0ab-46a6-a051-d6c5b1351cf6",
                    "title": "Core Service Process",
                    "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                    "file": "/test/process.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 3,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken();\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nprc = { Name: new Date().toISOString(), Description: \"Qa Automation\", CategorySID: test_data.category_sid }",
                            "err": {},
                            "uuid": "4d06bd02-5991-46e0-8a42-679e563512df",
                            "parentUUID": "733a4f30-e0ab-46a6-a051-d6c5b1351cf6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3745210f-ecc3-446a-9393-0bc3e9120893",
                            "title": "POST /process​/create|delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service",
                                    "timedOut": false,
                                    "duration": 118,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/process/create')\n    .set('Authorization', 'Bearer ' + token)\n    .send(prc)\np1 = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5dcd33fe-8684-46e6-beae-cb5f64917e73",
                                    "parentUUID": "3745210f-ecc3-446a-9393-0bc3e9120893",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | Delete",
                                    "fullTitle": "Core Service Process POST /process​/create|delete core service | Delete",
                                    "timedOut": false,
                                    "duration": 152,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/process/' + p1 + '/delete')\n    .set('Authorization', 'Bearer ' + token)\nconsole.log(res);\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "bd6dd34a-8e35-4331-841e-a2b68cd846a7",
                                    "parentUUID": "3745210f-ecc3-446a-9393-0bc3e9120893",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5dcd33fe-8684-46e6-beae-cb5f64917e73",
                                "bd6dd34a-8e35-4331-841e-a2b68cd846a7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 270,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "73bc3658-0474-49a1-b3da-bddcc22310ef",
                            "title": "GET /process/{sid}/copy",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /process/{sid}/copy core service",
                                    "timedOut": false,
                                    "duration": 1219,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/' + test_data.process_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            expect(res.status).to.equal(200);\n            //delete copied process\n            let del = await chai.request(newUrlBase)\n                .get('/process/' + res.text + '/delete')\n                .set('Authorization', 'Bearer ' + token)\n            expect(del.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "df90a277-c42a-4db5-8a0f-12697ba86d17",
                                    "parentUUID": "73bc3658-0474-49a1-b3da-bddcc22310ef",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "df90a277-c42a-4db5-8a0f-12697ba86d17"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1219,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "9989ba34-64a0-4ac0-8812-62714dd3b5c5",
                            "title": "GET /processes",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes core service",
                                    "timedOut": false,
                                    "duration": 71,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "31bb1283-adc7-419a-98bf-ab6a7f59da76",
                                    "parentUUID": "9989ba34-64a0-4ac0-8812-62714dd3b5c5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "31bb1283-adc7-419a-98bf-ab6a7f59da76"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 71,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "db63ced1-dcd2-4abd-8c29-3ef19aa1e8f4",
                            "title": "GET /processes/{SID}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{SID} core service",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "92d6982c-9930-40bf-a90a-2a2ebd23b310",
                                    "parentUUID": "db63ced1-dcd2-4abd-8c29-3ef19aa1e8f4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "92d6982c-9930-40bf-a90a-2a2ebd23b310"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6c6727bf-6837-4bdc-bc68-174363ab09bf",
                            "title": "GET /processes/{sid}/detail",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/detail core service",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/detail')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "d3e191d6-39d3-4cd1-8554-9de3bc482fab",
                                    "parentUUID": "6c6727bf-6837-4bdc-bc68-174363ab09bf",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d3e191d6-39d3-4cd1-8554-9de3bc482fab"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ab3aa184-de0d-429e-8fbf-a724beaf8da0",
                            "title": "GET /processes/{sid}/name",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{sid}/name core service",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/name')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "4eb8e7de-0550-4a26-afac-18c2aadc5b05",
                                    "parentUUID": "ab3aa184-de0d-429e-8fbf-a724beaf8da0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4eb8e7de-0550-4a26-afac-18c2aadc5b05"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "27da81dd-0416-430a-90e3-a3ccbec39bf9",
                            "title": "GET ​/processes​/{sid}​/summary",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET ​/processes​/{sid}​/summary core service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/summary')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.text)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "7b8f36b4-5bf8-4d9f-b176-34c77ceb9fc3",
                                    "parentUUID": "27da81dd-0416-430a-90e3-a3ccbec39bf9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7b8f36b4-5bf8-4d9f-b176-34c77ceb9fc3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "5bbeddf9-d9b4-48af-b05a-523f82a1faf8",
                            "title": "​GET /processes​/{process_sid}​/tasks",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process ​GET /processes​/{process_sid}​/tasks core service",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "e436e7e0-cd4c-4e98-81bf-f6c9ccb9a561",
                                    "parentUUID": "5bbeddf9-d9b4-48af-b05a-523f82a1faf8",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e436e7e0-cd4c-4e98-81bf-f6c9ccb9a561"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d92b0a93-7812-4a2d-aecc-1ece3a5269b1",
                            "title": "GET /processes/{process_sid}/tasks/{task_sid}/rules",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process GET /processes/{process_sid}/tasks/{task_sid}/rules core service",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "6ca5e057-a586-417b-8b16-0ebd03dd03e7",
                                    "parentUUID": "d92b0a93-7812-4a2d-aecc-1ece3a5269b1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6ca5e057-a586-417b-8b16-0ebd03dd03e7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 60,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "94d10494-d2e6-4cad-bc37-b37febd1d609",
                            "title": "POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete ",
                            "fullFile": "/home/tim/src/integrify/core-service/test/process.test.js",
                            "file": "/test/process.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service",
                                    "timedOut": false,
                                    "duration": 48,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/update/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(rule)\nsids.one = res.body.SID;\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "070fb07b-4a56-4994-a3af-65759ac59f86",
                                    "parentUUID": "94d10494-d2e6-4cad-bc37-b37febd1d609",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "core service | reorder",
                                    "fullTitle": "Core Service Process POST /processes/{process_sid}/tasks/{task_sid}/rules/update | reorder | delete  core service | reorder",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let reorder = { \"SID\": sids.two, \"Ordinal\": 2, \"ConditionType\": 1, \"MatchGuid\": \"\", \"RecipientSID\": null, \"DestinationAction\": \"0\" }\nlet res = await chai.request(newUrlBase)\n    .post('/processes/' + test_data.processes_sid + '/tasks/' + test_data.task_sid + '/rules/reorder/')\n    .set('Authorization', 'Bearer ' + token)\n    .send(reorder)\n//console.log(res.body)\nexpect(res.status).to.equal(200);",
                                    "err": {},
                                    "uuid": "5881572f-efce-4cde-bd75-a6de1fe01ad1",
                                    "parentUUID": "94d10494-d2e6-4cad-bc37-b37febd1d609",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "070fb07b-4a56-4994-a3af-65759ac59f86",
                                "5881572f-efce-4cde-bd75-a6de1fe01ad1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 70,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "23ffeb27-3506-4321-97d4-2578625906d6",
                    "title": "Core Service processes/tasks",
                    "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                    "file": "/test/processTask.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service processes/tasks \"before all\" hook",
                            "timedOut": false,
                            "duration": 5,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()\nlet test_yml = await getTestConfig();\ntest_data = test_yml.data;\nrecipient = [{ \"BaseObjectSID\": \"\", \"ContactType\": 2, \"ReferenceObjectSID\": \"\", \"SID\": test_data.contact_sid }]",
                            "err": {},
                            "uuid": "d30eaa00-40ee-4b10-aea0-951d442c745b",
                            "parentUUID": "23ffeb27-3506-4321-97d4-2578625906d6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6a92b67d-77e7-49e2-a124-2a889841fd95",
                            "title": "GET {sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.task_sid)\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "5aa57355-bfcb-4f12-a205-6915d85f24fb",
                                    "parentUUID": "6a92b67d-77e7-49e2-a124-2a889841fd95",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5aa57355-bfcb-4f12-a205-6915d85f24fb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d7806390-8608-441f-9563-62c851e09593",
                            "title": "GET {task_sid}/copy",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/copy core-service",
                                    "timedOut": false,
                                    "duration": 77,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/processes/tasks/' + test_data.task_sid + '/copy')\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            //console.log(res.body);\n            expect(res.status).to.equal(200);\n            expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "dd1bde85-58fe-4a00-9c24-14fbc40f034d",
                                    "parentUUID": "d7806390-8608-441f-9563-62c851e09593",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dd1bde85-58fe-4a00-9c24-14fbc40f034d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 77,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d8f70ff2-c4e6-4e1d-8a37-a4fe3efe351d",
                            "title": "GET {task_sid}/notification",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification core-service",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "a6f1c026-28f5-42c6-9a2e-ea7164666ebb",
                                    "parentUUID": "d8f70ff2-c4e6-4e1d-8a37-a4fe3efe351d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a6f1c026-28f5-42c6-9a2e-ea7164666ebb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "6ff1f488-09f9-4a31-8cd5-9731f413872a",
                            "title": "GET {task_sid}/notification/restore",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/restore core-service",
                                    "timedOut": false,
                                    "duration": 29,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/restore')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "adbdd7e1-04b6-4023-af55-6229e0ceea6a",
                                    "parentUUID": "6ff1f488-09f9-4a31-8cd5-9731f413872a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "adbdd7e1-04b6-4023-af55-6229e0ceea6a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 29,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "aa117c4a-ad38-42dd-b3ea-04bcf4c1bd40",
                            "title": "GET {task_sid}/notification/{enabledisable}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/{enabledisable} core-service",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/enabled')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "56177423-499b-40ff-b3c3-96477ad20f7d",
                                    "parentUUID": "aa117c4a-ad38-42dd-b3ea-04bcf4c1bd40",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "56177423-499b-40ff-b3c3-96477ad20f7d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "cd91677c-274c-448e-8b6d-ab9cfbb212d7",
                            "title": "POST notification/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST notification/save core-service",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/notification/save')\n    .set('Authorization', 'Bearer ' + token)\n    .send(notification)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "100df51e-1ce9-4ea8-944e-c9df8221b418",
                                    "parentUUID": "cd91677c-274c-448e-8b6d-ab9cfbb212d7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "100df51e-1ce9-4ea8-944e-c9df8221b418"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "67abc2fd-49f2-42a1-badd-0775b7fd7c31",
                            "title": "GET {task_sid}/notification/advancedsettings",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/notification/advancedsettings core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/notification/advancesettings')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n//   expect(res.body.ProcessID).to.exist;",
                                    "err": {},
                                    "uuid": "852a49c6-b5c4-4b67-a23b-a56ef2eec241",
                                    "parentUUID": "67abc2fd-49f2-42a1-badd-0775b7fd7c31",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "852a49c6-b5c4-4b67-a23b-a56ef2eec241"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "439058f4-5eb2-4f58-a86e-6ce72fe3eb2f",
                            "title": "GET {task_sid}/recipients",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipients core-service",
                                    "timedOut": false,
                                    "duration": 35,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "b99e6524-9e2f-439f-b672-035f563434d1",
                                    "parentUUID": "439058f4-5eb2-4f58-a86e-6ce72fe3eb2f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b99e6524-9e2f-439f-b672-035f563434d1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 35,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "d1412083-18fd-467b-8e22-f11c1996660f",
                            "title": "POST {task_sid}/recipients/add",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/add core-service",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/add')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "f3958ede-9e70-4e3b-9413-cf30dd181613",
                                    "parentUUID": "d1412083-18fd-467b-8e22-f11c1996660f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f3958ede-9e70-4e3b-9413-cf30dd181613"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "97a91c6b-fe2b-41a2-af7c-bd6c671a38b1",
                            "title": "POST {task_sid}/recipients/remove",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks POST {task_sid}/recipients/remove core-service",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .post('/processes/tasks/' + test_data.pTask_sid + '/recipients/remove')\n    .set('Authorization', 'Bearer ' + token)\n    .send(recipient);\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "ef0987c1-8874-4fbb-afad-79b06122d57a",
                                    "parentUUID": "97a91c6b-fe2b-41a2-af7c-bd6c671a38b1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ef0987c1-8874-4fbb-afad-79b06122d57a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "a06d0eb8-5cd8-4392-a855-2982940d7d2c",
                            "title": "GET {task_sid}/recipsettings",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET {task_sid}/recipsettings core-service",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipsettings/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\n// expect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "8bd68537-a1fe-491f-b3b4-c900a474b3d9",
                                    "parentUUID": "a06d0eb8-5cd8-4392-a855-2982940d7d2c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8bd68537-a1fe-491f-b3b4-c900a474b3d9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "4ee4d76d-465b-4ce4-ad56-a2aabd07ccb6",
                            "title": "GET task_sid}/recipients/dynamic",
                            "fullFile": "/home/tim/src/integrify/core-service/test/processTask.test.js",
                            "file": "/test/processTask.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service processes/tasks GET task_sid}/recipients/dynamic core-service",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/processes/tasks/' + test_data.pTask_sid + '/recipients/dynamic/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = JSON.stringify(res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body.TotalItemCnt).to.exist;",
                                    "err": {},
                                    "uuid": "a21f8c1d-0637-49db-bd21-b7d01f3523fa",
                                    "parentUUID": "4ee4d76d-465b-4ce4-ad56-a2aabd07ccb6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a21f8c1d-0637-49db-bd21-b7d01f3523fa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "24ff8971-4e13-47d4-87a4-70c8fcbd8d2f",
                    "title": "Core Service systemmessages",
                    "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                    "file": "/test/systemmessage.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service systemmessages \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "197439e6-aa71-4576-8e40-fcccb4964d1e",
                            "parentUUID": "24ff8971-4e13-47d4-87a4-70c8fcbd8d2f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e5823b23-944f-4f89-8af7-148aa4426d40",
                            "title": "POST /systemmessages/save",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service systemmessages POST /systemmessages/save it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 38,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .post('/systemmessages/save/script/')\n      .set('Authorization', 'Bearer ' + token)\n      .send(testMsg)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\n\n// verify systemMessage is in the list\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.MessageBody == testMsg.MessageBody);\nexpect(idx).to.be.greaterThan(-1);",
                                    "err": {},
                                    "uuid": "63059c9c-d491-4d1a-8267-3ec478b528bf",
                                    "parentUUID": "e5823b23-944f-4f89-8af7-148aa4426d40",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "63059c9c-d491-4d1a-8267-3ec478b528bf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 38,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "f413bc93-013d-4ceb-bd02-9a17709e6710",
                            "title": "GET /systemmessages/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET all systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/list it should GET all systemmessages",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "4ca196ec-226d-4594-b030-a10133e5d30d",
                                    "parentUUID": "f413bc93-013d-4ceb-bd02-9a17709e6710",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4ca196ec-226d-4594-b030-a10133e5d30d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "93a25bd5-eac7-4b77-a8f0-ef8f09b035f2",
                            "title": "GET /systemmessages/active/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET active systemmessages",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/active/list it should GET active systemmessages",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n  .get('/systemmessages/active/list/script/')\n  .set('Authorization', 'Bearer ' + token);\n  \ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "76677899-67f8-40fe-ae77-ad7d0f2d6f30",
                                    "parentUUID": "93a25bd5-eac7-4b77-a8f0-ef8f09b035f2",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "76677899-67f8-40fe-ae77-ad7d0f2d6f30"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "9b252f75-9a48-4438-b329-c7b27ed7e1cb",
                            "title": "/systemmessages/{sid}}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should GET system message by SID",
                                    "fullTitle": "Core Service systemmessages /systemmessages/{sid}} it should GET system message by SID",
                                    "timedOut": false,
                                    "duration": 22,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n             .get('/systemmessages/list/script/')\n             .set('Authorization', 'Bearer ' + token);\n       \n             expect(res.status).to.equal(200);\n             expect(res.body.Items).to.exist;\n             const testSystemMsgSID = res.body.Items[0].SID;\n             res = await chai.request(newUrlBase)\n             .get(`/systemmessages/${testSystemMsgSID}/script/`)\n             .set('Authorization', 'Bearer ' + token);\n             expect(res.status).to.equal(200);\n             expect(res.body.SID).to.equal(testSystemMsgSID);",
                                    "err": {},
                                    "uuid": "a493be91-1e0f-44b9-9759-54d8421aead4",
                                    "parentUUID": "9b252f75-9a48-4438-b329-c7b27ed7e1cb",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a493be91-1e0f-44b9-9759-54d8421aead4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 22,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "9fba591f-3fcc-4e29-9655-20034d905d26",
                            "title": "GET /systemmessages/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemmessage.test.js",
                            "file": "/test/systemmessage.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should DELETE system message",
                                    "fullTitle": "Core Service systemmessages GET /systemmessages/delete it should DELETE system message",
                                    "timedOut": false,
                                    "duration": 27,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n      \nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst testSystemMsgSID = res.body.Items[0].SID;\nres = await chai.request(newUrlBase)\n  .post('/systemmessages/delete/script/') \n  .set('Authorization', 'Bearer ' + token)\n  .send([testSystemMsgSID])\n        \nexpect(res.status).to.equal(200);\nexpect(res.text).to.exist;\nexpect(res.text).to.equal('1');\n        \n// verify that system message is not in the list anymore\nres = await chai.request(newUrlBase)\n      .get('/systemmessages/list/script/')\n      .set('Authorization', 'Bearer ' + token);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;\nconst idx = res.body.Items.findIndex(item => item.SID == testSystemMsgSID);\nexpect(idx).to.equal(-1);",
                                    "err": {},
                                    "uuid": "39d611ed-39a9-4701-8295-3bfe44bde12d",
                                    "parentUUID": "9fba591f-3fcc-4e29-9655-20034d905d26",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "39d611ed-39a9-4701-8295-3bfe44bde12d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 27,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "b528c6a3-f747-419b-91a4-18d2400b452a",
                    "title": "Core Service System Process",
                    "fullFile": "/home/tim/src/integrify/core-service/test/systemProcess.test.js",
                    "file": "/test/systemProcess.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service System Process \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "d8ac7f44-d589-4a59-a6de-1eea2fbc477e",
                            "parentUUID": "b528c6a3-f747-419b-91a4-18d2400b452a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "2ad39e94-ccb9-45d4-b0bc-49aa9dc902a0",
                            "title": "GET S/SystemProcess/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemProcess.test.js",
                            "file": "/test/systemProcess.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "it should save a systemmessage",
                                    "fullTitle": "Core Service System Process GET S/SystemProcess/list it should save a systemmessage",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/SystemProcess/list')\n    .set('Authorization', 'Bearer ' + token)\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Items).to.exist;",
                                    "err": {},
                                    "uuid": "91a98110-084f-4c65-a94f-6f4cb67be954",
                                    "parentUUID": "2ad39e94-ccb9-45d4-b0bc-49aa9dc902a0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "91a98110-084f-4c65-a94f-6f4cb67be954"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "a189ac6a-40a8-49bd-86e9-dc7a5373c13f",
                    "title": "Core Service system Settings",
                    "fullFile": "/home/tim/src/integrify/core-service/test/systemSettings.test.js",
                    "file": "/test/systemSettings.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service system Settings \"before all\" hook",
                            "timedOut": false,
                            "duration": 4,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "8b52348c-3059-4bab-9ce3-8a108ac23ddf",
                            "parentUUID": "a189ac6a-40a8-49bd-86e9-dc7a5373c13f",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a6c4075e-3db4-4742-96b7-cb55b87bfb2d",
                            "title": "GET /systemsettings/list",
                            "fullFile": "/home/tim/src/integrify/core-service/test/systemSettings.test.js",
                            "file": "/test/systemSettings.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service system Settings GET /systemsettings/list core-service",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/systemsettings/list/script/')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\n// expect(res.body.InstanceSID).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "9d64cf0e-3c94-4136-a9bd-5568b844a045",
                                    "parentUUID": "a6c4075e-3db4-4742-96b7-cb55b87bfb2d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9d64cf0e-3c94-4136-a9bd-5568b844a045"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 25,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "048cbf3f-8a2e-4acf-b960-0b169c4212cb",
                    "title": "Core Service Tabs",
                    "fullFile": "/home/tim/src/integrify/core-service/test/tabs.test.js",
                    "file": "/test/tabs.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Tabs \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "1f27e671-9ce9-4fcf-807a-8842b3ecaf70",
                            "parentUUID": "048cbf3f-8a2e-4acf-b960-0b169c4212cb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a8a36297-8dba-49ba-92db-ce024a22e9ff",
                            "title": "GET {sid}",
                            "fullFile": "/home/tim/src/integrify/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service",
                                    "fullTitle": "Core Service Tabs GET {sid} core-service",
                                    "timedOut": false,
                                    "duration": 23,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "6a7b1175-cca3-4bbd-bb14-812b93e3c7b1",
                                    "parentUUID": "a8a36297-8dba-49ba-92db-ce024a22e9ff",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6a7b1175-cca3-4bbd-bb14-812b93e3c7b1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 23,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "0baaead9-d931-465f-be31-27b37eb96c2a",
                            "title": "GET {sid}/delete",
                            "fullFile": "/home/tim/src/integrify/core-service/test/tabs.test.js",
                            "file": "/test/tabs.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core-service ",
                                    "fullTitle": "Core Service Tabs GET {sid}/delete core-service ",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/tabs/5ffbf397-8b3a-4d06-a773-58158e39d46f/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body.Banner).to.exist\ncoreResult = res.body;",
                                    "err": {},
                                    "uuid": "8501b2b7-3c2f-44a0-afa6-8c931044b1f9",
                                    "parentUUID": "0baaead9-d931-465f-be31-27b37eb96c2a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8501b2b7-3c2f-44a0-afa6-8c931044b1f9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                },
                {
                    "uuid": "6267dc89-ca2d-4993-b4dc-e1e0671118e2",
                    "title": "Core Service Utilities",
                    "fullFile": "/home/tim/src/integrify/core-service/test/utilities.test.js",
                    "file": "/test/utilities.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Core Service Utilities \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntoken = await getAuthToken()",
                            "err": {},
                            "uuid": "3364b640-73ea-4cd1-9d3b-022b7a9692c6",
                            "parentUUID": "6267dc89-ca2d-4993-b4dc-e1e0671118e2",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f57ee8c7-d759-446b-bf08-e8c68d854848",
                            "title": "locale",
                            "fullFile": "/home/tim/src/integrify/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities locale core service",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n                .get('/Utilities/locales/') //we can append the /script/ section of the url to match WCF. It will get stgripped by middleware\n                .set('Authorization', 'Bearer ' + token)\n            //console.log(res.body);\n            coreResult = res.body;\n            expect(res.status).to.equal(200);\n            // expect(res.text).to.exist;\n            // expect(res.text).to.be.a.guid()",
                                    "err": {},
                                    "uuid": "d70c6197-576f-4afa-8e60-a848f470c587",
                                    "parentUUID": "f57ee8c7-d759-446b-bf08-e8c68d854848",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d70c6197-576f-4afa-8e60-a848f470c587"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        },
                        {
                            "uuid": "ea43b8c7-eb49-4486-b795-1cebd6847a14",
                            "title": "GET /Utilities/timezone",
                            "fullFile": "/home/tim/src/integrify/core-service/test/utilities.test.js",
                            "file": "/test/utilities.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "core service",
                                    "fullTitle": "Core Service Utilities GET /Utilities/timezone core service",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let res = await chai.request(newUrlBase)\n    .get('/Utilities/timezone')\n    .set('Authorization', 'Bearer ' + token)\n//console.log(res.body);\ncoreResult = res.body;\nexpect(res.status).to.equal(200);\nexpect(res.body[0]).to.be.an('array').that.does.include('Etc/GMT+12');",
                                    "err": {},
                                    "uuid": "a350cbef-c952-4b15-b7a2-7de192ce06d1",
                                    "parentUUID": "ea43b8c7-eb49-4486-b795-1cebd6847a14",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a350cbef-c952-4b15-b7a2-7de192ce06d1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 100000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 100000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 100000
        },
        {
            "uuid": "999c76bb-3ff3-4673-b117-c380846ec90a",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "8bf08ad1-708b-4421-b838-d28edd1ba61a",
                    "title": "Integrify Libs JWT Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                    "file": "/test/integration/auth/jwt.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);",
                            "err": {},
                            "uuid": "89e33518-e1df-45d4-a9f4-ba2e1c9fdeba",
                            "parentUUID": "8bf08ad1-708b-4421-b838-d28edd1ba61a",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "23f1de56-c0bc-4ccf-941e-0ba9573f5b32",
                            "title": "getSystemToken",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a system token",
                                    "fullTitle": "Integrify Libs JWT Tests getSystemToken should return a system token",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet token = await jwt.getSystemToken(process.env.INTEGRIFY_ENV_TOKEN, tenant)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "1f692546-0b35-4a3e-a9dc-8be1df5ac8b6",
                                    "parentUUID": "23f1de56-c0bc-4ccf-941e-0ba9573f5b32",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1f692546-0b35-4a3e-a9dc-8be1df5ac8b6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "de5ca3f1-e4f9-4575-9475-e3ed76851dfd",
                            "title": "createRefreshToken",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests createRefreshToken should return a refresh token",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(refreshToken).to.exist;\nexpect(exists !== null).to.be.true",
                                    "err": {},
                                    "uuid": "5c9182c8-74ba-4d5a-a428-47d539493599",
                                    "parentUUID": "de5ca3f1-e4f9-4575-9475-e3ed76851dfd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c9182c8-74ba-4d5a-a428-47d539493599"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "89e824ee-0f74-425a-94de-09d3fbd2005c",
                            "title": "verifyRefreshToken",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for the non-expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return true for the non-expired token",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.exist",
                                    "err": {},
                                    "uuid": "65f13df4-8135-4ab9-8c3f-240ef0e8e9ec",
                                    "parentUUID": "89e824ee-0f74-425a-94de-09d3fbd2005c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for the expired token",
                                    "fullTitle": "Integrify Libs JWT Tests verifyRefreshToken should return false for the expired token",
                                    "timedOut": false,
                                    "duration": 5005,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, options)\nawait delay(5000);\nlet exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nexpect(exists).to.be.false\nexists = await redis.zrankAsync(tenant + \".refreshTokens\", refreshToken)\nexpect(exists === null).to.be.true",
                                    "err": {},
                                    "uuid": "d8fb4a6b-e713-4af2-bd58-ed32bb3b19ff",
                                    "parentUUID": "89e824ee-0f74-425a-94de-09d3fbd2005c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "65f13df4-8135-4ab9-8c3f-240ef0e8e9ec",
                                "d8fb4a6b-e713-4af2-bd58-ed32bb3b19ff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5006,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "baed2c61-9fa7-4f9a-b61a-d86cb98482f5",
                            "title": "issueJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests issueJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 15\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\n//let exists = await jwt.verifyRefreshToken(tenant, refreshToken, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\noptions.expiresInAmount = 5\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "d0156bef-c131-4f00-8cd2-72a5d9670236",
                                    "parentUUID": "baed2c61-9fa7-4f9a-b61a-d86cb98482f5",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d0156bef-c131-4f00-8cd2-72a5d9670236"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "4a57cead-2901-4525-8899-cef6a74e73a6",
                            "title": "verifyJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should return a JWT",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nlet verified = jwt.verifyJwt(token, options);\nexpect(verified).to.exist",
                                    "err": {},
                                    "uuid": "8c8d7f6b-edea-41b8-b0f0-d65475714143",
                                    "parentUUID": "4a57cead-2901-4525-8899-cef6a74e73a6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail for an expired JWT",
                                    "fullTitle": "Integrify Libs JWT Tests verifyJwt should fail for an expired JWT",
                                    "timedOut": false,
                                    "duration": 5007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000);\nlet verified, error;\ntry {\n   verified = await jwt.verifyJwt(token, options)\n} catch(e) {\n    error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\nexpect(verified).to.not.exist",
                                    "err": {},
                                    "uuid": "53c2bd61-d5a5-4176-acf0-c52a78d5503b",
                                    "parentUUID": "4a57cead-2901-4525-8899-cef6a74e73a6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8c8d7f6b-edea-41b8-b0f0-d65475714143",
                                "53c2bd61-d5a5-4176-acf0-c52a78d5503b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5010,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "bbce7ca2-6a58-4b2f-9432-7f16bcf399fd",
                            "title": "renewJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an expired token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should return a new JWT using a valid refresh token and an expired token",
                                    "timedOut": false,
                                    "duration": 3010,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(3000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntoken = await jwt.renewJwt(token,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "6eb81075-5b8d-434c-9c87-860dda32bddd",
                                    "parentUUID": "bbce7ca2-6a58-4b2f-9432-7f16bcf399fd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should fail to return a new JWT using a invalid refresh token",
                                    "fullTitle": "Integrify Libs JWT Tests renewJwt should fail to return a new JWT using a invalid refresh token",
                                    "timedOut": false,
                                    "duration": 5007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 2;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\nlet token = await jwt.issueJwt(Contact, refreshToken, options)\nawait delay(5000); //let the token JWT time out\nlet error;\ntry {\n    verified = await jwt.verifyJwt(token, options)\n } catch(e) {\n     error = e;\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")\ntry {\n    token = await jwt.renewJwt(token,refreshToken, options)\n} catch(e) {\n    error = e\n}\nexpect(error).to.exist\nexpect(error.name).to.equal(\"TokenExpiredError\")",
                                    "err": {},
                                    "uuid": "091b37aa-4f11-492e-a764-e61db155c297",
                                    "parentUUID": "bbce7ca2-6a58-4b2f-9432-7f16bcf399fd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "6eb81075-5b8d-434c-9c87-860dda32bddd",
                                "091b37aa-4f11-492e-a764-e61db155c297"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8017,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9008f4c3-ecdb-4657-ae24-32695e5350ce",
                            "title": "reIssueJwt",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/auth/jwt.test.js",
                            "file": "/test/integration/auth/jwt.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a new JWT using a valid refresh token and an Contact",
                                    "fullTitle": "Integrify Libs JWT Tests reIssueJwt should return a new JWT using a valid refresh token and an Contact",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(50000);\noptions.expiresInAmount = 5;\nlet refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload, options)\ntoken = await jwt.reIssueJwt(Contact,refreshToken, options)\nexpect(token).to.exist",
                                    "err": {},
                                    "uuid": "1f53930c-3ef1-4ed2-9daa-0b092a57604b",
                                    "parentUUID": "9008f4c3-ecdb-4657-ae24-32695e5350ce",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1f53930c-3ef1-4ed2-9daa-0b092a57604b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1435c31a-821d-4816-aeda-ad0d06ea3e6c",
                    "title": "Integrify Libs Config Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                    "file": "/test/integration/config/config.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f27254bb-a4a4-474b-823a-71a26d50e196",
                            "title": "Config",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                            "file": "/test/integration/config/config.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Config Tests Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "fec59034-5cc6-4436-825b-c9dc80fd21b0",
                                    "parentUUID": "f27254bb-a4a4-474b-823a-71a26d50e196",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "20192817-ae3b-443b-aea5-95815fdbdd5f",
                                    "title": "get a config from redis",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Config Tests Config get a config from redis should have config.mongo",
                                            "timedOut": false,
                                            "duration": 0,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "expect(config.mongo).to.exist;\n                //expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "7c9d72cb-9d99-45ed-8143-c101ad8497f7",
                                            "parentUUID": "20192817-ae3b-443b-aea5-95815fdbdd5f",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "7c9d72cb-9d99-45ed-8143-c101ad8497f7"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 0,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "24c978fe-828b-40bb-bf64-856497e0bf8e",
                                    "title": "log the latest git commit",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/config/config.test.js",
                                    "file": "/test/integration/config/config.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should return the lates git commit",
                                            "fullTitle": "Integrify Libs Config Tests Config log the latest git commit should return the lates git commit",
                                            "timedOut": false,
                                            "duration": 2,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let commit = Config.logRunningGitCommit('integrify-libs', true);\nexpect(commit).to.exist;\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "a193e268-1786-4b3e-8f80-db81c4144db5",
                                            "parentUUID": "24c978fe-828b-40bb-bf64-856497e0bf8e",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "a193e268-1786-4b3e-8f80-db81c4144db5"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 2,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "cd7eb8a7-9285-4e53-a829-6acc8e85b2a8",
                    "title": "Integrify Libs Logger Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/logger/logger.test.js",
                    "file": "/test/integration/logger/logger.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "9c6fd28e-8b39-464c-ae99-431b99ff121e",
                            "title": "Logger",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/logger/logger.test.js",
                            "file": "/test/integration/logger/logger.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Logger Tests Logger \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "ce2d97d3-48f6-4362-b1c0-8f0a191df8e0",
                                    "parentUUID": "9c6fd28e-8b39-464c-ae99-431b99ff121e",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "31e1dba8-2792-481c-bd46-b0e3856a0063",
                                    "title": "info",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/logger/logger.test.js",
                                    "file": "/test/integration/logger/logger.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect log a message",
                                            "fullTitle": "Integrify Libs Logger Tests Logger info should connect log a message",
                                            "timedOut": false,
                                            "duration": 6,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "logger.info(config.tenantOne.tenantId);\n  \nexpect(logger).to.exist;\n              \n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "de5efe5a-ff4b-4de9-a6d3-89bff0128750",
                                            "parentUUID": "31e1dba8-2792-481c-bd46-b0e3856a0063",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "de5efe5a-ff4b-4de9-a6d3-89bff0128750"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 6,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "bd8c1908-a40e-4fc0-9c74-73f5e115a5b7",
                    "title": "Integrify Libs Parse JWT Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                    "file": "/test/integration/middleware/parseJWT.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Parse JWT Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);        config = await Config.getConfig()\nContact = {\n    contactSid: \"1234\",\n    userName: \"testuser\",\n    tenant: config.test.tenantOne.tenantId,\n    email: \"test@test.com\",\n    name: \"Test User\"\n}\nrefreshTokenPayload = {userName: Contact.userName, contactSid: Contact.contactSid}",
                            "err": {},
                            "uuid": "9c5239cf-f224-4a26-b925-9f5520d52a76",
                            "parentUUID": "bd8c1908-a40e-4fc0-9c74-73f5e115a5b7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "e45b3801-f989-4cc0-ac0d-48f9a60cf0a9",
                            "title": "parse token",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": config.test.tenantOne.tenantId});\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "8c7417dc-1df7-46f5-9ae6-d5f5eca4cfb5",
                                    "parentUUID": "e45b3801-f989-4cc0-ac0d-48f9a60cf0a9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "8c7417dc-1df7-46f5-9ae6-d5f5eca4cfb5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "60454f52-226a-479b-9bc7-dcb97f67f912",
                            "title": "auto refresh and parse token",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests auto refresh and parse token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 20027,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let refreshToken = await jwt.createRefreshToken(Contact.tenant, refreshTokenPayload)\n\ntoken = jsonwebtoken.sign(Contact, config.jwtSecret, {\"audience\": Contact.tenant, expiresIn:1});\n           \nawait delay(20000)\nlet req = {headers: {authorization: \"Bearer \" + token}, cookies: {integrifyRefreshToken: refreshToken}}\n          \nlet mockRes = await mocks.mockResponse();\n\nawait parseJWT(req, mockRes, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"1234\");\nexpect(req.oauth.profile.user_name).to.equal(\"testuser\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "7203093f-78a3-4da7-8e5b-f5a2b998ccaf",
                                    "parentUUID": "60454f52-226a-479b-9bc7-dcb97f67f912",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7203093f-78a3-4da7-8e5b-f5a2b998ccaf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20027,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        },
                        {
                            "uuid": "e4f53547-5d06-4cdc-928d-2b2de5570cc7",
                            "title": "use system token",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/middleware/parseJWT.test.js",
                            "file": "/test/integration/middleware/parseJWT.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return extract data from a token",
                                    "fullTitle": "Integrify Libs Parse JWT Tests use system token should return extract data from a token",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let req = {headers: {\"integrify-system-token\": config.test.tenantOne.tenantId + \" \" +  process.env.INTEGRIFY_ENV_TOKEN}}\nawait parseJWT(req, {status:200}, function(){})\nexpect(req.oauth.profile).to.exist;\nexpect(req.oauth.profile.sid).to.equal(\"d8c469c3-f781-4179-a09c-6d148885fb30\");\nexpect(req.oauth.profile.user_name).to.equal(\"Integrify\");\nexpect(req.oauth.tenant).to.equal(config.test.tenantOne.tenantId)",
                                    "err": {},
                                    "uuid": "bd2f3c3e-43b4-41c8-a8f3-a3c6577e6474",
                                    "parentUUID": "e4f53547-5d06-4cdc-928d-2b2de5570cc7",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "bd2f3c3e-43b4-41c8-a8f3-a3c6577e6474"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "b5ed9423-c602-48a7-883d-0f4617817665",
                    "title": "Integrify Libs Mongeese Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                    "file": "/test/integration/mongeese/db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b8ad4921-b5dd-48dc-9c1c-18b6728201ab",
                            "title": "Mongeese",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                            "file": "/test/integration/mongeese/db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Mongeese Tests Mongeese \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nconsole.log(config)\nconfig = config.test;\nthis.timeout(105000);\n//let deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\n//cnsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                                    "err": {},
                                    "uuid": "486edc2f-0e53-4196-9287-222a346cbbfa",
                                    "parentUUID": "b8ad4921-b5dd-48dc-9c1c-18b6728201ab",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "d71ef9d8-4e4c-4ea5-8dd7-711baf013ee2",
                                    "title": "mongoConn",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/mongeese/db.test.js",
                                    "file": "/test/integration/mongeese/db.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should connect to mongo based on a tenant id",
                                            "fullTitle": "Integrify Libs Mongeese Tests Mongeese mongoConn should connect to mongo based on a tenant id",
                                            "timedOut": false,
                                            "duration": 20,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const tenantId = await config.tenantOne.tenantId;\nvar db = await mongeese.getConn(tenantId);\n    \nexpect(db).to.exist;\nexpect(db.name).to.equal(tenantId);\nexpect(db.readyState).to.equal(2);\n//expect(true).to.equal(true)",
                                            "err": {},
                                            "uuid": "7f7b13b0-d15b-4383-918c-2b4eccd81525",
                                            "parentUUID": "d71ef9d8-4e4c-4ea5-8dd7-711baf013ee2",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "7f7b13b0-d15b-4383-918c-2b4eccd81525"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 20,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "7ac11378-8b93-4a57-b653-0c4cc4a56415",
                    "title": "Integrify Libs Permissions Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                    "file": "/test/integration/permissions/permissions.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet config = await Config.getConfig();\nconfig = config.test;\nsession = {user_sid: config.tenantOne.adminUser.sid.toLowerCase(), user_name: config.tenantOne.adminUser.userName, tenant: config.tenantOne.tenantId }\nlet deletes = await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);\nconsole.log(deletes)\n//process.env.DEBUG=\"knex:query\"",
                            "err": {},
                            "uuid": "b36eeeb8-e5a2-4bae-8624-08f9d53346e5",
                            "parentUUID": "7ac11378-8b93-4a57-b653-0c4cc4a56415",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs Permissions Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await redis.delAsync([`${session.tenant}.permissions.${session.user_sid}`]);",
                            "err": {},
                            "uuid": "e7c93c25-bc5b-4b5d-bf43-0fe591b78260",
                            "parentUUID": "7ac11378-8b93-4a57-b653-0c4cc4a56415",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "cdab9a9c-0a70-48b7-b0fe-0e69e5a960fc",
                            "title": "currentUserPermssions",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests currentUserPermssions should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 186,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.currentUserPermissions(session);\nlet cached =  await redis.getAsync([`${session.tenant}.permissions.${session.user_sid}`]);\ncached = JSON.parse(cached)\nexpect(perms).length.to.be.gt(0);\nexpect(cached.length).to.equal(perms.length)",
                                    "err": {},
                                    "uuid": "dcb749fa-86f7-498b-9b02-8601e1ca25fd",
                                    "parentUUID": "cdab9a9c-0a70-48b7-b0fe-0e69e5a960fc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dcb749fa-86f7-498b-9b02-8601e1ca25fd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 186,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "31c845e8-a959-4945-9fb7-ddbf3c260982",
                            "title": "isSysAdmin",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cache and return the current users permssiosn based on a passed-in session",
                                    "fullTitle": "Integrify Libs Permissions Tests isSysAdmin should cache and return the current users permssiosn based on a passed-in session",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.exist",
                                    "err": {},
                                    "uuid": "12f05120-5709-4292-a377-1f80ae93cae0",
                                    "parentUUID": "31c845e8-a959-4945-9fb7-ddbf3c260982",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "12f05120-5709-4292-a377-1f80ae93cae0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b90054be-d093-4f06-b612-8a5efad8df91",
                            "title": "hasPermissions",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/permissions/permissions.test.js",
                            "file": "/test/integration/permissions/permissions.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return true for sysAdmin permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for sysAdmin permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.sysAdmin);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\", \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "150dbe89-2d06-480c-bd51-bf96d4161d6d",
                                    "parentUUID": "b90054be-d093-4f06-b612-8a5efad8df91",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for System scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for System scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.systemScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    \"irrelevantCategoryGuid\",\n    \"irrelevantPublishStatus\");\nexpect(hasPerms).to.be.true;\nlet perms = await permissions.isSysAdmin(session);\nexpect(perms).to.be.undefined",
                                    "err": {},
                                    "uuid": "dc1bb2c5-a878-43e5-a5e2-d6202f84d9ed",
                                    "parentUUID": "b90054be-d093-4f06-b612-8a5efad8df91",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for category scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for category scoped permissions",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.categoryScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    \"irrelevantObjectGuid\",\n    mocks.categoryScoped[0].ownerSid,\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "7414e860-afe7-4012-85bb-3991ac3bcb5f",
                                    "parentUUID": "b90054be-d093-4f06-b612-8a5efad8df91",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return true for Object scoped permissions",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return true for Object scoped permissions",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.true;",
                                    "err": {},
                                    "uuid": "519f941f-314f-4d56-83d8-3efdef3edba8",
                                    "parentUUID": "b90054be-d093-4f06-b612-8a5efad8df91",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for Object scoped permissions with wrong publish status",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for Object scoped permissions with wrong publish status",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edit',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    \"production\");\nexpect(hasPerms).to.be.false;",
                                    "err": {},
                                    "uuid": "1dded260-694c-4325-80ce-6405f5f7a6d8",
                                    "parentUUID": "b90054be-d093-4f06-b612-8a5efad8df91",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return false for bogus permission type",
                                    "fullTitle": "Integrify Libs Permissions Tests hasPermissions should return false for bogus permission type",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(5000);\nawait permissions.cachePerms(session, mocks.objectScoped);\nlet hasPerms = await permissions.hasPermissions(session,\n    'process',\n    'edizt',\n    mocks.objectScoped[0].ownerSid,\n    \"irrelevantCategoryGuid\",\n    mocks.categoryScoped[0].publishStatus);\nexpect(hasPerms).to.be.false;\nhasPerms = await permissions.hasPermissions(session,\n    'holiday',\n    'viewconfig');\nexpect(hasPerms).to.be.false",
                                    "err": {},
                                    "uuid": "209cdad0-612a-4354-9cbc-8c62a250d2c9",
                                    "parentUUID": "b90054be-d093-4f06-b612-8a5efad8df91",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "150dbe89-2d06-480c-bd51-bf96d4161d6d",
                                "dc1bb2c5-a878-43e5-a5e2-d6202f84d9ed",
                                "7414e860-afe7-4012-85bb-3991ac3bcb5f",
                                "519f941f-314f-4d56-83d8-3efdef3edba8",
                                "1dded260-694c-4325-80ce-6405f5f7a6d8",
                                "209cdad0-612a-4354-9cbc-8c62a250d2c9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b288671e-b389-45b2-b8db-8b62e2a7fb8a",
                    "title": "Integrify Libs SwaggerClient Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                    "file": "/test/integration/serviceClient/serviceClient.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a8ea0764-d696-4b9c-8750-e04d72b4fa4a",
                            "title": "Test portalUrl",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                            "file": "/test/integration/serviceClient/serviceClient.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs SwaggerClient Tests Test portalUrl \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "68bcbf85-4670-4f59-b694-6ac86ebfc979",
                                    "parentUUID": "a8ea0764-d696-4b9c-8750-e04d72b4fa4a",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "bdad1cd0-2d8f-4087-be19-f9602d466f78",
                                    "title": "first check PORTAL_URL env var, then check redis",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/serviceClient/serviceClient.test.js",
                                    "file": "/test/integration/serviceClient/serviceClient.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have gotten portalUrl from redis",
                                            "fullTitle": "Integrify Libs SwaggerClient Tests Test portalUrl first check PORTAL_URL env var, then check redis should have gotten portalUrl from redis",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "process.env.PORTAL_URL = ''\nconst serviceClient = new ServiceClient('constructor param no longer used')\nconst portalUrl = await serviceClient._getPortalUrl()\nexpect(portalUrl).to.exist\nexpect(portalUrl.startsWith('http')).to.be.true",
                                            "err": {},
                                            "uuid": "3176b1cd-df9b-412f-a201-2bdc7f9e7243",
                                            "parentUUID": "bdad1cd0-2d8f-4087-be19-f9602d466f78",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "3176b1cd-df9b-412f-a201-2bdc7f9e7243"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "fb355772-5e64-428d-a676-2432dd7f1ebb",
                    "title": "Integrify Libs Contact Model Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/contacts.test.js",
                    "file": "/test/integration/sqldb/contacts.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/contacts.test.js",
                            "file": "/test/integration/sqldb/contacts.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "08e37e1d-bb67-4975-8874-8538158e8fea",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContact",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ContactModel = await model.getModel(config.test.tenantOne.tenantId, 'Contact')\n//console.dir(ContactModel)\nlet results = await ContactModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleContactGuid = results[0].contactGuid\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContact(sampleContactGuid);\nexpect(Contact).to.exist;\nexpect(Contact.contactGuid).equal(sampleContactGuid)",
                                    "err": {},
                                    "uuid": "f363b696-0129-4473-b996-e85b94465b1f",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getContactByUserName",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getContactByUserName",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nlet sampleUserName = user.userName\nlet contactController = new ContactController(config.test.tenantOne)\nconst Contact = await contactController.getContactByUserName(sampleUserName);\nexpect(Contact).to.exist;\nexpect(Contact.userName).equal(sampleUserName)",
                                    "err": {},
                                    "uuid": "57379941-2641-4295-ae9c-97176f1a0c2a",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should searchContacts",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should searchContacts",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne)\n            let Contacts = await contactController.searchContacts({'auth.userName': 'iApprov', firstName: 'Sys', lastName: 'S'});\n            expect(Contacts[0]).to.exist;\n            expect(Contacts[0].userName).equal('iApprove')\n            Contacts = await contactController.searchContacts({'auth.userName': 'iApprove'});\n            let Contact = Contacts[0]\n            expect(Contact).to.exist;\n            expect(Contact.userName).equal('iApprove')",
                                    "err": {},
                                    "uuid": "5640303a-4670-4ca2-9e00-b6c3c28fe5fe",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should dbAuthContact",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should dbAuthContact",
                                    "timedOut": false,
                                    "duration": 111,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            expect(Contact.token).to.exist;\n            expect(Contact.refreshToken).to.exist;\n            expect(Contact).to.have.property('passwordResetDate');\n            expect(Contact.userName).equal(user.userName);",
                                    "err": {},
                                    "uuid": "2b16fd75-ee72-4389-8373-32703ef6730c",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should indicate that juser password is not expired (passwordResetDate 2121)",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should indicate that juser password is not expired (passwordResetDate 2121)",
                                    "timedOut": false,
                                    "duration": 32,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nconst isPasswordExpired = await contactController.isPasswordExpired('juser')\n\nexpect(isPasswordExpired).to.exist\nexpect(isPasswordExpired).to.be.false",
                                    "err": {},
                                    "uuid": "5ea213d4-b450-41a6-95d0-6319f39ac422",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should indicate that password is expired (passwordResetDate is NULL)",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should indicate that password is expired (passwordResetDate is NULL)",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nconst isPasswordExpired = await contactController.isPasswordExpired(user.userName)\n\nexpect(isPasswordExpired).to.exist\nexpect(isPasswordExpired).to.be.true",
                                    "err": {},
                                    "uuid": "d1c58fd8-13c1-4ac1-bba3-acf9a17cd439",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getGroupSids",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getGroupSids",
                                    "timedOut": false,
                                    "duration": 104,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\n            const Contact = await contactController.dbAuthContact(user.userName, user.password)\n            expect(Contact).to.exist;\n            let groupSids = await contactController.getGroupSids(Contact.contactSid)\n            expect(groupSids.length).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "f49b6c21-8030-4cf0-b1d1-5fb17ac496a7",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should getAccountsByEmail",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should getAccountsByEmail",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contacts = await contactController.getAccountsByEmail(config.test.tenantOne.adminUser.email);\nexpect(Contacts.length).to.be.gt(0);\nContacts.forEach(contact => {\n  expect(contact).to.have.all.keys('contactGuid', 'ntId', 'email');\n  expect(contact.email).to.equal(config.test.tenantOne.adminUser.email);\n});",
                                    "err": {},
                                    "uuid": "d176d355-9712-47fb-890e-5e077e7abbc8",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should updatePassword",
                                    "fullTitle": "Integrify Libs Contact Model Tests tests should updatePassword",
                                    "timedOut": false,
                                    "duration": 141,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let contactController = new ContactController(config.test.tenantOne);\nlet Contact = await contactController.updatePassword(\n  config.test.tenantOne.adminUser.sid,\n  bcrypt.hashSync(config.test.tenantOne.adminUser.password)\n);\nexpect(Contact).to.exist\n  .and.to.equal(1)",
                                    "err": {},
                                    "uuid": "c6d25e0b-7c13-4840-8f2a-4f59ea4e9574",
                                    "parentUUID": "b24cc0c8-295a-4bd8-8cad-d2ce4142698b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f363b696-0129-4473-b996-e85b94465b1f",
                                "57379941-2641-4295-ae9c-97176f1a0c2a",
                                "5640303a-4670-4ca2-9e00-b6c3c28fe5fe",
                                "2b16fd75-ee72-4389-8373-32703ef6730c",
                                "5ea213d4-b450-41a6-95d0-6319f39ac422",
                                "d1c58fd8-13c1-4ac1-bba3-acf9a17cd439",
                                "f49b6c21-8030-4cf0-b1d1-5fb17ac496a7",
                                "d176d355-9712-47fb-890e-5e077e7abbc8",
                                "c6d25e0b-7c13-4840-8f2a-4f59ea4e9574"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 448,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "267f8c3d-a284-4c35-97e7-e7804475c748",
                    "title": "Integrify Libs Controller Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/controller.test.js",
                    "file": "/test/integration/sqldb/controller.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "97900723-583e-4ea3-949e-49c0ba99a0ee",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/controller.test.js",
                            "file": "/test/integration/sqldb/controller.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "695c9ada-ae63-44c2-ad42-3e3d57e9b616",
                                    "parentUUID": "97900723-583e-4ea3-949e-49c0ba99a0ee",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Controller Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(controllers.BaseController).to.exist;\nclass TestController extends controllers.BaseController {}            \nconst testController = new TestController(config.test.tenantOne)\nlet tenantDb =  await testController.getTenantDb()\n\nexpect(tenantDb).to.exist",
                                    "err": {},
                                    "uuid": "baa0ba0b-e095-4816-a2c3-f7fb5ba16249",
                                    "parentUUID": "97900723-583e-4ea3-949e-49c0ba99a0ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "baa0ba0b-e095-4816-a2c3-f7fb5ba16249"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "35afdfa5-ac04-4d0a-9c58-12aad7c58dc0",
                    "title": "Integrify Libs Data Instance Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                    "file": "/test/integration/sqldb/data-instance.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs Data Instance Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "config = await Config.getConfig();\nthis.timeout(105000);",
                            "err": {},
                            "uuid": "3878fc4a-e569-4f19-beeb-ca037726ee13",
                            "parentUUID": "35afdfa5-ac04-4d0a-9c58-12aad7c58dc0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a8aa168d-0726-4be8-a7ca-5ced7298406f",
                            "title": "Model Tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a consumer model",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should get a consumer model",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;",
                                    "err": {},
                                    "uuid": "5c7929fe-67e1-4960-8d2d-a092618df7f1",
                                    "parentUUID": "a8aa168d-0726-4be8-a7ca-5ced7298406f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query()\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "1f5d6340-77fb-4164-9851-723367654665",
                                    "parentUUID": "a8aa168d-0726-4be8-a7ca-5ced7298406f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should return data instances with settings",
                                    "fullTitle": "Integrify Libs Data Instance Tests Model Tests should return data instances with settings",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const DataInstanceModel = await model.getConsumerModel(config.consumersConn, 'DataInstance')\nexpect(DataInstanceModel).to.exist;\nlet results = await DataInstanceModel.query().eager('[dataInstanceSettings]')\nconsole.dir(results)\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "1c51e72f-067a-4b9e-87b2-e5c0b4ce136c",
                                    "parentUUID": "a8aa168d-0726-4be8-a7ca-5ced7298406f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5c7929fe-67e1-4960-8d2d-a092618df7f1",
                                "1f5d6340-77fb-4164-9851-723367654665",
                                "1c51e72f-067a-4b9e-87b2-e5c0b4ce136c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "a4b0d54a-2f96-4c5e-abbf-062d03746ff0",
                            "title": "Controller Tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/data-instance.test.js",
                            "file": "/test/integration/sqldb/data-instance.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should list datainstances",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should list datainstances",
                                    "timedOut": false,
                                    "duration": 25,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstances = await dataInstanceController.listDataInstances()\nexpect(dataInstances).to.exist;\nexpect(dataInstances.length).to.be.gt(0)\nexpect(dataInstances[0].dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "d69417ac-1e59-4f9a-b94e-f94ac56f66ef",
                                    "parentUUID": "a4b0d54a-2f96-4c5e-abbf-062d03746ff0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstance",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nexpect(dataInstance).to.exist;\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "95a7595d-df94-4ebf-bbc2-834c1a55b9a4",
                                    "parentUUID": "a4b0d54a-2f96-4c5e-abbf-062d03746ff0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should get a datainstances hash",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should get a datainstances hash",
                                    "timedOut": false,
                                    "duration": 26,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let dataInstanceController = new DataInstanceController();\nlet dataInstanceHt = await dataInstanceController.GetDataInstancesHash()\nexpect(dataInstanceHt).to.exist;\nexpect(dataInstanceHt[config.test.tenantOne.tenantId]).to.exist;",
                                    "err": {},
                                    "uuid": "cfeda844-f50d-4a2d-8edb-1cbd43020146",
                                    "parentUUID": "a4b0d54a-2f96-4c5e-abbf-062d03746ff0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should update a datainstance",
                                    "fullTitle": "Integrify Libs Data Instance Tests Controller Tests should update a datainstance",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let settingVal = new Date().toISOString()\nlet dataInstanceController = new DataInstanceController();\nlet dataInstance = await dataInstanceController.getDataInstance(config.test.tenantOne.tenantId)\nlet settingIdx  = dataInstance.dataInstanceSettings.findIndex((s => s.settingsKey === 'HelpURL'));\ndataInstance.dataInstanceSettings[settingIdx].settingsValue = settingVal\ndataInstance  = await dataInstanceController.updateDataInstance(dataInstance)\nexpect(dataInstance.dataInstanceSettings.length).to.be.gt(0)\nlet setting  = dataInstance.dataInstanceSettings.find((s => s.settingsKey === 'HelpURL'));\nexpect(setting).to.exist\nexpect(setting.settingsValue).to.equal(settingVal)",
                                    "err": {},
                                    "uuid": "a32fa584-9c10-4013-84f8-8397549bd7fa",
                                    "parentUUID": "a4b0d54a-2f96-4c5e-abbf-062d03746ff0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "d69417ac-1e59-4f9a-b94e-f94ac56f66ef",
                                "95a7595d-df94-4ebf-bbc2-834c1a55b9a4",
                                "cfeda844-f50d-4a2d-8edb-1cbd43020146",
                                "a32fa584-9c10-4013-84f8-8397549bd7fa"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 129,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d975dff1-8576-40d0-8fa2-f42f5d4f40ba",
                    "title": "Integrify Libs Model Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/model.test.js",
                    "file": "/test/integration/sqldb/model.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7438c54a-bf51-4952-8d86-012388e707f3",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/model.test.js",
                            "file": "/test/integration/sqldb/model.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig();\nuser = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "590e7abd-3b5c-4c62-a355-08af66a19ef2",
                                    "parentUUID": "7438c54a-bf51-4952-8d86-012388e707f3",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should bind a model based on Tenant",
                                    "fullTitle": "Integrify Libs Model Tests tests should bind a model based on Tenant",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nthis.timeout(105000);\nconst ContactModel = await model.bindModel(config.test.tenantOne.tenantId, models.Contact)\n//console.dir(ContactModel)\n//ContactModel.setOptions({excludeDeleted:false})\n//let results = await ContactModel.query().where('contactId', '>', 0)\n//console.log(results)\nlet results;\nresults = await ContactModel.query().setOptions({excludeDeleted:false}).where('contactId', '>', 0)\nresults = await ContactModel.query().where('contactId', '>', 0)\nlet c = await ContactModel.query().findOne({userName: 'iApprove'}).joinRelated('auth').select('contact.*', 'contact.contactGuid as contactSid','auth.userName as userName')\nconsole.log(c)\nlet patched = await c.$query().patch({middleName: \"bob\"})\nconsole.log(patched)\n\n\nexpect(results.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "ff8d905e-72b2-42e6-bd0c-8fd4b35d0790",
                                    "parentUUID": "7438c54a-bf51-4952-8d86-012388e707f3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "ff8d905e-72b2-42e6-bd0c-8fd4b35d0790"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 24,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 105000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 105000
                },
                {
                    "uuid": "05bd68c9-1e28-40f8-b2dc-2ffaba39b2aa",
                    "title": "Integrify Libs Permissions Controller Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/permissions.test.js",
                    "file": "/test/integration/sqldb/permissions.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "77fb3f8b-aec7-4bb3-9ab0-df1a5206f9dd",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/permissions.test.js",
                            "file": "/test/integration/sqldb/permissions.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "c40834d9-9f42-4d6c-b02f-57ebcb29a9df",
                                    "parentUUID": "77fb3f8b-aec7-4bb3-9ab0-df1a5206f9dd",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should getUserPermissionsFromDb",
                                    "fullTitle": "Integrify Libs Permissions Controller Tests tests should getUserPermissionsFromDb",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst session = {tenantId: config.test.tenantOne.tenantId, user_sid: user.sid}\nlet permissionsController = new PermissionsController(session)\nlet permissions = await permissionsController.getWorkflowPermissionsFromDb(session);\nconsole.log(permissions)\nexpect(permissions[0]).to.exist;",
                                    "err": {},
                                    "uuid": "5bdf8c87-151a-420b-ac2c-b3360bfabc07",
                                    "parentUUID": "77fb3f8b-aec7-4bb3-9ab0-df1a5206f9dd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5bdf8c87-151a-420b-ac2c-b3360bfabc07"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b558d95f-3120-4e7b-9662-6f373a9468ad",
                    "title": "Integrify Libs Process Model Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/process.test.js",
                    "file": "/test/integration/sqldb/process.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7cc2014c-44ef-42e2-874b-e58b0932e293",
                            "title": "tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/process.test.js",
                            "file": "/test/integration/sqldb/process.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Process Model Tests tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "config = await Config.getConfig()\nuser  = config.test.tenantOne.adminUser;\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "f98de960-ff4c-48ca-aff8-843f2e4078c1",
                                    "parentUUID": "7cc2014c-44ef-42e2-874b-e58b0932e293",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a process from sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should get a process from sql",
                                    "timedOut": false,
                                    "duration": 136,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n\n\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nconst Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nconsole.log([Process])\nexpect(Process.processGuid).equal(sampleProcesstGuid)",
                                    "err": {},
                                    "uuid": "9e92c7a0-c4ec-4988-ae48-9f367295913d",
                                    "parentUUID": "7cc2014c-44ef-42e2-874b-e58b0932e293",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should upsert a process in sql",
                                    "fullTitle": "Integrify Libs Process Model Tests tests should upsert a process in sql",
                                    "timedOut": false,
                                    "duration": 347,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//console.log(model)\nconst ProcessModel = await model.getModel(config.test.tenantOne.tenantId, 'Process')\n//console.dir(ContactModel)\nlet results = await ProcessModel.query()\n//console.log(results)\nexpect(results.length).to.be.gt(0)\nlet sampleProcesstGuid = results[0].processGuid\nlet processController = new ProcessController(config.test.tenantOne)\nlet Process = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process).to.exist;\nexpect(Process.processGuid).equal(sampleProcesstGuid)\nlet newName = 'Updated ' + new Date().toISOString()\nclonedProcess = JSON.parse(JSON.stringify(Process));\n           \nProcess.objective = newName;\nProcess.tasks[0].internalNotes = newName;\nProcess.processCategory.ordinal = 1;\nawait processController.upsertFullProcess(Process);\nProcess = await processController.getFullProcessFromSql(sampleProcesstGuid);\nexpect(Process.objective).to.equal(newName);\nexpect(Process.tasks[0].internalNotes).to.equal(newName);\nexpect(Process.processCategory.ordinal).equal(1)",
                                    "err": {},
                                    "uuid": "bbed7f0d-ddf9-4726-9787-acd938272ea4",
                                    "parentUUID": "7cc2014c-44ef-42e2-874b-e58b0932e293",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9e92c7a0-c4ec-4988-ae48-9f367295913d",
                                "bbed7f0d-ddf9-4726-9787-acd938272ea4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 483,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "eca699d2-2314-4a34-a864-c08bc5247001",
                    "title": "Integrify Libs Tenant tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                    "file": "/test/integration/sqldb/sqldb-db.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "70c88f07-3b7d-4f99-9876-bd3beb81dfd6",
                            "title": "tentantSql tests",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/sqldb/sqldb-db.test.js",
                            "file": "/test/integration/sqldb/sqldb-db.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// let configClass = await require('../../../config')\n            // await configClass.setConfigs();\n            // config = await configClass.getConfig();\n            config = await Config.getConfig();\n            this.timeout(100000);",
                                    "err": {},
                                    "uuid": "51725181-2bdc-42a0-a7c7-12e1a2cdd342",
                                    "parentUUID": "70c88f07-3b7d-4f99-9876-bd3beb81dfd6",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get the consumer Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests should get the consumer Db",
                                    "timedOut": false,
                                    "duration": 94,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getConsumersDb(config.consumersConn)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`SELECT * FROM sys.tables WHERE name = 'data_instance'`)\nexpect(queyResults.length).equal(1)\n//console.log(queyResults)",
                                    "err": {},
                                    "uuid": "f730ab9f-cccf-4734-89a1-7478970110ef",
                                    "parentUUID": "70c88f07-3b7d-4f99-9876-bd3beb81dfd6",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "shoulld get the tenant Db",
                                    "fullTitle": "Integrify Libs Tenant tests tentantSql tests shoulld get the tenant Db",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let db = await sqlDb.getTenantDb(config.test.tenantOne.tenantId)\nexpect(db).to.exist;\nlet queyResults =  await db.raw(`select * from contact`)\nexpect(queyResults.length).to.be.gt(0)\nqueyResults = await db.raw(\"select * from contact_auth where user_name = :uname\", {uname: 'iApprove'})\nexpect(queyResults.length).to.be.gt(0)",
                                    "err": {},
                                    "uuid": "078aa2b0-a6e1-4b05-8e56-9fbc552b23e5",
                                    "parentUUID": "70c88f07-3b7d-4f99-9876-bd3beb81dfd6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f730ab9f-cccf-4734-89a1-7478970110ef",
                                "078aa2b0-a6e1-4b05-8e56-9fbc552b23e5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 101,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "07467251-3d0f-4f11-bf57-6f98cc2be87e",
                    "title": "Integrify Libs StreamConsumer Load Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 3318,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(1050000000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\n/*\nRedis stream stuff:\nYou can scale up by running additional processors in the group. This creates a new Node process and runs a new consumer\nin the existing stream group. The consumer name for each processor will have an incremental suffix so it will be unique\nensuring that each consumer processes a unique set of events.\nWith 3 processors, it handeld a loadSize of a million events as they came in with no backlog build up in the group.\n */\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nforkedProcessor2 = await streamConsumer.forkStreamProcessor()\nforkedProcessor3 = await streamConsumer.forkStreamProcessor()\nfor (let index = 0; index < loadSize; index++) {\n\n    await sp.sendEvent(\"extendSession\",{\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\", \n            user_name: \"iapprove\", \n            email: \"iapprove@integrify.com\", \n            name: \"System System\"\n        }\n    })\n\n}\n       \nawait delay(1000);",
                            "err": {},
                            "uuid": "61f2e522-ea8d-4f7c-bee5-1574fb332727",
                            "parentUUID": "07467251-3d0f-4f11-bf57-6f98cc2be87e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Load Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill()\nforkedProcessor2.kill()\nforkedProcessor3.kill()",
                            "err": {},
                            "uuid": "4f69afd4-73ad-4764-9769-fb99dc6b40fb",
                            "parentUUID": "07467251-3d0f-4f11-bf57-6f98cc2be87e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "17ce3b97-098c-4fa5-a433-3db528d246cf",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                            "file": "/test/integration/stream/streamConsumer.load.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "1f224b34-39f8-41dc-99a4-85ad89ed2337",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.load.test.js",
                                    "file": "/test/integration/stream/streamConsumer.load.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Load Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "1c5c286d-a071-45ec-9b62-06d010a4e370",
                                            "parentUUID": "1f224b34-39f8-41dc-99a4-85ad89ed2337",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "1c5c286d-a071-45ec-9b62-06d010a4e370"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b681fdba-0bc2-4b5e-b614-981f4553f5a3",
                    "title": "Integrify Libs StreamConsumer Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                    "file": "/test/integration/stream/streamConsumer.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5019,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {activityDate: new Date(),\n        token: \"abcd234\",\n        user: {\n            sid:\"11111\",\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\nforkedProcessor = await streamConsumer.forkStreamProcessor()\nawait delay(5000);",
                            "err": {},
                            "uuid": "a778d1c7-f868-4ec6-b93e-7de8148c9e7a",
                            "parentUUID": "b681fdba-0bc2-4b5e-b614-981f4553f5a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Integrify Libs StreamConsumer Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "7d49c003-7fc0-4401-9b3f-877089d091a2",
                            "parentUUID": "b681fdba-0bc2-4b5e-b614-981f4553f5a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "951fec56-87f2-4912-b351-03a354f964b4",
                            "title": "forkStreamProcessor",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                            "file": "/test/integration/stream/streamConsumer.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "f651da1c-3ec1-4b97-abe6-36156768a830",
                                    "title": "processed event count  = history count",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamConsumer.test.js",
                                    "file": "/test/integration/stream/streamConsumer.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Integrify Libs StreamConsumer Tests forkStreamProcessor processed event count  = history count should process events",
                                            "timedOut": false,
                                            "duration": 1,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n let historyCount = await redis.zcardAsync(eventHistoryName)\n expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "6b1722af-07ce-4426-9f2c-66ab371e249f",
                                            "parentUUID": "f651da1c-3ec1-4b97-abe6-36156768a830",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "6b1722af-07ce-4426-9f2c-66ab371e249f"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 1,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "01547c9d-cc20-4b18-b16b-93985cbbbfb4",
                    "title": "Integrify Libs Stream Publisher Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamPublisher.test.js",
                    "file": "/test/integration/stream/streamPublisher.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "44bda935-04d5-4f13-bee9-38d44d8e475b",
                            "title": "stream publisher",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/stream/streamPublisher.test.js",
                            "file": "/test/integration/stream/streamPublisher.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "this.timeout(100000)\nprocess.env.jest = \"true\";\nawait redis.delAsync([fullStreamName, eventHistoryName])",
                                    "err": {},
                                    "uuid": "c67cf486-c314-4ac4-9fb9-95f284d719d3",
                                    "parentUUID": "44bda935-04d5-4f13-bee9-38d44d8e475b",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should handle the constructor",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should handle the constructor",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant);\nexpect(sp.streamName).equal(fullStreamName)\nexpect(sp.baseStreamName).equal(testStreamName)",
                                    "err": {},
                                    "uuid": "81f1e7bf-cc1f-4768-b3c7-4bc2dcb22429",
                                    "parentUUID": "44bda935-04d5-4f13-bee9-38d44d8e475b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should an sendEvent",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should an sendEvent",
                                    "timedOut": false,
                                    "duration": 102,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant,1000);\nexpect(sp.streamName).equal(fullStreamName)\n//sendEvent(eventType, data) data will get stringified\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}})   \nexpect(id).to.exist;\nexpect (id.indexOf(\"-\")).to.be.gt(-1)  \nawait delay(100);\nlet id2 = await sp.sendEvent(testEventType, {foo:\"bar2\", biz:\"buzz2\", beep:{bop:\"bam2\"}})   \nexpect (Number(id2.split(\"-\")[0])).to.be.gt(Number(id.split(\"-\")[0]))",
                                    "err": {},
                                    "uuid": "11efefe4-199c-48c0-8bee-d49ba3cc3f47",
                                    "parentUUID": "44bda935-04d5-4f13-bee9-38d44d8e475b",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should append to eventhistory",
                                    "fullTitle": "Integrify Libs Stream Publisher Tests stream publisher should append to eventhistory",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const sp = new StreamPublisher(testStreamName, tenant, 1000); \n\nlet id = await sp.sendEvent(testEventType, {foo:\"bar\", biz:\"buzz\", beep:{bop:\"bam\"}}) \n           \n//console.log(historySet)\nlet historyCount = await redis.zcardAsync(eventHistoryName)\nexpect(historyCount).to.be.gt(0);",
                                    "err": {},
                                    "uuid": "4ae6fe6b-0733-4a4f-8fc8-3fd5d32e1836",
                                    "parentUUID": "44bda935-04d5-4f13-bee9-38d44d8e475b",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "81f1e7bf-cc1f-4768-b3c7-4bc2dcb22429",
                                "11efefe4-199c-48c0-8bee-d49ba3cc3f47",
                                "4ae6fe6b-0733-4a4f-8fc8-3fd5d32e1836"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 104,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "95e5ae61-3e1a-4df6-9b4e-e18db7c6cd61",
                    "title": "Integrify Libs Tes-lib Tests",
                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                    "file": "/test/integration/test-lib/test-lib.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "a689aa25-827d-4495-8c6e-74e34f3a38c2",
                            "title": "Test Config",
                            "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                            "file": "/test/integration/test-lib/test-lib.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook",
                                    "fullTitle": "Integrify Libs Tes-lib Tests Test Config \"before all\" hook",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//config = await Config.getConfig()\nthis.timeout(105000);",
                                    "err": {},
                                    "uuid": "a5cb5ebc-34f0-47ac-9313-2bd7da88a3e0",
                                    "parentUUID": "a689aa25-827d-4495-8c6e-74e34f3a38c2",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "0ff55aa9-c466-46ec-9a2b-4da1b429cec8",
                                    "title": "get a test config",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have config.mongo",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get a test config should have config.mongo",
                                            "timedOut": false,
                                            "duration": 10,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const testConfig = await testLib.getTestConfig();\nconsole.log(testConfig)\nexpect(testConfig).to.exist;",
                                            "err": {},
                                            "uuid": "58811601-646f-46d9-b65f-673b1269124a",
                                            "parentUUID": "0ff55aa9-c466-46ec-9a2b-4da1b429cec8",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "58811601-646f-46d9-b65f-673b1269124a"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 10,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "b69d0c0f-50c5-4aaf-888e-30110954d42b",
                                    "title": "get an auth Token ",
                                    "fullFile": "/home/tim/src/integrify/integrify-libs/test/integration/test-lib/test-lib.test.js",
                                    "file": "/test/integration/test-lib/test-lib.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should have a auth token",
                                            "fullTitle": "Integrify Libs Tes-lib Tests Test Config get an auth Token  should have a auth token",
                                            "timedOut": false,
                                            "duration": 6,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "const authToken = await testLib.getAuthToken();\nconsole.log(authToken)\nexpect(authToken).to.exist;",
                                            "err": {},
                                            "uuid": "3e9784f7-d5a7-4b15-8544-418f40ce7241",
                                            "parentUUID": "b69d0c0f-50c5-4aaf-888e-30110954d42b",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "3e9784f7-d5a7-4b15-8544-418f40ce7241"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 6,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "02580702-2596-4b14-b19b-84767fcef9c1",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "dfe2f542-59d3-49a5-aee2-594753255f7b",
                    "title": "Scheduler CRUD tests",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                    "file": "/test/crud.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler CRUD tests\"",
                            "fullTitle": "Scheduler CRUD tests \"before all\" hook in \"Scheduler CRUD tests\"",
                            "timedOut": false,
                            "duration": 21,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(105000);\ntry {\n    testConfig = await serverConfig.setProcessServerConfig()\n    jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl.js\");\n} catch(e){}",
                            "err": {},
                            "uuid": "63a26b40-cbab-49c7-967b-35b16a04d5d5",
                            "parentUUID": "dfe2f542-59d3-49a5-aee2-594753255f7b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c67d2656-75fc-46cb-b9fd-44344f9726fc",
                            "title": ".save",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "saves the job",
                                    "fullTitle": "Scheduler CRUD tests .save saves the job",
                                    "timedOut": false,
                                    "duration": 40,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let sDate = new Date();\nlet startThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() - 5)\n);\nlet endThis = new Date(\n    new Date().setMinutes(sDate.getMinutes() + 5)\n);\nlet job = {\n    dbName: config.dbName,\n    status: \"Scheduled\",\n    name: config.name,\n    initData: config.initData,\n    runAs: config.runAs,\n    frequency: \"Recurring\",\n    rminutes: 1,\n    state: \"ended\",\n    startDate: startThis,\n    startHour: startThis.getHours(),\n    startMinute: startThis.getMinutes(),\n    startAMPM: startThis.getHours() > 12 ? \"PM\" : \"AM\",\n    endDate: endThis,\n    endHour: endThis.getHours(),\n    endMinute: endThis.getMinutes(),\n    endAMPM: endThis.getHours() > 12 ? \"PM\" : \"AM\",\n    jobType: config.jobType\n};\nreturn jobCtrl.save(job).then(saved => {\n    expect(saved).to.exist;\n    dbJob = saved;\n});",
                                    "err": {},
                                    "uuid": "10a297e6-c952-41bc-8095-c546a3f96c09",
                                    "parentUUID": "c67d2656-75fc-46cb-b9fd-44344f9726fc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "10a297e6-c952-41bc-8095-c546a3f96c09"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 40,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "5c740975-4cbe-4e16-9e9a-6c758def1396",
                            "title": ".upate",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "updates the job",
                                    "fullTitle": "Scheduler CRUD tests .upate updates the job",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.update(dbJob).then(updated => {\n    expect(updated).to.exist;\n    expect(updated.modifiedDate.getTime()).to.be.greaterThan(\n        updated.createdDate.getTime()\n    );\n});",
                                    "err": {},
                                    "uuid": "0e5a8b27-dfd6-4048-9af3-7d792b2fe99e",
                                    "parentUUID": "5c740975-4cbe-4e16-9e9a-6c758def1396",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0e5a8b27-dfd6-4048-9af3-7d792b2fe99e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "8360c024-0ddb-4948-9f25-5efd2dd89cf4",
                            "title": ".getOne",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler CRUD tests .getOne should get a job by id",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "dbJob.name = \"pdq\";\nreturn jobCtrl.getOne(config.dbName, dbJob._id).then(job => {\n    expect(job).to.exist;\n    expect(job._id.toString()).to.equal(dbJob._id.toString());\n});",
                                    "err": {},
                                    "uuid": "c94c1396-5c89-4e68-8858-ba8323d77e14",
                                    "parentUUID": "8360c024-0ddb-4948-9f25-5efd2dd89cf4",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "c94c1396-5c89-4e68-8858-ba8323d77e14"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "f631950d-0f0b-4e2e-a62f-1f0bc1ae918a",
                            "title": ".getAll",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs",
                                    "fullTitle": "Scheduler CRUD tests .getAll should get all jobs",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName).then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "653bff43-e5b9-4540-8d2c-35b79ef766bb",
                                    "parentUUID": "f631950d-0f0b-4e2e-a62f-1f0bc1ae918a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "653bff43-e5b9-4540-8d2c-35b79ef766bb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c8fd8fab-3ca6-4935-b339-1a6c4a5258ed",
                            "title": ".getAll(filter)",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get all jobs of type testToConsole",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter) should get all jobs of type testToConsole",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"testToConsole\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.not.empty;\n});",
                                    "err": {},
                                    "uuid": "e82f2833-1efd-433d-b301-58e600e0d908",
                                    "parentUUID": "c8fd8fab-3ca6-4935-b339-1a6c4a5258ed",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e82f2833-1efd-433d-b301-58e600e0d908"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "b9e5b137-abf8-4267-aded-23229a19b13d",
                            "title": ".getAll(filter-bad)",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should not have any jobs of type fakeJob",
                                    "fullTitle": "Scheduler CRUD tests .getAll(filter-bad) should not have any jobs of type fakeJob",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.getAll(config.dbName, \"fakeJob\").then(jobs => {\n    expect(jobs).to.be.an(\"array\").that.is.empty;\n});",
                                    "err": {},
                                    "uuid": "2d5dc23f-ef3e-4dc8-8029-72855986ec4f",
                                    "parentUUID": "b9e5b137-abf8-4267-aded-23229a19b13d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "2d5dc23f-ef3e-4dc8-8029-72855986ec4f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "217e9a3b-a433-4c1d-a7b3-1f7747c50630",
                            "title": ".delete",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/crud.test.js",
                            "file": "/test/crud.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should delete a job",
                                    "fullTitle": "Scheduler CRUD tests .delete should delete a job",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return jobCtrl.delete(config.dbName, dbJob._id).then(deleted => {\n    expect(deleted).to.be.true;\n});",
                                    "err": {},
                                    "uuid": "cc457530-4331-4e19-a490-0ff41efb3932",
                                    "parentUUID": "217e9a3b-a433-4c1d-a7b3-1f7747c50630",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cc457530-4331-4e19-a490-0ff41efb3932"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "33a634c0-db2e-4e68-ab89-60e8e0f9f3f0",
                    "title": "Scheduler OneTimeJob",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                    "file": "/test/onetime.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler OneTimeJob\"",
                            "fullTitle": "Scheduler OneTimeJob \"before all\" hook in \"Scheduler OneTimeJob\"",
                            "timedOut": false,
                            "duration": 90,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "3e303eb3-d4e7-4dd2-94dc-ca6d1103da3e",
                            "parentUUID": "33a634c0-db2e-4e68-ab89-60e8e0f9f3f0",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "59d5dc98-39c8-48f4-a9bf-215bf9277698",
                            "title": "#addOneTimeJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler OneTimeJob #addOneTimeJob should add a job",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "fc61b527-3c26-451c-a55e-a7485b6b3106",
                                    "parentUUID": "59d5dc98-39c8-48f4-a9bf-215bf9277698",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "fc61b527-3c26-451c-a55e-a7485b6b3106"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "015a2431-d0d2-4f4a-adb7-100b4eee158d",
                            "title": "#listJobs",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "86f9ed63-5007-422f-91f9-ae6efd568c69",
                                    "parentUUID": "015a2431-d0d2-4f4a-adb7-100b4eee158d",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler OneTimeJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "7d3c7c2a-f218-4793-b672-d49b8e209767",
                                    "parentUUID": "015a2431-d0d2-4f4a-adb7-100b4eee158d",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "86f9ed63-5007-422f-91f9-ae6efd568c69",
                                "7d3c7c2a-f218-4793-b672-d49b8e209767"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "c9399828-6721-47d9-9474-eca3742089a9",
                            "title": "#getJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler OneTimeJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "145d8470-736c-4ce5-b207-b61d4575e5bb",
                                    "parentUUID": "c9399828-6721-47d9-9474-eca3742089a9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "145d8470-736c-4ce5-b207-b61d4575e5bb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "be20eb8d-4b15-44d4-8149-b07f45fe0eb9",
                            "title": "#runJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/onetime.test.js",
                            "file": "/test/onetime.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should run the job",
                                    "fullTitle": "Scheduler OneTimeJob #runJob should run the job",
                                    "timedOut": false,
                                    "duration": 15000,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\nlet c = await delay(15000);\nexpect(j.triggeredJobs()).to.equal(1);",
                                    "err": {},
                                    "uuid": "a923f86a-9b73-4ccb-af39-0ad58a444d5b",
                                    "parentUUID": "be20eb8d-4b15-44d4-8149-b07f45fe0eb9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a923f86a-9b73-4ccb-af39-0ad58a444d5b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15000,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 20000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "b2ec4f26-6ef2-4129-9d54-6b2418ca197e",
                    "title": "Scheduler PubSubHandler",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/pubsub.test.js",
                    "file": "/test/pubsub.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"before all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 28,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\njobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");\ndbJobWithId = await jobCtrl.save(dbJob);\nservice = require(\"../scheduler.js\");\nintegrify_redis = require(\"../lib/redis/integrify-redis.js\");\npubSubClient = integrify_redis.getRedisPubSubClient();",
                            "err": {},
                            "uuid": "92562ddb-8c8a-4606-981f-6018470f2b4e",
                            "parentUUID": "b2ec4f26-6ef2-4129-9d54-6b2418ca197e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook in \"Scheduler PubSubHandler\"",
                            "fullTitle": "Scheduler PubSubHandler \"after all\" hook in \"Scheduler PubSubHandler\"",
                            "timedOut": false,
                            "duration": 2,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "return await jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString());",
                            "err": {},
                            "uuid": "633ca6f3-6766-4d4c-ba1c-f7dfbadbf26c",
                            "parentUUID": "b2ec4f26-6ef2-4129-9d54-6b2418ca197e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "47bc768a-b2f5-4f52-82b5-52128d0fbfbe",
                            "title": "#addJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add a new job based on a message",
                                    "fullTitle": "Scheduler PubSubHandler #addJob add a new job based on a message",
                                    "timedOut": false,
                                    "duration": 3007,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:add`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    function(err, ok) {\n        setTimeout(\n            function() {\n                let j = scheduler.getJobById(dbJobWithId._id);\n                expect(j).to.exist;\n                done();\n            },\n            3000\n        );\n    }\n);",
                                    "err": {},
                                    "uuid": "5e7d04c4-ca4e-432d-8b8c-805cb14b64e3",
                                    "parentUUID": "47bc768a-b2f5-4f52-82b5-52128d0fbfbe",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "5e7d04c4-ca4e-432d-8b8c-805cb14b64e3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 3007,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "319a53c0-f9f8-4147-ae07-2260f2fd9c0c",
                            "title": "#cancel",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/pubsub.test.js",
                            "file": "/test/pubsub.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler PubSubHandler #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pubSubClient.publish(\n    `schedule:delete`,\n    JSON.stringify({\n        dbName: dbJobWithId.dbName,\n        jobId: dbJobWithId._id\n    }),\n    async function(err, ok) {\n        delay(500);\n        let jobs = scheduler.listJobs();\n        expect(jobs[dbJobWithId._id]).to.not.exist;\n                        }\n);",
                                    "err": {},
                                    "uuid": "cb9d325a-9e4f-4817-abb0-0523524a565a",
                                    "parentUUID": "319a53c0-f9f8-4147-ae07-2260f2fd9c0c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "cb9d325a-9e4f-4817-abb0-0523524a565a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                },
                {
                    "uuid": "bb8315cb-aa2c-40e7-90bd-e178acfb84ff",
                    "title": "Scheduler RecurringJob",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                    "file": "/test/recur.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler RecurringJob\"",
                            "fullTitle": "Scheduler RecurringJob \"before all\" hook in \"Scheduler RecurringJob\"",
                            "timedOut": false,
                            "duration": 14,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "this.timeout(20000);\ntestConfig = await serverConfig.setProcessServerConfig()\nscheduler = require(\"../lib/scheduler/index.js\");\n//jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "0317fa2c-1451-4af2-8352-c3ed85c7be8e",
                            "parentUUID": "bb8315cb-aa2c-40e7-90bd-e178acfb84ff",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "737cc26a-47cb-4934-9d2d-2b456a706706",
                            "title": "#addRecurringJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler RecurringJob #addRecurringJob should add a job",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);5\nexpect(job.recur).to.exist;",
                                    "err": {},
                                    "uuid": "1cd3039e-bfff-4bdb-8fa2-a98b96c88d27",
                                    "parentUUID": "737cc26a-47cb-4934-9d2d-2b456a706706",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1cd3039e-bfff-4bdb-8fa2-a98b96c88d27"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "09ed59bb-d441-490f-adef-f08a44474cbc",
                            "title": "#listJobs",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "b15228e5-4d71-419c-b270-f54905e5e19a",
                                    "parentUUID": "09ed59bb-d441-490f-adef-f08a44474cbc",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler RecurringJob #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "96643695-1715-4a1b-94cb-d4cda23f3362",
                                    "parentUUID": "09ed59bb-d441-490f-adef-f08a44474cbc",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "b15228e5-4d71-419c-b270-f54905e5e19a",
                                "96643695-1715-4a1b-94cb-d4cda23f3362"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "75df3475-1767-4f4f-a71f-df634276ff23",
                            "title": "#getJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/recur.test.js",
                            "file": "/test/recur.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler RecurringJob #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "14cf3b99-980d-470b-ba31-6bc6d2d764a8",
                                    "parentUUID": "75df3475-1767-4f4f-a71f-df634276ff23",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "14cf3b99-980d-470b-ba31-6bc6d2d764a8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "64368c0a-cd0d-4d23-8c06-f2c6909ba9c7",
                    "title": "Scheduler Scheduled Jobs",
                    "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                    "file": "/test/schedule.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "fullTitle": "Scheduler Scheduled Jobs \"before all\" hook in \"Scheduler Scheduled Jobs\"",
                            "timedOut": false,
                            "duration": 15,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": ";\n        testConfig = await serverConfig.setProcessServerConfig()\n        scheduler = require(\"../lib/scheduler/index.js\");\n        jobCtrl = require(\"../lib/scheduler/mongo/jobCtrl\");",
                            "err": {},
                            "uuid": "1cdf2b4a-a3c7-49c2-8b83-14aeaeeb35c1",
                            "parentUUID": "64368c0a-cd0d-4d23-8c06-f2c6909ba9c7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "28c0e1a1-69a5-418d-8edf-18a346b5878e",
                            "title": "#addJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should add a job",
                                    "fullTitle": "Scheduler Scheduled Jobs #addJob should add a job",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.addJob(job);\nexpect(job._id).to.equal(j.name);\n//setTimeout(done, 2500);\n// done()",
                                    "err": {},
                                    "uuid": "db021890-01ad-4530-bb7c-64398c0b5131",
                                    "parentUUID": "28c0e1a1-69a5-418d-8edf-18a346b5878e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "db021890-01ad-4530-bb7c-64398c0b5131"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "4025853d-d61e-4ca2-8303-ee4dac9f34ba",
                            "title": "#loadAllJobsFromMongo",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"before all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "// runs before all tests in this block\nreturn jobCtrl.save(dbJob).then(j => {\n    dbJobWithId = j;\n});",
                                    "err": {},
                                    "uuid": "d8457b41-4a20-43f5-9b65-5a98e9507d30",
                                    "parentUUID": "4025853d-d61e-4ca2-8303-ee4dac9f34ba",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [
                                {
                                    "title": "\"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo \"after all\" hook in \"#loadAllJobsFromMongo\"",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "//return jobCtrl.delete(dbJob.dbName, dbJobWithId._id.toString())",
                                    "err": {},
                                    "uuid": "64732c3a-1058-44dc-9462-bdb47e42e517",
                                    "parentUUID": "4025853d-d61e-4ca2-8303-ee4dac9f34ba",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "tests": [
                                {
                                    "title": "should load the jobs from mongo",
                                    "fullTitle": "Scheduler Scheduled Jobs #loadAllJobsFromMongo should load the jobs from mongo",
                                    "timedOut": false,
                                    "duration": 18,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "return scheduler.loadJobsFromMongo().then(loadedJobs => {\n    expect(loadedJobs.length).to.be.greaterThan(0);\n    expect(scheduler.listJobs()[dbJobWithId.id]).to.exist;\n});",
                                    "err": {},
                                    "uuid": "400ab7c6-6676-4df6-ad80-dd5ac4c9b55b",
                                    "parentUUID": "4025853d-d61e-4ca2-8303-ee4dac9f34ba",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "400ab7c6-6676-4df6-ad80-dd5ac4c9b55b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "05a11a27-60bf-4747-b7db-7a9b02789913",
                            "title": "#listJobs",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should return a hash with jobs",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should return a hash with jobs",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "jobs = scheduler.listJobs();\nexpect(Object.keys(jobs).length).to.be.greaterThan(0);",
                                    "err": {},
                                    "uuid": "866ae199-820a-4b25-b854-1fa4d718e650",
                                    "parentUUID": "05a11a27-60bf-4747-b7db-7a9b02789913",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "should contain job xyz",
                                    "fullTitle": "Scheduler Scheduled Jobs #listJobs should contain job xyz",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(jobs[job._id]).to.exist;",
                                    "err": {},
                                    "uuid": "58f7f3cb-e159-450b-9ca0-f384acdc06e6",
                                    "parentUUID": "05a11a27-60bf-4747-b7db-7a9b02789913",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "866ae199-820a-4b25-b854-1fa4d718e650",
                                "58f7f3cb-e159-450b-9ca0-f384acdc06e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "339d4c31-6c9e-4800-ac32-68c2bcb026ad",
                            "title": "#getJob",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should get a job by id",
                                    "fullTitle": "Scheduler Scheduled Jobs #getJob should get a job by id",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let j = scheduler.getJobById(job._id);\n//expect(j.nextInvocation()).to.equal(job.start);\nexpect(j.name).to.equal(job._id);",
                                    "err": {},
                                    "uuid": "4819dbb9-a9d5-49be-a360-1881c1e04e08",
                                    "parentUUID": "339d4c31-6c9e-4800-ac32-68c2bcb026ad",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "4819dbb9-a9d5-49be-a360-1881c1e04e08"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "47c04f4d-cae9-48fa-acd2-b4b1dbe690c9",
                            "title": "#reschedule",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should reschedule the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #reschedule should reschedule the job",
                                    "timedOut": false,
                                    "duration": 305,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let oldStart = job.start;\n            job.start =  new Date(job.start.getTime() + 100);\n            job.end =   new Date(job.end.getTime() + 10000);\n            let rj = scheduler.rescheduleJob(job);\n            await delay(300);\n            let j = scheduler.getJobById(job._id);\n            expect(new Date(j.nextInvocation()).getTime()).to.be.greaterThan(oldStart.getTime());",
                                    "err": {},
                                    "uuid": "84a44f59-0493-42e0-9984-9d96ac34f5a5",
                                    "parentUUID": "47c04f4d-cae9-48fa-acd2-b4b1dbe690c9",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "84a44f59-0493-42e0-9984-9d96ac34f5a5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 305,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        },
                        {
                            "uuid": "c972cfa0-638b-4a54-a5c7-5414259bea5a",
                            "title": "#cancel",
                            "fullFile": "/home/tim/src/integrify/scheduler/test/schedule.test.js",
                            "file": "/test/schedule.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "should cancel the job",
                                    "fullTitle": "Scheduler Scheduled Jobs #cancel should cancel the job",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "let cj = scheduler.cancelJob(job._id);\nlet jobs = scheduler.listJobs();\nexpect(jobs[job._id]).to.not.exist;",
                                    "err": {},
                                    "uuid": "dcb188be-0b68-44bb-b930-eba66879434a",
                                    "parentUUID": "c972cfa0-638b-4a54-a5c7-5414259bea5a",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dcb188be-0b68-44bb-b930-eba66879434a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 10000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 10000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "2f7d919f-b7cb-4cea-9e41-4bda960e14bf",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "e9341571-c97c-4754-bd1f-35d8f2f7cc95",
                    "title": "Session Processor Tests",
                    "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                    "file": "/test/integration/sessionEventHandler.test.js",
                    "beforeHooks": [
                        {
                            "title": "\"before all\" hook",
                            "fullTitle": "Session Processor Tests \"before all\" hook",
                            "timedOut": false,
                            "duration": 5037,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "let testConfig = await testLib.getTestConfig();\n       \nthis.timeout(105000);\nlet deletes = await redis.delAsync([fullStreamName, eventHistoryName, eventProcessedName, `${tenant}.activeSessions`]);\nconsole.log(deletes)\nlet sp = new StreamPublisher(testStreamName,tenant);\nawait sp.sendEvent(\"login\", {\n  token: \"abcd234\",\n  user:  {jwt_token: 'xxxxx', tenantId: testConfig.tenantOne.tenantId, sid: testConfig.tenantOne.adminUser.sid}\n})\nfor (let index = 0; index < 5; index++) {\n    await sp.sendEvent(\"extendSession\", {\n        token: \"abcd234\",\n        user: {\n            sid: testConfig.tenantOne.adminUser.sid,\n            user_name: \"iapprove\",\n            email: \"iapprove@integrify.com\",\n            name: \"System System\"\n        }\n    })\n}\n\nforkedProcessor = await sessionStreamConsumer.forkStreamProcessor(tenant)\nawait delay(5000);",
                            "err": {},
                            "uuid": "6b26a02f-d60f-4d27-b5ce-655fdf16952a",
                            "parentUUID": "e9341571-c97c-4754-bd1f-35d8f2f7cc95",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after all\" hook",
                            "fullTitle": "Session Processor Tests \"after all\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "forkedProcessor.kill('SIGTERM')",
                            "err": {},
                            "uuid": "e1cd8e70-6f60-476e-bab1-a1a7cee81cef",
                            "parentUUID": "e9341571-c97c-4754-bd1f-35d8f2f7cc95",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "c1aee73d-542f-411e-85e2-8f9aff8c45c3",
                            "title": "stream processor",
                            "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                            "file": "/test/integration/sessionEventHandler.test.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                                {
                                    "uuid": "26fd0a20-ee2b-4f8a-9179-78b4baea21ec",
                                    "title": "reads from session stream",
                                    "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should process events",
                                            "fullTitle": "Session Processor Tests stream processor reads from session stream should process events",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let processedCount = await redis.zcardAsync(eventProcessedName)\n              let historyCount = await redis.zcardAsync(eventHistoryName)\n              expect(historyCount).to.equal(processedCount)",
                                            "err": {},
                                            "uuid": "5ce58aa9-a207-4efb-bb77-59111e2a45a2",
                                            "parentUUID": "26fd0a20-ee2b-4f8a-9179-78b4baea21ec",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "5ce58aa9-a207-4efb-bb77-59111e2a45a2"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                },
                                {
                                    "uuid": "b419f5d8-c4a5-4d58-bf2f-d22629effcef",
                                    "title": "handles events",
                                    "fullFile": "/home/tim/src/integrify/session-processor/test/integration/sessionEventHandler.test.js",
                                    "file": "/test/integration/sessionEventHandler.test.js",
                                    "beforeHooks": [],
                                    "afterHooks": [],
                                    "tests": [
                                        {
                                            "title": "should push events into REDIS activeSession set",
                                            "fullTitle": "Session Processor Tests stream processor handles events should push events into REDIS activeSession set",
                                            "timedOut": false,
                                            "duration": 3,
                                            "state": "passed",
                                            "speed": "fast",
                                            "pass": true,
                                            "fail": false,
                                            "pending": false,
                                            "context": null,
                                            "code": "let sessions = await redis.zrangebyscoreAsync(`${tenant}.activeSessions`, \"-inf\", \"+inf\");\nconsole.log(sessions)\nexpect(sessions).to.exist;",
                                            "err": {},
                                            "uuid": "d01e2631-1e2e-42e6-8f61-0fcca691a4db",
                                            "parentUUID": "b419f5d8-c4a5-4d58-bf2f-d22629effcef",
                                            "isHook": false,
                                            "skipped": false
                                        }
                                    ],
                                    "suites": [],
                                    "passes": [
                                        "d01e2631-1e2e-42e6-8f61-0fcca691a4db"
                                    ],
                                    "failures": [],
                                    "pending": [],
                                    "skipped": [],
                                    "duration": 3,
                                    "root": false,
                                    "rootEmpty": false,
                                    "_timeout": 2000
                                }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "4c9484ae-1795-49ac-b40f-6173fdba6d83",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "18d2030f-1e4c-4391-9dd8-71fb55e956d2",
                    "title": "adminCategoryConfig.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminCategoryConfig.vue should render correctly",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=btn_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_addCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_editCategory]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_deleteCategory]').exists()).to.equal(true);",
                            "err": {},
                            "uuid": "9be464f0-c3fa-4880-84dd-0d21a8d15e93",
                            "parentUUID": "18d2030f-1e4c-4391-9dd8-71fb55e956d2",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "9be464f0-c3fa-4880-84dd-0d21a8d15e93"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d08dafdb-42f2-4e04-87cf-96633b8fd0c1",
                    "title": "adminTreeAddObjectButton.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeAddObjectButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_addObject.exists()).to.be.true;",
                            "err": {},
                            "uuid": "0cb23e12-da18-4b43-9e3a-6a88c538666f",
                            "parentUUID": "d08dafdb-42f2-4e04-87cf-96633b8fd0c1",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "0cb23e12-da18-4b43-9e3a-6a88c538666f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "064195e8-5780-4161-96a5-699cd75625b2",
                    "title": "adminTreePermsButton.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreePermsButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_permsButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "2bb224b4-ef48-431e-844c-bc7d031f8a2c",
                            "parentUUID": "064195e8-5780-4161-96a5-699cd75625b2",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "2bb224b4-ef48-431e-844c-bc7d031f8a2c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "20370f19-27ae-4fad-8ef4-0d049a7b5c1a",
                    "title": "adminTreeViewButton.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "adminTreeViewButton.vue should render correctly",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(btn_viewButton.exists()).to.be.true;",
                            "err": {},
                            "uuid": "7baa1776-9886-45fe-8f65-bff0c470c8ae",
                            "parentUUID": "20370f19-27ae-4fad-8ef4-0d049a7b5c1a",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "7baa1776-9886-45fe-8f65-bff0c470c8ae"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "f3f080d9-89df-4c1b-b37d-4d3a644ac673",
                    "title": "AddGroupDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "AddGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 60,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_AddGroupDialog.default);",
                            "err": {},
                            "uuid": "8282740a-072b-41aa-9270-c5997cc2006d",
                            "parentUUID": "f3f080d9-89df-4c1b-b37d-4d3a644ac673",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7bbc47cf-0da8-4f50-98cf-c77a6fdd8887",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "AddGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]')).to.exist;\nexpect(wrapper.find('[data-test=descField]')).to.exist;\nexpect(wrapper.find('[data-test=dynamicField]')).to.exist;\nexpect(wrapper.find('[data-test=sqlField]')).to.exist;",
                                    "err": {},
                                    "uuid": "a2bd7b46-002c-41e9-b5f6-441e0a15284f",
                                    "parentUUID": "7bbc47cf-0da8-4f50-98cf-c77a6fdd8887",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "save button disabled",
                                    "fullTitle": "AddGroupDialog.vue inital state save button disabled",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=saveButton]').element.disabled).to.equal(true);",
                                    "err": {},
                                    "uuid": "18cb3150-711a-4e56-a2f9-c8c94bbe1129",
                                    "parentUUID": "7bbc47cf-0da8-4f50-98cf-c77a6fdd8887",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a2bd7b46-002c-41e9-b5f6-441e0a15284f",
                                "18cb3150-711a-4e56-a2f9-c8c94bbe1129"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "bdf3d691-c05d-42b3-b834-b52b94d558a3",
                    "title": "EditGroupDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "EditGroupDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 42,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\"\n};\nwrapper = (0, _mocks.initWrapper)(_EditGroupDialog.default, {\n  propsData: {\n    group\n  },\n  data() {\n    return {\n      activeTab: 0\n    };\n  },\n  store\n});",
                            "err": {},
                            "uuid": "9f903f36-6af5-4abe-8010-475a2693302e",
                            "parentUUID": "bdf3d691-c05d-42b3-b834-b52b94d558a3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "43684bdb-24bf-4a94-813e-74a3ea9c5180",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state displays group fields",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=descField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dynamicField]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=sqlField]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "00fc095d-2d3f-4fff-b766-cb79c1fdfe56",
                                    "parentUUID": "43684bdb-24bf-4a94-813e-74a3ea9c5180",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "populates group fields",
                                    "fullTitle": "EditGroupDialog.vue inital state populates group fields",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=nameField]').element.value).to.equal(group.groupName);\nexpect(wrapper.find('[data-test=descField]').element.value).to.equal(group.groupDesc);\nexpect(wrapper.find('[data-test=sqlField]').element.value).to.equal(group.groupSql);",
                                    "err": {},
                                    "uuid": "6c793212-abeb-4471-94f5-7c8598c38a70",
                                    "parentUUID": "43684bdb-24bf-4a94-813e-74a3ea9c5180",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "00fc095d-2d3f-4fff-b766-cb79c1fdfe56",
                                "6c793212-abeb-4471-94f5-7c8598c38a70"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8258b00d-0a03-4f54-b51c-d00fd38fd898",
                    "title": "GroupList.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 47,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_GroupList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "27ebd3cd-9f32-44e3-b5db-984f01ff80ef",
                            "parentUUID": "8258b00d-0a03-4f54-b51c-d00fd38fd898",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "79793615-926e-4fdb-ba6a-63d8a4be233c",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "GroupList.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const toolbar = wrapper.find('[data-test=buttonBar]');\nexpect(toolbar.exists()).to.equal(true);\nconst buttons = toolbar.findAll('button');\nexpect(buttons.at(0).text()).to.equal('Add Group');\nexpect(buttons.at(1).text()).to.equal('Delete Group');\nexpect(buttons.at(1).props().disabled).to.equal(true);\nexpect(buttons.at(2).text()).to.equal('Set Roles & Permissions');",
                                    "err": {},
                                    "uuid": "3583d3d7-9014-44eb-b29a-004fd08f0dd4",
                                    "parentUUID": "79793615-926e-4fdb-ba6a-63d8a4be233c",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays list of groups",
                                    "fullTitle": "GroupList.vue inital state displays list of groups",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const table = wrapper.find('div.v-data-table');\nexpect(table.exists()).to.equal(true);\nconst rows = table.findAll('table > tbody > tr');\nconst adminRow = rows.at(0).findAll('td');\nconst userRow = rows.at(1).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(adminRow.at(3).text()).to.equal('Administrators'); // group name column\nexpect(userRow.at(3).text()).to.equal('Users');\nexpect(adminRow.at(5).text()).to.equal('No'); // dynamic column\nexpect(userRow.at(5).text()).to.equal('Yes');",
                                    "err": {},
                                    "uuid": "691598ec-1fc3-4cb0-ae48-60dfb2558f83",
                                    "parentUUID": "79793615-926e-4fdb-ba6a-63d8a4be233c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "3583d3d7-9014-44eb-b29a-004fd08f0dd4",
                                "691598ec-1fc3-4cb0-ae48-60dfb2558f83"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d74b45be-7644-40a0-99b4-84faa5f95ff5",
                    "title": "GroupMembershipDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "GroupMembershipDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 91,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\ngroup = {\n  groupName: \"test group\",\n  groupDesc: \"test group description\",\n  dynamic: false,\n  groupSql: \"first_name like '%foo%'\",\n  canManage: true,\n  canEdit: true\n};\nwrapper = (0, _mocks.initWrapper)(_GroupMembershipDialog.default, {\n  propsData: {\n    group\n  },\n  store\n});",
                            "err": {},
                            "uuid": "9463f04c-9ef2-4eb0-bda3-1f0d5669606b",
                            "parentUUID": "d74b45be-7644-40a0-99b4-84faa5f95ff5",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7b6ef3ee-f551-42ec-9f4d-0eed2962cea6",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                            "file": "/build/admin/admin.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "membership tables",
                                    "fullTitle": "GroupMembershipDialog.vue inital state membership tables",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const nonMembersTable = wrapper.find('[data-test=nonMembersTable]');\nconst membersTable = wrapper.find('[data-test=membersTable]');\nexpect(nonMembersTable.exists()).to.equal(true);\nexpect(membersTable.exists()).to.equal(true); // Non members table\nlet rows = nonMembersTable.findAll('table > tbody > tr');\nlet firstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(3);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-plus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('97'); // member id\nexpect(firstRow.at(4).text()).to.equal('Joe User'); // member name\nexpect(rows.at(2).find('i.mdi-account-multiple').exists()).to.equal(true); // check a group member row renders with the group icon\n// Members table\nrows = membersTable.findAll('table > tbody > tr');\nexpect(rows.length).to.equal(2);\nfirstRow = rows.at(0).findAll('td');\nexpect(rows.length).to.equal(2);\nexpect(firstRow.length).to.equal(5);\nexpect(firstRow.at(0).find('div.v-simple-checkbox').exists()).to.equal(true); //  selectable column\nexpect(firstRow.at(1).find('button.mdi-minus-circle-outline').exists()).to.equal(true); // button to add members\nexpect(firstRow.at(2).find('i.mdi-account').exists()).to.equal(true); // icon for user accoutn\nexpect(firstRow.at(3).text()).to.equal('98'); // member id\nexpect(firstRow.at(4).text()).to.equal('Integrify Services'); // member name",
                                    "err": {},
                                    "uuid": "f6f88222-31fa-4e7f-ad6b-6d830ec96d40",
                                    "parentUUID": "7b6ef3ee-f551-42ec-9f4d-0eed2962cea6",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f6f88222-31fa-4e7f-ad6b-6d830ec96d40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "78ae84a5-e62d-4ebf-9c66-366edeeb5393",
                    "title": "UserCreate.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserCreate.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 65,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserCreate.default, {\n  store\n});",
                            "err": {},
                            "uuid": "396212cf-c013-4a6b-8a69-a687cd0eee44",
                            "parentUUID": "78ae84a5-e62d-4ebf-9c66-366edeeb5393",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all necessary fields",
                            "fullTitle": "UserCreate.vue should display all necessary fields",
                            "timedOut": false,
                            "duration": 11,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['firstName', 'middleName', 'lastName', 'username', 'email', 'locale', 'timezone', 'language', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.text()).to.be.empty;\n});",
                            "err": {},
                            "uuid": "15194d9b-7972-45e8-bd54-8b65a42900f1",
                            "parentUUID": "78ae84a5-e62d-4ebf-9c66-366edeeb5393",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display cancel and save btns",
                            "fullTitle": "UserCreate.vue should display cancel and save btns",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "2cff756b-5528-4eb8-b348-e9cc513ca58c",
                            "parentUUID": "78ae84a5-e62d-4ebf-9c66-366edeeb5393",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "15194d9b-7972-45e8-bd54-8b65a42900f1",
                        "2cff756b-5528-4eb8-b348-e9cc513ca58c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 13,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "37988a35-058c-42a1-9021-6947314a78ec",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 16,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// store = new Vuex.Store({modules: mockStore().modules})\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    },\n    actions: {\n      getUser: function () {\n        console.log('--- getUser()');\n        return { ..._mockedData.mockedUser\n        };\n      }\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEdit.default, {\n  store,\n  propsData: {\n    id: _mockedData.mockedUser.contactGuid\n  }\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "ec9fdd5a-84f1-4f59-aa99-10ff953ba600",
                            "parentUUID": "37988a35-058c-42a1-9021-6947314a78ec",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should always display page title",
                            "fullTitle": "UserEdit.vue should always display page title",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.text()).to.eq('Edit User');",
                            "err": {},
                            "uuid": "ac00d592-d226-4983-9c7f-53020130e8bc",
                            "parentUUID": "37988a35-058c-42a1-9021-6947314a78ec",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should not display form if loading",
                            "fullTitle": "UserEdit.vue should not display form if loading",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.false;",
                            "err": {},
                            "uuid": "f7336b3a-9b13-498e-b501-52122bed9eb9",
                            "parentUUID": "37988a35-058c-42a1-9021-6947314a78ec",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display form and btns if user information present",
                            "fullTitle": "UserEdit.vue should display form and btns if user information present",
                            "timedOut": false,
                            "duration": 214,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.userLoading = false;\nawait wrapper.vm.$nextTick();\nconst form = wrapper.find('form[data-test=userForm]');\nexpect(form.exists()).to.be.true;\n[{\n  key: 'cancelBtn',\n  value: 'Cancel'\n}, {\n  key: 'saveBtn',\n  value: 'Save'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "a4e2e850-afdb-4b43-982e-088d30a5fb0b",
                            "parentUUID": "37988a35-058c-42a1-9021-6947314a78ec",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "ac00d592-d226-4983-9c7f-53020130e8bc",
                        "f7336b3a-9b13-498e-b501-52122bed9eb9",
                        "a4e2e850-afdb-4b43-982e-088d30a5fb0b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 216,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "3538b494-9021-4c3f-bfd3-a2eb0ef70cb9",
                    "title": "UserEdit.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEdit.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 31,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state: {\n      selectedUser: _mockedData.mockedUser\n    }\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditDelegation.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "6b0a4161-f925-4010-a89e-c62942d0b2a6",
                            "parentUUID": "3538b494-9021-4c3f-bfd3-a2eb0ef70cb9",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEdit.vue should display all fields",
                            "timedOut": false,
                            "duration": 15,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "['delegate', 'processes'] // 'startDate', 'startTime', 'endDate', 'endTime'\n.forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n});",
                            "err": {},
                            "uuid": "c780c6a0-c5f6-4839-b387-5d4b0b5ba605",
                            "parentUUID": "3538b494-9021-4c3f-bfd3-a2eb0ef70cb9",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "c780c6a0-c5f6-4839-b387-5d4b0b5ba605"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 15,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e7570c22-ba75-4569-9c5f-bf01eeb6f09d",
                    "title": "UserEditOrganizationalDetails.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditOrganizationalDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 36,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditOrganizationalDetails.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "394f495b-35b0-4e73-8122-e7001f2b5f92",
                            "parentUUID": "e7570c22-ba75-4569-9c5f-bf01eeb6f09d",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditOrganizationalDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 24,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['title', 'division', 'department', 'costCenter', 'location', 'phone', 'manager'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value || !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value).to.eq(_mockedData.mockedUser[fieldName]);\n  }\n});",
                            "err": {},
                            "uuid": "fdd18c39-793c-4993-b52d-2ecaef521e65",
                            "parentUUID": "e7570c22-ba75-4569-9c5f-bf01eeb6f09d",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "fdd18c39-793c-4993-b52d-2ecaef521e65"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 24,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "0f6cdf4b-f6a9-4ef1-84a3-e7baa7c6718b",
                    "title": "UserEditUserDetails.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserEditUserDetails.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 77,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserEditUserDetails.default, {\n  store\n});",
                            "err": {},
                            "uuid": "52538449-a31b-4dcd-a008-2fe1bf87c8e5",
                            "parentUUID": "0f6cdf4b-f6a9-4ef1-84a3-e7baa7c6718b",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should display card title",
                            "fullTitle": "UserEditUserDetails.vue should display card title",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title');\nexpect(title.exists()).to.be.true;\nexpect(title.text()).contains('User Details');",
                            "err": {},
                            "uuid": "afe31ed8-f3f5-47ec-9756-213ebdb373f3",
                            "parentUUID": "0f6cdf4b-f6a9-4ef1-84a3-e7baa7c6718b",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display all fields",
                            "fullTitle": "UserEditUserDetails.vue should display all fields",
                            "timedOut": false,
                            "duration": 64,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper.vm.$store.state.users.selectedUser = _mockedData.mockedUser;\nawait wrapper.vm.$nextTick();\n['firstName', 'middleName', 'lastName', 'contactId', 'userName', 'email', 'address1', 'address2', 'city', 'state', 'zip', 'country', 'language', 'timezone', 'locale', 'cField1', 'cField2', 'password', 'confirmPassword'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  if (!!field.element.value && !!_mockedData.mockedUser[fieldName]) {\n    expect(field.element.value.toString()).to.eq(_mockedData.mockedUser[fieldName].toString());\n  }\n});",
                            "err": {},
                            "uuid": "2add34c0-80e3-449c-87a4-93ee20bf3f2e",
                            "parentUUID": "0f6cdf4b-f6a9-4ef1-84a3-e7baa7c6718b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "afe31ed8-f3f5-47ec-9756-213ebdb373f3",
                        "2add34c0-80e3-449c-87a4-93ee20bf3f2e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 66,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4d9ac16a-47b6-4acb-bd14-76c894c688f7",
                    "title": "UserFilterDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserFilterDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 49,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserFilterDialog.default, {\n  store\n});\nmockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "76a1b038-fac3-41e3-b291-5ba60dedb155",
                            "parentUUID": "4d9ac16a-47b6-4acb-bd14-76c894c688f7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "UserFilterDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 40,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const title = wrapper.find('.v-card__title .headline');\nexpect(title.text()).to.eq('User Filters');\n['lastName', 'firstName', 'username', 'email', 'title', 'managerName', 'costCenter', 'country', 'department'].forEach(fieldName => {\n  const field = wrapper.find(`[data-test=${fieldName}Input]`);\n  expect(field.exists()).to.be.true;\n  expect(field.element.value).to.be.empty;\n});",
                            "err": {},
                            "uuid": "cc11668c-0377-4b64-91a7-b2764f5e7ac7",
                            "parentUUID": "4d9ac16a-47b6-4acb-bd14-76c894c688f7",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog on clicking Close btn",
                            "fullTitle": "UserFilterDialog.vue should close dialog on clicking Close btn",
                            "timedOut": false,
                            "duration": 27,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(wrapper.vm.showDialog).to.be.false;\nwrapper.vm.$store.state.users.showDialog = true;\nawait wrapper.vm.$nextTick();\nexpect(wrapper.vm.showDialog).to.be.true;\nconst closeBtn = wrapper.find('[data-test=closeBtn]');\nexpect(closeBtn.exists()).to.be.true;\nawait closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.actions.getUsers).to.have.been.called;",
                            "err": {},
                            "uuid": "a7560f7e-6101-42ee-b13a-706172611bd2",
                            "parentUUID": "4d9ac16a-47b6-4acb-bd14-76c894c688f7",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "cc11668c-0377-4b64-91a7-b2764f5e7ac7",
                        "a7560f7e-6101-42ee-b13a-706172611bd2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 67,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "4c4dcd95-64f0-4624-af47-0700078dc60e",
                    "title": "UserList.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "UserList.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 41,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_UserList.default, {\n  store\n});",
                            "err": {},
                            "uuid": "e209b6f8-4859-4f8d-b799-bce71b7335d5",
                            "parentUUID": "4c4dcd95-64f0-4624-af47-0700078dc60e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should contain pageTitle and search input",
                            "fullTitle": "UserList.vue should contain pageTitle and search input",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nconst pageTitle = wrapper.find('#pageTitle');\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Users'); // searchInput\nconst searchInput = wrapper.get('input#searchText');\nexpect(searchInput.exists()).to.be.true;\nexpect(searchInput.text()).to.be.empty;",
                            "err": {},
                            "uuid": "bd247dc1-509b-481e-a249-33029ff0b5ac",
                            "parentUUID": "4c4dcd95-64f0-4624-af47-0700078dc60e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display toolbar buttons",
                            "fullTitle": "UserList.vue should display toolbar buttons",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "[{\n  key: 'addUserBtn',\n  value: 'Add User'\n}, {\n  key: 'replaceUserBtn',\n  value: 'Replace User'\n}].forEach(btn => {\n  const button = wrapper.find(`[data-test=${btn.key}]`);\n  expect(button.exists()).to.be.true;\n  expect(button.text()).to.eq(btn.value);\n});",
                            "err": {},
                            "uuid": "3f78ed55-80eb-4b82-94b2-c77593f8f2ab",
                            "parentUUID": "4c4dcd95-64f0-4624-af47-0700078dc60e",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should display list of users",
                            "fullTitle": "UserList.vue should display list of users",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const table = wrapper.find('[data-test=usersTable]');\nexpect(table.exists()).to.be.true;\nconst header = table.find('table > thead');\n['Last Name', 'First Name', 'Username', 'Email', 'Created', 'Last Updated', 'Active'].forEach(colName => {\n  expect(header.text()).contains(colName);\n});",
                            "err": {},
                            "uuid": "36bd2f08-88b0-44f6-9072-ae1b7897440a",
                            "parentUUID": "4c4dcd95-64f0-4624-af47-0700078dc60e",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "bd247dc1-509b-481e-a249-33029ff0b5ac",
                        "3f78ed55-80eb-4b82-94b2-c77593f8f2ab",
                        "36bd2f08-88b0-44f6-9072-ae1b7897440a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "8eafddee-0302-4404-add5-701cfad95289",
                    "title": "users store actions",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "users store actions \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = { ..._users.default.state\n};",
                            "err": {},
                            "uuid": "5dc2aa27-ab56-4b60-88ae-6f123aa9e734",
                            "parentUUID": "8eafddee-0302-4404-add5-701cfad95289",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook",
                            "fullTitle": "users store actions \"after each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "db3c6fd8-1f10-43fe-8067-3762b8070a66",
                            "parentUUID": "8eafddee-0302-4404-add5-701cfad95289",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getUsers",
                            "fullTitle": "users store actions should getUsers",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getUsers({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS', [..._mockedData.mockedUsers]]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USERS_TOTAL', _mockedData.mockedUsers.length]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_LIST_LOADING', false]);",
                            "err": {},
                            "uuid": "e78d22b9-408e-431f-ab89-8eac2cf69d31",
                            "parentUUID": "8eafddee-0302-4404-add5-701cfad95289",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should getUser",
                            "fullTitle": "users store actions should getUser",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser\n};\nawait _actions.default.getUser({\n  commit,\n  state\n}, {\n  userGuid: user.contactGuid,\n  $commonLib: _commonLib.default\n});\nuser.active = !user.deletedDate;\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', true]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', user]);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_USER_LOADING', false]);",
                            "err": {},
                            "uuid": "82beb9b7-91b3-4cd5-9914-686850310253",
                            "parentUUID": "8eafddee-0302-4404-add5-701cfad95289",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should insertUser",
                            "fullTitle": "users store actions should insertUser",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.insertUser({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.include(['SET_SELECTED_USER', _mockedData.mockedUser]);",
                            "err": {},
                            "uuid": "75d11021-4090-45f2-b5d5-87b86e95b366",
                            "parentUUID": "8eafddee-0302-4404-add5-701cfad95289",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should clearFiltersAndOptions",
                            "fullTitle": "users store actions should clearFiltersAndOptions",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_actions.default.clearFiltersAndOptions({\n  commit,\n  state\n});\n(0, _chai.expect)(commit.args).to.deep.eq([['CLEAR_FILTERS'], ['SET_LIST_OPTIONS']]);",
                            "err": {},
                            "uuid": "94c8472a-5f6b-46d6-978a-f1e89260bcea",
                            "parentUUID": "8eafddee-0302-4404-add5-701cfad95289",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "e78d22b9-408e-431f-ab89-8eac2cf69d31",
                        "82beb9b7-91b3-4cd5-9914-686850310253",
                        "75d11021-4090-45f2-b5d5-87b86e95b366",
                        "94c8472a-5f6b-46d6-978a-f1e89260bcea"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d5ee4487-4484-451d-b0f8-01d853ec3bc5",
                    "title": "users store getters",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get users",
                            "fullTitle": "users store getters should get users",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.users = [..._mockedData.mockedUsers];\nconst users = _getters.default.users(state);\n(0, _chai.expect)(users).to.deep.equal(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "b01cde86-1f60-4582-9e4c-8635d8ad7df6",
                            "parentUUID": "d5ee4487-4484-451d-b0f8-01d853ec3bc5",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should get filterCount",
                            "fullTitle": "users store getters should get filterCount",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(0);\nstate.filters.lastName = 'foo';\nstate.filters.firstName = 'bar';\nstate.filters.costCenter = 'costCenter';\nstate.filters.country = '';\nstate.filters.activeOnly = true;\n(0, _chai.expect)(_getters.default.filterCount(state)).to.eq(4);",
                            "err": {},
                            "uuid": "7c044a73-27b2-4321-95b9-54a8e2e7cc4c",
                            "parentUUID": "d5ee4487-4484-451d-b0f8-01d853ec3bc5",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "b01cde86-1f60-4582-9e4c-8635d8ad7df6",
                        "7c044a73-27b2-4321-95b9-54a8e2e7cc4c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "d7030356-72d7-4518-804e-d46062a69557",
                    "title": "users store mutations",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/admin/build/admin/admin.js",
                    "file": "/build/admin/admin.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_USERS",
                            "fullTitle": "users store mutations should SET_USERS",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS(state, [..._mockedData.mockedUsers]);\n(0, _chai.expect)(state.users).to.deep.eq(_mockedData.mockedUsers);",
                            "err": {},
                            "uuid": "39fb910b-febd-4f0d-8586-df08ddec0d47",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USERS_TOTAL",
                            "fullTitle": "users store mutations should SET_USERS_TOTAL",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USERS_TOTAL(state, _mockedData.mockedUsers.length);\n(0, _chai.expect)(state.total).to.eq(_mockedData.mockedUsers.length);",
                            "err": {},
                            "uuid": "820c2a24-398f-47bc-a08f-f2cee1a9af7a",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SEARCH",
                            "fullTitle": "users store mutations should SET_SEARCH",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const searchTxt = 'searching for something';\nSET_SEARCH(state, searchTxt);\n(0, _chai.expect)(state.search).to.eq(searchTxt);",
                            "err": {},
                            "uuid": "012bc7fd-1452-406e-93fa-50057e02c788",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_LOADING",
                            "fullTitle": "users store mutations should SET_LIST_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LIST_LOADING(state, true);\n(0, _chai.expect)(state.listLoading).to.eq(true);",
                            "err": {},
                            "uuid": "33e1e45b-1f0f-4b3b-94e0-c219c3d1dca0",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should CLEAR_FILTERS",
                            "fullTitle": "users store mutations should CLEAR_FILTERS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "state.filters = {\n  lastName: 'test last name',\n  firstName: 'first name',\n  userName: 'fooBar',\n  email: 'foo@bar.com',\n  title: 'my title',\n  managerName: 'manager name',\n  managerGuid: 123,\n  costCenter: 'cost center',\n  country: 'USM',\n  department: 'manager of managers',\n  activeOnly: true\n};\nCLEAR_FILTERS(state);\n(0, _chai.expect)(state.filters).to.deep.eq({\n  lastName: null,\n  firstName: null,\n  userName: null,\n  email: null,\n  title: null,\n  managerName: null,\n  managerGuid: null,\n  costCenter: null,\n  country: null,\n  department: null,\n  activeOnly: false\n});",
                            "err": {},
                            "uuid": "5a79b66d-2dfc-4167-9b7d-c4026ac75d1a",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LIST_OPTIONS",
                            "fullTitle": "users store mutations should SET_LIST_OPTIONS",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const listOptions = {\n  sortBy: ['firstName'],\n  sortDesc: [true],\n  page: 2\n};\nSET_LIST_OPTIONS(state, listOptions);\n(0, _chai.expect)(state.listOptions).to.deep.eq(listOptions); // clear listOptions\nSET_LIST_OPTIONS(state);\n(0, _chai.expect)(state.listOptions).to.deep.eq({\n  sortBy: [],\n  sortDesc: [],\n  page: 1\n});",
                            "err": {},
                            "uuid": "96ed469c-d2b1-4c48-8436-ab2bf63fd527",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "users store mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.eq(true);",
                            "err": {},
                            "uuid": "e4e56817-696c-4c59-8055-09dc5224e162",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_USER_LOADING",
                            "fullTitle": "users store mutations should SET_USER_LOADING",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_USER_LOADING(state, false);\n(0, _chai.expect)(state.userLoading).to.be.false;",
                            "err": {},
                            "uuid": "ce82d114-146b-40c8-9c03-779daa2f4b34",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_IS_CHECKING_USERNAME",
                            "fullTitle": "users store mutations should SET_IS_CHECKING_USERNAME",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_IS_CHECKING_USERNAME(state, true);\n(0, _chai.expect)(state.isCheckingUsername).to.be.true;",
                            "err": {},
                            "uuid": "772d9b60-c1a4-4cda-82e4-3fe50c1ceb10",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_USER",
                            "fullTitle": "users store mutations should SET_SELECTED_USER",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const user = { ..._mockedData.mockedUser,\n  password: 'testPwd',\n  confirmPassword: 'testPwd'\n};\nSET_SELECTED_USER(state, user);\n(0, _chai.expect)(state.selectedUser).to.deep.eq(user); // when no user specified\nSET_SELECTED_USER(state);\n(0, _chai.expect)(state.selectedUser).to.deep.eq({\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  userName: '',\n  email: '',\n  locale: 'en-US',\n  timezone: '',\n  languageGuid: '2a803d80-de6d-4adc-a642-4e3d831f5460',\n  // US English\n  password: '',\n  confirmPassword: ''\n});",
                            "err": {},
                            "uuid": "2b98afc0-3619-4501-a88a-9cac43cba3e2",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_LOCALES",
                            "fullTitle": "users store mutations should SET_LOCALES",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_LOCALES(state, [..._mockedData.mockedLocales]);\n(0, _chai.expect)(state.locales).to.deep.eq(_mockedData.mockedLocales);\nSET_LOCALES(state);\n(0, _chai.expect)(state.locales).to.deep.eq([]);\nSET_LOCALES(state, []);\n(0, _chai.expect)(state.locales).to.deep.eq([]);",
                            "err": {},
                            "uuid": "ea4143ff-e243-4d2c-9f2f-a53aa02d8de2",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_DELEGATION_START_DATE",
                            "fullTitle": "users store mutations should SET_DELEGATION_START_DATE",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const date = '2020-01-12';\nSET_SELECTED_USER(state, { ..._mockedData.mockedUser\n});\nSET_DELEGATION_START_DATE(state, date);\n(0, _chai.expect)(state.selectedUser.delegate.startDate).to.eq(date);",
                            "err": {},
                            "uuid": "bae43e6f-acee-4bc1-833d-abb2e6644f7e",
                            "parentUUID": "d7030356-72d7-4518-804e-d46062a69557",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "39fb910b-febd-4f0d-8586-df08ddec0d47",
                        "820c2a24-398f-47bc-a08f-f2cee1a9af7a",
                        "012bc7fd-1452-406e-93fa-50057e02c788",
                        "33e1e45b-1f0f-4b3b-94e0-c219c3d1dca0",
                        "5a79b66d-2dfc-4167-9b7d-c4026ac75d1a",
                        "96ed469c-d2b1-4c48-8436-ab2bf63fd527",
                        "e4e56817-696c-4c59-8055-09dc5224e162",
                        "ce82d114-146b-40c8-9c03-779daa2f4b34",
                        "772d9b60-c1a4-4cda-82e4-3fe50c1ceb10",
                        "2b98afc0-3619-4501-a88a-9cac43cba3e2",
                        "ea4143ff-e243-4d2c-9f2f-a53aa02d8de2",
                        "bae43e6f-acee-4bc1-833d-abb2e6644f7e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "dd4bfd49-cacc-49f7-b425-2aed5a6cf9d6",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "a1c32509-493d-45ab-82f1-ba39bee103eb",
                    "title": "recentlyVisited",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/commonLib/tests/unit/bookmarks.spec.js",
                    "file": "/tests/unit/bookmarks.spec.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"recentlyVisited\"",
                            "fullTitle": "recentlyVisited \"before each\" hook in \"recentlyVisited\"",
                            "timedOut": false,
                            "duration": 9,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const dom = new JSDOM(\"<html>\\n       <body>\\n          <div class=\\\"v-toolbar__title hidden-sm-and-down\\\">Holidays</div>\\n       </body>\\n     </html>\");\nglobal.window = dom.window;\nglobal.document = dom.window.document;\nglobal.location = {\n  hostname: hostname\n};",
                            "err": {},
                            "uuid": "131cc95f-42cb-4848-8866-c774a0513296",
                            "parentUUID": "a1c32509-493d-45ab-82f1-ba39bee103eb",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "adds to recently visted history",
                            "fullTitle": "recentlyVisited adds to recently visted history",
                            "timedOut": false,
                            "duration": 134,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const bookmarks = require('./mocks/bookmarks');\nexpect(bookmarks.recentlyVisited).to.be.empty;\nawait bookmarks.addRecentlyVisited();\nexpect(bookmarks.recentlyVisited.length).to.equal(1);\nexpect(bookmarks.recentlyVisited[0].label).to.equal('Holidays');\nexpect(bookmarks.recentlyVisited[0].icon).to.equal('mdi-calendar-month');",
                            "err": {},
                            "uuid": "62750b8a-ba49-409a-9399-16efb5f427d7",
                            "parentUUID": "a1c32509-493d-45ab-82f1-ba39bee103eb",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "62750b8a-ba49-409a-9399-16efb5f427d7"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 134,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "fc23fd38-4904-4d00-b546-cfd11903f880",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
                {
                    "uuid": "e9bfb9aa-d8ab-4176-952b-569adca4d32c",
                    "title": "CategorySelect.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelect.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 120,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelect.CategorySelect, {\n  showDialog: false\n});",
                            "err": {},
                            "uuid": "246efedb-0e92-4c15-b2f9-60e5ba424694",
                            "parentUUID": "e9bfb9aa-d8ab-4176-952b-569adca4d32c",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "7f1fc0fc-0a73-46ae-a089-8a5c5a9ca1c1",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelect.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=input_categorySelect]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=dialog_categorySelect]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "0ca91271-c7a2-4ba1-9ed7-f0e0d275d6af",
                                    "parentUUID": "7f1fc0fc-0a73-46ae-a089-8a5c5a9ca1c1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "0ca91271-c7a2-4ba1-9ed7-f0e0d275d6af"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "1226c99a-50c4-43bb-8d08-3a0dfe314651",
                    "title": "CategorySelectDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategorySelectDialog.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 59,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategorySelectDialog.default, {\n  items: _mockedCategoryResponse.default\n});",
                            "err": {},
                            "uuid": "0dc97f4c-bbbd-4f84-bf57-f8dcf8524acf",
                            "parentUUID": "1226c99a-50c4-43bb-8d08-3a0dfe314651",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "3f46d66e-1092-4b68-a18e-1bd96be91db3",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategorySelectDialog.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "9ab8ace4-6c32-4556-9090-2df2f5512355",
                                    "parentUUID": "3f46d66e-1092-4b68-a18e-1bd96be91db3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "9ab8ace4-6c32-4556-9090-2df2f5512355"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "c0d84f9d-2b26-41c8-b398-340cd6e2c046",
                    "title": "CategoryTreeTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "CategoryTreeTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 23,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_CategoryTreeTable.CategoryTreeTable, {\n  objectType: 'forms',\n  objectData: _mockedData.mockedObjectData,\n  items: _mockedCategoryResponse.mockedCategoryResponse\n});",
                            "err": {},
                            "uuid": "bac92594-ed7e-4a97-920d-ffe934be3498",
                            "parentUUID": "c0d84f9d-2b26-41c8-b398-340cd6e2c046",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "185b9a37-c0bb-4bd6-98ec-e07e2bb9b740",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders correctly",
                                    "fullTitle": "CategoryTreeTable.vue inital state renders correctly",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=objectCatTree]').exists()).to.equal(true);\nexpect(wrapper.find('[data-test=objectCatTree_permsButtonComponent]').exists()).to.equal(false);\nexpect(wrapper.find('[data-test=objectCatTree_datatable]').exists()).to.equal(false);",
                                    "err": {},
                                    "uuid": "f600905c-58f1-4533-ab73-437b2755a3c4",
                                    "parentUUID": "185b9a37-c0bb-4bd6-98ec-e07e2bb9b740",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "f600905c-58f1-4533-ab73-437b2755a3c4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9a748572-cca2-4a55-963e-c97cbf6e0bec",
                    "title": "Report.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "Report.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 52,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.Report);\ndocument.body.setAttribute('data-app', true);",
                            "err": {},
                            "uuid": "c68bc3e2-8c2a-4cdf-b72a-564474d6b601",
                            "parentUUID": "9a748572-cca2-4a55-963e-c97cbf6e0bec",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "b74d254b-9292-4cac-9374-5248a99aa6e3",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays toolbar buttons",
                                    "fullTitle": "Report.vue inital state displays toolbar buttons",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button i.mdi-refresh').exists()).to.equal(true);\nexpect(wrapper.find('button i.mdi-filter-plus-outline').exists()).to.equal(true);\nexpect(wrapper.find('button.mdi-export').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "e7fcabd5-f7e5-4c51-ad07-514e82e674e6",
                                    "parentUUID": "b74d254b-9292-4cac-9374-5248a99aa6e3",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays report name",
                                    "fullTitle": "Report.vue inital state displays report name",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('.v-toolbar__title').text()).to.equal('Report - Update profile tasks');",
                                    "err": {},
                                    "uuid": "4e633656-9646-4854-9405-43b39b0e2a2d",
                                    "parentUUID": "b74d254b-9292-4cac-9374-5248a99aa6e3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e7fcabd5-f7e5-4c51-ad07-514e82e674e6",
                                "4e633656-9646-4854-9405-43b39b0e2a2d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "2ec19fc1-614a-4b9d-a7e6-01f244551436",
                    "title": "ReportTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                    "file": "/build/integrify-lib/integrify-lib.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook",
                            "fullTitle": "ReportTable.vue \"before each\" hook",
                            "timedOut": false,
                            "duration": 74,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "wrapper = (0, _mocks.initWrapper)(_Reports.ReportTable, {\n  propsData: {\n    report: _mockedData.mockedFormattedReport\n  }\n});",
                            "err": {},
                            "uuid": "9fd65759-c2e9-4ff7-a3a4-2db724d6ff14",
                            "parentUUID": "2ec19fc1-614a-4b9d-a7e6-01f244551436",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "38ba7efc-5735-4520-924d-c0afea5005ee",
                            "title": "inital state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/libs/integrify-lib/build/integrify-lib/integrify-lib.js",
                            "file": "/build/integrify-lib/integrify-lib.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "renders column headers",
                                    "fullTitle": "ReportTable.vue inital state renders column headers",
                                    "timedOut": false,
                                    "duration": 2,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const headers = wrapper.findAll('th');\nconst expectedHeaders = [\"Request Link\", \"Username\", \"ID For Manage Task\", \"Status\", \"Time from Start to Complete\", \"Date Completed\", \"Manager ID\", \"System ID\", \"Name\"];\nexpectedHeaders.forEach((title, i) => expect(headers.at(i).text()).to.equal(title));",
                                    "err": {},
                                    "uuid": "1c627c06-0cf5-4aef-a187-9e25e6acac54",
                                    "parentUUID": "38ba7efc-5735-4520-924d-c0afea5005ee",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "renders links with the correct icons",
                                    "fullTitle": "ReportTable.vue inital state renders links with the correct icons",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const firstRow = wrapper.find('tbody > tr').findAll('td');\nexpect(firstRow.length).to.equal(9);\nexpect(firstRow.at(0).find('button.mdi-magnify').exists()).to.equal(true); // Request link\nexpect(firstRow.at(1).text()).to.equal('juser'); // Username\nexpect(firstRow.at(2).find('.mdi-menu-open').exists()).to.equal(true); // Manage Task menu icon\nexpect(firstRow.at(2).find('.v-menu').exists()).to.equal(true); // manage task menu\nexpect(firstRow.at(3).text()).to.equal('Completed'); // status\nexpect(firstRow.at(5).text()).to.equal('2/24/2021'); // date completed\nexpect(firstRow.at(6).text()).to.equal('1'); // manager id\nexpect(firstRow.at(7).find('button.mdi-magnify').exists()).to.equal(true); // link to Task\nexpect(firstRow.at(8).text()).to.equal('System Task - Update Profile'); // task name",
                                    "err": {},
                                    "uuid": "d7c33cc5-93f5-4c5d-a7ee-b99b0e4cee75",
                                    "parentUUID": "38ba7efc-5735-4520-924d-c0afea5005ee",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "1c627c06-0cf5-4aef-a187-9e25e6acac54",
                                "d7c33cc5-93f5-4c5d-a7ee-b99b0e4cee75"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": true,
            "rootEmpty": true,
            "_timeout": 2000
        },
        {
            "uuid": "29940813-db2f-4bfa-8c11-200cda72f0b3",
            "title": "",
            "fullFile": "",
            "file": "",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
                {
                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                    "fullTitle": "commits SET_SELECTED_FOR_EDIT mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                    "err": {},
                    "uuid": "e136ac38-676e-4f5a-b7c5-44429b89fbba",
                    "parentUUID": "29940813-db2f-4bfa-8c11-200cda72f0b3",
                    "isHook": false,
                    "skipped": true
                },
                {
                    "title": "commits SET_SHOW_DIALOG mutation",
                    "fullTitle": "commits SET_SHOW_DIALOG mutation",
                    "timedOut": false,
                    "duration": 0,
                    "state": null,
                    "speed": null,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "context": null,
                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                    "err": {},
                    "uuid": "19ad5463-db84-4dde-a6ba-0612681641a5",
                    "parentUUID": "29940813-db2f-4bfa-8c11-200cda72f0b3",
                    "isHook": false,
                    "skipped": true
                }
            ],
            "suites": [
                {
                    "uuid": "3949db2f-6152-4e80-9fb8-b9625e3a5be3",
                    "title": "PasswordSettings.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "renders correctly",
                            "fullTitle": "PasswordSettings.vue renders correctly",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "expect(pwdSettingsApi.listPasswordSettings).to.have.been.called;\nexpect(pwdExpirationActiveCheckBox).to.be.exist;\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(false);\nexpect(pwdExpirationTextBox).to.be.exist;\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal('disabled');\nexpect(pwdExpirationTextBox.element.value).to.equal('7');\nexpect(pwdStrengthActiveCheckBox).to.be.exist;\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(false);\nexpect(minPwdLengthTextBox).to.be.exist;\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(minPwdLengthTextBox.element.value).to.equal('3');\nexpect(maxPwdLengthTextBox).to.be.exist;\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal('disabled');\nexpect(maxPwdLengthTextBox.element.value).to.equal('10');\nexpect(pwdStrengthExpressionTextBox).to.be.exist;\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal('disabled'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton).to.be.exist;\nexpect(restoreButton.attributes('disabled')).to.equal('disabled');\nexpect(wrapper.find('button#save')).to.be.exist;",
                            "err": {},
                            "uuid": "b3620c43-3121-4e72-a7d2-271af7e4cf4e",
                            "parentUUID": "3949db2f-6152-4e80-9fb8-b9625e3a5be3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [
                        {
                            "uuid": "76787c14-cec9-4d49-af01-9ba672422f0e",
                            "title": "checkboxes enabling textboxes",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables Expiration (days) textbox when Enforce Password Expiration checkbox is checked",
                                    "timedOut": false,
                                    "duration": 15,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdExpirationActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdExpirationActiveCheckBox.element.checked).to.equal(true);\nexpect(pwdExpirationTextBox.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "7a6ba0d3-c737-4521-8f0f-26e185b69bbc",
                                    "parentUUID": "76787c14-cec9-4d49-af01-9ba672422f0e",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "fullTitle": "PasswordSettings.vue checkboxes enabling textboxes enables min/max password length and strength expression textboxes when Enforce Password Strength checkbox is checked",
                                    "timedOut": false,
                                    "duration": 17,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait wrapper.vm.$nextTick();\nexpect(pwdStrengthActiveCheckBox.element.checked).to.equal(true);\nexpect(minPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(maxPwdLengthTextBox.attributes('disabled')).to.equal(undefined);\nexpect(pwdStrengthExpressionTextBox.attributes('disabled')).to.equal(undefined);\nconst restoreButton = wrapper.find('button#restoreDefaultPwdStrengthExpression');\nexpect(restoreButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "5088f9be-f3e2-4067-b314-c65eee014e01",
                                    "parentUUID": "76787c14-cec9-4d49-af01-9ba672422f0e",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "7a6ba0d3-c737-4521-8f0f-26e185b69bbc",
                                "5088f9be-f3e2-4067-b314-c65eee014e01"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 32,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "9b418711-d28e-42c5-a1bb-3d94eea99268",
                            "title": "password length change effects on strength regular expression",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "correctly adjusts strength expression when min pwd length changes",
                                    "fullTitle": "PasswordSettings.vue password length change effects on strength regular expression correctly adjusts strength expression when min pwd length changes",
                                    "timedOut": false,
                                    "duration": 19,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nminPwdLengthTextBox.element.value = '4';\nminPwdLengthTextBox.trigger('input');\nmaxPwdLengthTextBox.element.value = '11';\nmaxPwdLengthTextBox.trigger('input');\nawait wrapper.vm.$nextTick(); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "dccff5d7-dd25-49ed-afdd-48064cc6d65d",
                                    "parentUUID": "9b418711-d28e-42c5-a1bb-3d94eea99268",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dccff5d7-dd25-49ed-afdd-48064cc6d65d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 19,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "3c3bc96a-24d1-4252-9b32-11f2d978766c",
                            "title": "restore default password strength",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "restores default password strength values when restore button is clicked",
                                    "fullTitle": "PasswordSettings.vue restore default password strength restores default password strength values when restore button is clicked",
                                    "timedOut": false,
                                    "duration": 30,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "pwdStrengthActiveCheckBox.trigger('click');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nawait wrapper.find('button#restoreDefaultPwdStrengthExpression').trigger('click'); // remember \\\\ is escaped \\\nexpect(pwdStrengthExpressionTextBox.element.value).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{3,10}$');",
                                    "err": {},
                                    "uuid": "faec4abf-7a1e-4b4e-93a1-3ea735ecf506",
                                    "parentUUID": "3c3bc96a-24d1-4252-9b32-11f2d978766c",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "faec4abf-7a1e-4b4e-93a1-3ea735ecf506"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 30,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "38bc978a-0d17-4f90-b73c-77ac3cad8fc3",
                            "title": "save password settings",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "calls updatePasswordSettings with correct params when Save button is clicked",
                                    "fullTitle": "PasswordSettings.vue save password settings calls updatePasswordSettings with correct params when Save button is clicked",
                                    "timedOut": false,
                                    "duration": 28,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(pwdExpirationActiveCheckBox.element.checked).to.equal(true); // change some settings in ui. make sure api call has correct params when saved\npwdExpirationTextBox.setValue('10');\nawait minPwdLengthTextBox.setValue('4');\nawait maxPwdLengthTextBox.setValue('11');\nwrapper.find('button#save').trigger('click');\nexpect(pwdSettingsApi.updatePasswordSettings).to.have.been.called;\nconst requestBody = pwdSettingsApi.updatePasswordSettings.args[0][1].requestBody;\nexpect(requestBody).to.be.ok;\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION').settingsValue).to.equal('10');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_EXPIRATION_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH_ACTIVE').settingsValue).to.equal('1');\nexpect(requestBody.find(x => x.settingsKey == 'PWD_STRENGTH').settingsValue).to.equal('^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{4,11}$');",
                                    "err": {},
                                    "uuid": "eaa71492-8d83-4277-80f5-cf386382639a",
                                    "parentUUID": "38bc978a-0d17-4f90-b73c-77ac3cad8fc3",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "eaa71492-8d83-4277-80f5-cf386382639a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 28,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [
                        "b3620c43-3121-4e72-a7d2-271af7e4cf4e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 3,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "e7501be9-9771-47d3-84cc-1699710c8bd6",
                    "title": "BiztimeDialog.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimeDialog.vue\"",
                            "fullTitle": "BiztimeDialog.vue \"before each\" hook in \"BiztimeDialog.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "4fbe190d-d8f1-40c6-9483-faa2e87365f9",
                            "parentUUID": "e7501be9-9771-47d3-84cc-1699710c8bd6",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimeDialog.vue should render correctly",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// console.log('-- dd:', wrapper.vm.$store.state.biztimes.selectedForEdit);\n// headline\nconst headline = wrapper.find('span.headline');\nexpect(headline.exists()).to.be.true;\nexpect(headline.text()).to.eq(`Edit Business Hours for ${biztime.dayOfWeek}`); // inputs\nexpect(startTimeRef.value).to.deep.equal(biztime.startTime);\nexpect(endTimeRef.value).to.deep.equal(biztime.endTime);\nexpect(activeRef.inputValue).to.equal(biztime.active); // btns\nexpect(saveBtn.exists()).to.be.true;\nexpect(closeBtn.exists()).to.be.true;",
                            "err": {},
                            "uuid": "67960e60-8eae-456f-b12d-f0dbdc24075a",
                            "parentUUID": "e7501be9-9771-47d3-84cc-1699710c8bd6",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should save biztime",
                            "fullTitle": "BiztimeDialog.vue should save biztime",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await saveBtn.trigger('click');\nexpect(mockstore.actions.saveBiztime).to.have.been.called;",
                            "err": {},
                            "uuid": "ba6d97ef-a575-458d-ab95-9d9add54e20e",
                            "parentUUID": "e7501be9-9771-47d3-84cc-1699710c8bd6",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should close dialog",
                            "fullTitle": "BiztimeDialog.vue should close dialog",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await closeBtn.trigger('click');\nexpect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\nexpect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.calledWith(store.state.biztimes, {});",
                            "err": {},
                            "uuid": "b9f6c2f9-772a-4cb1-aa4f-4e6ce8775bf9",
                            "parentUUID": "e7501be9-9771-47d3-84cc-1699710c8bd6",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "67960e60-8eae-456f-b12d-f0dbdc24075a",
                        "ba6d97ef-a575-458d-ab95-9d9add54e20e",
                        "b9f6c2f9-772a-4cb1-aa4f-4e6ce8775bf9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5be48e2f-fb58-4d36-b9b7-87d6bd4f9ae7",
                    "title": "BiztimesTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"BiztimesTable.vue\"",
                            "fullTitle": "BiztimesTable.vue \"before each\" hook in \"BiztimesTable.vue\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "mockstore = (0, _store.mockStore)();",
                            "err": {},
                            "uuid": "e7186667-d36e-4e53-afd7-5a1af4eda379",
                            "parentUUID": "5be48e2f-fb58-4d36-b9b7-87d6bd4f9ae7",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should render correctly",
                            "fullTitle": "BiztimesTable.vue should render correctly",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "// pageTitle\nexpect(pageTitle.exists()).to.be.true;\nexpect(pageTitle.text()).to.eq('Business Hours'); // link to set permissions\nexpect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true); // getBiztimes\nexpect(mockstore.actions.getBiztimes).to.have.been.called;",
                            "err": {},
                            "uuid": "5b1c0cf5-9953-4001-94c0-d3164fa59cde",
                            "parentUUID": "5be48e2f-fb58-4d36-b9b7-87d6bd4f9ae7",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "5b1c0cf5-9953-4001-94c0-d3164fa59cde"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "9f315516-69cd-48f2-a6ac-258d5aa8cd97",
                    "title": "HolidaysTable.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "6f6cd65b-bedc-45af-8c71-b5225f3d6720",
                            "title": "initial state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook",
                                    "fullTitle": "HolidaysTable.vue initial state \"before each\" hook",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_HolidaysTable.default, {\n  store\n});",
                                    "err": {},
                                    "uuid": "cc1e084b-1770-418c-9a4f-43568e6867c2",
                                    "parentUUID": null,
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "302fbb21-1cff-4d5e-b076-82804354928e",
                    "title": "Menu.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"Menu.vue\"",
                            "fullTitle": "Menu.vue \"before each\" hook in \"Menu.vue\"",
                            "timedOut": false,
                            "duration": 22,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n}); // data-app prevents warning during test: [Vuetify] Unable to locate target [data-app]\n// https://forum.vuejs.org/t/vuetify-data-app-true-and-problems-rendering-v-dialog-in-unit-tests/27495\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");",
                            "err": {},
                            "uuid": "4056e29b-b9c2-4fe2-8d3d-b663a5f420e2",
                            "parentUUID": "302fbb21-1cff-4d5e-b076-82804354928e",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "f4171ca8-7b09-4a38-b59d-78c2622532fd",
                            "title": "initial state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Menu.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 83,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "e0c4a79b-edfe-41a1-8ca0-2350173782e4",
                                    "parentUUID": "f4171ca8-7b09-4a38-b59d-78c2622532fd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Menu.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('[data-test=\"setPermissionsMobile\"').exists()).to.equal(true);\n  done();\n});",
                                    "err": {},
                                    "uuid": "55177f96-d940-4d47-94a4-69660d1ae530",
                                    "parentUUID": "f4171ca8-7b09-4a38-b59d-78c2622532fd",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Menu.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 44,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.exists()).to.equal(true);\n  expect(deleteButton.attributes('disabled')).to.not.be.undefined;\n  done();\n});",
                                    "err": {},
                                    "uuid": "817fa268-0cdc-44d8-8a1c-a6272c67d8ee",
                                    "parentUUID": "f4171ca8-7b09-4a38-b59d-78c2622532fd",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "e0c4a79b-edfe-41a1-8ca0-2350173782e4",
                                "55177f96-d940-4d47-94a4-69660d1ae530",
                                "817fa268-0cdc-44d8-8a1c-a6272c67d8ee"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 190,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "e2d7c580-3818-4654-847a-2f2394602941",
                            "title": "Menu item clicks",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "add holiday button click",
                                    "fullTitle": "Menu.vue Menu item clicks add holiday button click",
                                    "timedOut": false,
                                    "duration": 54,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "menuButton.trigger('click').then(() => {\n  expect(wrapper.find('#addHolidayMobile').exists()).to.equal(true);\n  wrapper.find('button#addHolidayMobile').trigger('click');\n  it('commits SET_SELECTED_FOR_EDIT mutation', () => {\n    expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;\n  });\n  it('commits SET_SHOW_DIALOG mutation', () => {\n    expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;\n  });\n  done();\n});",
                                    "err": {},
                                    "uuid": "753db024-9471-4ef2-a714-d75b174bc050",
                                    "parentUUID": "e2d7c580-3818-4654-847a-2f2394602941",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Menu.vue Menu item clicks enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 74,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nstore = new _vuex.default.Store({\n  modules: (0, _store.mockStore)({\n    state\n  }).modules\n});\nwrapper = (0, _mocks.initWrapper)(_Menu.default, {\n  store\n});\ndocument.body.setAttribute('data-app', true);\nmenuButton = wrapper.find(\"button#holidayMenu\");\nmenuButton.trigger('click').then(() => {\n  const deleteButton = wrapper.find('[data-test=\"deleteButtonMobile\"');\n  expect(deleteButton.attributes('disabled')).to.equal(undefined);\n  done();\n});",
                                    "err": {},
                                    "uuid": "f89cf1f0-88b9-4500-8747-31f24624bb2a",
                                    "parentUUID": "e2d7c580-3818-4654-847a-2f2394602941",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "753db024-9471-4ef2-a714-d75b174bc050",
                                "f89cf1f0-88b9-4500-8747-31f24624bb2a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 128,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "5f591531-6508-4e63-9768-f1d9f37e886d",
                    "title": "Toolbar.vue",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                        {
                            "uuid": "0df30390-e829-4af4-8fc8-5de2cf18e1f0",
                            "title": "initial state",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"initial state\"",
                                    "fullTitle": "Toolbar.vue initial state \"before each\" hook in \"initial state\"",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "store = new _vuex.default.Store({\n  modules: (0, _store.mockStore)().modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "ce7270a1-c52d-4a39-9324-ec481e2aefc8",
                                    "parentUUID": "0df30390-e829-4af4-8fc8-5de2cf18e1f0",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "displays add holiday button",
                                    "fullTitle": "Toolbar.vue initial state displays add holiday button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('button#addHoliday').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "a7880be4-2a6e-4c7f-9dcf-2adbb9a45daa",
                                    "parentUUID": "0df30390-e829-4af4-8fc8-5de2cf18e1f0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays set roles & permissions button",
                                    "fullTitle": "Toolbar.vue initial state displays set roles & permissions button",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(wrapper.find('[data-test=\"setPermissions\"').exists()).to.equal(true);",
                                    "err": {},
                                    "uuid": "d6546637-0624-4813-8720-9b6e01659bd1",
                                    "parentUUID": "0df30390-e829-4af4-8fc8-5de2cf18e1f0",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "displays disabled delete holidays button",
                                    "fullTitle": "Toolbar.vue initial state displays disabled delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.exists()).to.equal(true);\nexpect(deleteButton.attributes('disabled')).to.equal('disabled');",
                                    "err": {},
                                    "uuid": "208c8fb8-1035-4e09-9a14-45d732d09e00",
                                    "parentUUID": "0df30390-e829-4af4-8fc8-5de2cf18e1f0",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "a7880be4-2a6e-4c7f-9dcf-2adbb9a45daa",
                                "d6546637-0624-4813-8720-9b6e01659bd1",
                                "208c8fb8-1035-4e09-9a14-45d732d09e00"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 2,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "2f3a916c-e3df-454a-8fdb-19e6b5ae0ea1",
                            "title": "add holiday button click",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"add holiday button click\"",
                                    "fullTitle": "Toolbar.vue add holiday button click \"before each\" hook in \"add holiday button click\"",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "mockstore = (0, _store.mockStore)();\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\nwrapper.find('button#addHoliday').trigger('click');",
                                    "err": {},
                                    "uuid": "ab6d045e-4e21-40cd-8840-f967b8e56aee",
                                    "parentUUID": "2f3a916c-e3df-454a-8fdb-19e6b5ae0ea1",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "commits SET_SELECTED_FOR_EDIT mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SELECTED_FOR_EDIT mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SELECTED_FOR_EDIT).to.have.been.called;",
                                    "err": {},
                                    "uuid": "dffd54ce-b98e-419f-9e7a-a690207dd1fe",
                                    "parentUUID": "2f3a916c-e3df-454a-8fdb-19e6b5ae0ea1",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "commits SET_SHOW_DIALOG mutation",
                                    "fullTitle": "Toolbar.vue add holiday button click commits SET_SHOW_DIALOG mutation",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(mockstore.mutations.SET_SHOW_DIALOG).to.have.been.called;",
                                    "err": {},
                                    "uuid": "3ea87c8a-af7f-4907-959d-958f4e11b138",
                                    "parentUUID": "2f3a916c-e3df-454a-8fdb-19e6b5ae0ea1",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "dffd54ce-b98e-419f-9e7a-a690207dd1fe",
                                "3ea87c8a-af7f-4907-959d-958f4e11b138"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        },
                        {
                            "uuid": "cd244a22-a99c-451f-94ac-1402bb60aa4f",
                            "title": "holidays have been selected for deletion",
                            "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                            "file": "/build/systemsettings/systemsettings.js",
                            "beforeHooks": [
                                {
                                    "title": "\"before each\" hook in \"holidays have been selected for deletion\"",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion \"before each\" hook in \"holidays have been selected for deletion\"",
                                    "timedOut": false,
                                    "duration": 16,
                                    "state": null,
                                    "speed": null,
                                    "pass": false,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "const state = {\n  holidays: [{}, {}, {}],\n  selectedForDelete: [{}],\n  selectedForEdit: {},\n  showDialog: false\n};\nmockstore = (0, _store.mockStore)({\n  state\n});\nstore = new _vuex.default.Store({\n  modules: mockstore.modules\n});\nwrapper = (0, _mocks.initWrapper)(_Toolbar.default, {\n  store\n});\ndeleteButton = wrapper.find('[data-test=\"deleteButton\"');",
                                    "err": {},
                                    "uuid": "d68f6817-c2fe-4010-a73c-446416ebbc69",
                                    "parentUUID": "cd244a22-a99c-451f-94ac-1402bb60aa4f",
                                    "isHook": true,
                                    "skipped": false
                                }
                            ],
                            "afterHooks": [],
                            "tests": [
                                {
                                    "title": "enables delete holidays button",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion enables delete holidays button",
                                    "timedOut": false,
                                    "duration": 0,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "expect(deleteButton.attributes('disabled')).to.equal(undefined);",
                                    "err": {},
                                    "uuid": "134dd94b-fc3e-4fa7-aec7-9079e6190b51",
                                    "parentUUID": "cd244a22-a99c-451f-94ac-1402bb60aa4f",
                                    "isHook": false,
                                    "skipped": false
                                },
                                {
                                    "title": "dispatches delete_holidays action when delete holidays button is clicked",
                                    "fullTitle": "Toolbar.vue holidays have been selected for deletion dispatches delete_holidays action when delete holidays button is clicked",
                                    "timedOut": false,
                                    "duration": 1,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "context": null,
                                    "code": "deleteButton.trigger('click');\nexpect(mockstore.actions.delete_holidays).to.have.been.called;",
                                    "err": {},
                                    "uuid": "1917622b-a25c-4ab1-8c7e-99c112effdf2",
                                    "parentUUID": "cd244a22-a99c-451f-94ac-1402bb60aa4f",
                                    "isHook": false,
                                    "skipped": false
                                }
                            ],
                            "suites": [],
                            "passes": [
                                "134dd94b-fc3e-4fa7-aec7-9079e6190b51",
                                "1917622b-a25c-4ab1-8c7e-99c112effdf2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 1,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                        }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "07526819-c6ba-4d36-ba8d-385ecc602ef3",
                    "title": "biztime actions",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [
                        {
                            "title": "\"before each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"before each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 1,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "commit = _sinon.default.spy();\nstate = {};",
                            "err": {},
                            "uuid": "db54cc16-16f1-467e-b354-f506d77728d7",
                            "parentUUID": "07526819-c6ba-4d36-ba8d-385ecc602ef3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "afterHooks": [
                        {
                            "title": "\"after each\" hook in \"biztime actions\"",
                            "fullTitle": "biztime actions \"after each\" hook in \"biztime actions\"",
                            "timedOut": false,
                            "duration": 0,
                            "state": null,
                            "speed": null,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "_sinon.default.restore();",
                            "err": {},
                            "uuid": "d8f6d4d2-6e91-4859-b44e-05ee62fa0010",
                            "parentUUID": "07526819-c6ba-4d36-ba8d-385ecc602ef3",
                            "isHook": true,
                            "skipped": false
                        }
                    ],
                    "tests": [
                        {
                            "title": "should getBiztimes",
                            "fullTitle": "biztime actions should getBiztimes",
                            "timedOut": false,
                            "duration": 1,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.getBiztimes({\n  commit,\n  state\n}, _commonLib.default);\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]]]);",
                            "err": {},
                            "uuid": "a40a471d-a074-4d4f-9b11-df4a056c2f80",
                            "parentUUID": "07526819-c6ba-4d36-ba8d-385ecc602ef3",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should saveBiztime",
                            "fullTitle": "biztime actions should saveBiztime",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "await _actions.default.saveBiztime({\n  commit,\n  state\n}, { ..._list.default[0],\n  $commonLib: _commonLib.default\n});\n(0, _chai.expect)(commit.args).to.deep.equal([['SET_BIZTIMES', [..._list.default]], ['SET_SELECTED_FOR_EDIT', {}], ['SET_SHOW_DIALOG', false]]);",
                            "err": {},
                            "uuid": "abe483b3-c411-4e2e-a5c6-d7b7db1fc7f6",
                            "parentUUID": "07526819-c6ba-4d36-ba8d-385ecc602ef3",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a40a471d-a074-4d4f-9b11-df4a056c2f80",
                        "abe483b3-c411-4e2e-a5c6-d7b7db1fc7f6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "33a890cc-95ac-4def-9e2a-a2a1693b8c1b",
                    "title": "biztime getters",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should get biztimes",
                            "fullTitle": "biztime getters should get biztimes",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "const state = {\n  biztimes: JSON.parse(JSON.stringify(_list.default))\n};\nconst biztimes = _getters.default.biztimes(state);\n(0, _chai.expect)(biztimes).not.to.deep.equal(_list.default);\nbiztimes.forEach(biztime => {\n  const startTime = {\n    hour: biztime.startHour,\n    minute: biztime.startMinute\n  };\n  const endTime = {\n    hour: biztime.endHour,\n    minute: biztime.endMinute\n  };\n  (0, _chai.expect)(biztime.startTime).to.deep.equal(startTime);\n  (0, _chai.expect)(biztime.endTime).to.deep.equal(endTime);\n});",
                            "err": {},
                            "uuid": "a43c3206-0012-44a8-b8f1-c0560edbff7a",
                            "parentUUID": "33a890cc-95ac-4def-9e2a-a2a1693b8c1b",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "a43c3206-0012-44a8-b8f1-c0560edbff7a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                },
                {
                    "uuid": "75e88cd3-7e2b-441f-b583-621f811c98dc",
                    "title": "biztime mutations",
                    "fullFile": "/home/tim/src/integrify/single-spa-portal/systemsettings/build/systemsettings/systemsettings.js",
                    "file": "/build/systemsettings/systemsettings.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                        {
                            "title": "should SET_BIZTIMES",
                            "fullTitle": "biztime mutations should SET_BIZTIMES",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_BIZTIMES(state, [..._list.default]);\n(0, _chai.expect)(state.biztimes).to.deep.equal(_list.default);",
                            "err": {},
                            "uuid": "386f32fe-1c6a-4e5a-8b44-ea6716763481",
                            "parentUUID": "75e88cd3-7e2b-441f-b583-621f811c98dc",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SELECTED_FOR_EDIT",
                            "fullTitle": "biztime mutations should SET_SELECTED_FOR_EDIT",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SELECTED_FOR_EDIT(state, _list.default[0]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[0]);\nSET_SELECTED_FOR_EDIT(state, _list.default[3]);\n(0, _chai.expect)(state.selectedForEdit).to.deep.equal(_list.default[3]);",
                            "err": {},
                            "uuid": "63c32add-051d-4746-817d-86c53ac61bb5",
                            "parentUUID": "75e88cd3-7e2b-441f-b583-621f811c98dc",
                            "isHook": false,
                            "skipped": false
                        },
                        {
                            "title": "should SET_SHOW_DIALOG",
                            "fullTitle": "biztime mutations should SET_SHOW_DIALOG",
                            "timedOut": false,
                            "duration": 0,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "context": null,
                            "code": "SET_SHOW_DIALOG(state, true);\n(0, _chai.expect)(state.showDialog).to.equal(true);\nSET_SHOW_DIALOG(state, false);\n(0, _chai.expect)(state.showDialog).to.equal(false);",
                            "err": {},
                            "uuid": "1238bb55-2c9b-4078-b338-5f087204a4d4",
                            "parentUUID": "75e88cd3-7e2b-441f-b583-621f811c98dc",
                            "isHook": false,
                            "skipped": false
                        }
                    ],
                    "suites": [],
                    "passes": [
                        "386f32fe-1c6a-4e5a-8b44-ea6716763481",
                        "63c32add-051d-4746-817d-86c53ac61bb5",
                        "1238bb55-2c9b-4078-b338-5f087204a4d4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [
                "e136ac38-676e-4f5a-b7c5-44429b89fbba",
                "19ad5463-db84-4dde-a6ba-0612681641a5"
            ],
            "duration": 0,
            "root": true,
            "rootEmpty": false,
            "_timeout": 2000
        }
    ],
    "meta": {
        "mocha": {
            "version": "8.1.1"
        },
        "mochawesome": {
            "options": {
                "quiet": false,
                "reportFilename": "mochawesome",
                "saveHtml": true,
                "saveJson": true,
                "consoleReporter": "spec",
                "useInlineDiffs": false,
                "code": true
            },
            "version": "6.1.1"
        },
        "marge": {
            "options": null,
            "version": "5.1.0"
        }
    }
}